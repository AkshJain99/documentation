# SOME DESCRIPTIVE TITLE.
# Copyright (C) The Plone Foundation
# This file is distributed under the same license as the Plone Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Documentation ['5', '4', '3']\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-09-05 16:00+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../develop/addons/ajax.rst:3
msgid "AJAX"
msgstr ""

#: ../develop/addons/ajax.rst:5
#: ../develop/addons/components/events.rst:5
#: ../develop/addons/components/genericsetup.rst:5
#: ../develop/addons/components/utilities.rst:5
#: ../develop/addons/components/zcml.rst:5
#: ../develop/addons/helloworld/environment/index.rst:5
#: ../develop/addons/helloworld/environment/plone.rst:5
#: ../develop/addons/helloworld/environment/python.rst:5
#: ../develop/addons/helloworld/environment/virtualenv.rst:5
#: ../develop/addons/helloworld/extend/addon.rst:5
#: ../develop/addons/helloworld/extend/content.rst:5
#: ../develop/addons/helloworld/extend/files.rst:5
#: ../develop/addons/helloworld/extend/form.rst:5
#: ../develop/addons/helloworld/extend/index.rst:5
#: ../develop/addons/helloworld/extend/view.rst:5
#: ../develop/addons/helloworld/index.rst:5
#: ../develop/addons/helloworld/intro.rst:5
#: ../develop/addons/helloworld/todo.rst:5
#: ../develop/addons/javascript.rst:5
#: ../develop/addons/javascript_standards.rst:5
#: ../develop/import/index.rst:5
#: ../develop/plone/content/archetypes/archetypes_references.rst:5
#: ../develop/plone/content/archetypes/converting-content-types.rst:5
#: ../develop/plone/content/archetypes/fields.rst:5
#: ../develop/plone/content/archetypes/files.rst:5
#: ../develop/plone/content/archetypes/references.rst:5
#: ../develop/plone/content/archetypes/templates.rst:5
#: ../develop/plone/content/creating.rst:5
#: ../develop/plone/content/deleting.rst:5
#: ../develop/plone/content/dexterity.rst:5
#: ../develop/plone/content/dynamic_views.rst:7
#: ../develop/plone/content/events.rst:5
#: ../develop/plone/content/importexport.rst:5
#: ../develop/plone/content/listing.rst:5
#: ../develop/plone/content/ownership.rst:7
#: ../develop/plone/content/rename.rst:5
#: ../develop/plone/content/timestamps.rst:5
#: ../develop/plone/content/types.rst:5
#: ../develop/plone/content/uid.rst:5
#: ../develop/plone/content/workflow.rst:5
#: ../develop/plone/forms/files.rst:5
#: ../develop/plone/forms/manual.rst:5
#: ../develop/plone/forms/ploneformgen.rst:5
#: ../develop/plone/forms/schemas.rst:5
#: ../develop/plone/forms/schemas.rst:164
#: ../develop/plone/forms/vocabularies.rst:5
#: ../develop/plone/forms/wysiwyg.rst:5
#: ../develop/plone/forms/z3c.form.rst:5
#: ../develop/plone/functionality/actions.rst:5
#: ../develop/plone/functionality/breadcrumbs.rst:5
#: ../develop/plone/functionality/collections.rst:5
#: ../develop/plone/functionality/controlpanel.rst:5
#: ../develop/plone/functionality/discussion.rst:5
#: ../develop/plone/functionality/expressions.rst:5
#: ../develop/plone/functionality/index.rst:5
#: ../develop/plone/functionality/portlets.rst:5
#: ../develop/plone/functionality/rss.rst:5
#: ../develop/plone/getstarted/debug_mode.rst:5
#: ../develop/plone/getstarted/python.rst:5
#: ../develop/plone/i18n/cache.rst:5
#: ../develop/plone/i18n/contribute_to_translations.rst:5
#: ../develop/plone/i18n/internationalisation.rst:5
#: ../develop/plone/i18n/language.rst:5
#: ../develop/plone/i18n/translating_content.rst:5
#: ../develop/plone/images/content.rst:5
#: ../develop/plone/images/templates.rst:5
#: ../develop/plone/members/member_basics.rst:5
#: ../develop/plone/members/member_profile.rst:7
#: ../develop/plone/members/membrane.rst:5
#: ../develop/plone/members/sharing_tab.rst:12
#: ../develop/plone/misc/annotations.rst:9
#: ../develop/plone/misc/asyncronoustasks.rst:6
#: ../develop/plone/misc/commandline.rst:5
#: ../develop/plone/misc/datetime.rst:5
#: ../develop/plone/misc/email.rst:5
#: ../develop/plone/misc/flowplayer.rst:5
#: ../develop/plone/misc/html.rst:5
#: ../develop/plone/misc/navigationtree.rst:7
#: ../develop/plone/misc/normalizing_ids.rst:5
#: ../develop/plone/misc/slideshow.rst:5
#: ../develop/plone/misc/sql.rst:5
#: ../develop/plone/misc/upgrade.rst:5
#: ../develop/plone/misc/zope_debug_prompt.rst:5
#: ../develop/plone/persistency/database.rst:5
#: ../develop/plone/persistency/persistent.rst:5
#: ../develop/plone/persistency/storage.rst:5
#: ../develop/plone/searching_and_indexing/catalog.rst:5
#: ../develop/plone/searching_and_indexing/indexing.rst:5
#: ../develop/plone/searching_and_indexing/query.rst:5
#: ../develop/plone/searching_and_indexing/query.rst:119
#: ../develop/plone/security/custom_permissions.rst:5
#: ../develop/plone/security/local_roles.rst:5
#: ../develop/plone/security/permission_lists.rst:5
#: ../develop/plone/security/permissions.rst:5
#: ../develop/plone/security/sandboxing.rst:5
#: ../develop/plone/security/selinux.rst:5
#: ../develop/plone/security/standard_permissions.rst:5
#: ../develop/plone/serving/http_request_and_response.rst:5
#: ../develop/plone/serving/traversing.rst:5
#: ../develop/plone/serving/webdav.rst:5
#: ../develop/plone/serving/xmlrpc.rst:7
#: ../develop/plone/sessions/cookies.rst:5
#: ../develop/plone/sessions/login.rst:5
#: ../develop/plone/sessions/session_variables.rst:5
#: ../develop/plone/views/browserviews.rst:5
#: ../develop/plone/views/layers.rst:5
#: ../develop/plone/views/viewlets.rst:5
msgid "Description"
msgstr ""

#: ../develop/addons/ajax.rst:7
msgid "Creating AJAX programming logic in Plone."
msgstr ""

#: ../develop/addons/ajax.rst:12
#: ../develop/addons/components/adapters.rst:8
#: ../develop/addons/components/customizing_plone.rst:8
#: ../develop/addons/components/events.rst:13
#: ../develop/addons/components/genericsetup.rst:14
#: ../develop/addons/components/index.rst:6
#: ../develop/addons/components/interfaces.rst:8
#: ../develop/addons/components/utilities.rst:13
#: ../develop/addons/components/zcml.rst:12
#: ../develop/addons/helloworld/intro.rst:3
#: ../develop/addons/javascript.rst:12
#: ../develop/addons/javascript_standards.rst:12
#: ../develop/addons/schema-driven-forms/intro.rst:2
#: ../develop/import/index.rst:12
#: ../develop/plone-coredev/bundles.rst:3
#: ../develop/plone-coredev/index.rst:8
#: ../develop/plone/content/archetypes/archetypes_references.rst:13
#: ../develop/plone/content/archetypes/fields.rst:12
#: ../develop/plone/content/archetypes/references.rst:14
#: ../develop/plone/content/archetypes/templates.rst:12
#: ../develop/plone/content/archetypes/validators.rst:8
#: ../develop/plone/content/deleting.rst:13
#: ../develop/plone/content/dexterity.rst:12
#: ../develop/plone/content/dynamic_views.rst:12
#: ../develop/plone/content/events.rst:12
#: ../develop/plone/content/history.rst:8
#: ../develop/plone/content/importexport.rst:12
#: ../develop/plone/content/listing.rst:12
#: ../develop/plone/content/manipulating.rst:8
#: ../develop/plone/content/ownership.rst:12
#: ../develop/plone/content/rename.rst:12
#: ../develop/plone/content/timestamps.rst:13
#: ../develop/plone/content/types.rst:12
#: ../develop/plone/content/uid.rst:13
#: ../develop/plone/content/workflow.rst:12
#: ../develop/plone/forms/files.rst:13
#: ../develop/plone/forms/manual.rst:10
#: ../develop/plone/forms/ploneformgen.rst:10
#: ../develop/plone/forms/schemas.rst:13
#: ../develop/plone/forms/vocabularies.rst:14
#: ../develop/plone/forms/wysiwyg.rst:12
#: ../develop/plone/forms/z3c.form.rst:14
#: ../develop/plone/forms/z3c.form.rst:2170
#: ../develop/plone/functionality/actions.rst:12
#: ../develop/plone/functionality/collections.rst:12
#: ../develop/plone/functionality/contactform.rst:8
#: ../develop/plone/functionality/controlpanel.rst:13
#: ../develop/plone/functionality/dashboard.rst:8
#: ../develop/plone/functionality/discussion.rst:13
#: ../develop/plone/functionality/expressions.rst:15
#: ../develop/plone/functionality/portlets.rst:12
#: ../develop/plone/functionality/rss.rst:12
#: ../develop/plone/functionality/sitemap.rst:8
#: ../develop/plone/getstarted/debug_mode.rst:13
#: ../develop/plone/getstarted/index.rst:10
#: ../develop/plone/getstarted/python.rst:10
#: ../develop/plone/i18n/cache.rst:12
#: ../develop/plone/i18n/contribute_to_translations.rst:12
#: ../develop/plone/i18n/internationalisation.rst:13
#: ../develop/plone/i18n/language.rst:12
#: ../develop/plone/i18n/translating_content.rst:13
#: ../develop/plone/images/content.rst:12
#: ../develop/plone/members/member_basics.rst:12
#: ../develop/plone/members/member_profile.rst:12
#: ../develop/plone/members/membrane.rst:19
#: ../develop/plone/members/sharing_tab.rst:19
#: ../develop/plone/misc/annotations.rst:17
#: ../develop/plone/misc/commandline.rst:13
#: ../develop/plone/misc/context.rst:8
#: ../develop/plone/misc/datetime.rst:12
#: ../develop/plone/misc/email.rst:12
#: ../develop/plone/misc/flowplayer.rst:12
#: ../develop/plone/misc/html.rst:12
#: ../develop/plone/misc/navigationtree.rst:13
#: ../develop/plone/misc/normalizing_ids.rst:12
#: ../develop/plone/misc/portal_transforms.rst:8
#: ../develop/plone/misc/slideshow.rst:14
#: ../develop/plone/misc/sql.rst:12
#: ../develop/plone/misc/zope_debug_prompt.rst:12
#: ../develop/plone/persistency/database.rst:14
#: ../develop/plone/persistency/persistent.rst:16
#: ../develop/plone/persistency/storage.rst:13
#: ../develop/plone/persistency/transactions.rst:8
#: ../develop/plone/searching_and_indexing/query.rst:12
#: ../develop/plone/security/dynamic_roles.rst:8
#: ../develop/plone/security/local_roles.rst:12
#: ../develop/plone/security/permissions.rst:12
#: ../develop/plone/security/sandboxing.rst:14
#: ../develop/plone/security/selinux.rst:12
#: ../develop/plone/serving/http_request_and_response.rst:12
#: ../develop/plone/serving/traversing.rst:15
#: ../develop/plone/serving/webdav.rst:13
#: ../develop/plone/serving/xmlrpc.rst:12
#: ../develop/plone/sessions/cookies.rst:12
#: ../develop/plone/sessions/login.rst:12
#: ../develop/plone/sessions/session_variables.rst:13
#: ../develop/plone/syndication.rst:8
#: ../develop/plone/views/browserviews.rst:12
#: ../develop/plone/views/layers.rst:13
#: ../develop/plone/views/viewlets.rst:13
msgid "Introduction"
msgstr ""

#: ../develop/addons/ajax.rst:14
msgid "´AJAX <http://en.wikipedia.org/wiki/Ajax_%28programming%29>`_ (an acronym for Asynchronous JavaScript and XML) is a group of interrelated web development techniques used on the client-side to create asynchronous web applications."
msgstr ""

#: ../develop/addons/ajax.rst:17
msgid "JSON views and loading data via AJAX"
msgstr ""

#: ../develop/addons/ajax.rst:19
msgid "The best way to output JSON for AJAX call endpoints is to use Python's dict structure and convert it to JSON using Python ``json.dumps()`` call."
msgstr ""

#: ../develop/addons/ajax.rst:22
msgid "You should pass the AJAX target URLs to your Javascript using the settings passing pattern explained above."
msgstr ""

#: ../develop/addons/ajax.rst:24
#: ../develop/addons/components/zcml.rst:164
#: ../develop/plone/forms/z3c.form.rst:1594
#: ../develop/plone/misc/normalizing_ids.rst:35
msgid "Examples"
msgstr ""

#: ../develop/addons/ajax.rst:26
msgid "Generator"
msgstr ""

#: ../develop/addons/ajax.rst:28
msgid "https://github.com/miohtama/silvuple/blob/master/silvuple/views.py#L342"
msgstr ""

#: ../develop/addons/ajax.rst:30
msgid "AJAX loader"
msgstr ""

#: ../develop/addons/ajax.rst:32
msgid "https://github.com/miohtama/silvuple/blob/master/silvuple/static/main.js#L247"
msgstr ""

#: ../develop/addons/ajax.rst:35
msgid "Cross-Origin Resource Sharing (CORS) proxy view"
msgstr ""

#: ../develop/addons/ajax.rst:37
msgid "Old web browsers do not support `Allow-acces-origin HTTP header <https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS>`_ needed to do cross-domain AJAX requests (IE6, IE7)."
msgstr ""

#: ../develop/addons/ajax.rst:40
msgid "Below is an example how to work around this for jQuery getJSON() calls by"
msgstr ""

#: ../develop/addons/ajax.rst:42
msgid "Detecting browsers which do not support this using jQuery.support API"
msgstr ""

#: ../develop/addons/ajax.rst:44
msgid "Doing an alternative code path through a local website proxy view which uses Python ``urllib`` to make server-to-server call and return it as it would be a local call, thus working around cross-domain restriction"
msgstr ""

#: ../develop/addons/ajax.rst:48
msgid "This example is for Plone, but the code is easily port to other web frameworks."
msgstr ""

#: ../develop/addons/ajax.rst:52
msgid "This is not a full example code. Basic Python and Javascript skills are needed to interpret and adapt the code for your use case."
msgstr ""

#: ../develop/addons/ajax.rst:55
msgid "Javascript example"
msgstr ""

#: ../develop/addons/ajax.rst:108
msgid "The server-side view::"
msgstr ""

#: ../develop/addons/ajax.rst:209
msgid "Registering the view in ZCML:"
msgstr ""

#: ../develop/addons/ajax.rst:222
msgid "Speeding up AJAX loaded content HTML"
msgstr ""

#: ../develop/addons/ajax.rst:224
msgid "By observing Plone's ``main_template.pt``, having a True value on the ``ajax_load`` request key means some parts of the page aren't displayed, hence the speed:"
msgstr ""

#: ../develop/addons/ajax.rst:226
msgid "No CSS or Javascript from ``<head />`` tag is loaded"
msgstr ""

#: ../develop/addons/ajax.rst:228
msgid "Nothing from the ``plone.portaltop`` ViewletManager, such as the personal bar, searchbox, logo and main menu"
msgstr ""

#: ../develop/addons/ajax.rst:230
msgid "Nothing from the ``plone.portalfooter`` ViewletManager, which contains footer and colophon information, site actions and the Analytics javascript calls if you have that configured in your site"
msgstr ""

#: ../develop/addons/ajax.rst:232
msgid "Neither the left nor the right column, along with all the portlets there assigned"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:2
msgid "bobtemplates introduction"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:27
msgid "``bobtemplates.plone`` provides a `mr.bob`_ template to generate packages for Plone projects."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:29
msgid "To create a package like ``collective.myaddon``::"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:33
msgid "You can also create a package with nested namespace::"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:39
msgid "Options"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:41
msgid "On creating a package you can choose from the following options. The default value is in [square brackets]:"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:44
msgid "Package Type? [Basic]"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:44
msgid "Options are Basic, Dexterity and Theme."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:47
msgid "Author's name"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:47
msgid "Should be something like 'John Smith'."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:50
msgid "Author's email"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:50
msgid "Should be something like 'john@plone.org'."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:53
msgid "Author's github username"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:53
msgid "Should be something like 'john'."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:56
msgid "Package description [An add-on for Plone]"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:56
msgid "One-liner describing what this package does. Should be something like 'Plone add-on that ...'."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:59
msgid "Plone version [4.3.4]"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:59
msgid "Which Plone version would you like to use?"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:63
msgid "Add example view? [True]"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:62
msgid "Do you want to register a browser view 'demoview' as an example?"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:66
msgid "Features"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:68
msgid "Package created with ``bobtemplates.plone`` use the current best-practices when creating an addon."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:71
msgid "Buildout"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:71
msgid "The package is contained in a buildout that allows you to build Plone with the new package installed for testing-purposes."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:74
msgid "Tests"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:74
msgid "The package comes with a test setup and some `tests <http://docs.plone.org/external/plone.app.testing/docs/source/index.html>`_ for installing the package. It also contains a `robot-test <http://docs.plone.org/external/plone.app.robotframework/docs/source/index.html>`_ that tests logging in. The buildout also contains a config to allow testing the package on `travis <http://travis-ci.org/>`_ that sends `notifications <http://about.travis-ci.org/docs/user/notifications>`_ by email to the package autor."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:77
msgid "Profile"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:77
msgid "The package contains a `Generic Setup Profile <http://docs.plone.org/develop/addons/components/genericsetup.html>`_ that installs a browserlayer."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:80
msgid "Locales"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:80
msgid "The package registers a directory for locales."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:83
msgid "Template-Overrides"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:83
msgid "The package registers the folder ``browser/overrides`` as a directory where you can drop template-overrides using `z3c.jbot <https://pypi.python.org/pypi/z3c.jbot>`_."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:87
msgid "Setuphandler"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:86
msgid "The package contains a `setuphandlers.py <http://docs.plone.org/develop/addons/components/genericsetup.html?highlight=setuphandler#custom-installer-code-setuphandlers-py>`_ where you can add code that is executed on installing the package."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:90
msgid "Compatibility"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:92
msgid "Addons created with ``bobtemplates.plone`` are tested to work in Plone 4.3.x and Plone 5. They should also work with older versions but that was not tested."
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:97
#: ../develop/plone/getstarted/debug_mode.rst:84
#: ../develop/plone/i18n/translating_content.rst:42
msgid "Installation"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:100
msgid "Use in a buildout"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:114
msgid "This creates a mrbob-executeable in your bin-directory. Call it from the ``src``-directory of your Plone project like this.::"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:121
msgid "Installation in a virtualenv"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:123
msgid "You can also install ``bobtemplates.plone`` in a virtualenv.::"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:129
msgid "Now you can use it like this::"
msgstr ""

#: ../develop/addons/bobtemplates.plone/README.rst:133
msgid "See `mr.bob`_ documentation for further information."
msgstr ""

#: ../develop/addons/components/adapters.rst:3
msgid "Adapters"
msgstr ""

#: ../develop/addons/components/adapters.rst:10
msgid "Adapters make it possible to extend the behavior of a class without modifying the class itself. This allows more modular, readable code in complex systems where there might be hundreds of methods per class. Some more advantages of this concept are:"
msgstr ""

#: ../develop/addons/components/adapters.rst:15
msgid "The class interface itself is more readable (less visible clutter);"
msgstr ""

#: ../develop/addons/components/adapters.rst:16
msgid "class functionality can be extended outside the class source code;"
msgstr ""

#: ../develop/addons/components/adapters.rst:17
msgid "add-on products may extend or override parts of the class functionality. Frameworks use adapters extensively, because adapters provide easy integration points.  External code can override adapters to retrofit/modify functionality. For example: a theme product might want to override a searchbox viewlet to have a search box with slightly different functionality and theme-specific goodies."
msgstr ""

#: ../develop/addons/components/adapters.rst:25
msgid "The downside is that adapters cannot be found by \"exploring\" classes or source code. They must be well documented in order to be discoverable."
msgstr ""

#: ../develop/addons/components/adapters.rst:28
msgid "Read more about adapters in the `zope.component README <http://docs.zope.org/zope.component/narr.html#adapters>`_."
msgstr ""

#: ../develop/addons/components/adapters.rst:31
msgid "`Adapter ZCML <http://docs.zope.org/zope.component/zcml.html#adapter>`_."
msgstr ""

#: ../develop/addons/components/adapters.rst:33
msgid "Adapters are matched by:"
msgstr ""

#: ../develop/addons/components/adapters.rst:35
msgid "Provider interface (what functionality adapter provides)."
msgstr ""

#: ../develop/addons/components/adapters.rst:36
msgid "Parameter interfaces."
msgstr ""

#: ../develop/addons/components/adapters.rst:38
msgid "There are two kinds of adapters:"
msgstr ""

#: ../develop/addons/components/adapters.rst:40
msgid "Normal adapters that take only one parameter."
msgstr ""

#: ../develop/addons/components/adapters.rst:41
msgid "Multi-adapters take many parameters in the form of a tuple."
msgstr ""

#: ../develop/addons/components/adapters.rst:44
msgid "Example adapters users"
msgstr ""

#: ../develop/addons/components/adapters.rst:46
msgid "`Theme specific adapters <http://docs.plone.org/4/en/old-reference-manuals/plone_3_theming/buildingblocks/components/themespecific.html>`_"
msgstr ""

#: ../develop/addons/components/adapters.rst:49
msgid "Registering an adapter"
msgstr ""

#: ../develop/addons/components/adapters.rst:52
msgid "Registering using ZCML"
msgstr ""

#: ../develop/addons/components/adapters.rst:54
msgid "An adapter provides functionality to a class. This functionality becomes available when the interface is queried from the instance of class."
msgstr ""

#: ../develop/addons/components/adapters.rst:57
msgid "Below is an example how to make a custom \"image provider\". The image provider provides a list of images for arbitrary content."
msgstr ""

#: ../develop/addons/components/adapters.rst:60
msgid "This is the image provider interface::"
msgstr ""

#: ../develop/addons/components/adapters.rst:72
msgid "This is our content class::"
msgstr ""

#: ../develop/addons/components/adapters.rst:82
msgid "This is the adapter for the content class::"
msgstr ""

#: ../develop/addons/components/adapters.rst:113
msgid "Register the adapter for your custom content type ``MyShoppableItemType`` in the ``configure.zcml`` file of your product:"
msgstr ""

#: ../develop/addons/components/adapters.rst:124
msgid "Then we can query the adapter and use it. Unit testing example::"
msgstr ""

#: ../develop/addons/components/adapters.rst:138
msgid "Registering using Python"
msgstr ""

#: ../develop/addons/components/adapters.rst:140
msgid "Register to *Global Site Manager* using ``registerAdapter()``."
msgstr ""

#: ../develop/addons/components/adapters.rst:142
#: ../develop/addons/components/events.rst:118
#: ../develop/addons/components/genericsetup.rst:137
#: ../develop/addons/components/interfaces.rst:61
#: ../develop/addons/components/interfaces.rst:80
#: ../develop/addons/components/interfaces.rst:162
#: ../develop/addons/components/interfaces.rst:266
#: ../develop/addons/components/interfaces.rst:290
#: ../develop/addons/components/utilities.rst:148
#: ../develop/addons/components/utilities.rst:186
#: ../develop/addons/javascript.rst:152
#: ../develop/plone/content/archetypes/fields.rst:53
#: ../develop/plone/content/archetypes/fields.rst:105
#: ../develop/plone/content/archetypes/fields.rst:208
#: ../develop/plone/content/archetypes/fields.rst:607
#: ../develop/plone/content/archetypes/fields.rst:649
#: ../develop/plone/content/archetypes/references.rst:38
#: ../develop/plone/content/archetypes/storages.rst:37
#: ../develop/plone/content/creating.rst:21
#: ../develop/plone/content/creating.rst:37
#: ../develop/plone/content/creating.rst:252
#: ../develop/plone/content/creating.rst:422
#: ../develop/plone/content/deleting.rst:24
#: ../develop/plone/content/dexterity.rst:128
#: ../develop/plone/content/history.rst:39
#: ../develop/plone/content/listing.rst:116
#: ../develop/plone/content/ownership.rst:23
#: ../develop/plone/content/ownership.rst:38
#: ../develop/plone/content/types.rst:223
#: ../develop/plone/content/types.rst:243
#: ../develop/plone/content/types.rst:264
#: ../develop/plone/content/types.rst:273
#: ../develop/plone/content/workflow.rst:145
#: ../develop/plone/content/workflow.rst:167
#: ../develop/plone/content/workflow.rst:293
#: ../develop/plone/forms/files.rst:203
#: ../develop/plone/forms/files.rst:417
#: ../develop/plone/forms/schemas.rst:92
#: ../develop/plone/forms/schemas.rst:127
#: ../develop/plone/forms/schemas.rst:199
#: ../develop/plone/forms/schemas.rst:269
#: ../develop/plone/forms/schemas.rst:366
#: ../develop/plone/forms/schemas.rst:492
#: ../develop/plone/forms/schemas.rst:541
#: ../develop/plone/forms/vocabularies.rst:74
#: ../develop/plone/forms/vocabularies.rst:143
#: ../develop/plone/forms/wysiwyg.rst:359
#: ../develop/plone/forms/z3c.form.rst:306
#: ../develop/plone/forms/z3c.form.rst:428
#: ../develop/plone/forms/z3c.form.rst:625
#: ../develop/plone/forms/z3c.form.rst:664
#: ../develop/plone/forms/z3c.form.rst:727
#: ../develop/plone/forms/z3c.form.rst:771
#: ../develop/plone/forms/z3c.form.rst:796
#: ../develop/plone/forms/z3c.form.rst:871
#: ../develop/plone/forms/z3c.form.rst:1011
#: ../develop/plone/forms/z3c.form.rst:1331
#: ../develop/plone/forms/z3c.form.rst:1407
#: ../develop/plone/forms/z3c.form.rst:1420
#: ../develop/plone/forms/z3c.form.rst:1474
#: ../develop/plone/forms/z3c.form.rst:1703
#: ../develop/plone/forms/z3c.form.rst:1747
#: ../develop/plone/forms/z3c.form.rst:2195
#: ../develop/plone/forms/z3c.form.rst:2214
#: ../develop/plone/functionality/actions.rst:142
#: ../develop/plone/functionality/actions.rst:243
#: ../develop/plone/functionality/actions.rst:283
#: ../develop/plone/functionality/actions.rst:336
#: ../develop/plone/functionality/discussion.rst:37
#: ../develop/plone/functionality/expressions.rst:121
#: ../develop/plone/functionality/expressions.rst:130
#: ../develop/plone/functionality/expressions.rst:162
#: ../develop/plone/functionality/expressions.rst:270
#: ../develop/plone/functionality/expressions.rst:279
#: ../develop/plone/functionality/expressions.rst:287
#: ../develop/plone/functionality/expressions.rst:295
#: ../develop/plone/functionality/portlets.rst:373
#: ../develop/plone/i18n/cache.rst:23
#: ../develop/plone/members/member_basics.rst:133
#: ../develop/plone/members/member_basics.rst:178
#: ../develop/plone/members/member_basics.rst:195
#: ../develop/plone/members/member_basics.rst:211
#: ../develop/plone/members/member_basics.rst:259
#: ../develop/plone/members/member_basics.rst:268
#: ../develop/plone/members/member_basics.rst:290
#: ../develop/plone/members/member_profile.rst:91
#: ../develop/plone/members/member_profile.rst:104
#: ../develop/plone/members/membrane.rst:56
#: ../develop/plone/misc/commandline.rst:59
#: ../develop/plone/misc/commandline.rst:73
#: ../develop/plone/misc/context.rst:176
#: ../develop/plone/misc/context.rst:208
#: ../develop/plone/misc/datetime.rst:105
#: ../develop/plone/persistency/persistent.rst:145
#: ../develop/plone/persistency/transactions.rst:71
#: ../develop/plone/searching_and_indexing/catalog.rst:127
#: ../develop/plone/searching_and_indexing/indexing.rst:332
#: ../develop/plone/searching_and_indexing/query.rst:27
#: ../develop/plone/searching_and_indexing/query.rst:174
#: ../develop/plone/searching_and_indexing/query.rst:194
#: ../develop/plone/searching_and_indexing/query.rst:352
#: ../develop/plone/searching_and_indexing/query.rst:426
#: ../develop/plone/searching_and_indexing/query.rst:497
#: ../develop/plone/searching_and_indexing/query.rst:645
#: ../develop/plone/searching_and_indexing/query.rst:826
#: ../develop/plone/searching_and_indexing/query.rst:1012
#: ../develop/plone/searching_and_indexing/query.rst:1036
#: ../develop/plone/searching_and_indexing/query.rst:1058
#: ../develop/plone/security/local_roles.rst:81
#: ../develop/plone/security/local_roles.rst:94
#: ../develop/plone/security/permissions.rst:170
#: ../develop/plone/serving/http_request_and_response.rst:121
#: ../develop/plone/serving/http_request_and_response.rst:157
#: ../develop/plone/serving/http_request_and_response.rst:184
#: ../develop/plone/serving/http_request_and_response.rst:212
#: ../develop/plone/serving/http_request_and_response.rst:711
#: ../develop/plone/serving/traversing.rst:67
#: ../develop/plone/serving/traversing.rst:91
#: ../develop/plone/serving/traversing.rst:105
#: ../develop/plone/serving/traversing.rst:126
#: ../develop/plone/serving/traversing.rst:189
#: ../develop/plone/serving/traversing.rst:229
#: ../develop/plone/serving/traversing.rst:246
#: ../develop/plone/serving/traversing.rst:272
#: ../develop/plone/serving/traversing.rst:314
#: ../develop/plone/serving/traversing.rst:341
#: ../develop/plone/serving/traversing.rst:415
#: ../develop/plone/serving/traversing.rst:606
#: ../develop/plone/serving/xmlrpc.rst:16
#: ../develop/plone/sessions/cookies.rst:25
#: ../develop/plone/sessions/session_variables.rst:36
#: ../develop/plone/sessions/session_variables.rst:80
#: ../develop/plone/sessions/session_variables.rst:116
#: ../develop/plone/sessions/statusmessages.rst:20
#: ../develop/plone/views/browserviews.rst:728
#: ../develop/plone/views/browserviews.rst:750
#: ../develop/plone/views/layers.rst:218
#: ../develop/plone/views/layers.rst:273
#: ../develop/plone/views/layers.rst:288
msgid "Example::"
msgstr ""

#: ../develop/addons/components/adapters.rst:153
#: ../develop/addons/components/index.rst:26
#: ../develop/addons/javascript.rst:418
#: ../develop/addons/javascript.rst:718
#: ../develop/plone/content/archetypes/templates.rst:57
#: ../develop/plone/content/dynamic_views.rst:30
#: ../develop/plone/content/dynamic_views.rst:67
#: ../develop/plone/forms/schemas.rst:44
#: ../develop/plone/forms/wysiwyg.rst:41
#: ../develop/plone/forms/z3c.form.rst:653
#: ../develop/plone/forms/z3c.form.rst:1465
#: ../develop/plone/forms/z3c.form.rst:2300
#: ../develop/plone/functionality/breadcrumbs.rst:144
#: ../develop/plone/functionality/discussion.rst:19
#: ../develop/plone/functionality/portlets.rst:501
#: ../develop/plone/functionality/portlets.rst:910
#: ../develop/plone/i18n/cache.rst:46
#: ../develop/plone/i18n/internationalisation.rst:588
#: ../develop/plone/misc/commandline.rst:170
#: ../develop/plone/misc/commandline.rst:301
#: ../develop/plone/misc/datetime.rst:52
#: ../develop/plone/misc/html.rst:110
#: ../develop/plone/persistency/database.rst:161
#: ../develop/plone/persistency/persistent.rst:81
#: ../develop/plone/persistency/persistent.rst:117
#: ../develop/plone/searching_and_indexing/query.rst:801
#: ../develop/plone/security/permissions.rst:51
#: ../develop/plone/serving/traversing.rst:405
#: ../develop/plone/sessions/login.rst:299
#: ../develop/plone/sessions/login.rst:324
#: ../develop/plone/views/browserviews.rst:305
#: ../develop/plone/views/viewlets.rst:43
#: ../develop/plone/views/viewlets.rst:123
#: ../develop/plone/views/viewlets.rst:224
msgid "More info"
msgstr ""

#: ../develop/addons/components/adapters.rst:155
msgid "http://www.muthukadan.net/docs/zca.html#registration"
msgstr ""

#: ../develop/addons/components/adapters.rst:158
msgid "Generic adapter contexts"
msgstr ""

#: ../develop/addons/components/adapters.rst:160
msgid "The following interfaces are useful when registering adapters:"
msgstr ""

#: ../develop/addons/components/adapters.rst:163
#: ../develop/addons/components/interfaces.rst:34
msgid "``zope.interface.Interface``"
msgstr ""

#: ../develop/addons/components/adapters.rst:163
msgid "Adapts to any object"
msgstr ""

#: ../develop/addons/components/adapters.rst:166
#: ../develop/addons/components/interfaces.rst:41
#: ../develop/plone/functionality/expressions.rst:219
msgid "``Products.CMFCore.interfaces.IContentish``"
msgstr ""

#: ../develop/addons/components/adapters.rst:166
msgid "Adapts to any Plone content object"
msgstr ""

#: ../develop/addons/components/adapters.rst:169
msgid "``zope.publisher.interfaces.IBrowserView``"
msgstr ""

#: ../develop/addons/components/adapters.rst:169
msgid "Adapts to any ``BrowserView(context, request)`` object"
msgstr ""

#: ../develop/addons/components/adapters.rst:172
msgid "Multi-adapter registration"
msgstr ""

#: ../develop/addons/components/adapters.rst:174
msgid "You can specify any number of interfaces in the ``<adapter for=\"\" />`` attribute. Separate them with spaces or newlines."
msgstr ""

#: ../develop/addons/components/adapters.rst:177
msgid "Below is a view-like example which registers against:"
msgstr ""

#: ../develop/addons/components/adapters.rst:179
msgid "any context (``zope.interface.Interace``);"
msgstr ""

#: ../develop/addons/components/adapters.rst:180
msgid "HTTP request objects (``zope.publisher.interfaces.browser.IBrowserRequest``)."
msgstr ""

#: ../develop/addons/components/adapters.rst:182
msgid "Emulate view registration (context, request):"
msgstr ""

#: ../develop/addons/components/adapters.rst:194
msgid "Getting the adapter"
msgstr ""

#: ../develop/addons/components/adapters.rst:196
msgid "There are two functions that may be used to get an adapter:"
msgstr ""

#: ../develop/addons/components/adapters.rst:198
msgid "``zope.component.getAdapter`` will raise an exception if the adapter is not found."
msgstr ""

#: ../develop/addons/components/adapters.rst:201
msgid "``zope.component.queryAdapter`` will return ``None`` if the adapter is not found."
msgstr ""

#: ../develop/addons/components/adapters.rst:204
msgid "``getAdapter``/``queryAdapter`` arguments:"
msgstr ""

#: ../develop/addons/components/adapters.rst:209
msgid "# Tuple consisting of: (*Object implementing the first interface*,"
msgstr ""

#: ../develop/addons/components/adapters.rst:207
msgid "*object implementing the second interface*, ...) The interfaces are in the order in which they were declared in the ``<adapter for=\"\">`` attribute."
msgstr ""

#: ../develop/addons/components/adapters.rst:211
msgid "# Adapter marker interface."
msgstr ""

#: ../develop/addons/components/adapters.rst:213
msgid "Example registration:"
msgstr ""

#: ../develop/addons/components/adapters.rst:227
msgid "Corresponding query code, to look up an adapter implementing the interfaces::"
msgstr ""

#: ../develop/addons/components/adapters.rst:247
msgid "You cannot get adapters on module-level code during import, as the Zope Component Architecture is not yet initialized."
msgstr ""

#: ../develop/addons/components/adapters.rst:252
msgid "Listing adapter registers"
msgstr ""

#: ../develop/addons/components/adapters.rst:254
msgid "The following code checks whether the ``IHeaderBehavior`` adapter is registered correctly::"
msgstr ""

#: ../develop/addons/components/adapters.rst:265
msgid "Alternative listing adapters"
msgstr ""

#: ../develop/addons/components/adapters.rst:267
msgid "Getting all multi-adapters (context, request)::"
msgstr ""

#: ../develop/addons/components/adapters.rst:274
msgid "This does not list locally-registered adapters such as Zope views."
msgstr ""

#: ../develop/addons/components/adapters.rst:278
msgid "Local adapters"
msgstr ""

#: ../develop/addons/components/adapters.rst:280
msgid "Local adapters are effective only inside a certain container, such as a folder.  They use ``five.localsitemanager`` to register themselves."
msgstr ""

#: ../develop/addons/components/adapters.rst:283
msgid "https://opkode.com/blog/2010/01/26/schema-extending-an-object-only-inside-a-specific-folder/"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:3
msgid "Customizing Plone"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:10
msgid "Plone can be customized in two different ways, depending on which kind of component you are trying to change:"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:13
msgid "Through-the-web."
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:15
msgid "By add-on products."
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:17
msgid "You should never edit files directly in an egg folder. Instead you usually create a customized version of the item you wish to modify and then configure Plone to use your customized version instead of the stock one."
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:23
msgid "Through-the-web changes"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:25
msgid "Minor configuration changes can be done through the web. These changes are effective immediately and don't require you to write any code or restart Zope application server. The downside is that since through-the-web changes don't have a source code \"recipe\" for what you did, the changes are not automatically repeatable. If you need to do the same changes for another site again, or you need heavily modify your site, you need go through manual steps to achieve the same customization."
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:35
msgid "Possible through-the-web changes are:"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:37
msgid "Site settings: E.g. adding/removing :doc:`content rules </working-with-content/managing-content/contentrules>`"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:39
msgid "Showing and hiding viewlets (parts of the page) using ``@@manage-viewlets``"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:41
msgid "Exporting and importing parts of the site configuration in ``portal_setup``"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:43
msgid "Customizing viewlet templates in ``portal_view_customization``"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:45
msgid "Customize ``portal_skins`` layer theme files in portal_skins"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:47
msgid "Uploading Javascript files, CSS files and images through Zope management interface and registering using ``portal_css`` and ``portal_javascripts``"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:51
msgid "Through the code changes"
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:53
msgid "To expand Plone using Python, you have to create your own add-on product. Add-on products are distributed as packaged Python modules called `eggs <http://docs.plone.org/4/en/old-reference-manuals/buildout/index.html>`_."
msgstr ""

#: ../develop/addons/components/customizing_plone.rst:56
msgid "The recommended way is to use the :doc:`bobtemplates.plone </develop/addons/bobtemplates.plone/README>` command to generate an add-on product skeleton which you can use as a starting point for your development."
msgstr ""

#: ../develop/addons/components/events.rst:3
#: ../develop/plone/content/index.rst:16
msgid "Events"
msgstr ""

#: ../develop/addons/components/events.rst:7
msgid "How to add event hooks to your Plone code to perform actions when something happens on a Plone site."
msgstr ""

#: ../develop/addons/components/events.rst:15
msgid "This document briefly discusses event handling using the ``zope.event`` module. The Zope Component Architecture's `zope.event package <https://pypi.python.org/pypi/zope.event>`_ is used to manage subscribeable events in Plone."
msgstr ""

#: ../develop/addons/components/events.rst:20
msgid "Some of the notable characteristics of the Plone event system are:"
msgstr ""

#: ../develop/addons/components/events.rst:22
msgid "it is simple;"
msgstr ""

#: ../develop/addons/components/events.rst:23
msgid "subscriber calling order is not modifiable |---| you cannot set the order in which event handlers are called;"
msgstr ""

#: ../develop/addons/components/events.rst:25
msgid "events cannot be cancelled |---| all handlers will always get the event;"
msgstr ""

#: ../develop/addons/components/events.rst:26
msgid "event handlers cannot have return values;"
msgstr ""

#: ../develop/addons/components/events.rst:27
msgid "exceptions raised in an event handler will interrupt the request processing."
msgstr ""

#: ../develop/addons/components/events.rst:31
msgid "Registering an event handler"
msgstr ""

#: ../develop/addons/components/events.rst:33
msgid "Plone events can be scoped:"
msgstr ""

#: ../develop/addons/components/events.rst:35
msgid "*globally* (no scope)"
msgstr ""

#: ../develop/addons/components/events.rst:36
msgid "per *content type*"
msgstr ""

#: ../develop/addons/components/events.rst:40
msgid "Example: Register an event-handler on your contenttype's creation"
msgstr ""

#: ../develop/addons/components/events.rst:43
msgid "In your.product/your/product/configure.zcml insert::"
msgstr ""

#: ../develop/addons/components/events.rst:52
msgid "The first line defines to which interface you want to bind the execution of your code, which means here, that the code will only be executed if the object is one of your contenttype's. If you want this to be interface-agnostic, insert an asterix as a wildcard instead."
msgstr ""

#: ../develop/addons/components/events.rst:56
msgid "The second line defines the event on which this should happen, which is here 'IObjectCreatedEvent' -- for Archetypes you should use 'Products.Archetypes.interfaces.IObjectInitializedEvent' instead. For more available possible events to be used as a trigger, see :doc:`event handler documentation </external/plone.app.dexterity/docs/advanced/event-handlers>`"
msgstr ""

#: ../develop/addons/components/events.rst:59
msgid "The third line gives the path to the script that is supposed to be executed."
msgstr ""

#: ../develop/addons/components/events.rst:61
msgid "Create your.product/your/product/your_python_file.py and insert::"
msgstr ""

#: ../develop/addons/components/events.rst:69
msgid "For Dexterity-contenttype's and additional ZOPE-Illumination see also:"
msgstr ""

#: ../develop/addons/components/events.rst:68
msgid ":doc:`event handler documentation </external/plone.app.dexterity/docs/advanced/event-handlers>`"
msgstr ""

#: ../develop/addons/components/events.rst:72
msgid "Subscribing using ZCML"
msgstr ""

#: ../develop/addons/components/events.rst:74
msgid "Subscribing to a global event using :term:`ZCML`."
msgstr ""

#: ../develop/addons/components/events.rst:83
msgid "For this event, the Python code in ``smartcard.py`` would be::"
msgstr ""

#: ../develop/addons/components/events.rst:91
msgid "Custom event example subscribing to all ``IMyEvents`` when fired by ``IMyObject``::"
msgstr ""

#: ../develop/addons/components/events.rst:100
msgid "Life cycle events example::"
msgstr ""

#: ../develop/addons/components/events.rst:111
msgid "Subscribing using Python"
msgstr ""

#: ../develop/addons/components/events.rst:113
msgid "The following subscription is valid through the process life cycle. In unit tests, it is important to clear test event handlers between the test steps."
msgstr ""

#: ../develop/addons/components/events.rst:135
msgid "Firing an event"
msgstr ""

#: ../develop/addons/components/events.rst:137
msgid "Use ``zope.event.notify()`` to fire event objects to their subscribers."
msgstr ""

#: ../develop/addons/components/events.rst:139
msgid "Example of how to fire an event in unit tests::"
msgstr ""

#: ../develop/addons/components/events.rst:149
msgid "Event types"
msgstr ""

#: ../develop/addons/components/events.rst:152
msgid "*Creation* events"
msgstr ""

#: ../develop/addons/components/events.rst:156
msgid "``Products.Archetypes.interfaces.IObjectInitializedEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:155
msgid "is fired for an Archetypes-based object when it's being initialised; i.e.  when it's being populated for the first time."
msgstr ""

#: ../develop/addons/components/events.rst:160
msgid "``Products.Archetypes.interfaces.IWebDAVObjectInitializedEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:159
msgid "is fired for an Archetypes-based object when it's being initialised via WebDAV."
msgstr ""

#: ../develop/addons/components/events.rst:164
msgid "``zope.lifecycleevent.IObjectCreatedEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:163
msgid "is fired for all Zopeish objects when they are being created (they don't necessarily need to be content objects)."
msgstr ""

#: ../develop/addons/components/events.rst:168
msgid "Archetypes and Zope 3 events might not be compatible with each other. Please see links below."
msgstr ""

#: ../develop/addons/components/events.rst:171
msgid "Other resources:"
msgstr ""

#: ../develop/addons/components/events.rst:173
msgid "https://plone.org/documentation/manual/developer-manual/archetypes/other-useful-archetypes-features/how-to-use-events-to-hook-the-archetypes-creation-process"
msgstr ""

#: ../develop/addons/components/events.rst:175
msgid "http://n2.nabble.com/IObjectInitializedEvent-tp4784897p4784897.html"
msgstr ""

#: ../develop/addons/components/events.rst:179
msgid "*Modified* events"
msgstr ""

#: ../develop/addons/components/events.rst:181
msgid "Two different content event types are available and might work differently depending on your scenario:"
msgstr ""

#: ../develop/addons/components/events.rst:186
msgid "``Products.Archetypes.interfaces.IObjectEditedEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:185
msgid "called for Archetypes-based objects that are not in the creation stage any more."
msgstr ""

#: ../develop/addons/components/events.rst:190
msgid "``Products.Archetypes.interfaces.IObjectEditedEvent`` is fired after ``reindexObject()`` is called. If you manipulate your content object in a handler for this event, you need to manually reindex new values, or the changes will not be reflected in the ``portal_catalog``."
msgstr ""

#: ../develop/addons/components/events.rst:196
msgid "``zope.lifecycleevent.IObjectModifiedEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:196
msgid "called for creation-stage events as well, unlike the previous event type."
msgstr ""

#: ../develop/addons/components/events.rst:199
msgid "``Products.Archetypes.interfaces.IWebDAVObjectEditedEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:199
msgid "called for Archetypes-based objects when they are being edited via WebDAV."
msgstr ""

#: ../develop/addons/components/events.rst:202
msgid "``Products.Archetypes.interfaces.IEditBegunEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:202
msgid "called for Archetypes-based objects when an edit operation is begun."
msgstr ""

#: ../develop/addons/components/events.rst:206
msgid "``Products.Archetypes.interfaces.IEditCancelledEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:205
msgid "called for Archetypes-based objects when an edit operation is canceled."
msgstr ""

#: ../develop/addons/components/events.rst:209
msgid "*Delete* events"
msgstr ""

#: ../develop/addons/components/events.rst:211
msgid "Delete events can be fired several times for the same object. Some delete event transactions are rolled back."
msgstr ""

#: ../develop/addons/components/events.rst:214
msgid "Read more about Delete events in `this discussion <http://plone.293351.n2.nabble.com/Event-on-object-deletion-td3670562.html>`_."
msgstr ""

#: ../develop/addons/components/events.rst:217
msgid "*Copy* events"
msgstr ""

#: ../develop/addons/components/events.rst:220
msgid "``zope.lifecycleevent.IObjectCopiedEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:220
msgid "is triggered when an object is copied."
msgstr ""

#: ../develop/addons/components/events.rst:223
msgid "*Workflow* events"
msgstr ""

#: ../develop/addons/components/events.rst:226
msgid "``Products.DCWorkflow.interfaces.IBeforeTransitionEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:226
msgid "is triggered before a workflow transition is executed."
msgstr ""

#: ../develop/addons/components/events.rst:229
msgid "``Products.DCWorkflow.interfaces.IAfterTransitionEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:229
msgid "is triggered after a workflow transition has been executed."
msgstr ""

#: ../develop/addons/components/events.rst:231
msgid "The DCWorkflow events are low-level events that can tell you a lot about the previous and current states."
msgstr ""

#: ../develop/addons/components/events.rst:237
msgid "``Products.CMFCore.interfaces.IActionSucceededEvent``"
msgstr ""

#: ../develop/addons/components/events.rst:235
msgid "this is a higher level event that is more commonly used to react after a workflow action has completed."
msgstr ""

#: ../develop/addons/components/events.rst:240
msgid "*Zope startup* events"
msgstr ""

#: ../develop/addons/components/events.rst:244
msgid "``zope.processlifetime.IProcessStarting``"
msgstr ""

#: ../develop/addons/components/events.rst:243
msgid "is triggered after component registry has been loaded and Zope is starting up."
msgstr ""

#: ../develop/addons/components/events.rst:248
msgid "``zope.processlifetime.IDatabaseOpened``"
msgstr ""

#: ../develop/addons/components/events.rst:247
msgid "is triggered after the main ZODB database has been opened."
msgstr ""

#: ../develop/addons/components/events.rst:251
msgid "Asynchronous event handling"
msgstr ""

#: ../develop/addons/components/events.rst:253
msgid "http://stackoverflow.com/questions/15875088/running-plone-subscriber-events-asynchronously"
msgstr ""

#: ../develop/addons/components/events.rst:256
#: ../develop/addons/components/interfaces.rst:110
#: ../develop/plone/content/archetypes/fields.rst:590
#: ../develop/plone/content/history.rst:15
#: ../develop/plone/forms/files.rst:469
#: ../develop/plone/misc/commandline.rst:46
#: ../develop/plone/persistency/persistent.rst:131
#: ../develop/plone/persistency/persistent.rst:236
#: ../develop/plone/serving/http_request_and_response.rst:293
#: ../develop/plone/sessions/login.rst:124
msgid "See also"
msgstr ""

#: ../develop/addons/components/events.rst:258
msgid "https://pypi.python.org/pypi/zope.event/3.4.1"
msgstr ""

#: ../develop/addons/components/events.rst:260
msgid "http://apidoc.zope.org/++apidoc++/ZCML/http_co__sl__sl_namespaces.zope.org_sl_zope/subscriber/index.html"
msgstr ""

#: ../develop/addons/components/events.rst:262
msgid "``zope.component.registry``"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:3
msgid "Add-on installation and export framework: GenericSetup"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:7
msgid "GenericSetup is a framework to modify the Plone site during add-on product installation and uninstallation. It provides XML-based rules to change the site settings easily."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:16
msgid "GenericSetup is an XML-based way to import and export Plone site configurations."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:18
msgid "It is mainly used to prepare the Plone site for add-on products, by:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:20
msgid "registering CSS files,"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:21
msgid "registering Javascript files,"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:22
msgid "setting various properties,"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:23
msgid "registering portlets,"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:24
msgid "registering portal_catalog search query indexes,"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:25
msgid "...and so on..."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:27
msgid "GenericSetup is mostly used to apply add-on-specific changes to the site configuration, and to enable add-on-specific behavior when the add-on installer is run."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:31
msgid "GenericSetup XML files are usually in a ``profiles/default`` folder inside the add-on product."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:34
msgid "All run-time configurable items, like viewlets order through ``/@@manage-viewlets`` page, are made repeatable using GenericSetup profile files."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:38
msgid "You do not need to hand-edit GenericSetup profile files. You can always change the configuration options through Plone or using the Zope Management Interface. Then you can export the resulting profile as an XML file, using the *Export* tab in the ``portal_setup`` ZMI tool."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:44
msgid "Directly editing XML profile files does not change anything on the site, even after Zope restart. This is because run-time configurable items are stored in the database. If you edit profile files, you need reimport edited files using the ``portal_setup`` tool or rerun the add-on product installer in Plone control panel. This import will read XML files and change Plone database accordingly."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:55
msgid "Difference between ZCML and GenericSetup"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:57
msgid "ZCML changes affect loaded Python code in **all** sites inside Zope whereas GenericSetup XML files affect only one Plone site and its database. GenericSetup XML files are always database changes."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:62
msgid "Relationship between ZCML and site-specific behavior is usually done using :doc:`layers </develop/plone/views/layers>`. ZCML directives, like viewlets and views, are registered to be active on a certain layer only using ``layer`` attribute. When GenericSetup XML is imported through ``portal_setup``, or the product add-on installer is run for a Plone site, the layer is activated for the particular site only, enabling all views registered for this layer."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:74
msgid "The ``metadata.xml`` file (add-on dependency and version information) is read during Plone start-up. If this file has problems your add-on might not appear in the installer control panel."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:78
msgid "`GenericSetup tutorial <https://plone.org/documentation/tutorial/genericsetup>`_"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:80
msgid "`GenericSetup product page <https://pypi.python.org/pypi/Products.GenericSetup/1.4.5>`_."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:82
msgid "`Source code <http://svn.zope.org/Products.GenericSetup/trunk/Products/GenericSetup/README.txt?rev=87436&view=auto>`_."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:0
#: ../develop/plone/content/archetypes/archetypes_references.rst:0
#: ../develop/plone/content/archetypes/converting-content-types.rst:0
#: ../develop/plone/content/dynamic_views.rst:0
#: ../develop/plone/forms/z3c.form.rst:0
#: ../develop/plone/functionality/expressions.rst:0
#: ../develop/plone/members/member_profile.rst:0
#: ../develop/plone/members/member_profile.rst:0
#: ../develop/plone/misc/asyncronoustasks.rst:0
#: ../develop/plone/searching_and_indexing/query.rst:0
#: ../develop/plone/searching_and_indexing/query.rst:0
#: ../develop/plone/searching_and_indexing/query.rst:0
#: ../develop/plone/serving/http_request_and_response.rst:0
#: ../develop/plone/serving/http_request_and_response.rst:0
#: ../develop/plone/serving/http_request_and_response.rst:0
#: ../develop/plone/serving/traversing.rst:0
#: ../develop/plone/sessions/login.rst:0
msgid "Todo"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:84
msgid "should the link be specifically to rev=87436?"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:88
msgid "Creating a profile"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:90
msgid "You use ``<genericsetup>`` directive in your add-on product's ``configure.zcml``. The name for the default profile executed by the Plone add-on installer is \"default\". If you need different profiles for e.g. unit testing you can declare them here."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:95
msgid "Profile XML files go in the ``profiles/default`` folder inside your add-on product."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:118
msgid "Add-on-specific issues"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:120
msgid "Add-on products may contain:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:122
msgid "A default GenericSetup XML profile which is automatically run when the product is installed using the quick-installer. The profile name is \"default\"."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:126
msgid "Other profiles which the user may install using the ``portal_setup`` *Import* tab, or which can be manually enabled for unit tests."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:128
msgid "An \"Import various\" step, which runs Python code every time the GenericSetup XML profile is installed."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:130
msgid "For more information about custom import steps, see:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:132
msgid "http://n2.nabble.com/indexing-of-content-created-by-Generic-Setup-tp4454703p4454703.html"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:135
msgid "Listing available profiles"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:146
msgid "Results::"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:155
msgid "Installing a profile"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:157
msgid "This is usually unit test specific question how to enable certain add-ons for unit testing."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:160
msgid "PloneTestCase.setupPloneSite"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:162
msgid "See *Running add-on installers and extensions profiles for unit tests*."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:165
msgid "Manually"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:167
msgid "You might want to install profiles manually if they need to be enabled only for certain tests."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:169
msgid "The profile name is in the format ``profile-${product name}:${profile id}``"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:171
#: ../develop/plone/content/rename.rst:79
msgid "Unit testing example::"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:177
#: ../develop/addons/components/genericsetup.rst:360
msgid "Upgrade steps"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:179
msgid "If you need to migrate data or settings on new add-on versions"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:181
msgid "http://stackoverflow.com/questions/15316583/how-to-define-a-procedure-to-upgrade-an-add-on"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:184
msgid "Uninstall profile"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:186
msgid "For the theory, see: `<http://blog.keul.it/2013/05/how-to-make-your-plone-add-on-products.html>`_"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:189
msgid "For an example, see the `collective.pdfpeek source code <https://github.com/collective/collective.pdfpeek/tree/master/collective/pdfpeek/profiles>`_."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:194
#: ../develop/plone-coredev/intro.rst:10
msgid "Dependencies"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:196
msgid "GenericSetup profile can contain dependencies to other add-on product installers and profiles."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:198
msgid "`More information about GenericSetup dependencies <https://plone.org/products/plone/roadmap/195/>`_."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:200
msgid "For example, if you want to declare dependency to *collective.basket* add-on product, so that it is automatically installed when your add-on installed you can use the declaration below. This way, you can be sure that all layers, portlets, etc. features which require database changes are usable from *collective.basket* add-on products when your add-on product is run."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:205
msgid "``metadata.xml``:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:217
msgid "*collective.basket* declares the profile in its configure.zcml:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:232
msgid "Unlike other GenericSetup XML files, ``metadata.xml`` is read on the start-up and this read is cached. Always restart Plone after editing ``metadata.xml``. If your ``metadata.xml`` file contains syntax errors or dependencies to a missing or non-existent product (e.g. due to a typo in a name) your add-on will disappear from the installation control panel."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:242
msgid "The ``Products.*`` Python namespace needs to declare generic setup dependencies specially: You actually do not mention ``Products.xxx`` space."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:246
msgid "To declare dependency to ``Products.Carousel``:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:261
msgid "Custom installer code (``setuphandlers.py``)"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:263
msgid "Besides out-of-the-box XML steps which easily provide both install and uninstall, GenericSetup provides a way to run a custom Python code when your add-on product is installed and uninstalled. This is not very straightforward process, though."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:268
msgid "The best practice is to create a ``setuphandlers.py`` file which contains function ``setup_various()`` which runs required Python code to make changes to Plone site object. This function is registerd as a custom ``genericsetup:importStep`` in XML."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:276
msgid "When you do custom ``importStep``\\s, remember to write uninstallation code as well."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:279
msgid "However, the trick is that all GenericSetup import steps, including your custom step, are run for *every* add-on product when they are installed. Thus, if your need to run code which is specific **during your add-on install only** you need to use a marker text file which is checked by GenericSetup context."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:286
msgid "Also you need to register this custom import step in ``configure.zcml``"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:304
msgid "``setuphandlers.py`` example"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:332
msgid "And add a dummy text file ``your.package/your/package/profiles/default/your.package.marker.txt``::"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:337
#: ../develop/addons/components/genericsetup.rst:348
#: ../develop/addons/components/genericsetup.rst:548
#: ../develop/plone/content/importexport.rst:204
#: ../develop/plone/forms/manual.rst:123
#: ../develop/plone/forms/z3c.form.rst:1786
#: ../develop/plone/functionality/portlets.rst:94
#: ../develop/plone/i18n/internationalisation.rst:386
#: ../develop/plone/i18n/internationalisation.rst:541
#: ../develop/plone/i18n/language.rst:207
#: ../develop/plone/persistency/persistent.rst:103
#: ../develop/plone/searching_and_indexing/query.rst:454
#: ../develop/plone/searching_and_indexing/query.rst:870
#: ../develop/plone/serving/http_request_and_response.rst:561
#: ../develop/plone/serving/xmlrpc.rst:107
#: ../develop/plone/views/browserviews.rst:40
#: ../develop/plone/views/browserviews.rst:612
#: ../develop/plone/views/layers.rst:183
msgid "More information"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:339
msgid "http://keeshink.blogspot.com/2009/02/creating-portal-content-in.html"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:341
msgid "http://maurits.vanrees.org/weblog/archive/2009/12/catalog (unrelated, but contains pointers)"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:344
msgid "Overriding import step order"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:346
msgid "You need ``import_steps.xml``."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:350
msgid "http://plone.293351.n2.nabble.com/Overriding-import-step-order-td2189638.html"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:352
msgid "http://dev.communesplone.org/trac/browser/communesplone/urban/trunk/profiles/default/import_steps.xml?rev=5652"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:355
msgid "Controlling the import step execution order"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:357
msgid "http://plone.293351.n2.nabble.com/indexing-of-content-created-by-Generic-Setup-td4454703.html"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:362
msgid "You can define upgrade steps to run code only when someone upgrades your product from version *x* to *y*."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:365
msgid "As an example, let's say that the new version of YOUR.PRODUCT defines a *price* field on a content type *MyType* to be a string, but previously (version 1.1.  and earlier) it was a float. Code that uses this field and assumes it to be a float will break after the upgrade, so you'd like to automatically convert existing values for the field to string."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:371
msgid "(Obviously, you could do this very quickly in a simple script, but having a GenericSetup upgrade step means non-technical people can do it as well. As it turns out, once you have the script, it's easy to put its code in an upgrade step.)"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:377
msgid "Increment profile version"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:379
msgid "First increase the number of the version in the ``profiles/default/metadata.xml``. This version number should be an integer. Package version are different because they add sens like the status of the addon: is it stable, is it in dev, in beta, which branch it is. A profile version indicate only that you have to migrate data in the database."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:386
msgid "Add upgrade step"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:388
msgid "Next we add an upgrade step:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:410
msgid "You can use a wildcard character for *source* to indicate an upgrade for any previous version. To run the upgrade step only when upgrading from a specific version, use that version's number."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:414
msgid "A *sortkey* can be used to indicate the order in which upgrade steps are run."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:418
msgid "Add upgrade code"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:420
msgid "The code for the upgrade method itself is best placed in a *upgrades.py* module::"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:463
msgid "Other examples of using generic setup to run import steps are below"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:465
msgid "If you want to call types.xml use typeinfo::"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:469
msgid "If you want to call workflow.xml use workflow::"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:473
msgid "The ids of the various default import steps are defined in the import_steps.xml of CMFDefault. visit it at http://svn.zope.org/CMF/branches/2.1/CMFDefault/profiles/default/import_steps.xml?logsort=date&rev=78624&view=markup"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:476
msgid "XXX Fix the link above"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:478
msgid "After restarting Zope, your upgrade step should be visible in the ZMI: The *portal_setup* tool has a tab *Upgrades*. Select your product profile to see which upgrade steps Zope knows about for your product."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:482
msgid "You can create many upgrade steps under one migration. This is useful when you want to have the ability to re-run some parts of the migration and make your code more re-useable (for example cook css resource of your theme)."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:486
msgid "Here is an example of many upgrade steps you can have to achieve on a site policy:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:542
msgid "Add-on product appears twice in the installer list"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:544
msgid "This happens if you are developing your own add-on and keep changing things. You have an error in your add-on product ZCML code which causes portal_quickinstaller to have two entries."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:550
msgid "http://plone.293351.n2.nabble.com/Product-twice-in-quickinstaller-td5345492.html#a5345492"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:553
msgid "Preventing uninstall"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:555
msgid "You might want to prevent your add-on product uninstall for some reason."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:557
#: ../develop/addons/javascript.rst:731
#: ../develop/plone/forms/z3c.form.rst:566
#: ../develop/plone/functionality/expressions.rst:249
#: ../develop/plone/i18n/internationalisation.rst:394
#: ../develop/plone/i18n/internationalisation.rst:407
#: ../develop/plone/misc/annotations.rst:76
#: ../develop/plone/searching_and_indexing/query.rst:709
#: ../develop/plone/security/permissions.rst:264
#: ../develop/plone/syndication.rst:42
msgid "Example:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:571
msgid "This example if for Extensions/install.py, old Plone 2 way of writing installers"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:576
msgid "Plone GenericSetup Reference"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:579
msgid "portlets.xml"
msgstr ""

#: ../../../eggs/plone.app.portlets-3.0.7-py2.7.egg/plone/app/portlets/exportimport/portlets.py:docstring of plone.app.portlets.exportimport.portlets:1
msgid "When creating custom portlet managers, you will need to extend existing portlets to be addable to that manager: ::"
msgstr ""

#: ../../../eggs/plone.app.portlets-3.0.7-py2.7.egg/plone/app/portlets/exportimport/portlets.py:docstring of plone.app.portlets.exportimport.portlets:8
msgid "You can also change the title and description of the portlet with the extend attribute: ::"
msgstr ""

#: ../../../eggs/plone.app.portlets-3.0.7-py2.7.egg/plone/app/portlets/exportimport/portlets.py:docstring of plone.app.portlets.exportimport.portlets:17
msgid "Remove a portlet definition using the 'remove' attribute so that it can no longer be added via @@manage-portlets. This does not remove any assignments: ::"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:584
msgid "viewlets.xml"
msgstr ""

#: ../../../eggs/plone.app.viewletmanager-2.0.8-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:1
msgid "The following examples would all be added into the viewlets.xml file."
msgstr ""

#: ../../../eggs/plone.app.viewletmanager-2.0.8-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:3
msgid "Re-order viewlets::"
msgstr ""

#: ../../../eggs/plone.app.viewletmanager-2.0.8-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:11
msgid "Move a viewlet using insert-before and insert-after (this will only affect the skinname that is specified, in this case 'My Custom Theme')::"
msgstr ""

#: ../../../eggs/plone.app.viewletmanager-2.0.8-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:20
msgid "Hide a viewlet (here we hide the colophon for 'My Custom Theme')::"
msgstr ""

#: ../../../eggs/plone.app.viewletmanager-2.0.8-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:27
msgid "Unhide a specific viewlet using the remove attribute::"
msgstr ""

#: ../../../eggs/plone.app.viewletmanager-2.0.8-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:34
msgid "Unhide all viewlets for a given manager using the purge attribute::"
msgstr ""

#: ../../../eggs/plone.app.viewletmanager-2.0.8-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:39
msgid "Hide a viewlet for all skins::"
msgstr ""

#: ../../../eggs/plone.app.viewletmanager-2.0.8-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:45
msgid "Pro Tip: Using skinname=\"*\" currently only works if the manager has already been registered in each skin (see Plone Trac ticket #7166)"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:589
msgid "cssregistry.xml"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:591
#: ../develop/addons/components/genericsetup.rst:596
#: ../develop/addons/components/genericsetup.rst:601
msgid "see :ref:`resourceregistries`"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:594
msgid "jsregistry.xml"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:599
msgid "kssregistry.xml"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:606
msgid "Resource Registries"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:612
msgid "Content Generation"
msgstr ""

#: ../../../eggs/Products.GenericSetup-1.7.7-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content:1
msgid "Filesystem exporter / importer adapters."
msgstr ""

#: ../../../eggs/Products.GenericSetup-1.7.7-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:1
msgid "Tree-walking exporter / importer for \"folderish\" types."
msgstr ""

#: ../../../eggs/Products.GenericSetup-1.7.7-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:3
msgid "Folderish instances are mapped to directories within the 'structure' portion of the profile, where the folder's relative path within the site corresponds to the path of its directory under 'structure'."
msgstr ""

#: ../../../eggs/Products.GenericSetup-1.7.7-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:7
msgid "The subobjects of a folderish instance are enumerated in the '.objects' file in the corresponding directory.  This file is a CSV file, with one row per subobject, with the following wtructure::"
msgstr ""

#: ../../../eggs/Products.GenericSetup-1.7.7-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:13
msgid "Subobjects themselves are represented as individual files or subdirectories within the parent's directory."
msgstr ""

#: ../../../eggs/Products.GenericSetup-1.7.7-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter.export:1
#: ../../../eggs/Products.GenericSetup-1.7.7-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter.listExportableItems:1
msgid "See IFilesystemExporter."
msgstr ""

#: ../../../eggs/Products.GenericSetup-1.7.7-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter.import_:1
msgid "See IFilesystemImporter."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:619
msgid "Generic Setup files"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:622
msgid "sharing.xml"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:624
msgid "The sharing.xml file let you add custom roles to the sharing tab. For reference, visit: :doc:`Local Roles </develop/plone/security/local_roles>`."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:628
msgid "tinymce.xml"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:631
msgid "propertiestool.xml"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:632
msgid "In the propertiestool.xml you can change all values of the portal_properties."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:634
msgid "take a look at: https://plone.org/documentation/manual/developer-manual/generic-setup/reference/properties-ref"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:637
msgid "metadata.xml"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:640
msgid "actions.xml"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:643
msgid "skins.xml"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:646
msgid "workflows.xml"
msgstr ""

#: ../../../eggs/Products.DCWorkflow-2.2.4-py2.7.egg/Products/DCWorkflow/exportimport.py:docstring of Products.DCWorkflow.exportimport:1
msgid "DCWorkflow export / import support."
msgstr ""

#: ../../../eggs/Products.DCWorkflow-2.2.4-py2.7.egg/Products/DCWorkflow/exportimport.py:docstring of Products.DCWorkflow.exportimport:3
msgid "$Id: exportimport.py 121521 2011-05-03 13:13:36Z erico_andrei $"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:651
msgid "repositorytool.xml"
msgstr ""

#: ../../../eggs/Products.CMFEditions-2.2.14-py2.7.egg/Products/CMFEditions/exportimport/repository.py:docstring of Products.CMFEditions.exportimport.repository.RepositoryToolXMLAdapter:1
msgid "Mode in- and exporter for RepositoryTool."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:657
msgid "contentrules.xml"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:663
msgid "pluginregistry.xml"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:665
msgid "This configures PAS plugin orderings and active plugins. It isn't part of Plone itself, it is used by other frameworks and can be used in Plone with a little extra configuration."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:669
msgid "First, you need a monkey patch in your ``__init__.py``` to point the importer at where Plone keeps its PAS plugins."
msgstr ""

#: ../develop/addons/components/genericsetup.rst:683
msgid "Secondly, code to handle the import step needs to be activated in Plone:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:694
msgid "Now you can use ``pluginregistry.xml`` in your generic setup profiles:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:741
msgid "Best Practices"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:743
msgid "When importing items such as property sheets, make sure not to override other profile settings by setting the purge attribute to False. This will add the items listed to the property instead of resetting the property. Example:"
msgstr ""

#: ../develop/addons/components/genericsetup.rst:755
msgid "Only use the configuration that you need. When you export your site's configuration, it will include things that you don't need. For example, if you needed to change only the 'Allow anonymous to view about' property, this is what your propertiestool.xml would look like:"
msgstr ""

#: ../develop/addons/components/index.rst:3
msgid "Component architecture"
msgstr ""

#: ../develop/addons/components/index.rst:8
msgid "Plone logic is wired together by Zope 3 component architecture. It provides \"enterprise business logic\" engine for Plone."
msgstr ""

#: ../develop/addons/components/index.rst:11
msgid "The architecture provides pluggable system :doc:`interfaces </develop/addons/components/interfaces>`, adapters, utilities and registries. The wiring of components is done on XML based language called :doc:`ZCML </develop/addons/components/zcml>`."
msgstr ""

#: ../develop/addons/components/index.rst:17
msgid "Database drops using Generic setup"
msgstr ""

#: ../develop/addons/components/index.rst:19
msgid "Zope 3 components act on Python codebase level which is shared by all sites in the same Zope application server process. When you install new add-ons to Plone site, the add-ons modify the site database using :doc:`GenericSetup </develop/addons/components/genericsetup>` framework. GenericSetup is mostly visible as */profiles/default* folder and its XML files in your add-on."
msgstr ""

#: ../develop/addons/components/index.rst:28
msgid "http://www.muthukadan.net/docs/zca.html"
msgstr ""

#: ../develop/addons/components/interfaces.rst:3
msgid "Interfaces"
msgstr ""

#: ../develop/addons/components/interfaces.rst:10
msgid "Interfaces define what methods an object provides. Plone extensively uses interfaces to define APIs between different subsystems. They provide a more consistent and declarative way to define bridges between two different things, when duck-typing is not enough."
msgstr ""

#: ../develop/addons/components/interfaces.rst:16
msgid "An interface defines the shape of a hole where different pieces fit. The shape of the piece is defined by the interface, but the implementation details like color, material, etc. can vary."
msgstr ""

#: ../develop/addons/components/interfaces.rst:20
msgid "See `zope.interface package README <https://pypi.python.org/pypi/zope.interface>`_."
msgstr ""

#: ../develop/addons/components/interfaces.rst:23
msgid "Common interfaces"
msgstr ""

#: ../develop/addons/components/interfaces.rst:25
msgid "Some interfaces are commonly used throughout Plone."
msgstr ""

#: ../develop/addons/components/interfaces.rst:27
msgid "The usual use case is that a :doc:`context directive for a view </develop/plone/views/browserviews>` is provided, specifying where the view is available (e.g. for which content types)."
msgstr ""

#: ../develop/addons/components/interfaces.rst:33
msgid "Base class of all interfaces. Also used as a ``*`` wildcard when registering views, meaning that the view applies on every object."
msgstr ""

#: ../develop/addons/components/interfaces.rst:37
msgid "All *content* items on the site. In the site root, this interface excludes Zope objects like ``acl_users`` (the user folder) and ``portal_skins`` which might otherwise appear in the item listing when you iterate through the root content."
msgstr ""

#: ../develop/addons/components/interfaces.rst:44
msgid "``Products.CMFCore.interfaces.IFolderish``"
msgstr ""

#: ../develop/addons/components/interfaces.rst:44
msgid "All *folders* in the site."
msgstr ""

#: ../develop/addons/components/interfaces.rst:47
msgid "``Products.CMFCore.interfaces.ISiteRoot``"
msgstr ""

#: ../develop/addons/components/interfaces.rst:47
msgid "The Plone site root object."
msgstr ""

#: ../develop/addons/components/interfaces.rst:53
msgid "``plone.app.layout.navigation.interfaces import INavigationRoot``"
msgstr ""

#: ../develop/addons/components/interfaces.rst:50
msgid "Navigation top object - where the breadcrumbs are anchored. On multilingual sites, this is the top-level folder for the current language."
msgstr ""

#: ../develop/addons/components/interfaces.rst:56
msgid "Implementing one or multiple interfaces"
msgstr ""

#: ../develop/addons/components/interfaces.rst:58
msgid "Use ``zope.interface.implements()`` in your class body. Multiple interfaces can be provided as arguments."
msgstr ""

#: ../develop/addons/components/interfaces.rst:73
msgid "Removing parent class interface implementations"
msgstr ""

#: ../develop/addons/components/interfaces.rst:75
msgid "``implementsOnly()`` redeclares all inherited interface implementations. This is useful if you, for example, want to make :doc:`z3c.form </develop/plone/forms/z3c.form>` widget bindings more accurate."
msgstr ""

#: ../develop/addons/components/interfaces.rst:85
msgid "Checking whether object provides an interface"
msgstr ""

#: ../develop/addons/components/interfaces.rst:88
msgid "``providedBy``"
msgstr ""

#: ../develop/addons/components/interfaces.rst:90
msgid "In Python you can use code::"
msgstr ""

#: ../develop/addons/components/interfaces.rst:100
msgid "``plone_interface_info``"
msgstr ""

#: ../develop/addons/components/interfaces.rst:102
msgid "In page templates you can use ``plone_interface_info`` helper view::"
msgstr ""

#: ../develop/addons/components/interfaces.rst:112
msgid "https://github.com/plone/plone.app.layout/blob/master/plone/app/layout/globals/interface.py"
msgstr ""

#: ../develop/addons/components/interfaces.rst:116
msgid "Interface resolution order"
msgstr ""

#: ../develop/addons/components/interfaces.rst:118
msgid "Interface resolution order (IRO) is the list of interfaces provided by the object (directly, or implemented by a class), sorted by priority."
msgstr ""

#: ../develop/addons/components/interfaces.rst:121
msgid "Interfaces are evaluated from zero index (highest priority) to the last index (lowest priority)."
msgstr ""

#: ../develop/addons/components/interfaces.rst:124
msgid "You can access this information for the object for debugging purposes using a magical attribute::"
msgstr ""

#: ../develop/addons/components/interfaces.rst:131
msgid "Since adapter factories are *dynamic* (adapter interfaces not hardcoded on the object), the object can still adapt to interfaces which are not listed in ``__iro__``."
msgstr ""

#: ../develop/addons/components/interfaces.rst:137
msgid "Getting interface string id"
msgstr ""

#: ../develop/addons/components/interfaces.rst:139
msgid "The interface id is stored in the ``__identifier__`` attribute."
msgstr ""

#: ../develop/addons/components/interfaces.rst:141
msgid "Example file ``yourpackage/interfaces.py``::"
msgstr ""

#: ../develop/addons/components/interfaces.rst:152
msgid "Note that this attribute does not respect import aliasing."
msgstr ""

#: ../develop/addons/components/interfaces.rst:154
msgid "Example: ``Products.ATContentTypes.interfaces.IATDocument.__identifier__`` is ``Products.ATContentTypes.interfaces.document.IATDocument``."
msgstr ""

#: ../develop/addons/components/interfaces.rst:158
msgid "Getting interface class by its string id"
msgstr ""

#: ../develop/addons/components/interfaces.rst:160
msgid "Use the `zope.dottedname`_ package."
msgstr ""

#: ../develop/addons/components/interfaces.rst:176
msgid "Applying interfaces for several content types"
msgstr ""

#: ../develop/addons/components/interfaces.rst:178
msgid "You can apply marker interfaces to content types at any time."
msgstr ""

#: ../develop/addons/components/interfaces.rst:180
msgid "Example use cases:"
msgstr ""

#: ../develop/addons/components/interfaces.rst:182
msgid "You want to assign a viewlet to a set of particular content types."
msgstr ""

#: ../develop/addons/components/interfaces.rst:184
msgid "You want to enable certain behavior on certain content types."
msgstr ""

#: ../develop/addons/components/interfaces.rst:188
msgid "A marker interface is needed only when you need to create a common nominator for several otherwise unrelated classes. You can use one existing class or interface as a context without explicitly creating a marker interface. Places accepting ``zope.interface.Interface`` as a context usually accept a normal Python class as well (``isinstance`` behavior)."
msgstr ""

#: ../develop/addons/components/interfaces.rst:195
msgid "You can assign the marker interface for several classes in ZCML using a ``<class>`` declaration. Here we're assigning ``ILastModifiedSupport`` to documents, events and news items:"
msgstr ""

#: ../develop/addons/components/interfaces.rst:215
msgid "Then we can have a view for these content types only using the following::"
msgstr ""

#: ../develop/addons/components/interfaces.rst:219
msgid "from Products.Five import BrowserView from interfaces import ILastModifiedSupport from plone.app.layout.viewlets.interfaces import IBelowContent"
msgstr ""

#: ../develop/addons/components/interfaces.rst:225
msgid "class LastModified(BrowserView):"
msgstr ""

#: ../develop/addons/components/interfaces.rst:224
msgid "\"\"\" View for .interfaces.ILastModifiedSupport only \"\"\""
msgstr ""

#: ../develop/addons/components/interfaces.rst:236
msgid "Related:"
msgstr ""

#: ../develop/addons/components/interfaces.rst:238
msgid "`zope.dottedname`_ allows you to resolve dotted names to Python objects manually"
msgstr ""

#: ../develop/addons/components/interfaces.rst:242
msgid "Dynamic marker interfaces"
msgstr ""

#: ../develop/addons/components/interfaces.rst:244
msgid "Zope allows to you to dynamically turn on and off interfaces on any content objects through the :term:`ZMI`. Browse to any object and visit the :guilabel:`Interfaces` tab."
msgstr ""

#: ../develop/addons/components/interfaces.rst:248
msgid "Marker interfaces might need to be explicitly declared using the :term:`ZCML` ``<interface>`` directive, so that Zope can find them:"
msgstr ""

#: ../develop/addons/components/interfaces.rst:258
msgid "The interface dotted name must refer directly to the interface class and not to an import from other module, like ``__init__.py``."
msgstr ""

#: ../develop/addons/components/interfaces.rst:262
msgid "Setting dynamic marker interfaces programmatically"
msgstr ""

#: ../develop/addons/components/interfaces.rst:264
msgid "Use the ``mark()`` function from `Products.Five`_."
msgstr ""

#: ../develop/addons/components/interfaces.rst:274
msgid "This marking persists with the object: it is not temporary."
msgstr ""

#: ../develop/addons/components/interfaces.rst:276
msgid "Under the hood: ``mark()`` delegates to ``zope.interface.directlyProvides()`` |---| with the result that a persistent object (e.g. content item) has a reference to the interface class you mark it with in its ``__provides__`` attribute; this attribute is serialized and loaded by ZODB like any other reference to a class, and `zope.interface`_ uses object specification descriptor magic (just like it does for any other object, persistent or not) to resolve provided interfaces."
msgstr ""

#: ../develop/addons/components/interfaces.rst:287
msgid "To remove a marker interface from an object, use the ``erase()`` function from `Products.Five`_."
msgstr ""

#: ../develop/addons/components/interfaces.rst:298
msgid "Tagged values"
msgstr ""

#: ../develop/addons/components/interfaces.rst:300
msgid "Tagged values are arbitrary metadata you can stick on ``zope.interface.Interface`` subclasses. For example, the `plone.autoform`_ package uses them to set form widget hints for `zope.schema`_ data model declarations."
msgstr ""

#: ../develop/addons/components/utilities.rst:3
msgid "Utilities"
msgstr ""

#: ../develop/addons/components/utilities.rst:7
msgid "Utility design pattern in Zope 3 allows easily overridable singleton class instances for your code."
msgstr ""

#: ../develop/addons/components/utilities.rst:15
msgid "Utility classes provide site-wide utility functions."
msgstr ""

#: ../develop/addons/components/utilities.rst:17
msgid "They are registered by marker interfaces."
msgstr ""

#: ../develop/addons/components/utilities.rst:19
msgid "Site customization logic or add-on products can override utilities for enhanced or modified functionality"
msgstr ""

#: ../develop/addons/components/utilities.rst:22
msgid "Utilities can be looked up by name or interface"
msgstr ""

#: ../develop/addons/components/utilities.rst:24
msgid "Compared to \"plain Python functions\", utilities provide the advantage of being plug-in points without need of :doc:`monkey-patching </develop/plone/misc/monkeypatch>`."
msgstr ""

#: ../develop/addons/components/utilities.rst:28
msgid "Read more in"
msgstr ""

#: ../develop/addons/components/utilities.rst:30
msgid "`zope.component documentation <http://docs.zope.org/zope.component/>`_."
msgstr ""

#: ../develop/addons/components/utilities.rst:33
msgid "Local and global utilities"
msgstr ""

#: ../develop/addons/components/utilities.rst:35
msgid "Utilities can be"
msgstr ""

#: ../develop/addons/components/utilities.rst:37
msgid "*global* - registered during Zope start-up"
msgstr ""

#: ../develop/addons/components/utilities.rst:39
msgid "*local* - registered during add-on installer for a certain site/content item"
msgstr ""

#: ../develop/addons/components/utilities.rst:41
msgid "Local utilities are registered to persistent objects. The context of local utilities is stored in a thread-local variable which is set during traversal. Thus, when you ask for local utilities, they usually come from a persistent registry set up in the Plone site root object."
msgstr ""

#: ../develop/addons/components/utilities.rst:46
msgid "Global utilities are registered in ZCML and affect all Zope application server and Plone site instances."
msgstr ""

#: ../develop/addons/components/utilities.rst:49
msgid "Some hints::"
msgstr ""

#: ../develop/addons/components/utilities.rst:55
msgid "Registering a global utility"
msgstr ""

#: ../develop/addons/components/utilities.rst:57
msgid "A utility is constructed when Plone is started and ZCML is read. Utilities take no constructor parameters. If you need to use parameters like context or request, consider using views or adapters instead. Utilities may or may not have a name."
msgstr ""

#: ../develop/addons/components/utilities.rst:62
msgid "A utility can be provided by a function: the function is called and it returns the utility object."
msgstr ""

#: ../develop/addons/components/utilities.rst:65
msgid "A utility can be provided by a class: the class ``__call__()`` method itself acts as an factory and returns a new class instance."
msgstr ""

#: ../develop/addons/components/utilities.rst:68
msgid "ZCML example:"
msgstr ""

#: ../develop/addons/components/utilities.rst:79
msgid "Python example (named utility)::"
msgstr ""

#: ../develop/addons/components/utilities.rst:89
msgid "The utility class \"factory\" is in its simplest form a class which implements the interface::"
msgstr ""

#: ../develop/addons/components/utilities.rst:102
msgid "Class is constructed / factory is run during the ZCML initialization."
msgstr ""

#: ../develop/addons/components/utilities.rst:104
msgid "To use this class::"
msgstr ""

#: ../develop/addons/components/utilities.rst:113
msgid "Registering a local utility"
msgstr ""

#: ../develop/addons/components/utilities.rst:115
msgid "https://plone.org/documentation/manual/developer-manual/generic-setup/reference/component-registry"
msgstr ""

#: ../develop/addons/components/utilities.rst:117
msgid "http://davisagli.com/blog/registering-add-on-specific-components-using-z3c.baseregistry"
msgstr ""

#: ../develop/addons/components/utilities.rst:119
msgid "https://pypi.python.org/pypi/z3c.baseregistry"
msgstr ""

#: ../develop/addons/components/utilities.rst:123
msgid "Local utilities may be destroyed when the add-on product that provides them is reinstalled. Do not use them to store any data."
msgstr ""

#: ../develop/addons/components/utilities.rst:127
msgid "http://markmail.org/thread/twuhyldgyje7p723"
msgstr ""

#: ../develop/addons/components/utilities.rst:130
msgid "Overriding utility"
msgstr ""

#: ../develop/addons/components/utilities.rst:132
msgid "If you want to override any existing utility you can re-register the utility in the ``overrides.zcml`` file in your product."
msgstr ""

#: ../develop/addons/components/utilities.rst:136
msgid "Getting a utility"
msgstr ""

#: ../develop/addons/components/utilities.rst:138
msgid "There are two functions:"
msgstr ""

#: ../develop/addons/components/utilities.rst:141
msgid "``zope.component.getUtility``"
msgstr ""

#: ../develop/addons/components/utilities.rst:141
msgid "will raise an exception if the utility is not found."
msgstr ""

#: ../develop/addons/components/utilities.rst:144
msgid "``zope.component.queryUtility``"
msgstr ""

#: ../develop/addons/components/utilities.rst:144
msgid "will return ``None`` if the utility is not found."
msgstr ""

#: ../develop/addons/components/utilities.rst:146
msgid "Utility query parameters are passed to the utility class constructor."
msgstr ""

#: ../develop/addons/components/utilities.rst:158
msgid "You cannot use ``getUtility()`` on Python module level code during import, as the Zope Component Architecture is not yet initialized at that time. Always call ``getUtility()`` from an HTTP request end point or after Zope has been started."
msgstr ""

#: ../develop/addons/components/utilities.rst:164
msgid "Query local + global utilities:"
msgstr ""

#: ../develop/addons/components/utilities.rst:166
msgid "``zope.component.queryUtility()`` for local utilities, with global fallback."
msgstr ""

#: ../develop/addons/components/utilities.rst:168
msgid "Query only global utilities::"
msgstr ""

#: ../develop/addons/components/utilities.rst:176
msgid "Due to Zope component architecture initialization order, you cannot call ``getUtility()`` in module-level Python code. Module-level Python code is run when the module is being imported, and Zope components are not yet set up at this point."
msgstr ""

#: ../develop/addons/components/utilities.rst:182
msgid "Getting all named utilities of one interface"
msgstr ""

#: ../develop/addons/components/utilities.rst:184
msgid "Use ``zope.component.getUtilitiesFor()``."
msgstr ""

#: ../develop/addons/components/utilities.rst:203
msgid "Unregistering utilities"
msgstr ""

#: ../develop/addons/components/utilities.rst:205
msgid "http://www.muthukadan.net/docs/zca.html#unregisterutility"
msgstr ""

#: ../develop/addons/components/utilities.rst:208
msgid "Removing persistent local utilities"
msgstr ""

#: ../develop/addons/components/utilities.rst:210
msgid "https://plone.org/documentation/kb/manually-removing-local-persistent-utilities"
msgstr ""

#: ../develop/addons/components/utilities.rst:211
msgid "http://blog.fourdigits.nl/removing-a-persistent-local-utility"
msgstr ""

#: ../develop/addons/components/utilities.rst:212
msgid "http://blog.fourdigits.nl/removing-a-persistent-local-utility-part-ii"
msgstr ""

#: ../develop/addons/components/zcml.rst:3
#: ../develop/plone/misc/slideshow.rst:395
msgid "ZCML"
msgstr ""

#: ../develop/addons/components/zcml.rst:7
msgid "What Plone programmers should know about ZCML."
msgstr ""

#: ../develop/addons/components/zcml.rst:14
msgid ":term:`ZCML` stands for the *Zope Configuration Mark-up Language*.  It is an XML-based language used to extend and plug into systems based on the Zope Component Architecture (:term:`ZCA`)."
msgstr ""

#: ../develop/addons/components/zcml.rst:18
msgid "It provides:"
msgstr ""

#: ../develop/addons/components/zcml.rst:20
msgid "conflict resolution (e.g. two plug-ins cannot overlap);"
msgstr ""

#: ../develop/addons/components/zcml.rst:21
msgid "extensible syntax based on namespaces."
msgstr ""

#: ../develop/addons/components/zcml.rst:23
msgid "Downsides of ZCML are:"
msgstr ""

#: ../develop/addons/components/zcml.rst:25
msgid "it is cumbersome to write by hand;"
msgstr ""

#: ../develop/addons/components/zcml.rst:26
msgid "lack of end-user documentation."
msgstr ""

#: ../develop/addons/components/zcml.rst:28
msgid "Plone uses ZCML to:"
msgstr ""

#: ../develop/addons/components/zcml.rst:30
msgid "register components with various places in the system, both core and add-ons."
msgstr ""

#: ../develop/addons/components/zcml.rst:35
msgid "Everything you can do in ZCML can also be done in Python code."
msgstr ""

#: ../develop/addons/components/zcml.rst:38
#: ../develop/plone/content/creating.rst:491
#: ../develop/plone/content/uid.rst:79
#: ../develop/plone/functionality/portlets.rst:529
#: ../develop/plone/searching_and_indexing/query.rst:1082
#: ../develop/plone/security/permission_lists.rst:93
#: ../develop/plone/serving/traversing.rst:444
#: ../develop/plone/views/browserviews.rst:150
#: ../develop/plone/views/browserviews.rst:856
msgid "More info:"
msgstr ""

#: ../develop/addons/components/zcml.rst:40
msgid "`ZCML reference <http://docs.zope.org/zope3/ZCML/@@staticmenu.html>`_ (does not include Plone specific directives)"
msgstr ""

#: ../develop/addons/components/zcml.rst:42
msgid "http://docs.zope.org/zopetoolkit/codingstyle/zcml-style.html"
msgstr ""

#: ../develop/addons/components/zcml.rst:45
msgid "ZCML workflow"
msgstr ""

#: ../develop/addons/components/zcml.rst:47
msgid "Each Plone component (core, add-on) has a base ``configure.zcml`` in the package root.  This :term:`ZCML` file can include additional nested configuration files using the ``<include>`` directive."
msgstr ""

#: ../develop/addons/components/zcml.rst:51
msgid "ZCML is always interpreted during Plone start-up."
msgstr ""

#: ../develop/addons/components/zcml.rst:53
msgid "Your :doc:`unit test </manage/deploying/testing_tuning/testing_and_debugging/unit_testing>` may need to manually include ZCML."
msgstr ""

#: ../develop/addons/components/zcml.rst:56
msgid ":doc:`Funny exception error messages occur if Plone is started in the production mode and ZCML was not properly read for all the packages </manage/troubleshooting/exceptions>`"
msgstr ""

#: ../develop/addons/components/zcml.rst:60
msgid "When Plone is started all ZCML files are read."
msgstr ""

#: ../develop/addons/components/zcml.rst:62
msgid "New way: Python egg ``setup.py`` file contains a `autoinclude <https://plone.org/products/plone/roadmap/247>`_ hint and is picked up automatically when all the packages are scanned."
msgstr ""

#: ../develop/addons/components/zcml.rst:66
msgid "Old way: ZCML reference must be manually added to the ``zcml = section`` in ``buildout.cfg``"
msgstr ""

#: ../develop/addons/components/zcml.rst:69
msgid "If ZCML contains errors :doc:`Plone does not start up in the foreground </manage/troubleshooting/basic>`"
msgstr ""

#: ../develop/addons/components/zcml.rst:73
msgid "Overrides"
msgstr ""

#: ../develop/addons/components/zcml.rst:75
msgid "Besides layer overrides, ZCML provides more hardcore ways to override things in buildout. These overrides can also override utilities etc. and overrides take effect during ZCML parsing, not when site is run."
msgstr ""

#: ../develop/addons/components/zcml.rst:80
msgid "Create ``overrides.zcml`` file in your egg to the same folder as ``configure.zcml``"
msgstr ""

#: ../develop/addons/components/zcml.rst:82
msgid "Syntax is 100% same as in ``configure.zcml``"
msgstr ""

#: ../develop/addons/components/zcml.rst:84
msgid "Restart Plone."
msgstr ""

#: ../develop/addons/components/zcml.rst:88
msgid "Before Plone 3.3, ZCML directives could not be automatically picked up from eggs. To make Plone pick up the directions in ``overrides.zcml``, you'd have to add this line in ``buildout.cfg``::"
msgstr ""

#: ../develop/addons/components/zcml.rst:96
msgid "Since Plone 3.3, the ``z3c.autoinclude`` plugin can do this (https://plone.org/products/plone/roadmap/247/)."
msgstr ""

#: ../develop/addons/components/zcml.rst:101
msgid "Specify files and code from another package"
msgstr ""

#: ../develop/addons/components/zcml.rst:103
msgid "If you ever find yourself needing to use a template from another package, you can do so with using the configure tag which will then run the block of :term:`ZCML` in the context of that package."
msgstr ""

#: ../develop/addons/components/zcml.rst:108
msgid "Here's an example of overriding the :term:`BrowserView` 'folder_contents'. It is defined in package ``plone.app.content`` in directory ``browser`` with this :term:`ZCML` statement::"
msgstr ""

#: ../develop/addons/components/zcml.rst:120
msgid "In your own package ``my.package``, you want to override the class, but keep the template. Assuming you created a class ``MyFolderContentsView`` inside ``foldercontents.py`` in the ``browser`` directory of your package, add this :term:`ZCML` statement::"
msgstr ""

#: ../develop/addons/components/zcml.rst:143
msgid "Basically, you re-define the :term:`BrowserView` in the context of its original package, so that the relative path to the template stays valid. But using the full path in dotted notation, you can let it point to your own class."
msgstr ""

#: ../develop/addons/components/zcml.rst:150
msgid "Conditionally run ZCML"
msgstr ""

#: ../develop/addons/components/zcml.rst:152
msgid "You can conditionally run :term:`ZCML` if a certain package or feature is installed."
msgstr ""

#: ../develop/addons/components/zcml.rst:155
msgid "First, include the namespace at the top of the :term:`ZCML` file::"
msgstr ""

#: ../develop/addons/components/zcml.rst:166
msgid "conditionally run for package::"
msgstr ""

#: ../develop/addons/components/zcml.rst:171
msgid "conditionally run for feature::"
msgstr ""

#: ../develop/addons/helloworld/environment/index.rst:3
msgid "Build development environment"
msgstr ""

#: ../develop/addons/helloworld/environment/index.rst:7
#: ../develop/addons/helloworld/environment/plone.rst:7
#: ../develop/addons/helloworld/environment/python.rst:7
#: ../develop/addons/helloworld/environment/virtualenv.rst:7
#: ../develop/addons/helloworld/extend/addon.rst:7
#: ../develop/addons/helloworld/extend/content.rst:7
#: ../develop/addons/helloworld/extend/files.rst:7
#: ../develop/addons/helloworld/extend/form.rst:7
#: ../develop/addons/helloworld/extend/index.rst:7
#: ../develop/addons/helloworld/extend/view.rst:7
#: ../develop/addons/helloworld/index.rst:7
#: ../develop/addons/helloworld/intro.rst:7
#: ../develop/addons/helloworld/todo.rst:7
msgid "A simple tutorial introducing the basics of Plone development."
msgstr ""

#: ../develop/addons/helloworld/environment/index.rst:16
msgid "In this tutorial, we build a Python development environment suitable for Plone. The environment should also be useful for any other Python development projects you have."
msgstr ""

#: ../develop/addons/helloworld/environment/index.rst:18
msgid "In these examples, the **python_dev** directory contains our entire development environment. This makes the examples easier, but may not work for everyone. You may need to adapt these examples to fit your situation."
msgstr ""

#: ../develop/addons/helloworld/environment/index.rst:20
msgid "There are 3 main steps in building our development environment; build Python 2.7, create a virtual_env, and install Plone. These correspond to 3 directories in our development environment:"
msgstr ""

#: ../develop/addons/helloworld/environment/index.rst:22
msgid "**buildout.python** sits inside *python_dev*. It contains our build of Python 2.7"
msgstr ""

#: ../develop/addons/helloworld/environment/index.rst:23
msgid "**env-27** sits inside *python_dev*. It is our virtual_env."
msgstr ""

#: ../develop/addons/helloworld/environment/index.rst:24
msgid "**hello_world** is our Plone installation. It sits inside *env-27*."
msgstr ""

#: ../develop/addons/helloworld/environment/index.rst:26
msgid "The *python_dev* directory can sit anywhere on your filesystem that makes sense."
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:3
msgid "Install Plone"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:11
msgid "Now that we have a virtual_env, we can move on the to third step of our process; installing Plone. First, we need to install ZopeSkel."
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:15
#: ../develop/addons/helloworld/extend/addon.rst:17
#: ../develop/addons/helloworld/extend/content.rst:20
#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:15
#: ../develop/plone/content/types.rst:85
#: ../develop/plone/functionality/portlets.rst:38
msgid "Using paster is deprecated instead you should use :doc:`bobtemplates.plone </develop/addons/bobtemplates.plone/README>`"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:18
#: ../develop/addons/helloworld/extend/addon.rst:20
#: ../develop/addons/helloworld/extend/content.rst:15
#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:18
#: ../develop/plone/content/types.rst:146
#: ../develop/plone/functionality/portlets.rst:49
msgid "Use :doc:`bobtemplates.plone </develop/addons/bobtemplates.plone/README>` instead"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:22
#: ../develop/plone/content/types.rst:94
msgid "Install ZopeSkel"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:24
msgid "ZopeSkel simplifies the process of setting up Plone development."
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:26
msgid "The Plone community is transitioning between ZopeSkel 2.21.2 and a major rewrite currently at 3.0b3. Currently, the Plone installers use version 2.21.2. (August 2012) For more information about ZopeSkel see the `Bootstrapping Plone add-on development <http://docs.plone.org/4/en/develop/addons/paste.html>`_ section of this manual."
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:28
msgid "We will install ZopeSkel 2.21.2 in our virtual_env and and use it to install Plone."
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:30
msgid "Install ZopeSkel 2.21.2.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:36
msgid "This adds some files to the bin directory, including **zopeskel**.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:58
msgid "Install Plone using ZopeSkel"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:60
msgid "ZopeSkel uses templates to build structure for Python, Zope and Plone projects. Here, we use the **plone4_buildout** template to create a Plone 4 buildout in the **hello_world** directory."
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:62
msgid "Create the Plone 4 buildout with zopeskel.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:66
msgid "ZopeSkel displays some information and then asks what version of Plone we want to install. We want 4.2.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:70
msgid "The tutorial sometimes refers to the hello_world directory as the **buildout directory**. It contains the **buildout.cfg** file.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:87
msgid "Bootstrap the system with the Python included in our virtual_env.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:93
msgid "The bootstrap process creates some directories and adds a buildout script to the bin directory.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:110
msgid "Run buildout to install Plone. This can take a while.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:114
msgid "Buildout uses **recipes** that tell it what to install. These recipes can specify the versions of modules they need. Buildout picks a version when one is not specified. It keeps track of these **picked versions** and displays them when it is finished. You can add these to the [versions] section of buildout.cfg to pin them. This gives you a known good set you can work from, allowing you to rerun buildout in the future or on a different machine, and know you have the same environment.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:131
msgid "Notice that the Plone buildout installed ZopeSkel 3.0b3 for us. It is installed in the bin directory. We now have access to both versions of ZopeSkel; 2.21.2 in our virtual_env, and 3.0b3 in our Plone installation.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:144
msgid "Also notice the script named **instance**. Use this script to start, stop and restart Plone.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:150
msgid "You can also start Plone in foreground mode. This prints log messages to your terminal which is nice during development.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:154
msgid "You can always look at the event log directly. It should be located at *var/log/instance.log*. You can watch it using the tail command.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:158
msgid "You can access the Plone site in your browser at::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:162
msgid "The first time you access the site, you will need to click on the *Create a new Plone site* button to perform some initialization."
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:166
msgid "You'll be presented with a form titled **Create a Plone site**. Keep the defaults for now, and click on the *Create Plone Site* button at the bottom. After a few moments, you should see the Home page of your site."
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:173
msgid "Quick Review"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:175
msgid "Before moving on, lets review what our directory structure lools like. Inside the *python_dev* directory we have *buildout.python* and *env-27*."
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:177
msgid "Inside *env-27* we have the **hello_world** directory, our Plone installation. Called the **buildout_directory**, it has the **buildout.cfg** file, and a script in the bin directory named **instance** used to start and stop Plone."
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:184
#: ../develop/addons/helloworld/environment/virtualenv.rst:55
msgid "Now that we have our virtual_env, we won't use *buildout.python* again for these examples. However, you can return there later to create new virtual environments for other Python projects.::"
msgstr ""

#: ../develop/addons/helloworld/environment/plone.rst:189
#: ../develop/addons/helloworld/environment/virtualenv.rst:60
msgid "You can also build the versions of Python that we skipped in the Build Python section above, and then use them to build new Python virtual_envs.::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:3
msgid "Build Python"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:12
msgid "The first thing we need to do is build Python."
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:14
msgid "**Buildout** is a tool to manage a software build. It uses configurations so you can always reproduce the same environment. In these examples, we use it to manage both our Python and Plone builds."
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:16
msgid "For our buildout configuration, we will use **buildout.python**. It is a project on github that maintains configurations for building different versions of Python. We will use it to build Python 2.7."
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:18
msgid "Create a directory for your development environment if you don't already have one, and make it your working directory.::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:23
msgid "Get buildout.python from github."
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:25
msgid "If you have git, you can clone the buildout.python repository.::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:29
msgid "You can also download buildout.python from their web interface. Open https://github.com/collective/buildout.python in your browser, and click on the **Downloads** link on the right hand side."
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:33
msgid "On the next page, click on **Download as zip** or **Download as tar.gz** to download the buildout files. When the download is complete, uncompress the file and rename the resulting directory to **buildout.python**."
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:35
msgid "Whether you cloned with git or downloaded from the webiste, you should end up with a directory named **buildout.python** that contains these items.::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:47
msgid "Bootstrap buildout.python with your system Python.::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:53
msgid "This creates the *bin*, *parts*, *eggs*, and *develop-eggs* directories and adds the *buildout* binary to the bin directory.::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:72
msgid "The current version of buildout.python builds Python 2.4, 2.5, 2.6, 2.7, 3.2 and 3.3. This can take a long time. We only need Python 2.7."
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:74
msgid "We can keep buildout from building the other versions by commenting them out in the buildout.cfg file. We do this by adding a **#** to the beginning of a line we want buildout to ignore."
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:76
msgid "To only build Python 2.7, open the **buildout.cfg** file in a text editor,  comment out the other versions in both extends and parts sections, and save your changes.::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:104
msgid "Run buildout to build Python.::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:108
msgid "This creates a new python-2.7 directory containing it's own binaries, libraries and include files.::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:150
msgid "Buildout also creates the **virtualenv-2.7** script in the bin directory. We will use the *virtualenv-2.7* script in the next tutorial.::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:161
msgid "You can build any of the other versions of Python by uncommenting their lines in the *buidout.cfg* file,::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:188
msgid "and rerunning buildout.::"
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:192
msgid "It just takes a while."
msgstr ""

#: ../develop/addons/helloworld/environment/python.rst:197
msgid "If you have trouble running buildout, you may need to run the bootstrap step above with the 1.4.4 version.::"
msgstr ""

#: ../develop/addons/helloworld/environment/virtualenv.rst:3
msgid "Create a virtual_env"
msgstr ""

#: ../develop/addons/helloworld/environment/virtualenv.rst:11
msgid "Now that we have a clean install of Python 2.7 we can move on to the second step in our process, creating the virtual_env."
msgstr ""

#: ../develop/addons/helloworld/environment/virtualenv.rst:13
msgid "Use the virtualenv script from the Build Python section above, create our virtual_env directory.::"
msgstr ""

#: ../develop/addons/helloworld/environment/virtualenv.rst:19
msgid "This creates the env-27 directory.::"
msgstr ""

#: ../develop/addons/helloworld/environment/virtualenv.rst:26
msgid "The virtual_env has its own Python bin, include and lib directories.::"
msgstr ""

#: ../develop/addons/helloworld/environment/virtualenv.rst:34
msgid "In the bin directory, the virtual_env has 2 copies of Python 2.7; **python** and **python2.7**. It also has easy_install and pip, to install Python packages.::"
msgstr ""

#: ../develop/addons/helloworld/environment/virtualenv.rst:51
msgid "The bin directory also has an **activate** script you can use to isolate your commands within your virtual_env. It modifies your $PATH so its first entry is the virtualenv's bin/ directory"
msgstr ""

#: ../develop/addons/helloworld/environment/virtualenv.rst:65
msgid "For more information about virtualenv, see the `virtualenv documentation <http://www.virtualenv.org/en/latest/index.html>`_ ."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:3
msgid "Create an add-on package"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:11
msgid "Before extending Plone, we need to create an add-on package to hold our changes. It's possible you would have more than one add-on package. One popular approach is to have a theme product and a product containing your business logic."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:13
msgid "We will use ZopeSkel to create a skeleton template for the project. For more information on ZopeSkel, see the section on `Bootstrapping Plone add-on development <http://docs.plone.org/4/en/develop/addons/paste.html>`_."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:23
msgid "Put your projects in the src directory of your buildout directory."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:25
msgid "Change your working directory to the src directory of your buildout.::"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:31
msgid "Create a project using ZopeSkel 2.21.2 from our virtual_env. Here, we create an archetypes based project in a directory named example.helloworld.::"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:35
msgid "ZopeSkel will ask you a series of questions. For now, you can use the defaults for Expert Mode and Version. Use *Hello World* for the Project Title. We will reference it in another step below.::"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:42
msgid "The zopeskel command creates a directory in the src directory named **example.helloworld**.::"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:49
msgid "Before we move one, lets examine our directory structure. We have **env-27**, our virtual_env. It contains **hello_world**, our Plone installation. We also call this the **buildout directory**. The *buildout directory* contains the **buildout.cfg** file. It also contains the **src** directory, which contains our project **example.helloworld**."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:54
msgid "Looking further into *example.helloworld*, we have the **example** directory which contains the **helloworld** directory."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:56
msgid "In the examples below, we sometimes refer to the *helloworld* directory as the **product directory**. It contains the **browser** directory. Most of the changes we make take place in the *browser* directory."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:58
msgid "Here it is from the command-line.::"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:96
msgid "To use the code in your project, you'll need to reference it in your buildout.cfg file."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:98
msgid "Edit the *buildout.cfg* file."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:100
msgid "Add *example.helloworld* to the *eggs* section.::"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:107
msgid "Add *src/example.helloworld* to the *develop* section.::"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:112
msgid "Then save your changes."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:114
msgid "You need to rerun buildout for the changes to take effect.::"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:119
msgid "Then start or restart your Plone instance.::"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:126
msgid "Note::"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:132
msgid "Now you can install your product from the **Add-ons** are of **Site Setup**. You can access Site Setup from the **admin** menu in the top right corner of your Plone site."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:136
msgid "You can also access Site Setup using an url like"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:138
msgid "*http://localhost:8080/Plone/plone_control_panel*"
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:140
msgid "Select *Add-ons* from the *Site Setup* page. On the Add-ons page, select the *Hello World* add-on and click on *Activate*."
msgstr ""

#: ../develop/addons/helloworld/extend/addon.rst:144
msgid "Now that you created and installed an add-on package, you can use it to extend Plone."
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:3
msgid "Add a content-type"
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:11
msgid "In this tutorial we add a custom content-type."
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:13
msgid "Plone comes with built-in content-types like Collection, Event, File, Folder, Image, Link, News Item, and Page. If you need a custom content-type, you can extend an existing content-type, or create your own from scratch. In this example, we'll create a simple archetypes based content-type from scratch."
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:23
msgid "Install code template with ZopeSkel"
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:25
msgid "First, we'll change our working directory to the project we created above.::"
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:30
msgid "Use paster to create a content-type skeleton. Paster is included with ZopeSkel.::"
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:34
msgid "Again, you'll be asked a series of questions. Use *Person* for the contenttype_name.::"
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:42
msgid "This creates a few files, and edits some others. For our purposes, the most important one is **person.py** contained in the **src/example.helloworld/example/helloworld/content/** directory. Open this file in your text editor."
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:46
msgid "Build the content-type"
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:48
msgid "Edit PersonSchema inside *person.py* so it looks like this.::"
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:66
msgid "This adds a new field to our schema named **hello_name**. It is a string filed, and is required. It is visible on both the view and edit pages."
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:68
msgid "Restart your instance to have access to the new content-type.::"
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:75
msgid "Add content to the site"
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:77
msgid "To create a new object using the new content-type, select *Person* from the *Add new...* menu of your Plone site. This brings up the *edit* view."
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:81
msgid "Fill in the fields and click *Save*. This brings up the *view* view."
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:85
msgid "You should see an *info* message telling you your changes were saved, and a new tab in the navigation bar with the title of your object."
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:87
msgid "Notice the **State** menu on the right hand side of the green bar. It tells you your content is **Private**, meaning only you can see it. You need to select **Publish** from the *State* menu."
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:89
msgid "Also notice the url of the page. It is based on the Title of the object, with two main differences. The letters are all lower case, and spaces are turned into dashes.::"
msgstr ""

#: ../develop/addons/helloworld/extend/content.rst:93
msgid "For more information about content in Plone, see the :doc:`Content management </develop/plone/content/index>` section of this manual. For more information about content types, see :doc:`Content Types </develop/plone/content/types>`."
msgstr ""

#: ../develop/addons/helloworld/extend/files.rst:3
msgid "Files and Directories"
msgstr ""

#: ../develop/addons/helloworld/extend/files.rst:11
msgid "Before we start writing code, I want to review some important files and directories. In the examples above, we created the **hello_world** directory that contains our Plone installation. We sometimes refer to it as the **buildout** directory. It contains the **buildout.cfg** file."
msgstr ""

#: ../develop/addons/helloworld/extend/files.rst:13
msgid "We also created an add-on package named **example.helloworld**. It contains the **example** directory which contains the **helloworld** directory. We also call the *helloworld* directory the **product directory**. Among other things, the *product directory* contains the **browser** directory. Many of the changes in our examples happen in the *browser* directory."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:3
msgid "Add a simple form"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:11
msgid "In this tutorial we add a simple form."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:13
msgid "There are many ways to add a form to Plone. In this tutorial, we use z3c.form."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:15
msgid "There are two steps to building a simple z3c.form form; registering the form in **configure.zcml**, and writing the Python code to handle the form."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:19
msgid "Register the form"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:21
msgid "To register our form, we need to add an entry in configure.zcml."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:23
#: ../develop/addons/helloworld/extend/view.rst:21
msgid "Edit the **configure.zcml** file in the **browser** directory. Open *configure.zcml* in your editor and add this just before the closing </configure> tag.::"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:34
msgid "We use the **name** attribute to access the form."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:35
#: ../develop/addons/helloworld/extend/view.rst:33
msgid "The **for** attribute allows us to limit context to a particular interface. With the asterisk, we are not limiting access."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:36
#: ../develop/addons/helloworld/extend/view.rst:34
msgid "The **permission** attribute allows us to limit access with a permission. In this case, we have a wide open permission."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:37
msgid "The **class** attribute points to our Python class. Here, we have a **HelloWorldFormView** class in a file named **hello_world_form.py**."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:40
msgid "Our entry uses the **browser** prefix, so we need to define it in configure.zcml before we can use it."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:42
msgid "Add **xmlns:browser=\"http://namespaces.zope.org/browser\"** at the top of configure.zcml so it looks something like::"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:49
msgid "When we are done, configure.zcml should look something like this.::"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:71
#: ../develop/plone/views/layers.rst:60
msgid "Python code"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:73
msgid "Now we need to create the code to handle our form."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:75
msgid "create the file *hello_world_form.py* in the *browser* directory.::"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:79
msgid "Open the *hello_world_form.py* file in your editor and add the following code."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:81
msgid "Define our form field in an interface."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:83
#: ../develop/addons/helloworld/extend/form.rst:105
msgid "The imports::"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:90
msgid "The interface::"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:100
msgid "This defines a TextLine field with an id of **hello_world_name**. The title and description will show up on the form. It is not a required field."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:103
msgid "Create a class for our logic. This is used when our view is accessed."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:111
msgid "The class::"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:148
msgid "We first import the field from our interface above."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:149
msgid "The **ignoreContext** directive means this form is not meant to be called in the context of an object."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:150
msgid "We define **updateWidgets** to the same method belonging to our parent."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:151
msgid "We create 2 button handlers."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:153
msgid "The fun parts here are the two button handlers; **handleSave** and **handleCancel**."
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:155
msgid "At the bottom of *hello_world_form.py* we need to use **wrap_form** on our class. This wraps our form in the standard Plone layout, placing our form in the content area. This also creates the view **HelloWorldFormView** referenced in *configure.zcml*.::"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:162
msgid "Access the form"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:164
msgid "You can access the form with an url like::"
msgstr ""

#: ../develop/addons/helloworld/extend/form.rst:174
msgid "Type in a name and click *Save*, or just click *Cancel*."
msgstr ""

#: ../develop/addons/helloworld/extend/index.rst:3
msgid "Extend Plone"
msgstr ""

#: ../develop/addons/helloworld/extend/index.rst:18
msgid "In these examples the tutorial extends Plone. First, we create an add-on package on the filesystem to put our code. Then within that package, we add a simple form, a content-type, and a custom view."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:3
msgid "Add a custom view"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:11
msgid "In this tutorial we add a browser view. Plone uses views to display dynamic content."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:13
msgid "For more information about views, see the :doc:`Views and viewlets </develop/plone/views/index>` section."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:15
msgid "There are 3 parts to our view; a Python class, a page template, and a ZCML registration. We will add the two files and edit configure.zcml in the **browser** directory."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:19
msgid "Register the view"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:32
msgid "We use the **name** attribute to access the view."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:35
msgid "The **class** attribute points to our Python class. Here, we have a **HelloWorldView** class in a file named **hello_world_view.py**."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:37
msgid "If you have not already done so, you need to define the browser namespace in configure.zcml by adding this to the configure tag.::"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:41
msgid "If you also went through the simple form tutorial, then *configure.zcml* should look something like this when you are done.::"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:72
msgid "Create Python class"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:74
msgid "We need to create our Python class. In the **browser directory**, create a file named **hello_world_view.py** and add the following code.::"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:90
msgid "Our BrowserView class is a Python callable. The __call__() method is the entry point. In it, we add a **hello_name** attribute to the view. Our page template will use the value of hello_name when the page is rendered."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:92
msgid "The logic in our class is pretty simple. If our context has a hello_name attribute, then we use its value in our view. If not, we use the string 'World'."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:94
msgid "In the class, we also define our page template **hello_world_view.pt** and save it in the **template** attribute."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:98
msgid "Create page template"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:100
msgid "The third part of our view is the page template."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:102
msgid "In the browser directory, create a file named **hello_world_view.pt** and add the following::"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:119
msgid "Plone uses Zope Page Templates (ZPT). For great documentation on ZPT and the TAL, TALES, and METAL languages, see the :doc:`TAL page templates </adapt-and-extend/theming/templates_css/template_basics>` section of the developer manual, and the `TAL/TALES & METAL Reference Guide <http://www.owlfish.com/software/simpleTAL/tal-guide.html/>`_"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:122
msgid "In the above code, we define some xml namespaces; **metal** and **tal** that we use in our template.::"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:127
msgid "The **metal:use-macro** statement tells ZPT to use **main_template** to draw our page.::"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:131
msgid "The master template *main_template* contains predefined **slots**, or areas on the page, that we can fill with content from our template."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:133
msgid "Anything in our code, between the::"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:137
msgid "and::"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:141
msgid "gets put in the **content-core** area of main_template and is displayed on our page."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:143
msgid "We also have access to our view class using the **view** namespace. In our case, we are interested in **view/hello_name**.::"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:147
msgid "In our Python class, we defined a *hello_name* attribute. This code says take the value of the *view/hello_name* attribute and use it as the content for the span tag. So, the string \"this gets replaced\" gets replaced with the value of *view/hello_name*."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:152
msgid "Access the view"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:154
msgid "To access the view, restart your instance to have access to the new view"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:156
msgid "Then, add @@hello_world_view to the end of an object url in your plone site.::"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:160
msgid "Since our object has a *hello_name* attribute, the value is displayed along with the word *Hello*."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:164
msgid "We can also call our view on the root of the site.::"
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:168
msgid "The root of the site does not have a *hello_name* attribute, so *Hello World* is displayed."
msgstr ""

#: ../develop/addons/helloworld/extend/view.rst:172
msgid "For a more in depth explanation of views, see the :doc:`Views and viewlets </develop/plone/views/index>` section of this manual."
msgstr ""

#: ../develop/addons/helloworld/index.rst:3
#: ../develop/plone/getstarted/index.rst:180
msgid "Hello World Tutorial"
msgstr ""

#: ../develop/addons/helloworld/intro.rst:11
msgid "This tutorial uses simple examples to introduce Plone development. The examples cover a basic form, custom content-type, and dynamic view."
msgstr ""

#: ../develop/addons/helloworld/intro.rst:13
msgid "It also has detailed sections on building a development environment, installing Plone, and creating an add-on package for your development code."
msgstr ""

#: ../develop/addons/helloworld/intro.rst:17
msgid "There are many ways to install Plone."
msgstr ""

#: ../develop/addons/helloworld/intro.rst:19
msgid "In the examples, we build a new version of Python 2.7 and create a virtual_env using the new Python. We then install Plone within the virtual_env using ZopeSkel 2.21.2."
msgstr ""

#: ../develop/addons/helloworld/intro.rst:21
msgid "This can be a lot of work, just to try some hello world examples in Plone."
msgstr ""

#: ../develop/addons/helloworld/intro.rst:23
msgid "You don't have to do it this way. You can create a similar environment using the `Plone installers <http://plone.org/products/plone/releases/>`_. The examples should all work with little or no adjustment."
msgstr ""

#: ../develop/addons/helloworld/intro.rst:25
msgid "There are benefits to managing your own Python development environment. The choice is up to you."
msgstr ""

#: ../develop/addons/helloworld/intro.rst:27
msgid "This tutorial is only an introduction to Plone development. Other areas of the developer manual have more detailed information. We link to some of those areas in the examples below."
msgstr ""

#: ../develop/addons/helloworld/todo.rst:3
msgid "Ideas for improvement"
msgstr ""

#: ../develop/addons/helloworld/todo.rst:10
msgid "Ideas for improving the tutorial"
msgstr ""

#: ../develop/addons/helloworld/todo.rst:12
msgid "Add more information about universal installer."
msgstr ""

#: ../develop/addons/helloworld/todo.rst:13
msgid "Add section on Dexterity content-type."
msgstr ""

#: ../develop/addons/helloworld/todo.rst:14
msgid "Put example code on Github as collective.hello_world."
msgstr ""

#: ../develop/addons/helloworld/todo.rst:16
msgid "General editing"
msgstr ""

#: ../develop/addons/helloworld/todo.rst:16
msgid "allow individual sections to stand on their own"
msgstr ""

#: ../develop/addons/helloworld/todo.rst:17
msgid "better narrative if read beginning to end"
msgstr ""

#: ../develop/addons/index.rst:2
msgid "Develop Plone Add ons"
msgstr ""

#: ../develop/addons/index.rst:4
msgid "To develop an add-on, you need a package to put your code in, plus ways to make it interact with Plone itself and the user. And a way to release your package to your audience."
msgstr ""

#: ../develop/addons/index.rst:7
msgid "In short:"
msgstr ""

#: ../develop/addons/index.rst:10
msgid "Create a package"
msgstr ""

#: ../develop/addons/index.rst:12
msgid "With the help of Mr.Bob and templates for plone, that is quickly done:"
msgstr ""

#: ../develop/addons/index.rst:21
msgid "Develop with Dexterity"
msgstr ""

#: ../develop/addons/index.rst:23
msgid "Dexterity is covered in detail in the :doc:`Dexterity Developer Manual </external/plone.app.dexterity/docs/index>`, which includes an extensive tutorial on setting up a Dexterity development environment."
msgstr ""

#: ../develop/addons/index.rst:28
msgid "Upgrading to Plone 5.0"
msgstr ""

#: ../develop/addons/index.rst:36
msgid "Add your package to buildout"
msgstr ""

#: ../develop/addons/index.rst:38
msgid "Edit your ``buildout.cfg`` file to add the package to your ``egg`` list and your ``develop`` list. Run buildout."
msgstr ""

#: ../develop/addons/index.rst:41
msgid "Releasing your package"
msgstr ""

#: ../develop/addons/index.rst:49
msgid "Working with Javascript"
msgstr ""

#: ../develop/addons/index.rst:61
#: ../develop/plone-coredev/bundles.rst:13
msgid "Background"
msgstr ""

#: ../develop/addons/index.rst:75
#: ../develop/plone/content/archetypes/fields.rst:233
#: ../develop/plone/functionality/contactform.rst:50
#: ../develop/plone/functionality/sitemap.rst:24
#: ../develop/plone/i18n/language.rst:223
msgid "Example"
msgstr ""

#: ../develop/addons/index.rst:82
msgid "Also make sure to check out the `Training material <http://training.plone.org>`_"
msgstr ""

#: ../develop/addons/javascript.rst:3
#: ../develop/plone-coredev/plipreview.rst:58
msgid "Javascript"
msgstr ""

#: ../develop/addons/javascript.rst:7
msgid "Writing, including and customizing Javascript for Plone add-ons"
msgstr ""

#: ../develop/addons/javascript.rst:14
msgid "Javascripts files must be distributed to Plone"
msgstr ""

#: ../develop/addons/javascript.rst:16
msgid "By creating them through-the-web editor in :doc:`portal_skins </adapt-and-extend/theming/templates_css/skin_layers>`. are stored in ZODB in this case."
msgstr ""

#: ../develop/addons/javascript.rst:19
msgid "By add-on products using :doc:`resource folders </adapt-and-extend/theming/templates_css/resourcefolders>`"
msgstr ""

#: ../develop/addons/javascript.rst:21
msgid "Then the Javascript must be registered on the site"
msgstr ""

#: ../develop/addons/javascript.rst:23
msgid "Through-the-web in portal_javascripts in ZMI"
msgstr ""

#: ../develop/addons/javascript.rst:25
msgid "Using :doc:`GenericSetup jsregistry.xml </develop/addons/components/genericsetup>` which is run (and rerun) when you use the add-on installer in the control panel"
msgstr ""

#: ../develop/addons/javascript.rst:28
msgid "Plone Javascripts are managed by resource registry *portal_javascripts*. You can find this in Zope Management interface, under your portal root folder."
msgstr ""

#: ../develop/addons/javascript.rst:31
msgid "portal_javascript will automatically"
msgstr ""

#: ../develop/addons/javascript.rst:33
msgid "compress JS files"
msgstr ""

#: ../develop/addons/javascript.rst:35
msgid "merge JS load requests"
msgstr ""

#: ../develop/addons/javascript.rst:37
msgid "determine which files are included on which HTML page"
msgstr ""

#: ../develop/addons/javascript.rst:39
msgid "support IE conditional comments"
msgstr ""

#: ../develop/addons/javascript.rst:42
msgid "Javascript basic tips"
msgstr ""

#: ../develop/addons/javascript.rst:44
msgid "When using jQuery etc. libraries with Plone write your code so that you pass the library global reference to your script as a local - this way you can include several library versions in one codebase."
msgstr ""

#: ../develop/addons/javascript.rst:56
msgid "Always use DOM ready event before executing your DOM manipulation."
msgstr ""

#: ../develop/addons/javascript.rst:58
msgid "Don't include Javascript inline in HTML code unless you are passing variables from Python to Javascript."
msgstr ""

#: ../develop/addons/javascript.rst:60
msgid "Use JSLint with your code editor and ECMAStrict 5 strict mode to catch common Javascript mistakes (like missing var)."
msgstr ""

#: ../develop/addons/javascript.rst:62
msgid "For more Javascript tips see `brief introduction to good Javascript practices and JSLint <http://opensourcehacker.com/2011/11/05/javascript-how-to-avoid-the-bad-parts/>`_"
msgstr ""

#: ../develop/addons/javascript.rst:65
msgid "Plone default Javascript libraries"
msgstr ""

#: ../develop/addons/javascript.rst:67
msgid "You can use any Javascript library with Plone after inclusion it to JS registry (see below)."
msgstr ""

#: ../develop/addons/javascript.rst:70
msgid "Plone 4.1 ships with"
msgstr ""

#: ../develop/addons/javascript.rst:72
msgid "jQuery"
msgstr ""

#: ../develop/addons/javascript.rst:74
msgid "`jQuery tools <http://jquerytools.org/>`_: Use jQuery Tools for tabs, tooltips, overlays, masking and scrollables."
msgstr ""

#: ../develop/addons/javascript.rst:76
msgid "`jQuery Form Plugin <http://jquery.malsup.com/form/>`_: Use it for AJAX form input marshaling and submission. Note that jQuery’s built-in form input marshaling is inadequate for many forms as it does not handle submit-button or file-input data."
msgstr ""

#: ../develop/addons/javascript.rst:78
msgid "Also see"
msgstr ""

#: ../develop/addons/javascript.rst:80
msgid "`Plone compatible jQuery UI package <https://plone.org/products/collective.js.jqueryui>`_."
msgstr ""

#: ../develop/addons/javascript.rst:82
msgid "`Useful Plone out of the box Javascripts <http://www.sixfeetup.com/blog/2009/7/31/utilize-available-javascript-in-plone-without-knowing-javascript>`_."
msgstr ""

#: ../develop/addons/javascript.rst:85
msgid "Creating Javascripts for Plone"
msgstr ""

#: ../develop/addons/javascript.rst:87
msgid "The following ste"
msgstr ""

#: ../develop/addons/javascript.rst:89
msgid "Put ZMI -> portal_javascripts to debug mode"
msgstr ""

#: ../develop/addons/javascript.rst:91
msgid "Include new JS files"
msgstr ""

#: ../develop/addons/javascript.rst:93
msgid "Use ZCML configuration directive :doc:`resourceFolder </adapt-and-extend/theming/templates_css/resourcefolders>` to include static media files in your add-on product"
msgstr ""

#: ../develop/addons/javascript.rst:96
msgid "Put in new Javascript via ZMI upload (you can use Page Template type) to portal_skins/custom folder"
msgstr ""

#: ../develop/addons/javascript.rst:98
msgid "Register Javascript in portal_javascripts"
msgstr ""

#: ../develop/addons/javascript.rst:100
msgid "Do it through-the-web using portal_javascripts ZMI user interface ...or..."
msgstr ""

#: ../develop/addons/javascript.rst:102
msgid "Add *profiles/default/jsregistry.xml* file to describe Javascript files included with your add-on product"
msgstr ""

#: ../develop/addons/javascript.rst:105
msgid "Executing Javascript code on page load"
msgstr ""

#: ../develop/addons/javascript.rst:107
msgid "Plone includes JQuery library which has ``ready()`` event handler to run Javascript code when DOM tree loading is done (HTML is loaded, images and media files are not necesssarily loaded)."
msgstr ""

#: ../develop/addons/javascript.rst:112
msgid "Create following snippet::"
msgstr ""

#: ../develop/addons/javascript.rst:120
msgid "This makes use of the facts that 1) functions passed to jQuery are executed on ready; and 2) jQuery passes itself to such functions."
msgstr ""

#: ../develop/addons/javascript.rst:124
msgid "Registering javascripts to portal_javascripts"
msgstr ""

#: ../develop/addons/javascript.rst:126
msgid "Javascript files need to be registered in order to appear in Plone's <html> <head> and in the Javascript merge compositions."
msgstr ""

#: ../develop/addons/javascript.rst:129
msgid "Javascripts are registered to portal_javascripts tool using *profiles/default/jsregistry.xml* GenericSetup profile file. The following options are available"
msgstr ""

#: ../develop/addons/javascript.rst:132
msgid "*id* (required): URI from where the Javascript is loaded"
msgstr ""

#: ../develop/addons/javascript.rst:134
msgid "*expression* empty string or TAL condition which determines whether the file is served to the user. The files with the same condition are grouped to the same compression bundle. For more information, see :doc:`expressions documentation </develop/plone/functionality/expressions>`."
msgstr ""

#: ../develop/addons/javascript.rst:138
msgid "*authenticated* (Plone 4+) is expression override, which tells to load the script for authenticated users only"
msgstr ""

#: ../develop/addons/javascript.rst:141
msgid "*cookable* is merging of Javascript files allowed during the compression"
msgstr ""

#: ../develop/addons/javascript.rst:143
msgid "*inline* is script server as inline inside <script>...</script> tag"
msgstr ""

#: ../develop/addons/javascript.rst:145
msgid "*enabled* shortcut to disable some Javascripts"
msgstr ""

#: ../develop/addons/javascript.rst:147
msgid "*compression* none, safe or full. See full option list from portal_javascripts."
msgstr ""

#: ../develop/addons/javascript.rst:149
msgid "*insert-before* and *insert-after* control the position of the Javascript file in relation to other served Javascript files"
msgstr ""

#: ../develop/addons/javascript.rst:161
msgid "Bundles"
msgstr ""

#: ../develop/addons/javascript.rst:163
msgid "There are several compressed Javascript bundles served by Plone. The process of compressing & merging files to different bundles is internally called \"cooking\""
msgstr ""

#: ../develop/addons/javascript.rst:167
msgid "You can examine available bundles in *portal_javascripts* Zope Management Interface Tool, on *Merged Compositions* tab."
msgstr ""

#: ../develop/addons/javascript.rst:170
msgid "Usually the following bundles are served"
msgstr ""

#: ../develop/addons/javascript.rst:172
msgid "Anonymous users (no condition)"
msgstr ""

#: ../develop/addons/javascript.rst:174
msgid "Logged in users (condition: not: portal/portal_membership/isAnonymousUser)"
msgstr ""

#: ../develop/addons/javascript.rst:176
msgid "Visual editor (TinyMCE) related Javascripts"
msgstr ""

#: ../develop/addons/javascript.rst:179
msgid "Include Javascript on every page"
msgstr ""

#: ../develop/addons/javascript.rst:181
msgid "The following example includes Javascript file intended for anonymous site users. It is included after toc.js so that the file ends up as the last script of the compressed JS bundle which is served for all users."
msgstr ""

#: ../develop/addons/javascript.rst:185
msgid "The Javascript file itself is usually *yourcompany/app/static/yourjsfile.js* in your :doc:`add-on product </develop/addons/bobtemplates.plone/README>`."
msgstr ""

#: ../develop/addons/javascript.rst:188
msgid "It is mapped to URI like::"
msgstr ""

#: ../develop/addons/javascript.rst:192
msgid "by :doc:`Zope 3 resource subsystem </adapt-and-extend/theming/templates_css/resourcefolders>`."
msgstr ""

#: ../develop/addons/javascript.rst:194
msgid "Example ``profiles/default/jsregistry.xml`` in your add-on product."
msgstr ""

#: ../develop/addons/javascript.rst:209
msgid "If <javascript> does not have insert-after or insert-before, the script will end up as the last of the Javascript registry."
msgstr ""

#: ../develop/addons/javascript.rst:213
msgid "Including Javascript for authenticated users only"
msgstr ""

#: ../develop/addons/javascript.rst:215
msgid "The following registers two Javascript files which are aimed to edit mode and authenticated users. The Javascript are added to the merge bundle and compressed, so they do not increase the load time of the page. The files are loaded from ``portal_skins`` (not from resource folder) and can be referred by their direct filename - Plone resolves portal_skins files magically for the site root and every folder."
msgstr ""

#: ../develop/addons/javascript.rst:223
msgid "``jsregistry.xml``:"
msgstr ""

#: ../develop/addons/javascript.rst:247
msgid "Including Javascripts for widgets and other special conditions"
msgstr ""

#: ../develop/addons/javascript.rst:249
msgid "Here is described a way to include Javascript for certain widgets or certain pages only."
msgstr ""

#: ../develop/addons/javascript.rst:254
msgid "Since Plone loads very heavy Javascripts for logged in users (TinyMCE), it often makes sense to decrease the count of HTTP requests and just merge your custom scripts with this bundle instead of trying to have fine-tuned Javascript load conditions for rare cases."
msgstr ""

#: ../develop/addons/javascript.rst:259
msgid "Javascripts are processed through portal_javascripts"
msgstr ""

#: ../develop/addons/javascript.rst:261
msgid "A special condition is created in Python code to determine when to include the script or not"
msgstr ""

#: ../develop/addons/javascript.rst:263
msgid "Javascripts are served from a *static* media folder."
msgstr ""

#: ../develop/addons/javascript.rst:265
msgid "The example here shows how to include a Javascript if the following conditions are met"
msgstr ""

#: ../develop/addons/javascript.rst:268
msgid "Content type has a certain :doc:`Dexterity behavior </develop/plone/content/behaviors>` applied on it"
msgstr ""

#: ../develop/addons/javascript.rst:270
msgid "Different files are served for view and edit modes"
msgstr ""

#: ../develop/addons/javascript.rst:274
msgid "There is no easy way to currently directly check whether a certain widget and widget mode is active on a particular view. Thus, we do some assumptions and checks manually."
msgstr ""

#: ../develop/addons/javascript.rst:279
msgid "jsregistry.xml:"
msgstr ""

#: ../develop/addons/javascript.rst:307
msgid "We create special conditions using :doc:`Views </develop/plone/views/browserviews>` views."
msgstr ""

#: ../develop/addons/javascript.rst:376
#: ../develop/addons/javascript.rst:552
msgid "Related ZCML registration:"
msgstr ""

#: ../develop/addons/javascript.rst:394
msgid "Popup overlays and forms"
msgstr ""

#: ../develop/addons/javascript.rst:396
msgid "plone.app.jquerytools provides a “prepOverlay” plugin that makes it easy to create popup overlays to display images or AJAX-loaded content from other pages. It also handles AJAX submission of forms in popups."
msgstr ""

#: ../develop/addons/javascript.rst:398
msgid "The prepOverlay plugin is well-documented at https://pypi.python.org/pypi/plone.app.jquerytools. Many usage examples are available in Products/CMFPlone/skins/plone_ecmascript/popupforms.js, which provides the setup for Plone 4’s standard popup forms."
msgstr ""

#: ../develop/addons/javascript.rst:401
msgid "Messages and translation"
msgstr ""

#: ../develop/addons/javascript.rst:403
msgid "JavaScript components should include as few messages as possible. Whenever possible, the messages you display via JavaScript should be drawn from the page."
msgstr ""

#: ../develop/addons/javascript.rst:405
msgid "If that’s not possible, it is your responsibility to assure that the messages you need are translatable. Our current mechanism for doing that is to include the messages via Products/CMFPlone/browser/jsvariables.py. This will nearly certainly be changed."
msgstr ""

#: ../develop/addons/javascript.rst:409
msgid "Passing dynamic settings to Javascripts"
msgstr ""

#: ../develop/addons/javascript.rst:412
msgid "Default passed in variables"
msgstr ""

#: ../develop/addons/javascript.rst:414
msgid "Plone passes in some variables, like ``portal_url`` to Javascript by default."
msgstr ""

#: ../develop/addons/javascript.rst:416
msgid "https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/browser/jsvariables.py"
msgstr ""

#: ../develop/addons/javascript.rst:420
msgid "http://stackoverflow.com/questions/12530308/accessing-portal-url-in-javascript-in-plone/12530378#12530378"
msgstr ""

#: ../develop/addons/javascript.rst:423
msgid "Passing settings on every page"
msgstr ""

#: ../develop/addons/javascript.rst:425
msgid "Here is described a way to pass data from site or context object to a Javascripts easily. For each page, we create a ``<script>`` section which will include all the options filled in by Python code."
msgstr ""

#: ../develop/addons/javascript.rst:429
msgid "We create the script tag in ``<head>`` section using a :doc:`Viewlet </develop/plone/views/viewlets>`."
msgstr ""

#: ../develop/addons/javascript.rst:431
msgid "viewlet.py::"
msgstr ""

#: ../develop/addons/javascript.rst:504
msgid "configure.zcml::"
msgstr ""

#: ../develop/addons/javascript.rst:504
msgid "<browser:viewlet"
msgstr ""

#: ../develop/addons/javascript.rst:499
msgid "name=\"javascriptsettingssnippet\" manager=\"plone.app.layout.viewlets.interfaces.IHtmlHead\" class=\".viewlets.JavascriptSettingsSnippet\" permission=\"zope2.View\" />"
msgstr ""

#: ../develop/addons/javascript.rst:507
msgid "Passing settings on one page only"
msgstr ""

#: ../develop/addons/javascript.rst:509
msgid "Here is an example like above, but is"
msgstr ""

#: ../develop/addons/javascript.rst:511
msgid "Specific to one view and this view provides the JSON code to populate the settings"
msgstr ""

#: ../develop/addons/javascript.rst:513
msgid "Settings are included using METAL slots instead of viewlets"
msgstr ""

#: ../develop/addons/javascript.rst:564
msgid "Generating Javascript dynamically"
msgstr ""

#: ../develop/addons/javascript.rst:566
msgid "TAL template language is not suitable for non-XML generation. Use Python string templates."
msgstr ""

#: ../develop/addons/javascript.rst:569
msgid "Don't put dynamically generated javascripts to ``portal_javascripts`` registry unless you want to cache them and they do not differ by the user."
msgstr ""

#: ../develop/addons/javascript.rst:574
msgid "Upgrading jQuery"
msgstr ""

#: ../develop/addons/javascript.rst:576
msgid "``jquery.js`` lives in *Products.CMFPlone* ``portal_skins/plone_3rdparty/jquery.js``. Plone 4.1 ships with compressed jQuery 1.4.4."
msgstr ""

#: ../develop/addons/javascript.rst:579
msgid "Here are instructions to change jQuery version. Please note that this may break Plone core functionality (tabs, overlays)."
msgstr ""

#: ../develop/addons/javascript.rst:582
msgid "These instructions also apply if you want to enable debug version (non-compressed) jQuery on your site."
msgstr ""

#: ../develop/addons/javascript.rst:585
msgid "Download new jQuery from http://docs.jquery.com/Downloading_jQuery and save it to your local disk"
msgstr ""

#: ../develop/addons/javascript.rst:587
msgid "In ZMI, go to plone_3rdparty, customize jquery.js"
msgstr ""

#: ../develop/addons/javascript.rst:589
msgid "Upload new jQuery from your hard disk"
msgstr ""

#: ../develop/addons/javascript.rst:592
msgid "Having multiple jQuery versions (noConflict)"
msgstr ""

#: ../develop/addons/javascript.rst:594
msgid "http://noenieto.com/blog/having-two-jquery-versions-in-one-plone"
msgstr ""

#: ../develop/addons/javascript.rst:598
msgid "Loading Javascript files for certain edit views only (to be used with widgets)"
msgstr ""

#: ../develop/addons/javascript.rst:600
msgid "http://stackoverflow.com/questions/5469844/registering-a-javascript-to-be-loaded-on-edit-view"
msgstr ""

#: ../develop/addons/javascript.rst:603
msgid "Converting page links to pop-up windows"
msgstr ""

#: ../develop/addons/javascript.rst:605
msgid "`plone.app.jquerytools <https://plone.org/products/plone.app.jquerytools>`_ can convert links, images and forms to AJAX pop-up windows. Plone 4 uses this e.g. for the login box pop-up functionality."
msgstr ""

#: ../develop/addons/javascript.rst:609
msgid "Below is an example code how you can convert any of the links on your site to a pop-up window."
msgstr ""

#: ../develop/addons/javascript.rst:612
msgid "Example code"
msgstr ""

#: ../develop/addons/javascript.rst:639
msgid "AJAX-y view loading"
msgstr ""

#: ../develop/addons/javascript.rst:642
msgid "Loading by page load"
msgstr ""

#: ../develop/addons/javascript.rst:644
msgid "Let's imagine we have this piece of synchronous page template code. The code is a :doc:`view page template </develop/plone/views/browserviews>` code which includes another view inside it."
msgstr ""

#: ../develop/addons/javascript.rst:653
msgid "To make it load the view asynchronous, to be loaded with AJAX call when the page loading has been completed, you can do:"
msgstr ""

#: ../develop/addons/javascript.rst:690
msgid "Loading when element becomes visible"
msgstr ""

#: ../develop/addons/javascript.rst:692
msgid "Here is another example where more page data is lazily loaded when the user scrolls down to the page and the item becomes visible."
msgstr ""

#: ../develop/addons/javascript.rst:720
msgid "http://blog.mfabrik.com/2011/03/09/lazily-load-elements-becoming-visible-using-jquery/"
msgstr ""

#: ../develop/addons/javascript.rst:722
msgid "http://remysharp.com/2009/01/26/element-in-view-event-plugin/"
msgstr ""

#: ../develop/addons/javascript.rst:725
msgid "Checking if document is in WYSIWYG edit mode"
msgstr ""

#: ../develop/addons/javascript.rst:727
msgid "WYSIWYG editor (TinyMCE) is loaded in its own <iframe>. Your UI related Javascript mode might want to do some special checks for running different code paths when the text is being edited."
msgstr ""

#: ../develop/addons/javascript.rst:745
msgid "Image hovers"
msgstr ""

#: ../develop/addons/javascript.rst:747
msgid "Here is a simple jQuery method to enable image roll-over effects (hover). This method is suitable for content editors who can only images through TinyMCE or normal upload - only naming image files specially is needed. No CSS, Javascript or other knowledge needed by the person who needs to add the images."
msgstr ""

#: ../develop/addons/javascript.rst:753
msgid "Just include this script on your HTML page and it will automatically scan image filenames, detects image filenames with special roll-over marker strings and then applies the roll-over effect on them. Roll-over images are preloaded to avoid image blinking on slow connections."
msgstr ""

#: ../develop/addons/javascript.rst:758
msgid "The script"
msgstr ""

#: ../develop/addons/javascript.rst:823
msgid "Disabling KSS"
msgstr ""

#: ../develop/addons/javascript.rst:825
msgid "KSS, not used since Plone 3, may cause Javascript errors on migrated sites and new browsers."
msgstr ""

#: ../develop/addons/javascript.rst:827
msgid "Here is ``jsregistry.xml`` snippet to get rid of KSS on your site::"
msgstr ""

#: ../develop/addons/javascript_standards.rst:3
msgid "Javascript coding conventions"
msgstr ""

#: ../develop/addons/javascript_standards.rst:7
msgid "Styleguides for writing Javascript for Plone"
msgstr ""

#: ../develop/addons/javascript_standards.rst:14
msgid "Here we have collected community best practices for writing Javascript for Plone. These apply for Plone core and are suggested to be applied in your own add-on."
msgstr ""

#: ../develop/addons/javascript_standards.rst:18
msgid "Progressive Enhancement"
msgstr ""

#: ../develop/addons/javascript_standards.rst:20
msgid "Pages presented in Plone, including forms and form widgets, must be fully usable in situations where JavaScript is not available. The availability of JavaScript on the browser side should enhance the presentation of the page and its content. Additionally, the structured document delivered via HTML/XHTML should be semantically correct and complete in meaning."
msgstr ""

#: ../develop/addons/javascript_standards.rst:22
msgid "The best way to accomplish these goals is to: first. compose complete and useful content in HTML; second, style its presentation with CSS; and third, make use of JavaScript behaviors to enhance presentation and interaction."
msgstr ""

#: ../develop/addons/javascript_standards.rst:25
msgid "Unobtrusive JavaScript"
msgstr ""

#: ../develop/addons/javascript_standards.rst:27
msgid "JavaScript should nearly never be present in the content area of a page. Typically, it will only appear via link and script elements in the head of the document (or at its very end when that improved rendering). In particular, HTML tags should nearly never have event-handler (e.g., onclick or onsubmit) tag attributes or JavaScript in URLs. Coding JavaScript into HTML tags generally makes for code that is hard to maintain and nearly impossible to test."
msgstr ""

#: ../develop/addons/javascript_standards.rst:30
msgid "Instead of coding event handlers in HTML attributes, use jQuery's \"bind\" and its various convenience aliases like \"click\" methods to attach event handlers to elements. Use \"live\" if installing behaviors that need to operate in AJAX-loaded HTML."
msgstr ""

#: ../develop/addons/javascript_standards.rst:33
msgid "Coding Standards"
msgstr ""

#: ../develop/addons/javascript_standards.rst:36
msgid "JSLint"
msgstr ""

#: ../develop/addons/javascript_standards.rst:38
msgid "All JavaScript components that are incorporated into the Plone core must pass JSLint code quality tests. At some point in the 4.x series, this will become part of Plone's continuous integration testing. JSLint has many options, and it is our goal that our code pass \"The Good Parts\" tests. A couple of acceptable deviations from the good parts settings are to::"
msgstr ""

#: ../develop/addons/javascript_standards.rst:46
msgid "You may set these options by including at the top of your JavaScript file::"
msgstr ""

#: ../develop/addons/javascript_standards.rst:52
msgid "These settings are available as a file in Products/CMFPlone/skins/plone_ecmascript/js-standards.js. If you use those settings, you only need set the options for any deviations needed by the current file. Deviations like turning off the regular-expression \".\" prohibition, are perfectly reasonable when porting old code, but should be avoided in new code."
msgstr ""

#: ../develop/addons/javascript_standards.rst:54
msgid "A common way to execute a command-line jslint test using these options would be to execute::"
msgstr ""

#: ../develop/addons/javascript_standards.rst:58
msgid "if you were testing the \"accessibility.js\" file. JSLint is also available as a plugin for most popular web code editors and can be set to test on save. An example of setting up TextMate to run jslint on save: * JSLint on Save"
msgstr ""

#: ../develop/addons/javascript_standards.rst:62
msgid "Strict Mode"
msgstr ""

#: ../develop/addons/javascript_standards.rst:64
msgid "Use strict in nested function scopy only::"
msgstr ""

#: ../develop/addons/javascript_standards.rst:71
msgid "If you use \"strict\", you *must* test on a browser that supports it. Otherwise, your code may break when it encounters such a browser."
msgstr ""

#: ../develop/addons/javascript_standards.rst:75
msgid "Globals"
msgstr ""

#: ../develop/addons/javascript_standards.rst:77
msgid "JavaScript components should create as few as possible global variables. If a component must create globals, it should only create one: a namespace object with a very distinctive name. Please document your new global at the top of the component file."
msgstr ""

#: ../develop/addons/javascript_standards.rst:80
msgid "Platform Testing"
msgstr ""

#: ../develop/addons/javascript_standards.rst:82
msgid "JavaScript for Plone core must be tested on"
msgstr ""

#: ../develop/addons/javascript_standards.rst:84
msgid "IE 7, 8, 9"
msgstr ""

#: ../develop/addons/javascript_standards.rst:86
msgid "Firefox, current release and most-recent beta or rc for the next release, if available"
msgstr ""

#: ../develop/addons/javascript_standards.rst:88
msgid "Webkit browsers: Current"
msgstr ""

#: ../develop/addons/javascript_standards.rst:90
msgid "In general, degrade gracefully to no-js behavior when a platform cannot be supported. You need not support IE 6, but if you know that a feature works poorly on IE 6, simply turn it off::"
msgstr ""

#: ../develop/addons/javascript_standards.rst:97
msgid "Testing"
msgstr ""

#: ../develop/addons/javascript_standards.rst:99
msgid "As of this writing, the Plone community has not settled on standards for JavaScript unit and integration testing. QUnit is (as of this writing), the most common unit-testing mechanism. Selenium and Windmill are both in use for unit testing."
msgstr ""

#: ../develop/addons/javascript_standards.rst:102
msgid "Plone 4.2 is expected to include strong recommendations for both unit and integration testing, and these will be supported by our continuous integration testing."
msgstr ""

#: ../develop/addons/releasing.rst:3
msgid "Releasing an addon"
msgstr ""

#: ../develop/addons/releasing.rst:5
msgid "Your addon should be listed and hosted on PyPI if you want other people to use your addon."
msgstr ""

#: ../develop/addons/releasing.rst:9
msgid "Everything on PyPI is public. Be careful not to hard-code passwords in *any* file."
msgstr ""

#: ../develop/addons/releasing.rst:14
msgid "Setup necessary packages"
msgstr ""

#: ../develop/addons/releasing.rst:16
msgid "To setup all needed packages you need to run the following command."
msgstr ""

#: ../develop/addons/releasing.rst:23
msgid "This takes care of everything you should do: - Check if all files will be in the package. - Set the version number - Tag the release - Compile any .mo file to .po files - Make the actual release - Bump the version."
msgstr ""

#: ../develop/addons/releasing.rst:33
msgid "This installs the packages into your global python installation. An alternative would be installing the packages in a :doc:`virtualenv </develop/plone/getstarted/python>`."
msgstr ""

#: ../develop/addons/releasing.rst:38
msgid "Releasing a package"
msgstr ""

#: ../develop/addons/releasing.rst:40
msgid "Use the ``fullrelease`` command in the root of your checkout."
msgstr ""

#: ../develop/addons/releasing.rst:49
msgid ":doc:`how to use virtualenv controlled non-system wide Python </develop/plone/getstarted/python>`"
msgstr ""

#: ../develop/addons/releasing.rst:51
msgid "Full zest.releaser documentation http://zestreleaser.readthedocs.org/en/latest/"
msgstr ""

#: ../develop/addons/releasing.rst:53
msgid ":doc:`plone.api coding conventions </external/plone.api/docs/contribute/conventions>`\""
msgstr ""

#: ../develop/addons/releasing.rst:55
msgid "http://opensourcehacker.com/2012/08/14/high-quality-automated-package-releases-for-python-with-zest-releaser/"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:2
msgid "Creating a package"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:4
msgid "**Giving our forms a home**"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:6
msgid "For the purposes of this tutorial, we will create a simple package that adds the necessary dependencies. If you have an existing package that requires a form, you should be able to add the same dependencies."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:10
msgid "For details about creating new packages, see :doc:`Bootstrapping Plone add-on development </develop/addons/bobtemplates.plone/README>`."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:21
msgid "First, we create a new package in src:"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:27
msgid "We create a package from the *Basic* template for Plone *5.0-latest*."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:29
msgid "We will add example.form later as development egg to our buildout. Before we use the autogenerated buildout of the package itself."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:32
msgid "Take a look at buildout.cfg at the top level of our newly created package. You will find there various useful things:"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:35
msgid "instance with your package added to the eggs"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:36
msgid "code analysis"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:37
msgid "a test runner"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:38
msgid "even a robot test runner"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:39
msgid "and a releaser"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:41
msgid "That is everything you need for development. So let us use this buildout."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:49
msgid "Let us test it!"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:56
msgid "Our package shall add a form to our Plone site. We use plone.app.z3cform to develop the form. That is why we add it to install_requires in setup.py"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:122
msgid "and add plone.app.z3cform's import step to our profile's metadata.xml for an automated installation."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:133
msgid "Obviously, we have omitted large parts of the buildout configuration here. The important things to note are:"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:136
msgid "We have created a plone 5 add-on using mr.bob."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:137
msgid "We have tested the egg in a Plone test environment using the autogenerated buildout.cfg of our package."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-package.rst:139
msgid "We have added dependencies to the egg."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-schema.rst:2
msgid "Creating a schema"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-schema.rst:4
msgid "**The starting point for our form**"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-schema.rst:6
msgid "With the form package created and installed, we can create our form schema. Later in this manual, we will cover in more detail how you can perform to configure custom widgets, set up hidden fields and so onimperatively in Python code."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-schema.rst:11
msgid "The example we’ll use for this form is a pizza ordering form. We’ll build on this form over the coming sections, so if you look at the example source code, you may find a few extra bits. However, the basics are simple enough."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-schema.rst:16
msgid "We’ll create a module called *order.py* inside our package (*example/dexterityforms/order.py)*, and add the following code to it:"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-schema.rst:64
msgid "For now, this form is quite simple. The list of pizzas is hard-coded, and we can only choose one of each type. We will make it (a little) more realistic later by adding a better vocabulary, creating a custom widget for the pizza order part, and improving the look and feel with a custom template."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-schema.rst:70
msgid "At the top, we have included a number of imports. Some of these pertain to the form view, which will be described next. Other than that, we have simply defined a schema that describes the form’s fields. The *title* and *description* of each field are used as label and help text, respectively. The *required* attribute can be set to *False* for optional fields. For a full field and widgets reference, see the :doc:`Dexterity developer manual </external/plone.app.dexterity/docs/index>`. (It is no accident that the Dexterity content type fields and widgets are defined in the same manner as those of a standalone form!)"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-schema.rst:80
msgid "Also notice how all the user-facing strings are wrapped in the message factory to make them translatable. The message factory is imported as *\\_*, which helps tools like *gettext* extract strings for translation. If you are sure your form will never need to be translated, you can skip the message factory in *interfaces.py* and use plain unicode strings, i.e. *u“Postcode”* instead of *\\_(u“Postcode”)*"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-schema.rst:87
msgid "Create a generic adapter to fill the form from anywhere"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-a-schema.rst:104
msgid "We are almost done with our most basic form. Before we can use the form, however, we need to create a form view and define some actions (buttons). That is the subject of the next section."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:2
msgid "Creating the form view"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:4
msgid "**Using our schema in a form**"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:6
msgid "To render our form, we need to create a view that uses a *z3c.form* base class. The view is registered like any other in ZCML. It is then configured with the schema to use for form fields, the label (page title) and description (lead-in text) to show, and actions to render as buttons."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:12
msgid "Still in *order.py*, we add the following:"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:67
msgid "The  form is registered in configure.zcml"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:102
msgid "Let’s go through this in some detail:"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:104
msgid "We derive our form view from one of the standard base classes in *plone.autoform*. It comes without any of the standard actions that can be found on more specialised base classes such as *SchemaAddForm* or *SchemaEditForm*. It basically mirrors the *z3c.form.form.Form* base class."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:109
msgid "Next, we specify the schema via the *schema* attribute."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:110
msgid "We set *ignoreContext* to *True*. This tells *z3c.form* not to attempt to read the current value of any of the form fields from the context. The default behaviour is to attempt to adapt the context (the Plone site root in this case) to the schema interface and read the schema attribute value from this adapter when first populating the form. This makes sense for edit forms and things like control panels, but not for a standalone form like this."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:117
msgid "We then set a *label* and *description* for the form. In the standard form template, these are rendered as a page header and lead-in text, respectively."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:120
msgid "We override the *update()* method to set the *disable\\_border* request variable. This hides the editable border when rendering the form. We then call the base class version of *update()*. This is crucial for the form to work! *update()* is a good place to perform any pre-work before the form machinery kicks in (before calling the base class version) or post-processing afterwards (after calling the base class version). See the section on the form rendering lifecycle later in this manual for the gory details."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:128
msgid "Finally, we define two actions, using the *@button.buttonAndHandler()* decorator. Each action is rendered as a button (in order). The argument is a (translated) string that will be used as a button label. The decorated handler function will be called when the button is clicked."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:133
msgid "We then use the standard way to register the view via zcml: *name* gives it a friendly name (used as a path segment in the URL); *for* sets the type of context where the form is available (here, we make it available on the Plone site root, though any interface or class may be passed; to make the form available on any context, use * as *for*); *permission* specifies a permission which the user must have to be able to view the form (here, we use the standard *zope2.View* permission)."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:142
msgid "For the purposes of this test, the actual work we do with the main handler is relatively contrived. However, the patterns are generally applicable."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:146
msgid "The second button (cancel) is the simpler of the two. It performs no validation and simply redirects to the context’s default view, i.e. the portal front page in this case."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/creating-the-form-view.rst:150
msgid "The first button actually extracts the data from the form, using *self.extractData()*. This returns a tuple of the form data, which has been converted to the field’s underlying type by each widget (thus, the value corresponding to the *Set* field contains a *set*) and any errors. If there are errors, we abort, setting *self.status* to confer an error message at the top of the page. Otherwise, we use the form data (here just printing the output to the console - you need to run Zope in foreground mode to see these messages), add a cookie-tracked status message (so that it can appear on the next page) and redirect the user to the context’s default view. In this case, that means the portal front page."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/index.rst:2
msgid "Creating a simple form"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/testing-the-form.rst:2
msgid "Testing the form"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/testing-the-form.rst:4
msgid "**Seeing the form in action**"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/testing-the-form.rst:6
msgid "The schema and (grokked) form view is all that’s needed to create the first iteration of the form. We can now install our new package and test the form."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/testing-the-form.rst:10
msgid "First, we make sure that we have run *bin/buildout* so that the new package is available to the Zope instance script. We then start up Zope in foreground mode:"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/testing-the-form.rst:18
msgid "Next, we create or go to a Plone site, and install the new *Example forms* product via the new Plone site creation form or the Add-ons control panel. This should also install the product called *Plone z3c.form support* (from the *plone.app.z3cform* package) as a dependency."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/testing-the-form.rst:24
msgid "We haven’t created any links to the form yet (though you could easily do so in a content item or portlet by inserting a manually-entered URL), but the form can be visited by going to the *@@order-pizza* view on the Plone site root, e.g.:"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/testing-the-form.rst:29
msgid "*http://localhost:8080/Plone/@@order-pizza*"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/testing-the-form.rst:31
msgid "It should look something like this:"
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/testing-the-form.rst:37
msgid "Try to fill in the form and use the two buttons. You should see the validation (both on-the-fly and after submit if you ignore the on-the-fly warnings), as well a message printed to the console if a valid form is submitted when clicking the *Order* button."
msgstr ""

#: ../develop/addons/schema-driven-forms/creating-a-simple-form/testing-the-form.rst:42
msgid "Remember: We have worked so far in a development environment of the package itself. Now you want to insert example.form to your project's buildout. It should look just similiar to the packages buildout."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:2
msgid "Actions (buttons)"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:4
msgid "**Defining form buttons and executing code when they are clicked**"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:6
msgid "*z3c.form* defines a rich framework for defining, processing and executing *actions*, an abstraction of the “outcome” of a form. Actions are not necessarily related to form buttons, but for the vast majority of use cases, we can think of forms buttons as a special type of widget that represents an underlying action. Such “button actions” are usually the only type of action we will ever use. Actions are nearly always associated with a handler method, which will be called by the framework when a form was submitted in response to a click of a particular button."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:15
msgid "The usual way to define actions and buttons is to use the *@button.buttonAndHandler()* decorator. This takes as a minimum the button title as an argument. We have already seen two examples of this in our pizza order form:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:30
msgid "The name of the method is not particularly important, so long as it is unique. The body of the handler function may react to the button however is appropriate for the form’s use case. It may perform a redirect or update form properties prior to re-rendering of the form. It should not return anything. Use the *self.extractData()* helper to return a tuple of the form’s submitted data and any errors, as shown in the preceding examples."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:38
msgid "The *action* argument is the action that was executed. We normally ignore this, but it may be introspected to find out more about the action. The *isExecuted()* method can be used to determine if the corresponding button was indeed clicked, and would normally be *True* within any action handler that is called by the framework. The *title* attribute contains the button title as shown to the user."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:46
msgid "Access keys"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:48
msgid "To define a HTML access key for a button, use the *accessKey* keyword argument:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:58
msgid "Conditional actions"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:60
msgid "If a button should only be shown in some cases, we can use the *condition* keyword argument, passing a function that takes as its only parameter the form to which the button belongs. If this does not return *True*, the button will be omitted from the form:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:85
msgid "Updating button properties"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:87
msgid "As with regular widgets, it is sometimes useful to set properties on buttons after they have been instantiated by *z3c.form*. One common requirement is to add a CSS class to the button. The standard edit form in*plone.directives.form* does this, for example, to add Plone’s standard CSS classes. The usual approach is to override *updateActions()*, which is called during the form update cycle:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:101
msgid "Notice how we call the base class version first to ensure the actions have been properly set up. Also bear in mind that if a button is conditional, it may not be in *self.actions* at all."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/actions.rst:105
msgid "Buttons are really just HTML input widgets, so you can set other properties too, including attributes like onclick or ondblclick to install client-side JavaScript event handlers."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/fieldsets.rst:2
msgid "Fieldsets"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/fieldsets.rst:4
msgid "**Breaking forms into multiple fieldsets**"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/fieldsets.rst:6
msgid "*z3c.form* supports the grouping of form fields into what is known as *groups*. A form class may mix in *z3c.form.group.GroupForm* to gain support for groups, setting the *groups* variable to a list of *Group* subclasses. The *Group* base class behaves much like the *Form* base class, but is used only for grouping fields, and cannot have actions."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/fieldsets.rst:12
msgid "In Plone, groups are represented as fieldsets. The standard templates make these look like dynamic tabs, much like those we can find in the edit forms for most Plone content. For this reason, *plone.supermodel* provides a directive called *model.fieldset()*, which can be used to create fieldsets."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/fieldsets.rst:20
msgid "The *z3c.form* *Group* idiom is still supported, and can be mixed with the more declarative *model.fieldset()* approach. However, the latter is usually easier to use."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/fieldsets.rst:25
msgid "To illustrate fieldsets, let’s give customers the option to leave feedback on our pizza ordering form. To keep our main form short, we will put this in a separate fieldset. Note that there is still only one set of submit buttons, i.e. all fieldsets are submitted at once. This is purely for aesthetic effect."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/fieldsets.rst:106
msgid "Since this approach uses form schema hints, the schema must derive from *model.Schema* and the form base class must extend *plone.autoform.AutoExtensibleForm*. In our example, we are using *SchemaForm*, a subclass of AutoExtensibleForm."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/fieldsets.rst:110
msgid "Above, we have declared a single fieldset, and listed the fields within it. Those fields not explicitly associated with a fieldset end up in the “default” fieldset. We also set a fieldset name and label. The label is optional."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/fieldsets.rst:115
msgid "It is possible to use the same fieldset name multiple times in the same form. This is often the case when we use the *additional\\_schemata* property to set secondary schemata for our form. In this case, the *label* from the first *fieldset* directive encountered will be used."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/index.rst:2
msgid "Customising form behaviour"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:2
msgid "Validation"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:4
msgid "**How to validate a form prior to processing**"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:6
msgid "All forms apply some form of validation. In *z3c.form,* validators can be executed in action handlers. If the validation fails, the action handler can choose how to proceed. For “submit” type buttons, that typically means showing error messages next to the relevant form fields. For “cancel” type buttons, the validation is normally skipped entirely."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:12
msgid "Form validation takes two forms: field-level validation, pertaining to the value of an individual field, and form-level validation, pertaining to the form as a whole. Form-level validation is less common, but can be useful if fields have complex inter-dependencies."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:18
msgid "Field-level validation"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:20
msgid "The simplest field-level validation is managed by the fields themselves. All fields support a *required* attribute, defaulting to *True*. The default field validator will return an error if a required field is not filled in. Some fields also support more specific properties that affect validation:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:26
msgid "Text fields like *Bytes, BytesLine, ASCII, ASCIILine, Text*and *TextLine*, as well as sequence fields like *Tuple, List, Set,**Frozenset* and *Dict* all support two properties, *min\\_length* and *max\\_length*, which can be set to control the minimum and maximum allowable length of the field’s value."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:31
msgid "Numeric fields like *Int, Float* and *Decimal*, as well as temporal fields like *Date*, *Datetime* and *Timedelta* all support two properties, *min* and *max*, setting minimum and maximum (inclusive) allowable values. In this case, the min/max value needs to be of the same type as field, so for an *Int* field, the value of this property is an integer, whereas for a *Datetime* field, it is a Python *datetime* object."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:38
msgid "A *Choice* field only allows values in a particular vocabulary. We will cover vocabularies in the next section."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:42
msgid "Constraints"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:44
msgid "If you require more specific validation, and you have control over the schema, you can specify a *constraint* function. This will be passed the submitted value (which is converted to a value appropriate for the field, so that e.g. a *List* field is passed a list). If the value is acceptable, the function should return *True*. If not, it should raise a *zope.schema.Invalid* exception or a derivative (returning *False* will also result in an error, but one without a meaningful error message)."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:52
msgid "Here is the order form schema again, this time with a constraint function:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:106
msgid "Notice how the *postcodeConstraint()*function is passed a value (a unicode string in this case, since the field is a *TextLine*), which we validate. If we consider the value to be invalid, we raise an *Invalid* exception, with the error message passed as the exception argument. Otherwise, we return *True*."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:113
msgid "Field widget validators"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:115
msgid "Constraints are relatively easy to write, but they have two potential drawbacks: First of all, they require that we change the underlying interface. This is no problem if the interface exists only for the form, but could be a problem if it is used in other contexts as well. Second, if we want to re-use a validator for multiple forms, we would need to modify multiple schemata."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:122
msgid "z3c.form’s field widget validators address these shortcomings. These are specific to the form; by contrast, constraints are a feature of *zope.interface* interfaces and apply in other scenarios where interfaces are used as well. *plone.directives.form* provides a convenience decorator for creating simple field validators."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:128
#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:273
msgid "For example:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:164
msgid "The *@form.validator.validator()* decorator registers a validator adapter. When the validation is invoked, the decorated function will be called with the field’s value as an argument and given an opportunity to raise a validation error, much like the constraint above. Again like the constraint, the default validator is called first, so things like the required flag and indeed any custom constraint are processed first."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:171
msgid "The *@form.validator.validator()* decorator can take keyword arguments to make the validator more specific or more generic. The valid values are:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:175
msgid "context"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:175
msgid "The form’s context, typically an interface. This allows a validator to be invoked only on a particular type of content object."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:178
#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:76
msgid "request"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:178
msgid "The form’s request. Normally, this is used to specify a browser layer."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:182
msgid "view"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:181
msgid "The form view itself. This allows a validator to be invoked for a particular type of form. As with the other options, we can pass either a class or an interface."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:185
#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:82
msgid "field"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:185
msgid "A field instance, as illustrated above, or a field *type*, e.g. an interface like *zope.schema.IInt*."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:188
#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:78
msgid "widget"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:188
msgid "The widget being used for the field"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:190
msgid "It is important to realise that if we don’t specify the *field* discriminator, or if we pass a field type instead of an instance, the validator will be used for all fields in the form (of the given type). Also note how we had to define the constraint function before the form schema interface (since it was referenced in the schema itself), but we define this validator after the schema and form, since here we need the interface to have been defined before we use it."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:199
msgid "Advanced field widget validators"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:201
msgid "z3c.form validators are in fact a little more powerful than what we have seen above. A validator is registered as a multi-adapter providing *z3c.form.interfaces.IValidator* and adapting the objects *(context, request, view, field, widget)*, corresponding to the discriminants seen above. You may wish to register an adapter directly instead of using the *@form.validator.validator()* decorator if you:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:208
msgid "want to skip the default validation of field properties like *required* or *min*/*max*"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:210
msgid "need to access the context, request, form, field and/or widget instances to validate the value"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:213
msgid "We won’t show a full example here, but as an outline, consider the following code snippet:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:236
msgid "This registers an adapter, extending the SimpleFieldValidator base class, and calling the superclass version of validate() to gain the default validation logic. In the validate() method, we can use variables like self.context, self.request, self.view, self.field and self.widget to access the adapted objects. The WidgetValidatorDiscriminators class takes care of preparing the adapter discriminators. It takes the same keyword arguments as *@form.validator.validator()* seen above."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:245
msgid "Form-level validation"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:247
msgid "Form level validation is less common than field-level validation, but is useful if your fields are inter-dependent in any ways. As with field-level validation, there are two options:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:251
msgid "Invariants are specified at the interface level. As such, they are analogous to constraints."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:253
msgid "Widget manager validators are standalone adapters that are specific to *z3c.form*. As such, they are analogous to field widget validators."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:258
msgid "Invariants"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:260
msgid "Invariants work much like constraints, in that they are called during the form validation cycle and may raise *Invalid* exceptions to indicate a validation problem. Because they are not tied to fields specifically, an error resulting from an invariant check is displayed at the top of the form."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:266
msgid "Invariants are written as functions inside the interface definition, decorated with the *zope.interface.invariant* decorator. They are passed a data object that provides the schema interface. In the case of a *z3c.form* form, this is actually a special object that provides the values submitted in the request being validated, rather than an actual persistent object."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:327
msgid "Here we have defined a single invariant, although there is no limit to the number of invariants that you can use."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:331
msgid "Widget manager validators"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:333
msgid "Invariants have most of the same benefits and draw-backs as constraints: they are easy to write, but require modifications to the schema interface, and cannot be generalised beyond the interface. Not surprisingly therefore, *z3c.form* provides another option, in the form of a widget manager validator. This is a multi-adapter for *(context, request, view, schema, widget manager*) providing *z3c.form.interfaces.IManagerValidator*. The default simply checks invariants, although you can register your own override."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:342
msgid "That said, overriding the widget manager validator is not particularly common, because if you need full-form validation and you don’t want to use invariants, it is normally easier to place validation in the action handler, as we will see next."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:348
msgid "Invoking validators"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:350
msgid "Unlike some of the earlier form libraries, *z3c.form* does not automatically invoke validators on every form submit. This is actually a good thing, because it makes it much easier to decide when validation makes sense (e.g. there is no need to validate a “cancel” button)."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:355
msgid "We have already seen the most common pattern for invoking validation in our handler for the “order” button:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:373
msgid "Notice how we call *extractData()*, which returns both a dictionary of the submitted data (for valid fields, converted to the underlying field value type) and a dictionary of errors (which is empty if all fields are valid)."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:379
msgid "Validating in action handlers"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:381
msgid "Sometimes, it may be useful to perform additional validation in the action handler itself. We can inspect the *data* dictionary, as well as any other aspect of the environment (like *self.context*, the context content object, or *self.request*, the request), to perform validation."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:386
msgid "To signal an error, we use one of two exception types:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:388
msgid "*z3c.form.interfaces.ActionExecutionError*, for generic, form-wide errors"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:390
msgid "*z3c.form.interfaces.WidgetActionExecutionError*, for field/widget-specific errors"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:393
msgid "In both cases, these exceptions wrap an *Invalid* exception. Let’s add two examples to our action handler."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/validation.rst:437
msgid "Notice how we perform the check after the *extractData()* call, but before the possible premature return in case of validation errors. This is to ensure all relevant errors are displayed to the user. Also note that whilst the invariant is passed an object providing the schema interface, the *data* dictionary is just that - a dictionary. Hence, we use “dot notation” (*data.address1*) to access the value of a field in the invariant, but “index notation” (*data[‘address1’]*)**to access the value of a field in the handler."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:2
#: ../develop/plone/content/archetypes/fields.rst:595
#: ../develop/plone/forms/vocabularies.rst:3
msgid "Vocabularies"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:4
msgid "**Static and dynamic lists of valid values**"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:6
msgid "The term “vocabulary” here refers to a list of values that are allowable by a given field. In most cases, that implies a field using a selection widget, like a multi-select list box or a drop-down."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:10
msgid "Selection fields use the *Choice* field type. To allow the user to select a single value, use a *Choice* field directly:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:21
msgid "For a multi-select field, use a *List*, *Tuple, Set* or *Frozenset* with a *Choice* as the *value\\_type*:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:35
msgid "The *Choice* field must be passed one of the following arguments, specifying its vocabulary:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:38
msgid "*values* can be used to give a list of static values"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:39
msgid "*source* can be used to refer to an *IContextSourceBinder* or *ISource* instance"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:41
msgid "*vocabulary* can be used to refer to an *IVocabulary* instance or (more commonly) a string giving the name of an *IVocabularyFactory* named utility."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:45
msgid "We’ll now explore various ways in which we can improve on the *orderItems* list."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:49
msgid "Static vocabularies"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:51
msgid "Up until now, we have been using a static vocabulary, passing the list of allowable values as the *values* parameters to the *Choice* field. This is simple, but has a few draw-backs:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:55
msgid "If the vocabulary changes, we have to change the interface code."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:56
msgid "There is no way to separate the label that the user sees in the selection widget from the value that is extracted."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:60
#: ../develop/plone/content/archetypes/fields.rst:600
#: ../develop/plone/forms/vocabularies.rst:150
msgid "Dynamic vocabularies"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:62
msgid "To implement a more dynamic vocabulary, we can use a source. Before we do that, though, let’s consider where our data will come from."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:65
msgid "We want to make the “order items” list more dynamic, and allow the list of available pizza types to be managed through the web. There are various ways to do this, including modelling pizzas as content items and creating a source that performs a catalog query to find them all. To manage a simple list, however, we can use *plone.app.registry* and install the list with our product’s extension profile. An administrator could then use the registry control panel to change the list. We won’t go into *plone.app.registry* in detail here, but you can read its `documentation`_ to get a full understanding of what it is and how it works."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:76
msgid "First, we need to add *plone.app.registry* as a dependency in *setup.py*:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:88
msgid "We also want to configure it when our product is installed in Plone, so we edit *profiles/default/metadata.xml* as follows:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:101
msgid "Next, we create a registry.xml containing the following:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:121
msgid "After re-running buildout and (re-)installing our product in the"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:124
msgid "Terminology"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:126
msgid "When working with dynamic vocabularies, we come across some terminology that is worth explaining:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:129
msgid "A *term* is an entry in the vocabulary. The term has a value. Most terms are *tokenised* terms which also have a token, and some terms are *titled*, meaning they have a title that is different to the token."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:133
msgid "The *token* must be an ASCII string. It is the value passed with the request when the form is submitted. A token must uniquely identify a term."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:136
msgid "The *value* is the actual value stored on the object. This is not passed to the browser or used in the form. The value is often a unicode string, but can be any type of object."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:139
msgid "The *title* is a unicode string or translatable message. It is used in the form and displayed to the user."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:143
msgid "One-off sources with a context source binder"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:145
msgid "We can make a one-off dynamic vocabulary using a context source binder. This is simply a callable (usually a function or an object with a *\\_\\_call\\_\\_* method) that provides the *IContextSourceBinder* interface and takes a *context* parameter. The *context* argument is the context of the form view. The callable should return a vocabulary, which is most easily achieved by using the *SimpleVocabulary* class from *zope.schema*."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:153
msgid "Here is an example that returns our pizza types:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:186
msgid "Here, we have defined a function acting as the*IContextSourceBinder*, as specified via the @*grok.provider()* decorator. This looks up the registry and looks for the record we created with *registry.xml* above (remember to re-install the product in the Add-on control panel or the *portal\\_quickinstaller* tool if you modify this file). We then use the *SimpleVocabulary* helper class to create the actual vocabulary."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:193
msgid "The *SimpleVocabulary* class additionally contains two class methods that can be used to create vocabularies from lists:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:196
msgid "*fromValues()* takes a simple list of values and returns a tokenised vocabulary where the values are the items in the list, and the tokens are created by calling *str()* on the values."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:199
msgid "*fromItems()* takes a list of *(token, value)* tuples and creates a tokenised vocabulary with the token and value specified."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:202
msgid "We can also instantiate a *SimpleVocabulary* directly and pass a list of terms in the initialiser as we have done above. The *createTerm()* class method can be used to create a term from a *value*, *token* and *title*. Only the value is required."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:207
msgid "To use this context source binder, we use the *source* argument to the *Choice* constructor:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:222
msgid "Parameterised sources"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:224
msgid "Sometimes, it is useful to parameterise the source. For example, we could generalise the pizza source to work with any registry value containing a sequence, by passing the registry key as an argument. This would allow us to create many similar vocabularies and call upon them in code easily."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:230
msgid "This degree of generalisation is probably overkill for our use case, but to illustrate the point, we’ll outline the solution below."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:233
msgid "First, we turn our *IContextSourceBinder* into a class that is initialised with the registry key"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:254
msgid "Notice how in our first implementation, the function *provided* the *IContextSourceBinder*interface, but the class here *implements* it. This is because the function was the context source binder callable itself. Conversely, the class is a factory that creates *IContextSourceBinder* objects, which in turn are callable."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:260
msgid "Again, the source is set using the *source* argument to the *Choice* constructor."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:270
msgid "When the schema is initialised on startup, the a *RegistrySource* object is instantiated, storing the desired registry key in an instance variable. Each time the vocabulary is needed, this object will be called (i.e. the *\\_\\_call\\_\\_()* method is invoked) with the context as an argument, and is expected to return an appropriate vocabulary."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:277
msgid "Named vocabularies"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:279
msgid "Context source binders are great for simple dynamic vocabularies. They are also re-usable, since we can import the source from a single location and use it in multiple instances. However, we may want to provide an additional level of decoupling, by locating a vocabulary by name, not necessarily caring where or how it is implemented."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:285
msgid "Named vocabularies are similar to context source binders, but are components registered as named utilities, referenced in the schema by name only. This allows local overrides of the vocabulary via the Component Architecture, and makes it easier to distribute vocabularies in third party packages."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:292
msgid "Named vocabularies cannot be parameterised in the way as we did with the context source binder above, since they are looked up by name only."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:296
msgid "We can turn our first dynamic vocabulary into a named vocabulary by creating a named utility providing *IVocabularyFactory*, like so:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:327
msgid "By convention, the vocabulary name is prefixed with the package name, to ensure uniqueness."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:330
msgid "We can make use of this vocabulary in any schema by passing its name to the *vocabulary* argument of the *Choice* field constructor:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/vocabularies.rst:340
msgid "As you might expect, there are a number of standard vocabularies that come with Plone and third party packages, most of which are named vocabularies. Many of these can be found in the *plone.app.vocabularies* package, and add-ons such as *plone.principalsource*."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:2
#: ../develop/plone/forms/z3c.form.rst:591
msgid "Widgets"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:4
msgid "**Changing the widget used to render a field**"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:6
msgid "Like most form libraries, *z3c.form* separates a field – a representation of the value being provided by the form – from its widget – a UI component that renders the field in the form. In most cases, the widget is rendered as a simple HTML *<input />* element, although more complex widgets may use more complex markup."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:12
msgid "The simplest widgets in *z3c.form* are field-agnostic. However, we nearly always work with *field widgets*, which make use of field attributes (e.g. constraints or default values) and optionally the current value of the field (in edit forms) during form rendering."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:17
msgid "Most of the time, we don’t worry too much about widgets: each of the standard fields has a default field widget, which is normally sufficient. If we need to, however, we can override the widget for a given field with a new one."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:23
msgid "Selecting a custom widget using form directives"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:25
msgid "*plone.directives.form* provides a convenient way to specify a custom widget for a field, using the *form.widget()* directive:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:51
msgid "The argument can be either a field widget factory, as shown here, or the full dotted name to one (*plone.app.z3cform.wysiwyg.WysiwygFieldWidget* in this case)."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:56
msgid "Updating widget settings"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:58
msgid "All widgets expose properties that control how they are rendered. You can set these properties by passing them to the widget directive:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:74
msgid "Support for specifying widget properties was added in plone.autoform 1.4."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:76
msgid "Some of the more useful properties are shown below. These generally apply to the widget’s *<input />* element."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:79
msgid "*klass*, a string, can be set to a CSS class."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:80
msgid "*style*, a string, can be set to a CSS style string"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:81
msgid "*title*, a string, can be used to set the HTML attribute with the same name"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:83
msgid "*onclick*, *ondblclick*, etc can be used to associate JavaScript code with the corresponding events"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:85
msgid "*disabled* can be set to True to disable input into the field"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:87
msgid "Other widgets also have attributes that correspond to the HTML elements they render. For example, the default widget for a *Text* field renders a *<textarea />* , and has attributes like *rows* and *cols*. For a *TextLine*, the widget renders an *<input type=“text” />*, which supports a *size* attribute, among others."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:93
msgid "Take a look at *z3c.form*’s *browser/interfaces.py* for a full list of attributes that are used."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:98
msgid "Supplying a widget factory"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:100
msgid "Later in this manual, we will learn how to set up the *fields* attribute of a form manually, as is done in “plain” *z3c.form*, instead of using the *schema* shortcut that is provided by *plone.autoform*. If you are using this style of configuration (or simply looking at the basic *z3c.form* documentation), the syntax for setting a widget factory is:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:117
msgid "Widget reference"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:119
msgid "You can find the default widgets in the *browser* package in *z3c.form*. The *z3c.form* `documentation`_ contains a `listing`_ of all the default widgets that shows the HTML output of each."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-behaviour/widgets.rst:123
msgid "In addition, the Dexterity manual contains :doc:`an overview of common custom widgets </external/plone.app.dexterity/docs/reference/widgets>`."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:2
msgid "Error snippets"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:4
msgid "**Customising error messages**"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:6
msgid "When creating custom validators, as shown earlier in this manual, it is easy to tailor an error message. However, *zope.schema* and *z3c.form* already perform a fair amount of validation for us, which results in generic error messages. For example, if a required field is not completed, a rather bland error message (“Required input is missing”) will be shown. Sometimes, we may want to change these messages."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:13
msgid "*z3c.form* allows error messages to be customised at various levels of detail. For example, it is possible to register a custom *z3c.form.interfaces.IErrorViewSnippet* adapter, which behaves like a mini-view and can output arbitrary HTML. However, in most cases, we only want to update the output text string. For this, we use what’s known as a “value adapter”. This is simply an adapter which *z3c.form*’s default *IErrorViewSnippet* implementations will look up to determine which message to show."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:22
msgid "The easiest way to create an error message value adapter is to use the *@form.error\\_message()* decorator from *plone.directives.form*. This decorator should be applied to a function that takes as its only argument the (invalid) value that was submitted, and return a unicode string or message indicating the error. To illustrate this, we will add a new function to *order.py*, just after the interface definition:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:65
msgid "As with the *@form.validator()* decorator, the *@form.error\\_message()* validator takes a number of keyword arguments, used to control where the error message is applied. The allowable arguments are:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:72
msgid "error"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:70
msgid "The type of error, which is normally represented by an exception class. The most general type will usually be a *zope.schema.interfaces.ValidationError*. See below for a list of other common exception types."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:75
msgid "The current request. This is normally used to supply a browser layer marker interface. This is a good way to ensure a general error message is only in force when our product is installed."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:79
msgid "The widget which was used to render the field."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:81
msgid "The field to which the error message applies. If this is omitted, the message would apply to all fields on the form (provided *form* is supplied) of the given error (provided *error* is applied)."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:87
msgid "form"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:85
msgid "The form class. We can use this either to apply a single message to a given error across multiple fields in one form (in which case *field* would be omitted), or to customise an error message for a particular form only if a schema is used in more than one form."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:90
msgid "content"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:90
msgid "The content item (context) on which the form is being rendered."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:93
msgid "In almost all cases, you will want to supply both *field* and *error* at a minimum, although if you have multiple fields that may raise a particular error, and you want to create a message for all instances of that error, you can omit *field* and use *form* instead. If you supply just *error*, the validator will apply to all instances of that error, on all forms, site-wide, which is probably not a good idea if you intend your code to be-usable. At the very least, you should use the *request* field to specify a browser layer in this case, and install that layer with *browserlayer.xml* in your product’s installation profile."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:103
msgid "The exception types which may be used for the *error* discriminator are field-specific. The standard fields as defined in *zope.schema* use the following exceptions, all of which can be imported from *zope.schema.interfaces*:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:108
msgid "*RequiredMissing*, used when a required field is submitted without a value"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:110
msgid "*WrongType*, used when a field is passed a value of an invalid type"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:111
msgid "*TooBig* and *TooSmall*, used when a value is outside the *min* and/or *max* range specified for ordered fields (e.g. numeric or date fields)"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:114
msgid "*TooLong* and *TooShort*, used when a value is outside the *min\\_length* and/or *max\\_length* range specified for length-aware fields (e.g. text or sequence fields)"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:117
msgid "*InvalidValue*, used when a value is invalid, e.g. a non-ASCII character passed to an ASCII field"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:119
msgid "*ConstraintNotSatisfied*, used when a *constraint* method returns *False*"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:121
msgid "*WrongContainedType*, used if an object of an invalid type is added to a sequence (i.e. the type does not conform to the field’s *value\\_type*)"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:124
msgid "*NotUnique*, used if a uniqueness constraint is violated"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:125
msgid "*InvalidURI*, used for *URI* fields if the value is not a valid URI"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:126
msgid "*InvalidId*, used for *Id* fields if the value is not a valid id"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/error-snippets.rst:127
msgid "*InvalidDottedName*, used for *DottedName* fields if the value is not a valid dotted name"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/index.rst:2
msgid "Customising form presentation"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:2
msgid "Layout templates"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:4
msgid "**Creating a custom layout for our form**"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:6
msgid "So far, we have relied on Plone (in fact, *plone.app.z3cform*) to supply a default template for our forms. This uses the default Plone form markup, which is consistent with that used in other forms in Plone. For many forms, this is all we need. However, it is sometimes useful to create a custom template."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:12
msgid "Custom templates are normally needed for one of two reasons: Either, to insert some additional markup around or inside the form itself; or to radically change the form markup itself. The former is more common, since changing the form look-and-feel is normally done better with CSS. For that reason, *plone.app.z3cform* registers a view called *@@ploneform-macros*, which provides useful macros for rendering forms using the standard markup. We will illustrate how to use this below."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:20
msgid "The easiest way to associate a template with a form is to use the default grokked template association. Our form is called *OrderForm* and lives a module called *order.py*, so the grokker will look for a template in *order\\_templates/orderform.pt*."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:26
msgid "With the exception of *DisplayForms*, there is always a default template for forms extending the grokked base classes in *plone.directives.form*. Therefore, the template is optional. Unlike *grok.View* views, there is no need to override *render()* if the template is omitted."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:31
msgid "As an example, let’s create such a template and add some content before the form tag:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:57
msgid "Notice how the *@@ploneform-macros* view does most of the work. This contains a number of useful macros:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:60
msgid "*form* is a full page form, including the label"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:61
msgid "*titlelessform* includes the form *status* at the top, the *<form />* element, and the contents of the *fields* and *actions* macros. It also defines three slots: *formtop*, just inside the *<form>* opening tag; *formbottom*, just before the *</form>* closing tag; and *beforeactions*, just before the form actions (buttons) are output."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:66
msgid "*fields* iterates over all widgets in the form and renders each, using the contents of the *field* macro."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:68
msgid "*field* renders a single field. It expects the variable *widget* to be defined in the TAL scope, referring to a *z3c.form* widget instance. It will output an error message if there is a field validation error, a label, a marker to say whether the field is required, the field description, and the widget itself (normally just an *<input />* element)."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:74
msgid "*actions* renders all actions on the form. This normally results in a row of *<input type=“submit” … />* elements."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:78
msgid "If you require more control, you can always create your form from scratch. Take a look at *macros.pt* in *plone.app.z3cform* for inspiration."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:82
msgid "If you don’t require tabbed fieldsets or “inline” field validation, the template can be simplified substantially. See *macros.pt* in *plone.z3cform* for a cleaner example."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:86
msgid "The most important variables used in the template are:"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:88
msgid "*view.id*, a unique id for the form"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:89
msgid "*view.enctype*, the form’s *enctype* attribute"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:90
msgid "*view.label*, the form’s title"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:91
msgid "*view.description*, the forms’ description"
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:92
msgid "*view.status*, a status message that is often set in action handlers."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:93
msgid "*view.groups,* a list of fieldsets (groups), as represented by *Group* instances."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:95
msgid "*view.widgets*, which contains all widgets. *view.widgets.errors* contains a list of error snippet views. Otherwise, *widgets* behaves like an ordered dictionary. Iterating over its *values()* will yield all widgets in order. The widgets have been updated, and can be output using their *render()* method."
msgstr ""

#: ../develop/addons/schema-driven-forms/customising-form-presentation/layout-templates.rst:100
msgid "*view.actions,* contains an ordered dictionary of actions (buttons). Iterating over its *values()* will yield all actions in order. The actions have been updated, and can be output using their *render()* method."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/add-forms.rst:2
msgid "Add forms"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/add-forms.rst:4
msgid "**Forms to create new content objects**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/add-forms.rst:6
msgid "An add form, as its name implies, is used to add content to a container. Add forms are usually registered as views on a container. For generic CMF or Plone content, the *IFolderish* interface is normally a good candidate. The fields in an add form usually represent the fields in the type that is being added."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/add-forms.rst:13
msgid "If you are using Dexterity or Archetypes, these frameworks have their own add form factories, which you probably want to use instead of the more basic version described here."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/add-forms.rst:17
msgid "Add forms derive from *z3c.form.form.AddForm*, which is extended by *plone.directives.form.AddForm* and *plone.directives.form.SchemaAddForm*, adding grok support and standard Plone semantics."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/add-forms.rst:22
msgid "To use an add form, you must implement two methods - *create()* and *add()*. The form then takes care of emitting the proper events and directing the user to the newly added content item. You can also set the *immediate\\_view* property to the URL of a page to visit after adding the content item."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/add-forms.rst:62
msgid "*create()* is called after validation, and is passed a dictionary of marshalled form fields. It should construct and return the object being added. That object is then passed to *add()* (after an object-created event has been fired), which should add it, normally to *self.context* (the container)."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/add-forms.rst:68
#: ../develop/addons/schema-driven-forms/form-types/page-forms.rst:53
msgid "A non-schema version would look like this:"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:2
msgid "Base forms and schema forms"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:4
msgid "**Understanding the two types of forms work with in this manual**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:6
msgid "*z3c.form* comes with a few base classes for forms, covering common use cases including page forms, edit forms, add forms and display forms. In this manual, we are actually using some intermediary base classes from *plone.directives.form*, which serve two purposes: they allow the forms to be “grokked”, for example to associate a page template or register the form as a view using directives like *grok.context()* and *grok.name()*; some of them also provide a hook for *schema forms*, which use form hints supplied in directives (like *form.widget()* as we saw in the previous section) that are interpreted by *plone.autoform* to configure the form’s fields. Whilst we can do everything in code using the plain *z3c.form* API, many people may prefer the more declarative style of configuration that comes with *plone.autoform* and *plone.directives.form*, because it involves less code and keeps the field-specific form configuration closer to the field definitions."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:21
msgid "Over the next several sections, we will discuss the various form base classes. A brief overview follows."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:34
msgid "**z3c.form.form.BaseForm**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:25
msgid "This base class is not to be used directly, but is the ancestor of all *z3c.form* forms. It defines attributes like *label* (the form’s title), *mode* (the default mode for the form’s fields, usually *‘input’* in regular forms and *‘display’* in display forms), *ignoreContext*, *ignoreRequest* (see below) and *ignoreReadonly* (which omits readonly fields from the form). It also defines the basic *update()* and *render()* methods that are the basis of the form rendering cycle, which we will explain towards the end of this manual, and the *getContent()* helper method which can be used to tell the form about an alternative context - see below."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:38
msgid "**plone.directives.form.Form (extending z3c.form.form.Form)**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:37
msgid "A basic full-page form. It supports actions (buttons), and will by default read field values from the request (unless *ignoreRequest* is *True*) or the context (unless *ignoreContext* is *True*)."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:43
msgid "**plone.directives.form.SchemaForm**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:41
msgid "This is identical to *Form*, except that it will construct its fields *plone.autoform* schema hints. The *schema* attribute is required, and must be a schema interface. The *additional\\_schemata* attribute may be set to a tuple of additional schemata - see below."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:48
msgid "**plone.directives.form.AddForm (extending z3c.form.form.AddForm)**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:46
msgid "A basic content add form with two actions - save and cancel. This implements default Plone semantics for adding content. Note that if you are using Dexterity, you should use the Dexterity add form instead. See the Dexterity documentation for details."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:50
msgid "**plone.directives.form.SchemaAddForm**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:51
msgid "The schema form equivalent of *AddForm*."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:59
msgid "**plone.directives.form.EditForm**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:53
msgid "A basic edit form with two actions - save and cancel. This operates on the context returned by the *getContent()* helper method. By default, that’s the context of the form view (*self.context*), but we can override *getContent()* to operate on something else. In particular, it is possible to operate on a dictionary. See the section on edit forms shortly. Note that if you are using Dexterity, you should use the Dexterity edit form instead. See the Dexterity documentation for details."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:61
msgid "**plone.directives.form.SchemaEditForm**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:62
msgid "The schema form equivalent of *EditForm*."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:69
msgid "**plone.directives.dexterity.DisplayForm**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:64
msgid "This is a display form view based on the *WidgetsView* base class from *plone.autoform*. You can use this much like *grok.View*, except that it must be initialised with a *schema*, and optionally a tuple of *additional\\_schemata*. There are several helper variables set during the *update()* cycle which provide easy access to the form’s widgets in display mode."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:72
msgid "Context and request"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:74
msgid "When a form is first rendered, it will attempt to fill fields based on the following rules:"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:77
msgid "If *ignoreRequest* is *False* (as is the default for all forms bar display forms), and a value corresponding to the field is in the request, this will be used. This normally means that the form was submitted, but that some validation failed, sending the user back to the form to correct their mistake."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:82
msgid "If no request value was found and *ignoreContext* is *False* (as is the default for all forms bar add forms), the form will look for an associated interface for each widget. This is normally the schema interface of the field that the widget is rendering. It will then attempt to adapt the context to that interface (if the context provides the interface directly, as is often the case for edit and display forms, the context is used as-is). If no such adapter exists, form setup will fail. If this happens, you can either set *ignoreContext = True* (which is normally appropriate for free-standing forms like the examples earlier in this manual), supply an adapter (which is normally appropriate for forms that edit some aspect of the context), or override *getContent()* to return a content that is adaptable to the schema interface."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:95
msgid "If no request or context value was found and the field has a default value, this will be used."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:99
msgid "Primary and additional schemata in schema forms"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:101
msgid "When using a schema form, it is possible to set two form properties supplying schemata for the form:"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:104
msgid "*schema* is required for all schema forms, and must point to a schema interface. This is known as the default or primary schema for the form."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:107
msgid "*additional\\_schemata* is optional, and can be set to a tuple or list of schema interfaces. These will also be included in the form."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:111
msgid "If you want to make the schema dynamic, you can implement these as read-only properties. this is how Dexterity’s add and edit forms work, for example - they look up the primary schema from the type information in *portal\\_types*, and additional schemata from behaviours."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/base-forms-and-schema-forms.rst:116
msgid "Later in this manual, we will learn about creating tabbed fieldsets, also known as groups. The schema forms support a property *autoGroups* which default to *False*. When set to *True*, the primary schema will be used as the primary fieldset, and each schema in *additional\\_schemata* will become its own fieldset. The schema name will become the fieldset name, and its docstring will become its description. This is obviously somewhat inflexible, but can be useful for certain forms where the fieldsets need to be dynamically looked up."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:2
msgid "Display forms"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:4
msgid "**Using widgets in display mode**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:6
msgid "Both forms and widgets support the concept of a “mode”. The form’s mode acts as a default for its widgets. The most commonly used mode is *‘input’*, as indicated by the constant *z3c.form.interfaces.INPUT\\_MODE*, but there is also *‘hidden’* (*HIDDEN\\_MODE*) and *‘display’* (*DISPLAY\\_MODE*). The latter is the form mode for *display forms*."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:13
msgid "Display forms derive from *z3c.form.display.DisplayForm*, which is extended by *plone.directives.dexterity.DisplayForm*. This also mixes in *plone.autoform.view.WidgetsView*, which provides various conveniences for dealing with display mode widgets and fieldsets (groups). Note that this is a “schema form”, i.e. we must set the *schema* property (and optionally *additional\\_schemata*) to a schema deriving from *form.Schema*."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:22
msgid "If you require a grokked alternative that is not a schema form, you can derive from *z3c.form.form.DisplayForm* and *plone.directives.form.form.GrokkedForm*."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:26
msgid "Display forms are not very common outside framework code. In most cases, it is easier to just create a standard view that renders the context. In a framework such as Dexterity, display forms are used as the default views of content items. The main reason to use display forms for anything bespoke is to use a complex widget that has a display mode rendering that is difficult to replicate in a custom template."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:33
msgid "It is also possible to put some widgets into *input* mode (by setting the *mode* attribute in the *updateWidgets()* hook), thus placing a widget into a form that is otherwise not managed by *z3c.form*."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:37
msgid "Display forms are used much like standard views. For example:"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:56
msgid "There would typically also be a template associated with this class. This uses standard five.grok view semantics. If the display form above was in a module called *display.py*, a template may be found in *display\\_templates/mydisplayform.pt*."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:61
msgid "The *DisplayForm* base class in *plone.directives.form* makes the following view attributes available to the template:"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:64
msgid "*view.w* is a dictionary of all the display widgets, keyed by field names. This includes widgets from alternative fieldsets."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:66
msgid "*view.widgets* contains a list of widgets in schema order for the default fieldset."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:68
msgid "*view.groups* contains a list of fieldsets in fieldset order."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:69
msgid "*view.fieldsets* contains a dict mapping fieldset name to fieldset"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:70
msgid "On a fieldset (group), you can access a *widgets* list to get widgets in that fieldset"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/display-forms.rst:73
msgid "The *w* dict is the mostly commonly used. To render a widget named *foo* in the template, we could do:"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/edit-forms.rst:2
msgid "Edit forms"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/edit-forms.rst:4
msgid "**Forms that edit something**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/edit-forms.rst:6
msgid "Edit forms, unsurprisingly, are used to edit content objects or other contexts. They derive from *z3c.form.form.EditForm*, which is extended by *plone.directives.form.EditForm* and *plone.directives.form.SchemaEditForm*, adding grok support and Plone semantics. The edit form takes care of firing object-modified events, and implements default save and cancel actions."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/edit-forms.rst:14
msgid "As with add forms, frameworks like Archetypes and Dexterity provide their own default edit forms, which should use for editing content objects built with those frameworks."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/edit-forms.rst:18
msgid "The schema of an edit form is normally a content object schema, which normally also describes the context of the form view. That is, the edit form is normally a view on the object that is being edited"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/edit-forms.rst:22
msgid "That said, we can implement *getContent()* to supply a different context. This would normally provide the schema interface, but it does not need to. As with any form, the context need only be adaptable to the interface(s) associated with its fields."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/edit-forms.rst:27
msgid "A simple edit form in a view called *@@edit* that edits a content object providing *IMyType* would look like this:"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/edit-forms.rst:53
msgid "There is no need to define any actions or implement any methods. The default save button handler will adapt the context to *IMyType* and then set each field in the interface with the submitted form values."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/edit-forms.rst:57
msgid "A non-schema example would look like:"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/edit-forms.rst:82
msgid "As a slightly ore interesting example, here is one adapted from *plone.app.registry*’s control panel form base class:"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/edit-forms.rst:125
msgid "The idea here is that *IMySettings*, which is set as the schema for this schema edit form, is installed in the registry as a set of records. The *forInterace()* method on the *IRegistry* utility returns a so-called records proxy object, which implements the interface, but reads/writes values from/to the configuration registry. The form view is registered on the site root, but we override *getContent()* to return the records proxy. Hence, the initial form values is read from the proxy, and when the form is successfully submitted, the proxy (and hence the registry) is automatically updated."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/index.rst:2
msgid "Form types"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/page-forms.rst:2
msgid "Page forms"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/page-forms.rst:4
msgid "**The most basic type of form**"
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/page-forms.rst:6
msgid "A page form, or simply “form”, is a basic, “standalone” form. The pizza order example in this manual is a page form."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/page-forms.rst:9
msgid "Page forms derive from *z3c.form.form.Form*, which is extended by *plone.directives.form.Form* and *plone.directives.form.SchemaForm* as described in this manual. They will typically have actions, and be registered as a view for some context. For a completely standalone form, the site root is often good choice."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/page-forms.rst:93
msgid "Many “standalone” page forms will set *ignoreContext = True*. If it is *False* (the default), the form will read the current value of each field from the context, by attempting to adapt it to the form schema, as described in the previous section."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/page-forms.rst:98
msgid "Sometimes, we want to populate the form with initial values that are not attributes of the context (or an adapter thereof). *z3c.form* allows us to change the object from which the form’s data is read, by overriding the *getContent()* method. We can return another object that provides or is adaptable to the schema interface(s) associated with the form’s fields, but we can also return a dictionary with keys that match the names of the fields in the form schema. This is usually easier than creating an adapter on some arbitrary context (e.g. the site root) solely for the purpose of pre-populating form values. It also makes it easy to construct the form’s initial values dynamically."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/page-forms.rst:158
msgid "Note how the fields in the *data* dictionary returned by *getContent()* correspond to the fields of the schema interface from which the form’s fields are built. If we had fields from multiple interfaces (e.g. using the *additional\\_schemata* tuple), we would need to populate keys based on the fields from all interfaces."
msgstr ""

#: ../develop/addons/schema-driven-forms/form-types/page-forms.rst:164
msgid "Also note that the values in the dictionary must be valid for the fields. Here, we have used *TextLine* fields, which expect unicode string values. We would likely get an error if the value was a byte string or integer, say."
msgstr ""

#: ../develop/addons/schema-driven-forms/further-reading.rst:2
#: ../develop/plone/forms/z3c.form.rst:2159
#: ../develop/plone/members/member_profile.rst:64
msgid "Further reading"
msgstr ""

#: ../develop/addons/schema-driven-forms/further-reading.rst:4
msgid "**Where to find more information**"
msgstr ""

#: ../develop/addons/schema-driven-forms/further-reading.rst:6
msgid "To find out more about *z3c.form* and its uses in Plone, consult the following references:"
msgstr ""

#: ../develop/addons/schema-driven-forms/further-reading.rst:9
msgid "The `z3c.form`_ documentation. This provides a detailed guide to *z3c.form*’s inner workings."
msgstr ""

#: ../develop/addons/schema-driven-forms/further-reading.rst:11
msgid "The `plone.z3cform`_ documentation. Describes how to use “raw” *z3c.form* forms in Zope 2, and documents the Zope 2-specific extensions provided by this package."
msgstr ""

#: ../develop/addons/schema-driven-forms/further-reading.rst:14
msgid "The `plone.app.z3cform`_ documentation. Describes how to use “raw” *z3c.form* forms in Plone."
msgstr ""

#: ../develop/addons/schema-driven-forms/further-reading.rst:16
msgid "The `plone.autoform`_ documentation. Explains the raw behaviour of the *plone.autoform* library and its directives."
msgstr ""

#: ../develop/addons/schema-driven-forms/further-reading.rst:18
msgid "The `plone.directives.form`_ documentation. Lists the form base classes."
msgstr ""

#: ../develop/addons/schema-driven-forms/further-reading.rst:19
msgid "The :doc:`Dexterity manual </external/plone.app.dexterity/docs/index>`. Illustrates in various sections how *z3c.form* is used in Dexterity."
msgstr ""

#: ../develop/addons/schema-driven-forms/index.rst:2
msgid "Schema-driven forms"
msgstr ""

#: ../develop/addons/schema-driven-forms/index.rst:4
msgid "**This tutorial covers how to build schema-driven forms, using the z3c.form and plone.autoform libraries.**"
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:4
msgid "**What is z3c.form all about?**"
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:6
msgid "HTML forms are the cornerstone of modern web applications. When you interact with Plone, you use forms all the time - to search the content store, to edit content items, to fill in your personal details. You will notice that most of these forms use the same layout and conventions, and that they all rely on common patterns such as server-side validation and different buttons resulting in different actions."
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:8
msgid "Over the years, several approaches have evolved to deal with forms. A few of the most important ones are:"
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:11
msgid "Creating a simple view with an HTML form that submits to itself (or another view), where the request is validated and processed in custom Python code. This is very flexible and requires little learning, but can also be fairly cumbersome, and it is harder to maintain a common look and feel and behaviour across all forms. See the :doc:`Views and viewlets </develop/plone/views/index>` for some hints on one way to build such views."
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:16
msgid "Using the *CMFFormController* library. This relies on special page objects known as “controller page templates” that submit to “controller python scripts”. The form controller takes care of the flow between forms and actions, and can invoke validator scripts. This only superficially addresses the creation of standard form layouts and widgets, however. It is largely deprecated, although Plone still uses it internally in places."
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:23
msgid "Using *zope.formlib*. This is a library which ships with Zope. It is based on the principle that a *schema interface* defines a number of form fields, constraints and so on. Special views are then used to render these using a standard set of widgets. Formlib takes care of page flow, validation and the invocation of *actions* - methods that correspond to buttons on the form. Formlib is used for Plone’s control panels and portlets. However, it can be cumbersome to use, especially when it comes to creating custom widgets or more dynamic forms."
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:32
msgid "Using *`z3c.form`_*. This is a newer library, inspired by formlib, but more flexible and modern."
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:35
msgid "This manual will show you how to use *z3c.form* in a Plone context. It will use tools and patterns that are consistent with those used for Dexterity development, as shown in the :doc:`Dexterity developer manual </external/plone.app.dexterity/docs/index>`, but the information contained herein is not Dexterity specific. Note that Dexterity’s standard add and edit forms are all based on *z3c.form*."
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:40
#: ../develop/plone/misc/context.rst:128
msgid "Tools"
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:42
msgid "As a library, *z3c.form* has spawned a number of add-on modules, ranging from new field types and widgets, to extensions that add functionality to the forms built using the framework. We will refer to a number of packages in this tutorial. The most important packages are:"
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:47
msgid "`z3c.form`_ itself, the basic form library. This defines the standard form view base classes, as well the default widgets. The *z3c.form* `documentation <http://docs.zope.org/z3c.form>`_ applies to the forms created here, but some of the packages below simplify or enhance the integration experience."
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:51
msgid "`plone.z3cform`_ makes *z3c.form* usable in Zope 2. It also adds a number of features useful in Zope 2 applications, notably a mechanism to extend or modify the fields in forms on the fly."
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:54
msgid "`plone.app.z3cform`_ configures *z3c.form* to use Plone-looking templates by default, and adds few services, such as a widget to use Plone’s visual editor and “inline” on-the-fly validation of forms. This package must be installed for *z3c.form*-based forms to work in Plone."
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:59
msgid "`plone.autoform`_ improves *z3c.form*’s ability to create a form from a schema interface. By using the base classes in this package, schemata can be more self-describing, for example specifying a custom widget, or specifying relative field ordering. We will use *plone.autoform* in this tutorial to simplify form setup."
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:64
msgid "`plone.directives.form`_ provides tools for registering forms using convention-over-configuration instead of ZCML. We will use *plone.directives.form* to configure our forms in this manual."
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:70
msgid "A note about versions"
msgstr ""

#: ../develop/addons/schema-driven-forms/intro.rst:72
msgid "This manual is targeted at Plone 4.1 and above (Zope 2.13)."
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:3
msgid "Upgrade a custom add-on to Plone 5"
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:6
#: ../develop/plone/content/archetypes/index.rst:3
#: ../develop/plone/content/uid.rst:140
#: ../develop/plone/forms/wysiwyg.rst:132
#: ../develop/plone/i18n/translating_content.rst:72
#: ../develop/plone/i18n/translating_content.rst:89
msgid "Archetypes"
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:8
msgid "If our add-on depends on Archetypes, we will need some parts of ``Products.ATContentTypes``. Those parts will be declared by the profile \"Archetypes-tools without content-types\". It must be added to our ``profiles/default/metadata.xml`` that way::"
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:17
msgid "JS/CSS bundle"
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:19
msgid "Plone 5 does not use ``portal_css`` and ``portal_javascript`` anymore. The add-on resources will have to be provided into a bundle."
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:21
msgid "We must add a file named ``registry.xml`` in our profile, containing::"
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:39
msgid "Note:: this example assumes our JS and CSS are provided as browser resources, but if they are in our old ``skins`` folder, that would work too::"
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:45
msgid "CSRF protection"
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:47
msgid "Plone 5 provides a CSRF protection mechanism. This mechanism is integrated into the different Plone frameworks. So if our add-on only uses default Dexterity or Archetypes features, we are safe."
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:50
msgid "But any custom redirection or form submission will have to include a token provided by ``plone.protect``."
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:52
msgid "in a template::"
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:56
msgid "in a script::"
msgstr ""

#: ../develop/addons/upgrade_to_50.rst:62
msgid "in a method::"
msgstr ""

#: ../develop/import/index.rst:3
msgid "Importing content from other sources"
msgstr ""

#: ../develop/import/index.rst:7
msgid "There are various tools to help you import content from other systems into Plone"
msgstr ""

#: ../develop/import/index.rst:14
msgid "Rarely does a new website start all from scratch. Most of the time, you will have to import content from other systems. These may include:"
msgstr ""

#: ../develop/import/index.rst:17
msgid "other CMS systems, sometimes based on PHP/MySQL"
msgstr ""

#: ../develop/import/index.rst:18
msgid "legacy sites in plain HTML"
msgstr ""

#: ../develop/import/index.rst:19
msgid "resources that exist on a filesystem, such as files and images"
msgstr ""

#: ../develop/import/index.rst:20
msgid "other Plone sites, including older and unmaintained versions"
msgstr ""

#: ../develop/import/index.rst:22
msgid "While Plone even comes with an FTP service, that can serve as a last-ditch effort to get some pictures in, there are far more sophisticated tools available."
msgstr ""

#: ../develop/import/index.rst:26
msgid "Transmogrify"
msgstr ""

#: ../develop/import/index.rst:28
msgid "By far the most flexible tool available is something called **collective.transmogrifier**."
msgstr ""

#: ../develop/import/index.rst:32
msgid "A transmogrifier is fictional device used for transforming one object into another object. The term was coined by Bill Waterson of Calvin and Hobbes fame."
msgstr ""

#: ../develop/import/index.rst:34
msgid "In principle, what it does is to allow you to lay a 'pipeline', whereby an object (a piece of content) is transported. At each part of the pipeline, you can perform various operations on it: extract, change, add metadata, etcetera. These operations are in the form of so-called 'blueprints'."
msgstr ""

#: ../develop/import/index.rst:36
msgid "In short: an object is gathered from a source you define. Then, it goes to one or more segments of the pipeline to let the various blueprints work on it, and in the end you use a 'constructor' to turn it into a Plone content object."
msgstr ""

#: ../develop/import/index.rst:38
msgid "That's the basics, but by combining all your options you have an incredibly flexible and powerful tool at hand."
msgstr ""

#: ../develop/import/index.rst:41
#: ../develop/plone/content/importexport.rst:53
msgid "collective.transmogrifier"
msgstr ""

#: ../develop/import/index.rst:43
msgid "See the extensive documentation:"
msgstr ""

#: ../develop/import/index.rst:52
msgid "Transmogrify helpers"
msgstr ""

#: ../develop/import/index.rst:54
msgid "Various add-ons exist to make working with transmogrify easier:"
msgstr ""

#: ../develop/import/index.rst:56
msgid "`mr.migrator <https://pypi.python.org/pypi/mr.migrator>`_ is a way to easily lay pipelines"
msgstr ""

#: ../develop/import/index.rst:57
msgid "`funnelweb <https://pypi.python.org/pypi/funnelweb>`_ helps to parse static sites, and crawl external sites"
msgstr ""

#: ../develop/import/index.rst:58
msgid "`parse2plone <https://pypi.python.org/pypi/parse2plone>`_ is meant to get HTML content from the file system into Plone"
msgstr ""

#: ../develop/import/index.rst:60
msgid "And a wide array of extra 'blueprints' exist, like"
msgstr ""

#: ../develop/import/index.rst:62
msgid "`quintagroup.transmogrifier <https://pypi.python.org/pypi/quintagroup.transmogrifier>`_"
msgstr ""

#: ../develop/import/index.rst:63
msgid "`transmogrify.sqlalchemy <https://pypi.python.org/pypi/transmogrify.sqlalchemy/1.0.1>`_ to get content out of just about any SQL database you can think of"
msgstr ""

#: ../develop/import/index.rst:64
msgid "`collective.jsonmigrator <https://pypi.python.org/pypi/collective.jsonmigrator>`_ is good at migrating data via JSON format from very old Plone versions, going back all the way to 2.x"
msgstr ""

#: ../develop/import/index.rst:66
msgid "Note this is only a selection, do a search on pypi to find more. NB searching both on `transmogrify <https://pypi.python.org/pypi?%3Aaction=search&term=transmogrify&submit=search>`_ and `transmogrifier <https://pypi.python.org/pypi?%3Aaction=search&term=transmogrifier&submit=search>`_ gives more results!"
msgstr ""

#: ../develop/index.rst:2
msgid "Developing for Plone"
msgstr ""

#: ../develop/index.rst:6
msgid "Developing add-ons"
msgstr ""

#: ../develop/index.rst:14
msgid "Programming with Plone"
msgstr ""

#: ../develop/index.rst:22
msgid "Developing for Plone Core"
msgstr ""

#: ../develop/index.rst:31
msgid "Dev helper packages"
msgstr ""

#: ../develop/index.rst:34
msgid "plone.app.testing"
msgstr ""

#: ../develop/index.rst:42
msgid "plone.api"
msgstr ""

#: ../develop/index.rst:50
#: ../develop/plone/i18n/translating_content.rst:27
msgid "plone.app.multilingual"
msgstr ""

#: ../develop/index.rst:58
msgid "plone.app.contenttypes"
msgstr ""

#: ../develop/index.rst:66
msgid "plone.app.contentlisting"
msgstr ""

#: ../develop/index.rst:74
msgid "plone.app.robotframework"
msgstr ""

#: ../develop/index.rst:83
msgid "Importing content from other systems"
msgstr ""

#: ../develop/index.rst:91
msgid "Tutorials"
msgstr ""

#: ../develop/index.rst:93
msgid "`“Mastering Plone”-training <http://plone-training.readthedocs.org>`_"
msgstr ""

#: ../develop/index.rst:95
msgid "Mastering Plone is intended as a week-long training for people who are new to Plone or want to learn about the current best-practices of Plone-development."
msgstr ""

#: ../develop/index.rst:97
msgid "It is in active use by various trainers in the Plone world, and is being developed as a 'collaborative syllabus'."
msgstr ""

#: ../develop/index.rst:100
msgid "`\"Mastering Mockup\"-training <https://mockup-training.readthedocs.org/en/latest/index.html>`_"
msgstr ""

#: ../develop/index.rst:102
msgid "This training was created to teach about Mockup, the new Frontend library for Plone 5 ."
msgstr ""

#: ../develop/index.rst:107
msgid ":doc:`\"Plone Todo list application tutorial\" </external/tutorial.todoapp/docs/index>`"
msgstr ""

#: ../develop/index.rst:109
msgid "You will learn to: create custom content-types Through-The-Web, create and apply custom workflows, create custom listings, dump your changes into a filesytem package to future-proof them and write tests for your filesystem package."
msgstr ""

#: ../develop/plone-coredev/agreement.rst:2
msgid "Contributing to Plone Core"
msgstr ""

#: ../develop/plone-coredev/agreement.rst:4
msgid "There are many people and companies who rely on Plone on a day-to-day basis so we have to introduce some level of code quality control. Plone's source code is hosted in a git repository at  https://github.com/plone, but only members of the developer team have commit-rights."
msgstr ""

#: ../develop/plone-coredev/agreement.rst:6
msgid "Just sending in a contributors agreement does not guarantee you access to the repository, but once you send it in we will always have it on file for when you are ready to contribute. We do ask that before requesting core access you familiarize yourself a little with the community since they will help you get ramped up:"
msgstr ""

#: ../develop/plone-coredev/agreement.rst:8
msgid "Ask and (especially) answer questions on `stack overflow <http://stackoverflow.com/>`_ and :doc:`IRC <culture>` with a focus on getting to know the active developers a bit."
msgstr ""

#: ../develop/plone-coredev/agreement.rst:10
msgid "Attend a `conference <https://plone.org/events/conferences>`_ / `symposium <https://plone.org/events/regional>`_ or participate in a `sprint <https://plone.org/events/sprints>`_ / `tune-up <https://plone.org/events/plone-tuneups>`_. There are plenty of opportunities to meet the community and start contributing through various coding sessions, either in person or on the web. You may even be able to get immediate core access at a conference if you are flexing your mad coding skills and the right people are attending."
msgstr ""

#: ../develop/plone-coredev/agreement.rst:12
msgid "Get your feet wet by contributing to the `collective <http://collective.github.com/>`_. Don't worry about getting it perfect or asking for help; this way you get to know us and we improve our code together as a community."
msgstr ""

#: ../develop/plone-coredev/agreement.rst:14
msgid "**Patches:** Historically we encouraged people to submit patches to the ticket collector. These tickets are usually ignored forever. Technically, in order for us to accept your patch you must sign the contributors agreement. If you want to contribute fixes, please just sign the agreement and go through the standard github pull request process described until you feel comfortable to bypass review. If the ticket is trivial, or you're fixing documentation, you do not need to sign a contributor's agreement."
msgstr ""

#: ../develop/plone-coredev/agreement.rst:16
msgid "Once you have familiarized yourself with the community and you are excited to contribute to the core:"
msgstr ""

#: ../develop/plone-coredev/agreement.rst:18
msgid "Sign the contributor agreement at https://plone.org/foundation/contributors-agreement/agreement.pdf/at_download/file, then either snail mail it to the address provided or scan and email it to assignments@plone.org. This offers both copyright protection and ensures that the Plone Foundation is able to exercise some control over the codebase, ensuring it is not appropriated for someone's unethical purposes. For questions about why the agreement is required, please see :doc:`Contributor’s Agreement for Plone Explained <contributors_agreement_explained>`."
msgstr ""

#: ../develop/plone-coredev/agreement.rst:20
msgid "If you aren't sure where to start or just want more direction, feel free to get on IRC, mailing lists, Twitter, etc... and ask for help. While there is no official mentoring process, there are plenty of people willing to act in that role and guide you through the steps of getting involved in the community. A common way to start contributing is to participate in a Plone tune-up day. Tune-ups are filled with a good mix of newbies and experienced devs alike. For more information, please see  https://plone.org/tuneup."
msgstr ""

#: ../develop/plone-coredev/agreement.rst:22
msgid "**Welcome to the Plone community!**"
msgstr ""

#: ../develop/plone-coredev/agreement.rst:26
msgid "Dealing with pull requests on GitHub"
msgstr ""

#: ../develop/plone-coredev/agreement.rst:28
msgid "Before we can merge a pull request, we have to check that the author has signed the contributor's agreement."
msgstr ""

#: ../develop/plone-coredev/agreement.rst:30
msgid "If they're listed in https://github.com/plone?tab=members, the author has signed so we can go ahead and merge."
msgstr ""

#: ../develop/plone-coredev/agreement.rst:32
msgid "If they aren't listed there, there's still a chance they have signed the contributor's agreement. Check on IRC `#plone-framework <http://webchat.freenode.net?channels=plone-framework>`_."
msgstr ""

#: ../develop/plone-coredev/agreement.rst:35
msgid "Pull requests without contributor's agreement can only be merged in trivial cases, and only by the release manager."
msgstr ""

#: ../develop/plone-coredev/bundles.rst:5
msgid "This document is meant to help core developers hack on plone bundles."
msgstr ""

#: ../develop/plone-coredev/bundles.rst:8
msgid "It's a work in progress and right now, it'll cover scenarios of working on Plone bundles."
msgstr ""

#: ../develop/plone-coredev/bundles.rst:15
msgid "Plone bundle resources are mostly located in the mockup package and Products.CMFPlone/static."
msgstr ""

#: ../develop/plone-coredev/bundles.rst:17
msgid "Dependency Plone JavaScript resources are defined in Products.CMFPlone/static/bower.json"
msgstr ""

#: ../develop/plone-coredev/bundles.rst:19
msgid "Products.CMFPlone/static/bower.json and mockup/bower.json are very close to the same. If you change a dependency version in mockup/bower.json you're going to have to update that version in Products.CMFPlone/static/bower.json. The reason for this is `mockup` does not commit its dependency packages to its repository while Products.CMFPlone does. The difference is due to fact that CMFPlone allows you to develop TTW and mockup is meant to be a simple bower installable package(and when bower installs, it'll install the dependency)."
msgstr ""

#: ../develop/plone-coredev/bundles.rst:28
msgid "Updating bundle resources"
msgstr ""

#: ../develop/plone-coredev/bundles.rst:30
msgid "If you are updating Plone JavaScript resource while in development mode on your Plone instance, you'll need to compile those changes in order for Plone to be shipped with your changes in production mode. The general process is..."
msgstr ""

#: ../develop/plone-coredev/bundles.rst:34
msgid "make your updates to JavaScript(could be in mockup project)"
msgstr ""

#: ../develop/plone-coredev/bundles.rst:35
msgid "compile bundle you made changes to::"
msgstr ""

#: ../develop/plone-coredev/bundles.rst:41
msgid "The final step requires you have a clean Plone instance available to know how to build the JavaScript dependencies. You can provide `--instance` parameter to customize which plone instance is used to build the bundle."
msgstr ""

#: ../develop/plone-coredev/bundles.rst:47
msgid "Upgrading JavaScript library"
msgstr ""

#: ../develop/plone-coredev/bundles.rst:49
msgid "If you need to update a dependent version, the general workflow is:"
msgstr ""

#: ../develop/plone-coredev/bundles.rst:51
msgid "update Products.CMFPlone/static/bower.json"
msgstr ""

#: ../develop/plone-coredev/bundles.rst:52
msgid "run bower in Products.CMFPlone/static::"
msgstr ""

#: ../develop/plone-coredev/bundles.rst:57
msgid "then, finally, compile bundle::"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:2
msgid "Contributor’s Agreement for Plone Explained"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:4
msgid "Prospective contributors to the Plone core code base are required to sign a contributor’s agreement, which assigns copyright in the code to the Plone Foundation, the non-profit organization which stewards the Plone code base. This document explains the purposes of this, along with questions and answers about what this means."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:10
msgid "The Plone Contributor Agreement can be found at: `https://plone.org/foundation/contributors-agreement/agreement.pdf`_"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:14
msgid "About the Plone Contributor Agreement"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:16
msgid "The Foundation feels that it benefits the community for a single organization to hold the rights to Plone. Prior to the Foundation, the intellectual property of Plone was jointly held by individual developers and by Alan Runyan and Alexander Limi. The community members who formed the Foundation felt that having the Foundation hold these rights provides several benefits:"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:22
msgid "**Minimizing confusion / maximizing business compatibility** -- Organizations considering adopting Plone have a simple answer for \"Who owns this?\", rather than a more complicated answer that might scare away the legally-cautious."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:27
msgid "**Trademark protection** -- By having the Foundation hold the trademarks and rights to the Plone branding assets, it can effectively protect these from unfair use."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:31
msgid "**Guarantee of future Open Source versions** -- The Foundation's contributor agreement ensures that there will **always** be an OSI- approved version of Plone."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:37
msgid "Questions & Answers"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:39
msgid "What does the contributor's agreement cover?"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:41
msgid "This agreement is for the Plone core codebase only. The Plone core codebase is that code which lives in the Plone core version repositories, currently located at `http://dev.plone.org/plone`_ and `https://github.com/plone`_. Contributions to the \"Collective,\" currently located at `http://dev.plone.org/collective`_ and `https://github.com/collective`_ are not assigned to the Plone Foundation, and are made available under whatever license the project developers wish to use, although add-on products that import from GPLed Plone code are of course subject to the terms of the GPL, which requires derived works to be GPL licensed."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:50
msgid "What rights will I continue to have for my contributions?"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:52
msgid "Contributors are asked to transfer their intellectual property rights to the Foundation. In return, they will be given back irrevocable rights to use and distribute their contributions. They can even give their contributions to other Open Source projects (as long as those projects are compatible with the license Plone itself is issued under) or use them in non-Open Source commercial applications (if that is compatible with the license Plone is under)."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:60
msgid "Do I have to sign the contributor's agreement to make checkins to the Plone core codebase?"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:60
msgid "Yes."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:62
msgid "Do I have to sign the contributor's agreement to submit a patch to the Plone core codebase?"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:64
msgid "We enthusiastically welcome patches, but we can't merge them until you sign and return a contributor's agreement. (Unless, in the judgement of the Plone Release Manager, the patch is so tiny as not to constitute a \"creative work.\" See the `Policy for Contributor Agreements and Patches`_ for more detail on this policy.)"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:69
msgid "Can I grant the Plone foundation a non-exclusive license to my contributions rather than an exclusive license, so that I can contribute the same code to other projects under different terms or use the contribution for other commercial endeavors?"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:71
msgid "Not under the current version of the contributors agreement."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:73
msgid "Does the Foundation control use of the Plone trademark?"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:75
msgid "Yes. In order to keep the trademark, the Foundation (or any trademark owner) must demonstrate that they have acted to protect it."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:78
msgid "Will Plone always be available under an OSI-approved/Open Source license? Couldn't the Board change its mind about this?"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:80
msgid "Plone will always be available under an OSI-approved license; this is written into the language of the contributor agreement each developer and the foundation sign."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:83
msgid "Will Plone ever be available under a non-GPL license?"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:85
msgid "The current Plone approach states that companies can negotiate a non-GPL license. Thus, the Foundation might pursue a dual-licensing (GPL and non-GPL) scheme - but, at this time, the Board has not yet created any policies on this. This is an important question for the community, of course, and the Foundation intends to have this conversation in a transparent way."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:91
msgid "Why would anyone want a non-GPL Plone?"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:93
msgid "Two possible reasons: Some companies are reluctant to do in-house modifications of framework-like systems (such as Plone) that are under the GPL, fearing that a clause in the GPL might force them to disclose their internal work - thus wanting to license it under (for example) a BSD-style license. Second, companies may wish to offer a commercial version of Plone, under a conventional shrink-wrap license, without the obligation to reveal source code or share changes."
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:100
msgid "How much would a non-GPL version of Plone cost?"
msgstr ""

#: ../develop/plone-coredev/contributors_agreement_explained.rst:102
msgid "Would a small company be able to afford one? -- Neither the Foundation nor the Board have made any decisions about a non-GPL version, let alone about pricing. However, one of the Foundation's stated goals is to maintain a level playing field for Plone while trying to benefit all of the Plone commons. If a non-GPL version was available, and a large company bought it, added features to it, and sold it, wouldn't they be using our work without an obligation to give back? It's helpful to remember the core value open source provides: distributed development, maintenance, security checking, and support. Companies that build large features for Plone are **already** having to make decisions of whether to release their products under an open source license or not (since they could always release them as a Product, not as a modification to the Plone core). Despite this, though, many large and excellent contributions - such as Archetypes - have been made, and the Foundation hopes that companies will continue to do so. In any event, a company that purchases a non-GPL license (should such ever become available) is contributing financial resources to our community, which can be used to further develop, market, and protect the GPL version of Plone."
msgstr ""

#: ../develop/plone-coredev/culture.rst:3
msgid "Plone Developer Culture"
msgstr ""

#: ../develop/plone-coredev/culture.rst:5
msgid "If you are going to be contributing back to Plone, we ask a couple things. First, please join the `plone-developers <https://lists.sourceforge.net/lists/listinfo/Plone-developers>`_ list and at minimum lurk around. You will quickly see how people work and what kind of things are best suited for group discussion. Second, please ask for help setting up your environment in IRC. Most of our developers work there and you will get the best advice there."
msgstr ""

#: ../develop/plone-coredev/culture.rst:7
msgid "Download an IRC client (Or using an alternative client `through the web <http://webchat.freenode.net/>`_) and jump on to `#plone-framework <http://webchat.freenode.net?channels=plone-framework>`_ (and/or `#plone <http://webchat.freenode.net?channels=plone>`_ - both on freenode). The people in `#plone-framework <http://webchat.freenode.net?channels=plone-framework>`_ have been using plone for a very long time and are happy to help you get going and make the right decisions. More info on IRC can be found at https://plone.org/support/chat."
msgstr ""

#: ../develop/plone-coredev/culture.rst:9
msgid "If you are actively committing code, join the `test bot mailing list <https://lists.plone.org/mailman/listinfo/plone-testbot/>`_ so you know if your recent commits have broken (or fixed!) the build."
msgstr ""

#: ../develop/plone-coredev/culture.rst:11
msgid "If you are in a timezone when things are not very active, please post to the plone-developers mailing list or grab a beer and wait for people to wake up."
msgstr ""

#: ../develop/plone-coredev/culture.rst:13
msgid "When in doubt, please ask. The code base is very complicated and everyone is vested in the right thing happening. Despite the occasional grouch here and there, most plone devs will go out of their way to get you on the right path."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:2
msgid "Writing documentation"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:5
msgid "Documentation of Plone"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:7
msgid "`docs.plone.org <http://docs.plone.org>`_ contains a full overview of the current documentation for Plone."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:10
msgid "Documenting a package"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:13
msgid "The basics"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:15
msgid "At the very least, your package should include the following forms of documentation:"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:26
msgid ":file:`README.rst`"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:18
msgid "The readme is the first entry point for most people to your package. It will be included on the PyPI page for your egg, and on the front page of its github repository. It should be formatted using `reStructuredText (reST) <http://docutils.sourceforge.net/rst.html>`_ in order to get formatted properly by those systems."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:20
msgid ":file:`README.rst` should include:"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:22
msgid "A brief description of the package's purpose"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:23
msgid "Installation information (How do I get it working?)"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:24
msgid "Compatibility information (what versions of Plone does it work with?)"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:25
msgid "Links to other sources of documentation"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:26
msgid "Links to issue trackers, mailing lists, and other ways to get help."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:28
msgid "The manual (a.k.a. narrative documentation)"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:30
msgid "The manual goes into further depth for people who want to know all about how to use the package."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:32
msgid "It includes topics like:"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:34
msgid "What the features are"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:35
msgid "How to use them (in English—not doctests!)"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:36
msgid "Information about architecture"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:37
msgid "Common gotchas"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:39
msgid "The manual should consider various audiences who may need different types of information:"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:41
msgid "End users who use Plone for content editing but don't manage the site."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:42
msgid "Site administrators who install and configure the package."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:43
msgid "Integrators who need to extend the functionality of the package in code."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:44
msgid "Sysadmins who need to maintain the server running the software."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:46
msgid "Simple packages with limited functionality can get by with a single page of narrative documentation. In this case it's simplest to include it in an extended :file:`README.rst`. Some excellent examples of a single-page readme are https://pypi.python.org/pypi/plone.outputfilters and https://github.com/plone/plone.app.caching"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:48
msgid "If your project is moderately complex, you may want to set up your documentation with multiple pages. The best way to do this is to add Sphinx to your project and host your docs on readthedocs.org so that it rebuilds the documentation whenever you push to github. If you do this, your :file:`README.rst` must link off site to the documentation."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:50
msgid "Reference (a.k.a. API documentation)"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:52
msgid "An API reference provides information about the package's public API (that is, the code that the package exposes for use from external code.) It is meant for random access to remind the reader of how a particular class or method works, rather than for reading in its entirety."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:54
msgid "If the codebase is written with docstrings, API documentation can be automatically generated using Sphinx."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:72
msgid ":file:`CHANGES.txt`"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:57
msgid "The changelog is a record of all the changes made to the package and who made them, with the most recent changes at the top. This is maintained separately from the git commit history to give a chance for more user-friendly messages and to and record when releases were made."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:59
msgid "A changelog looks something like::"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:70
msgid "See https://raw.github.com/plone/plone.app.caching/master/CHANGES.rst for a full example."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:72
msgid "If a change was related to a bug in the issue tracker, the changelog entry should include a link to that issue."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:78
msgid "Licenses"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:75
msgid "Information about the open source license used for the package should be placed within the :file:`docs` directory."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:77
msgid "For Plone core packages, this includes :file:`LICENSE.txt` and :file:`LICENSE.GPL`."
msgstr ""

#: ../develop/plone-coredev/documentation.rst:81
msgid "Using Sphinx"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:83
msgid "reST References:"
msgstr ""

#: ../develop/plone-coredev/documentation.rst:85
msgid "`Sphinx reST Primer <http://sphinx-doc.org/rest.html>`_"
msgstr ""

#: ../develop/plone-coredev/index.rst:5
msgid "Process for Plone core's development"
msgstr ""

#: ../develop/plone-coredev/index.rst:9
msgid "This documentation describes the process for developing Plone. It is primarily a technical resource for setting up your core developer buildout, fixing bugs, and writing plips."
msgstr ""

#: ../develop/plone-coredev/index.rst:14
msgid "STOP!"
msgstr ""

#: ../develop/plone-coredev/index.rst:17
msgid "Legally, you can NOT contribute code unless you have signed the :doc:`contributor agreement <agreement>`. This means that we can NOT accept pull requests from you unless this is done, so please don't put the code reviewers at risk and do it anyways. Submitting the agreement is easy (and will soon be easier) and if you want quick access and are familiar with the community, go into :doc:`irc <culture>` and ask one of the repo admins to give you access with a scanned copy of the agreement. They will get you going as fast as possible!"
msgstr ""

#: ../develop/plone-coredev/index.rst:20
msgid "Table of Awesome"
msgstr ""

#: ../develop/plone-coredev/index.rst:34
msgid "Others"
msgstr ""

#: ../develop/plone-coredev/index.rst:36
msgid "These are some documents using as reference for this documentation."
msgstr ""

#: ../develop/plone-coredev/intro.rst:2
msgid "How To Commit Fixes to Plone Core"
msgstr ""

#: ../develop/plone-coredev/intro.rst:3
msgid "This document assumes you want to fix a bug and will detail the full process. For more information on writing PLIPS, please :doc:`go here <plips>`."
msgstr ""

#: ../develop/plone-coredev/intro.rst:6
msgid "Version Support Policy"
msgstr ""

#: ../develop/plone-coredev/intro.rst:7
msgid "If you are triaging or fixing bugs, keep in mind that Plone has a `version support policy <https://plone.org/support/version-support-policy>`_."
msgstr ""

#: ../develop/plone-coredev/intro.rst:11
msgid "`Git <http://help.github.com/mac-set-up-git/>`_"
msgstr ""

#: ../develop/plone-coredev/intro.rst:12
msgid "`Subversion <http://subversion.apache.org/>`_"
msgstr ""

#: ../develop/plone-coredev/intro.rst:13
msgid "`Python <http://python.org/>`_ 2.6 or 2.7 including development headers."
msgstr ""

#: ../develop/plone-coredev/intro.rst:14
msgid "If you are on Mac OSX, you will need to install `XCode <https://developer.apple.com/xcode/>`_. You can do this through the app store or several other soul-selling methods. You will likely want to install your own python 2.6 as well since they strip out all the header files which makes compiling some extensions weird. You can ignore this advice to start, but have faith, you'll come back to it later. They always do..."
msgstr ""

#: ../develop/plone-coredev/intro.rst:15
msgid "`Python Imaging Library (PIL) <http://www.pythonware.com/products/pil/>`_. Make sure to install this into the proper python environment."
msgstr ""

#: ../develop/plone-coredev/intro.rst:16
msgid "`VirtualEnv <http://www.virtualenv.org/en/latest/index.html>`_ in the proper python environment."
msgstr ""

#: ../develop/plone-coredev/intro.rst:17
msgid "`GCC <http://gcc.gnu.org/>`_ in order to compile ZODB, Zope and lxml."
msgstr ""

#: ../develop/plone-coredev/intro.rst:18
msgid "`libxml2 and libxslt <http://xmlsoft.org/XSLT/downloads.html>`_, including development headers."
msgstr ""

#: ../develop/plone-coredev/intro.rst:22
msgid "Setting up Your Development Environment"
msgstr ""

#: ../develop/plone-coredev/intro.rst:23
msgid "The first step in fixing a bug is getting this `buildout <https://github.com/plone/buildout.coredev>`_ running. We recommend fixing the bug on the latest branch and then `backporting <http://en.wikipedia.org/wiki/Backporting>`_ as necessary. `Github <https://github.com/plone/buildout.coredev/>`_ by default always points to the currently active branch. More information on switching release branches is below."
msgstr ""

#: ../develop/plone-coredev/intro.rst:25
msgid "To set up a plone 4.2 development environment::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:34
msgid "If you run into issues in this process, please see the doc :doc:`issues`."
msgstr ""

#: ../develop/plone-coredev/intro.rst:36
msgid "This will run for a long time if it is your first pull (~20 mins). Once that is done pulling down eggs, You can start your new instance with::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:40
msgid "The default username/password for a dev instance is **admin/admin**."
msgstr ""

#: ../develop/plone-coredev/intro.rst:43
msgid "Switching Branches"
msgstr ""

#: ../develop/plone-coredev/intro.rst:44
msgid "If your bug is specific to one branch or you think it should be `backported <http://en.wikipedia.org/wiki/Backporting>`_, you can easily switch branches. The first time you get a branch, you must do::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:48
msgid "This should set up a local 4.1 branch tracking the one on github. From then on you can just do::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:52
msgid "To see what branch you are currently on, just do::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:56
msgid "The line with a * by it will indicate which branch you are currently working on."
msgstr ""

#: ../develop/plone-coredev/intro.rst:59
msgid "Make sure to rerun buildout if you were in a different branch earlier to get the correct versions of packages, otherwise you will get some weird behavior!"
msgstr ""

#: ../develop/plone-coredev/intro.rst:61
msgid "For more information on buildout, please see the :doc:`collective developer manual documentation on buildout </old-reference-manuals/buildout/index>`."
msgstr ""

#: ../develop/plone-coredev/intro.rst:65
msgid "Checking out Packages for Fixing"
msgstr ""

#: ../develop/plone-coredev/intro.rst:66
msgid "Most packages are not in :file:`src/` by default, so you can use ``mr.developer`` to get the latest and make sure you are always up to date. It can be a little daunting at first to find out which packages are causing the bug in question, but just ask on irc if you need some help. Once you [think you] know which package(s) you want, we need to pull the source."
msgstr ""

#: ../develop/plone-coredev/intro.rst:68
msgid "You can get the source of the package with ``mr.developer`` and the checkout command, or you can go directly to editing :file:`checkouts.cfg`. We recommend the latter but will describe both. In the end, :file:`checkouts.cfg` must be configured either way so you might as well start there."
msgstr ""

#: ../develop/plone-coredev/intro.rst:70
msgid "At the base of your buildout, open :file:`checkouts.cfg` and add your package if it's not already there::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:79
msgid "Then rerun buildout to get the source packages::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:83
msgid "Altternatively, we can manage checkouts from the command line, by using mr.developer's :command:`bin/develop` command to get the latest source. For example, if the issue is in ``plone.app.caching`` and ``plone.caching``::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:89
msgid "Don't forget to rerun buildout! In both methods, ``mr.developer`` will download the source from github (or otherwise) and put the package in the :file:`src/` directory. You can repeat this process with as many or as few packages as you need. For some more tips on working with ``mr.developer``, please :doc:`read more here <mrdeveloper>`."
msgstr ""

#: ../develop/plone-coredev/intro.rst:92
msgid "Testing Locally"
msgstr ""

#: ../develop/plone-coredev/intro.rst:93
msgid "In an ideal world, you would write a test case for your issue before actually trying to fix it. In reality this rarely happens. No matter how you approach it, you should ALWAYS run test cases for both the module and plone.org before commiting any changes."
msgstr ""

#: ../develop/plone-coredev/intro.rst:95
msgid "If you don't start with a test case, save yourself potential problems and validate the bug before getting too deep into the issue!"
msgstr ""

#: ../develop/plone-coredev/intro.rst:97
msgid "To run a test for the specific module you are modifying::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:101
msgid "These should all run without error. Please don't check in anything that doesn't! If you haven't written it already, this is a good time to write a test case for the bug you are fixing and make sure everything is running as it should."
msgstr ""

#: ../develop/plone-coredev/intro.rst:103
msgid "After the module level tests run with your change, please make sure other modules aren't affected by the change by running the full suite::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:109
msgid "Tests take a long time to run. Once you become a master of bugfixes, you may just let jenkins do this part for you. More on that below."
msgstr ""

#: ../develop/plone-coredev/intro.rst:112
msgid "Updating CHANGES.rst and checkouts.cfg"
msgstr ""

#: ../develop/plone-coredev/intro.rst:113
msgid "Once all the tests are running locally on your machine, you are **ALMOST** ready to commit the changes. A couple housekeeping things before moving on."
msgstr ""

#: ../develop/plone-coredev/intro.rst:115
msgid "First, please edit :file:`CHANGES.rst` (or :file:`CHANGES.txt`, or :file:`HISTORY.txt`) in each package you have modified and add a summary of the change. This change note will be collated for the next Plone release and is important for integrators and developers to be able to see what they will get if they upgrade. New changelog entries should be added at the very top of :file:`CHANGES.txt`."
msgstr ""

#: ../develop/plone-coredev/intro.rst:118
msgid "*Most importantly*, if you didn't do it earlier, edit :file:`checkouts.cfg` file in the buildout directory and add your changes package to the ``auto-checkout`` list. This lets the release manager know that the package has been updated so that when the next release of Plone is cut a new egg will be released and Plone will need to pin to the next version of that package. READ: this is how your fix becomes an egg!"
msgstr ""

#: ../develop/plone-coredev/intro.rst:120
msgid "Note that there is a section seperator called \"# Test Fixes Only\". Make sure your egg is above that line or your egg probably won't get made very quickly. This just tells the release manager that any eggs below this line have tests that are updated, but no code changes."
msgstr ""

#: ../develop/plone-coredev/intro.rst:122
msgid "Modifying :file:`checkouts.cfg` file also triggers the buildbot, `jenkins <https://jenkins.plone.org/>`_, to pull in the egg and run all the tests against the changes you just made. Not that you would ever skip running all tests of course... More on that below."
msgstr ""

#: ../develop/plone-coredev/intro.rst:124
msgid "If your bug is in more than one release (e.g. 4.1 and 4.2), please checkout both branches and add to the :file:`checkouts.cfg` file."
msgstr ""

#: ../develop/plone-coredev/intro.rst:127
msgid "Committing and Pull Requests"
msgstr ""

#: ../develop/plone-coredev/intro.rst:128
msgid "Phew! We are in the home stretch. How about a last minute checklist:"
msgstr ""

#: ../develop/plone-coredev/intro.rst:130
msgid "Did you fix the original bug?"
msgstr ""

#: ../develop/plone-coredev/intro.rst:131
msgid "Is your code consistent with our :doc:`style`?"
msgstr ""

#: ../develop/plone-coredev/intro.rst:132
msgid "Did you remove any extra code and lingering pdbs?"
msgstr ""

#: ../develop/plone-coredev/intro.rst:133
msgid "Did you write a test case for that bug?"
msgstr ""

#: ../develop/plone-coredev/intro.rst:134
msgid "Are all test cases for the modules(s) and for Plone passing?"
msgstr ""

#: ../develop/plone-coredev/intro.rst:135
msgid "Did you update :file:`CHANGES.rst` in each packages you touched?"
msgstr ""

#: ../develop/plone-coredev/intro.rst:136
msgid "Did you add your changed packages to :file:`checkouts.cfg`?"
msgstr ""

#: ../develop/plone-coredev/intro.rst:138
msgid "If you answered *YES* to all of these questions, you are ready to push your changes! A couple quick reminders:"
msgstr ""

#: ../develop/plone-coredev/intro.rst:140
msgid "Only commit directly to the development branch if you're confident your code won't break anything badly and the changes are small and fairly trivial. Otherwise, please create a ``pull request`` (more on that below)."
msgstr ""

#: ../develop/plone-coredev/intro.rst:141
msgid "Please try to make one change per commit. If you are fixing three bugs, make three commits. That way, it is easier to see what was done when, and easier to ``roll back`` any changes if necessary. If you want to make large changes cleaning up whitespace or renaming variables, it is especially important to do so in a separate commit for this reason."
msgstr ""

#: ../develop/plone-coredev/intro.rst:142
msgid "We have a few angels that follow the changes and each commit to see what happens to their favourite CMS! If you commit something REALLY sketchy, they will politely contact you, most likely after immediately reverting changes. There is no official people assigned to this so if you are especially nervous, jump into `#plone <http://webchat.freenode.net?channels=plone>`_ and ask for a quick eyeball on your changes."
msgstr ""

#: ../develop/plone-coredev/intro.rst:145
msgid "Committing to Products.CMFPlone"
msgstr ""

#: ../develop/plone-coredev/intro.rst:146
msgid "If you are working a bug fix on ``Products.CMFPlone``, there are a couple other things to take notice of. First and foremost, you'll see that there are several branches. At the time of writing this document, there are branches for 4.1, 4.2, and master, which is the implied 4.3."
msgstr ""

#: ../develop/plone-coredev/intro.rst:153
msgid "Still with me? So you have a bug fix for 4.x. If the fix is only for one version, make sure to get that branch and party on. However, chances are the bug is in multiple branches."
msgstr ""

#: ../develop/plone-coredev/intro.rst:158
msgid "Let's say the bug starts in 4.1. Pull the 4.1 branch and fix and commit there with tests."
msgstr ""

#: ../develop/plone-coredev/intro.rst:160
msgid "If your fix only involved a single commit, you can use git's ``cherry-pick`` command to apply the same commit to a different branch."
msgstr ""

#: ../develop/plone-coredev/intro.rst:164
msgid "First check out the branch::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:168
msgid "And then ``cherry-pick`` the commit (you can get the SHA hash from git log).::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:172
msgid "There may be conflicts; if so, resolve them and then follow the directions git gives you to complete the ``cherry-pick``."
msgstr ""

#: ../develop/plone-coredev/intro.rst:175
msgid "If your fix involved multiple commits, ``cherry-picking`` them one by one can get tedious. In this case things are easiest if you did your fix in a separate feature branch."
msgstr ""

#: ../develop/plone-coredev/intro.rst:178
msgid "In that scenario, you first merge the feature branch to the 4.1 branch::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:183
msgid "Then you return to the feature branch and make a branch for `rebasing` it onto the 4.2 branch::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:189
msgid "(ef978a happens to be the last commit in the feature branch's history before it was branched off of 4.1. You can look at git log to find this.)"
msgstr ""

#: ../develop/plone-coredev/intro.rst:192
msgid "At this point, the feature branch's history has been updated, but it hasn't actually been merged to 4.2 yet. This lets you deal with resolving conflicts before you actually merge it to the 4.2 release branch. Let's do that now::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:201
msgid "Branches and Forks and Direct Commits - Oh My!"
msgstr ""

#: ../develop/plone-coredev/intro.rst:202
msgid "Plone used to be in an svn repository, so everyone is familiar and accustomed to committing directly to the branches. After the migration to github, the community decided to maintain this spirit. If you have signed the :doc:`contributor agreement <contributors_agreement_explained>` form, you can commit directly to the branch (for plone this would be the version branch, for most other packages this would be ``master``)."
msgstr ""

#: ../develop/plone-coredev/intro.rst:208
msgid "HOWEVER, there are a few situations where a branch is appropriate. If you:"
msgstr ""

#: ../develop/plone-coredev/intro.rst:205
msgid "are just getting started,"
msgstr ""

#: ../develop/plone-coredev/intro.rst:206
msgid "are not sure about your changes"
msgstr ""

#: ../develop/plone-coredev/intro.rst:207
msgid "want feedback/code review"
msgstr ""

#: ../develop/plone-coredev/intro.rst:208
msgid "are implementing a non-trivial change"
msgstr ""

#: ../develop/plone-coredev/intro.rst:210
msgid "then you likely want to create a branch of whatever packages you are using and then use the `pull request <https://help.github.com/articles/using-pull-requests>`_ feature of github to get review. Everything about this process would be the same except you need to work on a branch. Take the ``plone.app.caching`` example. After checking it out with ``mr.developer``, create your own branch with::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:217
msgid "Branching or forking is your choice. I prefer branching, and I'm writing the docs so this uses the branch method. If you branch, it helps us because we *know* that you have committer rights. Either way it's your call."
msgstr ""

#: ../develop/plone-coredev/intro.rst:219
msgid "Proceed as normal. When you are ready to ``push`` your fix, push to a remote branch with::"
msgstr ""

#: ../develop/plone-coredev/intro.rst:223
msgid "This will make a remote branch in github. Navigate to this branch in the github UI and on the top right there will be a button that says **\"Pull Request\"**. This will turn your request into a pull request on the main branch. There are people who look once a week or more for pending pull requests and will confirm whether or not its a good fix and give you feedback where necessary. The reviewers are informal and very nice so don't worry - they are there to help! If you want immediate feedback, jump into IRC with the ``pull request`` link and ask for a review."
msgstr ""

#: ../develop/plone-coredev/intro.rst:227
msgid "you still need to update :file:`checkouts.cfg` file in the correct branches of buildout.coredev!"
msgstr ""

#: ../develop/plone-coredev/intro.rst:230
msgid "Jenkins"
msgstr ""

#: ../develop/plone-coredev/intro.rst:231
msgid "You STILL aren't done! Please check jenkins to make sure your changes haven't borked things. It runs every half an hour and takes a while to run so checking back in an hour is a safe bet. Have a beer and head over to the `Jenkins control panel <https://jenkins.plone.org/>`_."
msgstr ""

#: ../develop/plone-coredev/intro.rst:234
msgid "Finalizing Tickets"
msgstr ""

#: ../develop/plone-coredev/intro.rst:235
msgid "If you are working from a ticket, please don't forget to go back to the ticket and add a link to the changeset. We don't have integration with github yet so it's a nice way to track changes. It also lets the reporter know that you care. If the bug is really bad, consider pinging the release manager and asking him to make a release pronto."
msgstr ""

#: ../develop/plone-coredev/intro.rst:238
msgid "FAQ"
msgstr ""

#: ../develop/plone-coredev/intro.rst:240
msgid "*How do I know when my package got made?*"
msgstr ""

#: ../develop/plone-coredev/intro.rst:240
msgid "You can follow the project on github and watch its `timeline <https://github.com/organizations/plone>`_. You can also check the :file:`CHANGES.txt` of every plone release for a comprehensive list of all changes and validate that yours is present."
msgstr ""

#: ../develop/plone-coredev/issues.rst:2
#: ../develop/plone/content/creating.rst:549
msgid "Troubleshooting"
msgstr ""

#: ../develop/plone-coredev/issues.rst:5
msgid "Buildout Issues"
msgstr ""

#: ../develop/plone-coredev/issues.rst:7
msgid "Buildout can be frustrating for those unfamiliar with parsing through autistic robot language. Fear not! These errors are almost always a quick fix and a little bit of understanding goes a long ways."
msgstr ""

#: ../develop/plone-coredev/issues.rst:10
msgid "Errors Running bootstrap.py"
msgstr ""

#: ../develop/plone-coredev/issues.rst:11
msgid "You may not even get to running buildout and then you will already have an error. Let's take this one for example::"
msgstr ""

#: ../develop/plone-coredev/issues.rst:19
msgid "You may think the buildout god is angry because it's been MONTHS since you've made a human sacrifice to her but be strong and follow along. Buildout has simply noticed that the version of buildout required by the bootstrap.py file you are trying to run does not match the version of buildout in your python library. In the error above, your system has buildout 1.5.1 installed and the bootstrap.py file wants to run with 1.5.2."
msgstr ""

#: ../develop/plone-coredev/issues.rst:21
msgid "To fix, you have a couple options. First, you can force buildout to run with the version you already have installed by invoking the version tag. This tells your [Plone] bootstrap.py file to play nicely with the version that you already have installed. In the case of the error pasted above, that would be::"
msgstr ""

#: ../develop/plone-coredev/issues.rst:25
msgid "I personally know that versions 1.4.4, 1.5.1, and 1.5.2 all work this way."
msgstr ""

#: ../develop/plone-coredev/issues.rst:27
msgid "The other option is to delete your current egg and force the upgrade. In the case of the error above, all you need to do is delete the egg the system currently has. eg::"
msgstr ""

#: ../develop/plone-coredev/issues.rst:31
msgid "When you rerun bootstrap, it will look for the buildout of the egg, note that there isn't one, and then go fetch a new egg in the version that it wants for you."
msgstr ""

#: ../develop/plone-coredev/issues.rst:33
msgid "Do one of those, say two hail marys, and re-run bootstrap. Tada!"
msgstr ""

#: ../develop/plone-coredev/issues.rst:35
msgid "One other thing of note is that running bootstrap effectively ties that python executable and all of its libraries to your buildout. If you have several python installs and want to switch which python is tied to your buildout, simply rerun bootstrap.py with the new python (and then rerun buildout). You may get the same error above again but now that you know how to fix it, you can spend that time drinking beer instead of smashing your keyboard."
msgstr ""

#: ../develop/plone-coredev/issues.rst:37
#: ../develop/plone-coredev/issues.rst:72
msgid "Hooray!"
msgstr ""

#: ../develop/plone-coredev/issues.rst:40
msgid "When Mr. Developer is Unhappy"
msgstr ""

#: ../develop/plone-coredev/issues.rst:41
msgid "``mr.developer`` is never unhappy, except when it is. Although this technically isn't a buildout issue, it happens when running buildout so I'm putting it under buildout issues."
msgstr ""

#: ../develop/plone-coredev/issues.rst:43
msgid "When working with the dev instance, especially with all the moving back and forth between github and svn, you may have an old copy of a src package. The error looks like::"
msgstr ""

#: ../develop/plone-coredev/issues.rst:48
msgid "As long as you don't have any pending commits, you just need to remove the package from src/ and it will recheck it out for you when it updates."
msgstr ""

#: ../develop/plone-coredev/issues.rst:51
msgid "You can also get such fun errors as::"
msgstr ""

#: ../develop/plone-coredev/issues.rst:56
msgid "These are ok to ignore IF and ONLY IF the lines following it say::"
msgstr ""

#: ../develop/plone-coredev/issues.rst:62
msgid "If buildout ends with warning you that some packages could not be downloaded, then chances are that package wasn't downloaded. This is bad and could cause all sorts of whack out errors when you start or try to run things because it never actually downloaded the package."
msgstr ""

#: ../develop/plone-coredev/issues.rst:64
msgid "There are two ways to get this error to go away. The first is to delete all instances of host filtering. Comb through all the files and delete any lines which say ``allow-hosts =`` and ``allow-hosts +=``. In theory, by restricting which hosts you download from, buildout will go faster. Whether that actually happens or not I can not judge. The point is that they are safely deletable."
msgstr ""

#: ../develop/plone-coredev/issues.rst:66
msgid "The second option is to allow the host that it is pointing to by adding something like this to your .cfg::"
msgstr ""

#: ../develop/plone-coredev/issues.rst:70
msgid "Again, this is only necessary if the package wasn't found in the end."
msgstr ""

#: ../develop/plone-coredev/issues.rst:75
msgid "mr.developer Path Errors"
msgstr ""

#: ../develop/plone-coredev/issues.rst:77
msgid "``ERROR: You are not in a path which has mr.developer installed (:file:`.mr.developer.cfg` not found).``"
msgstr ""

#: ../develop/plone-coredev/issues.rst:79
msgid "When running any :command:`./bin/develop` command."
msgstr ""

#: ../develop/plone-coredev/issues.rst:81
msgid "To fix, simply do::"
msgstr ""

#: ../develop/plone-coredev/issues.rst:88
msgid "Other Random Issues"
msgstr ""

#: ../develop/plone-coredev/issues.rst:92
msgid "Dirty Packages"
msgstr ""

#: ../develop/plone-coredev/issues.rst:94
msgid "\"ERROR: Can't update package '[Some package]', because it's dirty.\""
msgstr ""

#: ../develop/plone-coredev/issues.rst:97
#: ../develop/plone-coredev/issues.rst:131
msgid "Fix"
msgstr ""

#: ../develop/plone-coredev/issues.rst:98
msgid "``mr.developer`` is complaining because a file has been changed/added, but not committed."
msgstr ""

#: ../develop/plone-coredev/issues.rst:101
msgid "Use :command:`bin/develop update --force`. Adding ``*.pyc *~.nib *.egg-info .installed.cfg *.pt.py *.cpt.py *.zpt.py *.html.py *.egg`` to your subversion config's global-ignores has been suggested as a more permanent solution."
msgstr ""

#: ../develop/plone-coredev/issues.rst:107
msgid "No module named zope 2"
msgstr ""

#: ../develop/plone-coredev/issues.rst:108
msgid "``ImportError: No module named Zope2\" when building using a PLIP cfg file.``"
msgstr ""

#: ../develop/plone-coredev/issues.rst:110
msgid "Appears to not actually be the case. Delete :file:`mkzopeinstance.py` from :file:`bin/` and rerun buildout to correct this if you're finding it irksome."
msgstr ""

#: ../develop/plone-coredev/issues.rst:114
msgid "Can't open file '/Startup/run.py'"
msgstr ""

#: ../develop/plone-coredev/issues.rst:115
msgid "Two possible fixes, you are using Python 2.4 by mistake, so use 2.6 instead. Or, you may need to make sure you run :command:`bin/buildout …` after :command:`bin/develop …`. Try removing :file:`parts/*`, :file:`bin/*`, :file:`.installed.cfg`, then re-bootstrap and re-run buildout, develop, buildout."
msgstr ""

#: ../develop/plone-coredev/issues.rst:118
msgid "Missing PIL"
msgstr ""

#: ../develop/plone-coredev/issues.rst:119
msgid ":file:`pil.cfg` is include within this buildout to aid in PIL installation. Run :command:`bin/buildout -c pil.cfg` to install. This method does not work on Windows, so we're unable to run it by default."
msgstr ""

#: ../develop/plone-coredev/issues.rst:125
msgid "Modified Egg Issues"
msgstr ""

#: ../develop/plone-coredev/issues.rst:126
msgid ":command:`bin/develop status` is showing that the ``Products.CMFActionIcons`` egg has been modified, but I haven't touched it.  And this is preventing bin/develop up from updating all the eggs."
msgstr ""

#: ../develop/plone-coredev/issues.rst:133
msgid "Edit :file:`~/.subversion/config` and add eggtest*.egg to the list of global-ignores"
msgstr ""

#: ../develop/plone-coredev/mrdeveloper.rst:2
msgid "Mr. Developer"
msgstr ""

#: ../develop/plone-coredev/mrdeveloper.rst:4
msgid "This buildout uses mr.developer to manage package development. See https://pypi.python.org/pypi/mr.developer for more information or run :command:`bin/develop help` for a list of available commands."
msgstr ""

#: ../develop/plone-coredev/mrdeveloper.rst:8
msgid "The most common workflow to get all the latest updates is::"
msgstr ""

#: ../develop/plone-coredev/mrdeveloper.rst:13
msgid "This will get you the latest coredev configuration, checkout and update all packages via Subversion in src and run buildout to configure the whole thing."
msgstr ""

#: ../develop/plone-coredev/mrdeveloper.rst:16
msgid "From time to time you can check if some old cruft has accumulated::"
msgstr ""

#: ../develop/plone-coredev/mrdeveloper.rst:20
msgid "If this prints any lines with a question mark in front, you can cleanup by::"
msgstr ""

#: ../develop/plone-coredev/mrdeveloper.rst:24
msgid "This will remove packages from :file:`src/` which are no longer needed, as they have been replaced by proper egg releases of these packages."
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:2
msgid "Reviewing PLIPs"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:5
msgid "Expectations"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:6
msgid "A good PLIP review takes about 4 hours so please plan accordingly. When you are done, if you have access to core please commit the review to the plips folder and reference the PLIP in your commit message. If you do not have access, please attach your review to the PLIP ticket itself."
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:9
msgid "Setting up the environment"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:10
msgid "Follow the instructions on `setting up a development environment <https://dev.plone.org/wiki/DevelopmentEnvironment>`_ for \"Getting the Code\". You will need to checkout the branch to which the PLIP is assigned. Instead of running the buildout with the default buildout file, you will run the config specific to that plip::"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:15
msgid "Functionality Review"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:16
msgid "There are several things that could be addressed in a PLIP review depending on the nature of the PLIP itself. This is by no means an exhaustive list, but a place to start. Things to think about when reviewing:"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:19
msgid "General"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:20
msgid "Does the PLIP actually do what the implementors proposed? Are there incomplete variations?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:21
msgid "Were there any errors running buildout? Did the migration(s) work?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:22
msgid "Do error and status messages make sense? Are they properly internationalized?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:23
msgid "Are there any performance considerations? Has the implementor addressed them if so?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:26
msgid "Bugs"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:27
msgid "Are there any bugs? Nothing is too big nor small."
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:28
msgid "Do fields handle whacky data? How about strings in date fields or nulls in required?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:29
msgid "Is validation up to snuff and sensical? Is it too restrictive or not restrictive enough?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:32
msgid "Usability Issues"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:33
msgid "Is the implementation usable?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:34
msgid "How will novice end users respond to the change?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:35
msgid "Does this PLIP need a usability review? If you think this PLIP needs a usability review, please change the state to \"please review\" and add a note in the comments."
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:36
msgid "Is the PLIP consistent with the rest of Plone? For example, if there is control panel configuration, does the new form fit in with the rest of the panels?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:37
msgid "Does everything flow nicely for novice and advanced users? Is there any workflow that feels odd?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:38
msgid "Are there any new permissions and do they work properly? Does their role assignment make sense?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:41
msgid "Documentation Issues"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:42
msgid "Is the corresponding documentation for the end user, be it developer or plone user, sufficient?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:43
msgid "Is the change itself properly documented?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:45
msgid "Please report bugs/issues in Trac as you would for any Plone bug. Reference the PLIP in the bug, assign to its implementor, and add a tag for the PLIP in the form of plip-xxx. This way the implementor can find help if he needs it. Please also prioritize the ticket. The PLIP will not be merged until all blockers and critical bugs are fixed."
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:48
msgid "Code Review"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:51
msgid "Python"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:52
msgid "Is this code maintainable?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:53
msgid "Is the code properly documented?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:54
msgid "Does the code adhere to PEP8 standards (more or less)?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:55
msgid "Are they importing deprecated modules?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:59
msgid "Does the javascript meet our set of javascript standards? See :doc:`/develop/addons/javascript_standards`"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:60
msgid "Does the Javascript work in all currently supported browsers? Is it performant?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:63
msgid "ME/TAL"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:64
msgid "Does the PLIP use views appropriately and avoiding too much logic?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:65
msgid "Is there any code in a loop that could potentially be a performance issue?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:66
msgid "Are there any deprecated or old style ME/TAL lines of code such as using DateTime?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:67
msgid "Is the rendered html standards compliant? Are ids and classes used appropriately?"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:70
msgid "Example PLIP Reviews"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:71
msgid "https://svn.plone.org/svn/plone/buildouts/plone-coredev/branches/4.1/plips/plip9352-review-davisagli.txt"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:72
msgid "https://svn.plone.org/svn/plone/buildouts/plone-coredev/branches/4.1/plips/plip10886-review-cah190.txt"
msgstr ""

#: ../develop/plone-coredev/plipreview.rst:73
msgid "https://svn.plone.org/svn/plone/buildouts/plone-coredev/branches/4.1/plips/plip9352-review-rossp.txt"
msgstr ""

#: ../develop/plone-coredev/plips.rst:2
msgid "Implementing PLIPS"
msgstr ""

#: ../develop/plone-coredev/plips.rst:5
msgid "All about PLIPS"
msgstr ""

#: ../develop/plone-coredev/plips.rst:7
msgid "**What is a PLIP?**"
msgstr ""

#: ../develop/plone-coredev/plips.rst:7
msgid "A PLIP is a Plone Improvement Proposal. It is a change to a Plone package that would affect everyone. PLIPs go through a different process than bug fixes because of their broad reaching effect. The Plone 4.x Framework Team reviews all PLIPs to be sure that it’s in the best interest of the broader community to be implemented and that it is of high quality."
msgstr ""

#: ../develop/plone-coredev/plips.rst:10
msgid "**Is it a PLIP or a bugfix?**"
msgstr ""

#: ../develop/plone-coredev/plips.rst:10
msgid "In general, anything that changes the API of Plone in the backend or UI on the front end should be filed as a PLIP. When in doubt, submit it as a PLIP. The framework team is eager to reduce its own workload and will re-classify it for you."
msgstr ""

#: ../develop/plone-coredev/plips.rst:15
msgid "**Who can submit PLIPs?**"
msgstr ""

#: ../develop/plone-coredev/plips.rst:13
msgid "Anyone who has signed a Plone core contributor agreement can work on a PLIP. Don’t let the wording freak you out: signing the agreement is easy and you will get access almost immediately. You do not have to be the most amazing coder in the entire world to submit a PLIP. The Framework Team is happy to help you at any point in the process. Submitting a PLIP can be a great learning process and we encourage people of all backgrounds to submit.  When the PLIP is accepted, a Framework Team member will “champion” your PLIP and be dedicated to seeing it completed. PLIPs are not just for code monkeys. If you have ideas on new interactions or UI your ideas are more than welcome. We will even help you pair up with implementors if needed."
msgstr ""

#: ../develop/plone-coredev/plips.rst:27
msgid "**What is a PLIP champion?**"
msgstr ""

#: ../develop/plone-coredev/plips.rst:18
msgid "When you submit your PLIP and it is approved, 1 Framework Team member who is especially excited about seeing the PLIP completed will be assigned to your PLIP as a champion. They are there to push you through completion as well as answer any questions and provide guidance."
msgstr ""

#: ../develop/plone-coredev/plips.rst:20
msgid "A champion should:"
msgstr ""

#: ../develop/plone-coredev/plips.rst:22
msgid "Answer any questions the PLIP implementor has, technically and otherwise"
msgstr ""

#: ../develop/plone-coredev/plips.rst:23
msgid "Encourage the PLIP author by constantly giving feedback and encouragement"
msgstr ""

#: ../develop/plone-coredev/plips.rst:24
msgid "Keep the implementor aware of timelines and push to get things done on time"
msgstr ""

#: ../develop/plone-coredev/plips.rst:25
msgid "Assist with finding additional help when needed to complete the implementation in a timely matter"
msgstr ""

#: ../develop/plone-coredev/plips.rst:27
msgid "Keep in mind that champions are in passive mode by default. If you need help or guidance, please reach out to them as soon as possible to activate help mode."
msgstr ""

#: ../develop/plone-coredev/plips.rst:31
msgid "**I’m still nervous. Can I get involved other ways at first?**"
msgstr ""

#: ../develop/plone-coredev/plips.rst:30
msgid "If you want to feel the process and how it works, help us review PLIPs as the implementations finish up. Simply ask on  of the Framework Team members what PLIPs are available for review or check the status of PLIPs at the `following link <https://dev.plone.org/report/24>`_. Make sure to let us know you intend to review the PLIP by joining the `Framework Team mailing list <https://lists.plone.org/mailman/listinfo/plone-framework-team>`_ and sending a quick email. Then, follow the simple instructions for :doc:`reviewing a PLIP <plipreview>`. Thank you in advance!"
msgstr ""

#: ../develop/plone-coredev/plips.rst:34
msgid "**When can I submit a PLIP?**"
msgstr ""

#: ../develop/plone-coredev/plips.rst:34
msgid "Today, tomorrow, any time! After the PLIP is accepted, the Framework Team will try to judge complexity and time to completion and assign it to a milestone. You can begin working immediately, and we encourage submitting fast and furious."
msgstr ""

#: ../develop/plone-coredev/plips.rst:39
msgid "**When is the PLIP due?**"
msgstr ""

#: ../develop/plone-coredev/plips.rst:37
msgid "Summary: As soon as you get it done. Technically, we want to see it completed for the release to which it’s assigned. We know that things get busy and new problems make PLIPs more complicated and we will push it to the next release. In general, we don’t want to track a PLIP for more than a year. If your PLIP is accepted and we haven’t seen activity in over a year, we will probably ask you to restart the whole process."
msgstr ""

#: ../develop/plone-coredev/plips.rst:42
msgid "**You don’t like my PLIP :( What now?**"
msgstr ""

#: ../develop/plone-coredev/plips.rst:42
msgid "Just because a PLIP isn’t accepted in core doesn’t mean it’s a bad idea. It is often the case that there are competing implementations and we want to see it vetted as an add on before “blessing” a preferred implementation."
msgstr ""

#: ../develop/plone-coredev/plips.rst:45
msgid "Process Overview"
msgstr ""

#: ../develop/plone-coredev/plips.rst:46
msgid "Submit a PLIP (at any time)"
msgstr ""

#: ../develop/plone-coredev/plips.rst:47
msgid "PLIP is approved for inclusion into core for a given release"
msgstr ""

#: ../develop/plone-coredev/plips.rst:48
msgid "Developer implements PLIP (code, tests, documentation)"
msgstr ""

#: ../develop/plone-coredev/plips.rst:49
msgid "PLIP is submitted for review by developer"
msgstr ""

#: ../develop/plone-coredev/plips.rst:50
msgid "Framework Team reviews the PLIP and gives feedback"
msgstr ""

#: ../develop/plone-coredev/plips.rst:51
msgid "Developer addresses concerns in feedback and re-submits if necessary. This may go back and forth a few times until both the FWT and developer are happy with the result."
msgstr ""

#: ../develop/plone-coredev/plips.rst:52
msgid "PLIP is approved for merge. In rare circumstances, a PLIP will be rejected. This is usually the result of the developer not responding to feedback or dropping out of the process.  Hang in there!"
msgstr ""

#: ../develop/plone-coredev/plips.rst:53
msgid "After all other PLIPS are merged, a release is cut. Standby for bugs!"
msgstr ""

#: ../develop/plone-coredev/plips.rst:58
msgid "How to Submit a PLIP"
msgstr ""

#: ../develop/plone-coredev/plips.rst:59
msgid "Whether you want to update the default theme or rip out a piece of architecture, everyone should go through the PLIP process. If you need help at any point in this process, please contact a member of the framework team personally or ask for help on the `FWT mailing list <https://lists.plone.org/mailman/listinfo/plone-framework-team>`_."
msgstr ""

#: ../develop/plone-coredev/plips.rst:61
msgid "A PLIP is just a ticket with a special template. To get started, `open a new ticket <https://dev.plone.org/newticket>`_ and select \"PLIP\" as the ticket type. A new ticket template will reload and you should plan to fill in all of the fields."
msgstr ""

#: ../develop/plone-coredev/plips.rst:63
msgid "When writing a PLIP, be as specific and to-the-point as you can. Remember your audience - to get support for your proposal, people will have to be able to read it! A good PLIP is sufficiently clear for a knowledgeable Plone user to be able to understand the proposed changes, and sufficiently detailed for the release manager and other developers to understand the full impact the proposal would have on the codebase. You don't have to list every line of code that needs to be changed, but you should also give an indication that you have some idea that how the change can be feasibly implemented."
msgstr ""

#: ../develop/plone-coredev/plips.rst:65
msgid "If your change is minor then a ticket in the tracker will be sufficient, added as an enhancement. The key point here is that each change needs documentation so other users can see what it is. This can be in the form of an issue tracker entry, or a PLIP in the case of a bigger change. A bug or minor change does normally not need to go through a review process - a PLIP does."
msgstr ""

#: ../develop/plone-coredev/plips.rst:67
msgid "After your PLIP is written, solicit feedback on your idea on the plone-developers mailing list. In this vetting process, you want to make sure that the change won’t adversely affect other people on accident. Others may be able to point out risks or even offer up better or existing solutions."
msgstr ""

#: ../develop/plone-coredev/plips.rst:69
msgid "When you are happy with the feedback, :ref:`submit a PLIP <how_submit_plip>`. Please use the template provided (XXX: put the template here? Can we just have a custom ticket type?). Please note a few things. It is very rare that the “Risks” section will be empty or none. If you find this is the case and your PLIP is anything more than trivial, maybe some more vetting should be done."
msgstr ""

#: ../develop/plone-coredev/plips.rst:71
msgid "The seconder field is REQUIRED. We will send the PLIP back to you if it is not filled in. Currently, this is just someone else who thinks your PLIP is a good idea, a +1. In the near future, we will start asking that the seconder is either a coding partner, or someone who is willing and able to finish the PLIP should something happen to the implementor."
msgstr ""

#: ../develop/plone-coredev/plips.rst:73
msgid "Everything else should be self explanatory. That or I got lazy when writing these docs. I'm betting on the latter."
msgstr ""

#: ../develop/plone-coredev/plips.rst:76
msgid "Evaluating PLIPs"
msgstr ""

#: ../develop/plone-coredev/plips.rst:77
msgid "After you submit your PLIP, the Framework Team will meet within a couple weeks and let you know if the PLIP is accepted. If the PLIP is not accepted, please don't be sad! We encourage most PLIPs to go through the add on process at first if at all possible to make sure the majority of the community uses it."
msgstr ""

#: ../develop/plone-coredev/plips.rst:79
msgid "All communication with you occurs on the PLIP ticket itself so please keep your eyes and inbox open for changes."
msgstr ""

#: ../develop/plone-coredev/plips.rst:86
msgid "These are the criteria by which the framework team will review your bundle:"
msgstr ""

#: ../develop/plone-coredev/plips.rst:82
msgid "What is size and status of the work needed to be done? Is it already an add-on and well established?"
msgstr ""

#: ../develop/plone-coredev/plips.rst:83
msgid "Is this idea well baked and expressed clearly?"
msgstr ""

#: ../develop/plone-coredev/plips.rst:84
msgid "Does the work proposed belong in Plone now, in the future?"
msgstr ""

#: ../develop/plone-coredev/plips.rst:85
msgid "Is this PLIP more appropriate as a qualified add-on?"
msgstr ""

#: ../develop/plone-coredev/plips.rst:86
msgid "Is this PLIP too risky?"
msgstr ""

#: ../develop/plone-coredev/plips.rst:88
msgid "See the :doc:`plipreview` page for more information."
msgstr ""

#: ../develop/plone-coredev/plips.rst:91
msgid "Implementing Your PLIP"
msgstr ""

#: ../develop/plone-coredev/plips.rst:92
msgid "You can start the development at any time - but if you are going to modify Plone itself, you might want to wait to see if your idea is approved first to save yourself some work if it isn't."
msgstr ""

#: ../develop/plone-coredev/plips.rst:95
msgid "General Rules"
msgstr ""

#: ../develop/plone-coredev/plips.rst:96
msgid "Any new packages must be in a branch in the plone namespace in github. You don't have to develop there, but it must be there when submitted. We recommend using branches off of the github.com/plone repo and will detail that below."
msgstr ""

#: ../develop/plone-coredev/plips.rst:97
msgid "Most importantly, the PLIP reviewers must be able run buildout and everything should \"just work\" (tm)."
msgstr ""

#: ../develop/plone-coredev/plips.rst:102
msgid "Any new code must:"
msgstr ""

#: ../develop/plone-coredev/plips.rst:99
msgid "Be :doc:`Properly Documented <documentation>`"
msgstr ""

#: ../develop/plone-coredev/plips.rst:100
msgid "Have clear code"
msgstr ""

#: ../develop/plone-coredev/plips.rst:101
msgid "User the current idioms of development"
msgstr ""

#: ../develop/plone-coredev/plips.rst:102
msgid "`Be tested <http://collective-docs.plone.org/en/latest/testing_and_debugging/index.html>`_"
msgstr ""

#: ../develop/plone-coredev/plips.rst:105
msgid "Creating a New PLIP Branch"
msgstr ""

#: ../develop/plone-coredev/plips.rst:108
msgid "Create a buildout configuration file for your PLIP in the ``plips`` folder. Give it a descriptive name, starting with the PLIP number; ``plip-1234-widget-frobbing.cfg`` for example. This file will define the branches/trunks you're working with in your PLIP. It should look something like this:"
msgstr ""

#: ../develop/plone-coredev/plips.rst:114
msgid "In file ``plips/plip-1234-widget-frobbing.cfg``::"
msgstr ""

#: ../develop/plone-coredev/plips.rst:134
msgid "Use the same naming convention when branching existing packages, and you should always be branching packages when working on PLIPs."
msgstr ""

#: ../develop/plone-coredev/plips.rst:138
msgid "Finishing Up"
msgstr ""

#: ../develop/plone-coredev/plips.rst:139
msgid "Before marking your PLIP as ready for review, please add a file to give a set of instructions to the PLIP reviewer."
msgstr ""

#: ../develop/plone-coredev/plips.rst:145
msgid "This file should be called ``plip_<number>_notes.txt``. This should include (but is not limited to):"
msgstr ""

#: ../develop/plone-coredev/plips.rst:142
msgid "URLs pointing to all documentation created / updated"
msgstr ""

#: ../develop/plone-coredev/plips.rst:143
msgid "Any concerns, issues still remaining"
msgstr ""

#: ../develop/plone-coredev/plips.rst:144
msgid "Any weird buildout things"
msgstr ""

#: ../develop/plone-coredev/plips.rst:145
msgid "XXX: What else?"
msgstr ""

#: ../develop/plone-coredev/plips.rst:147
msgid "Once you have finished, please update your PLIP ticket to indicate that it is ready for review. The Framework Team will assign 2-3 people to review your PLIP. They will follow the guidelines listed at :doc:`plipreview`."
msgstr ""

#: ../develop/plone-coredev/plips.rst:149
msgid "After the PLIP has been accepted by the framework team and the release manager, you will be asked to merge your work into the main development line. Merging the PLIP in is not the hardest part, but you must think about it when you develop. You'll have to interact with a large number of people to get it all set up. The merge may cause problems with other PLIPs coming in. During the merge phase you must be prepared to help out with all the features and bugs that arise."
msgstr ""

#: ../develop/plone-coredev/plips.rst:151
msgid "If all went as planned the next Plone release will carry on with your PLIP in it. You'll be expected to help out with that feature after it's been released (within reason)."
msgstr ""

#: ../develop/plone-coredev/style.rst:2
msgid "Style Guide"
msgstr ""

#: ../develop/plone-coredev/style.rst:4
msgid "Python, like any programming language, can be written in a number of styles. We're the first to admit that Zope and Plone are not the finest examples of stylistic integrity, but that doesn't stop us from trying!"
msgstr ""

#: ../develop/plone-coredev/style.rst:6
msgid "If you are not familiar with `PEP 8 <http://www.python.org/dev/peps/pep-0008>`_ - the python style guide, please take a moment to read and get up to date. We don't require it but we as a community really, really appreciate it."
msgstr ""

#: ../develop/plone-coredev/style.rst:9
msgid "Naming Conventions"
msgstr ""

#: ../develop/plone-coredev/style.rst:10
msgid "Above all else, be consistent with any code your are modifying! Historically the code is all camel case, but many new libraries are in the PEP8 convention. The mailing list is exploding with debate over what is better so we'll leave the excersize of deciding what to do with the user."
msgstr ""

#: ../develop/plone-coredev/style.rst:13
msgid "File Conventions"
msgstr ""

#: ../develop/plone-coredev/style.rst:14
msgid "In Zope 2, file names used to be MixedCase. In Python, and thus in Plone going forward, we prefer all-lowercase filenames. This has the advantage that you can instantly see if you refer to a module / file or a class::"
msgstr ""

#: ../develop/plone-coredev/style.rst:18
#: ../develop/plone-coredev/style.rst:26
msgid "compare that to::"
msgstr ""

#: ../develop/plone-coredev/style.rst:22
msgid "Filenames should be short and descriptive. Think about how an import would read::"
msgstr ""

#: ../develop/plone-coredev/style.rst:30
msgid "The former is obviously much easier to read, less redundant and generally more aesthetically pleasing."
msgstr ""

#: ../develop/plone-coredev/style.rst:33
msgid "This example is just about as terrible as they come. We need a better one."
msgstr ""

#: ../develop/plone-coredev/style.rst:36
msgid "Concrete Rules"
msgstr ""

#: ../develop/plone-coredev/style.rst:37
msgid "Do not use tabs in Python code! Use spaces as indenting, 4 spaces for each level. We don't **\"require\"** `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_, but most people use it and it's good for you."
msgstr ""

#: ../develop/plone-coredev/style.rst:38
msgid "Indent properly, even in HTML."
msgstr ""

#: ../develop/plone-coredev/style.rst:39
msgid "Never use a bare except. Anything like ``except: pass`` will likely be reverted instantly"
msgstr ""

#: ../develop/plone-coredev/style.rst:40
msgid "Avoid ``tal:on-error``, since this swallows exceptions"
msgstr ""

#: ../develop/plone-coredev/style.rst:41
msgid "Don't use ``hasattr()`` - this swallows exceptions, use ``getattr(foo, 'bar', None)`` instead. The problem with swallowed exceptions is not just poor error reporting. This can also mask ``ConflictErrors``, which indicate that something has gone wrong at the :doc:`ZODB level </manage/troubleshooting/transactions>`!"
msgstr ""

#: ../develop/plone-coredev/style.rst:42
msgid "Never, ever put any HTML in Python code and return it as a string"
msgstr ""

#: ../develop/plone-coredev/style.rst:43
msgid "Do not acquire anything unless absolutely necessary, especially tools. For example, instead of using ``context.plone_utils``, use::"
msgstr ""

#: ../develop/plone-coredev/style.rst:48
msgid "Do not put too much logic in ZPT (use :doc:`Views </develop/plone/views/index>` instead!)"
msgstr ""

#: ../develop/plone-coredev/style.rst:49
msgid "Remember to add :doc:`i18n </develop/plone/i18n/index>` tags in ZPTs and Python code"
msgstr ""

#: ../develop/plone-coredev/updateme.rst:2
msgid "How to Update these Docs"
msgstr ""

#: ../develop/plone-coredev/updateme.rst:4
msgid "These documents are currently stored with the coredev buildout in github in :file:`/docs`. To update them, please checkout the coredev buildout and update there. Make the changes on the latest version branch (as of this writing ``4.4``)::"
msgstr ""

#: ../develop/plone-coredev/updateme.rst:10
msgid "To test your changes locally, re-run buildout and then::"
msgstr ""

#: ../develop/plone-coredev/updateme.rst:14
msgid "Sphinx will poop out a directory that you can put in your browser to validate. For example: ``file:///home/user/buildout.coredev/docs/build/index.html``"
msgstr ""

#: ../develop/plone-coredev/updateme.rst:16
msgid "Please make sure to validate all warnings and errors before committing to make sure the documents remain valid. Once everything is ready to go, commit and push changes."
msgstr ""

#: ../develop/plone-coredev/updateme.rst:18
msgid "Cherry pick commits on the latest branch to the currently released branch (as of this writing ``4.3``) if these changes apply to that version (you can get the SHA hash from :command:`git log`)::"
msgstr ""

#: ../develop/plone-coredev/updateme.rst:23
msgid "There may be conflicts; if so, resolve them and then follow the directions git gives you to complete the :command:`git cherry-pick`."
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:3
msgid "Archetypes ReferenceFields"
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:7
msgid "Using ReferenceField to have references to other Archetypes content items in Plone."
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:15
msgid "Archetypes comes with a kind of field called ReferenceField which is used to store references to other Archetypes objects, or any object providing the IReferenceable interface."
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:19
msgid "References are maintained in the ``uid_catalog`` and ``reference_catalog`` catalogs.  You can find both at the root of your Plone site. Check them to see their indexes and metadata."
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:23
msgid "Although you could use the ZCatalog API to manage Archetypes references, these catalogs are rarely used directly. A ``ReferenceField`` and its API is used instead."
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:27
msgid "Example declaration of a ``ReferenceField`` inside a schema::"
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:37
msgid "Check the *Fields Reference* section in the *Archetypes Developer Manual* at https://plone.org to learn about the ``ReferenceField`` available options."
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:40
msgid "Archetypes reference fields just store the UID (Universal Object Identifier) of an object providing the ``IReferenceable`` interface. Continuing with the example above, you will usually use the regular field API (getters/setters)."
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:44
msgid "You can get the UID of a referenceable object easily::"
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:48
msgid "To set a reference, you can use the the setter method with either a list of UIDs or one UID string, or one object or a list of objects (in the case the ``ReferenceField`` is multi-valued) to which you want to add a reference to. ``None`` and ``[]`` are equal."
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:53
msgid "In this example we set a reference from the ``myct1`` object to the ``areferenceableobject`` object::"
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:58
msgid "To get the object(s) referenced, just use the getter. Note that what you get is the objects themselves, not their \":doc:`brains </develop/plone/searching_and_indexing/query>`\"::"
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:64
#: ../develop/plone/sessions/cookies.rst:144
msgid ":doc:`More info in Varnish section of this manual </manage/deploying/caching/varnish3>`."
msgstr ""

#: ../develop/plone/content/archetypes/archetypes_references.rst:71
msgid "Code to exercise the ``IReferenceable`` API, including relationships and back-references."
msgstr ""

#: ../develop/plone/content/archetypes/converting-content-types.rst:3
msgid "Converting one Content Type into another"
msgstr ""

#: ../develop/plone/content/archetypes/converting-content-types.rst:7
msgid "It is possible to 'convert' one content type into another by extracting content from the source content type and adding it to the new content type."
msgstr ""

#: ../develop/plone/content/archetypes/converting-content-types.rst:0
#: ../develop/plone/content/archetypes/files.rst:0
#: ../develop/plone/content/archetypes/templates.rst:0
#: ../develop/plone/content/timestamps.rst:0
#: ../develop/plone/functionality/rss.rst:0
#: ../develop/plone/security/permission_lists.rst:0
#: ../develop/plone/security/sandboxing.rst:0
msgid "local"
msgstr ""

#: ../develop/plone/content/archetypes/converting-content-types.rst:14
msgid "Converting Pages into News Items"
msgstr ""

#: ../develop/plone/content/archetypes/converting-content-types.rst:16
msgid "In this example we take a folder of *Pages* (meta type: ``Document``) and create *News Items* from them::"
msgstr ""

#: ../develop/plone/content/archetypes/converting-content-types.rst:38
msgid "content type \"Service\"?"
msgstr ""

#: ../develop/plone/content/archetypes/converting-content-types.rst:41
msgid "Converting Images into News Items"
msgstr ""

#: ../develop/plone/content/archetypes/converting-content-types.rst:43
msgid "This is similar to the example of converting pages into news items. Notice that when we pass the image data to ``invokeFactory`` we need to make it into a string::"
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:3
msgid "DataGridField"
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:5
msgid "This document contains miscellaneous notes about DataGridField_ field and DataGridWiget widget."
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:7
msgid "DataGridField is an Archetypes field and widget to add tabular structures to your custom content types."
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:10
#: ../develop/plone/members/membrane.rst:37
msgid "Basics"
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:12
msgid "DataGridField acts as any other Archetypes based field."
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:14
msgid "To read DGF content use *accessor* function::"
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:18
msgid "Data is a Python list of dictionaries. Each dictionary presents one row. Dictionary keys are column ids and dictionary values are cell values."
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:21
msgid "To set DGF content you must replace all rows at once::"
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:30
msgid "To append a row to DFG, you need to read it, manipulate the list, and then reset the value::"
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:37
msgid "Modify cell value in DGF::"
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:44
msgid "CheckboxColumn"
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:46
msgid "Checkbox column values are handled specially::"
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:67
#: ../develop/plone/content/dynamic_views.rst:331
#: ../develop/plone/misc/annotations.rst:324
#: ../develop/plone/serving/traversing.rst:633
msgid "Other resources"
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:69
msgid "Please enable DEBUG in https://github.com/collective/Products.DataGridField/blob/master/Products/DataGridField/config.py on your local computer. After this setting has been changed, you can run unit tests and install example types on your computer."
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:73
msgid "Refer `unit tests <https://github.com/collective/Products.DataGridField/blob/master/Products/DataGridField/tests/test_columns.py>`_ for more code examples."
msgstr ""

#: ../develop/plone/content/archetypes/datagridfield.rst:75
msgid "Refer `Archetypes manual <https://plone.org/documentation/manual/archetypes-developer-manual>`_ for basics Archetypes developer information."
msgstr ""

#: ../develop/plone/content/archetypes/editing.rst:3
msgid "Customizing editing interface"
msgstr ""

#: ../develop/plone/content/archetypes/editing.rst:6
msgid "Remove metadata tabs"
msgstr ""

#: ../develop/plone/content/archetypes/editing.rst:8
msgid "Remove *Manage properties* permissions from the users who should not see metadata fields. Do this for all fields under the schema."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:3
msgid "Fields and widgets"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:7
msgid "How to read, add, remove and create fields and widgets available for Archetypes content types."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:14
msgid "This document contains instructions how to manipulate Archetypes schema (data model for content items) and fields and widgets it consists of."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:17
msgid "*Schema* is list of fields associated with a content type. Each field can belong to one *schemata* which corresponds to one Edit tab sub-tab in Plone user interface."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:21
msgid "Field schemata is chosen by setting field's ``schemata`` attribute."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:24
msgid "Getting hold of schema objects"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:26
msgid "Archetypes based data model is defined as Schema object, which is a list of fields."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:29
msgid "During application start-up"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:31
msgid "When your class is being constructed you can refer the schema simply in Python::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:44
msgid "During HTTP request processing"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:46
msgid "You can access context schema object by using Schema() accessor."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:50
msgid "Run-time schema patching is possible, so Schema() output might differ what you put in to your content type during the construction."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:59
#: ../develop/plone/forms/schemas.rst:188
msgid "Schema introspection"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:61
msgid "How to know what fields are available on content items."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:64
msgid "Out of box schema source code"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:66
msgid "The default Plone schemas are defined"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:68
msgid "Id and title fields:"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:70
msgid "https://github.com/plone/Products.Archetypes/blob/master/Products/Archetypes/BaseObject.py"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:72
msgid "Category and owners schemata: Dublin core metadata"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:74
msgid "https://github.com/plone/Products.Archetypes/blob/master/Products/Archetypes/ExtensibleMetadata.py"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:76
msgid "Settings schemata: Exclude from navigation, related items and next/previous navigation"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:78
msgid "https://github.com/plone/Products.ATContentTypes/blob/master/Products/ATContentTypes/content/schemata.py"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:80
msgid "Document content"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:82
msgid "https://github.com/plone/Products.ATContentTypes/blob/master/Products/ATContentTypes/content/document.py"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:84
msgid "Image content"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:86
#: ../develop/plone/images/content.rst:68
#: ../develop/plone/images/templates.rst:138
msgid "https://github.com/plone/Products.ATContentTypes/blob/master/Products/ATContentTypes/content/image.py"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:88
msgid "News content"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:90
msgid "https://github.com/plone/Products.ATContentTypes/blob/master/Products/ATContentTypes/content/newsitem.py"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:93
msgid "Run-time introspection"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:95
msgid "You can get hold of content item schema and its fields as in the example below."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:97
msgid "You can do this either in"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:99
msgid ":doc:`Your own BrowserView Python code </develop/plone/views/browserviews>`"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:101
msgid ":doc:`pdb breakpoint </manage/deploying/testing_tuning/testing_and_debugging/pdb>`"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:103
msgid ":doc:`Command line Zope debug console </develop/plone/misc/commandline>`"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:110
msgid "Field can be also accessed by name::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:114
#: ../develop/plone/forms/z3c.form.rst:577
#: ../develop/plone/serving/http_request_and_response.rst:397
#: ../develop/plone/views/viewlets.rst:239
msgid "See"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:116
msgid "https://github.com/plone/Products.Archetypes/blob/master/Products/Archetypes/Schema/__init__.py"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:119
msgid "Field name"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:121
msgid "Field exposes its name through getName() attribute::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:127
msgid "Accessing Archetypes field value"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:130
msgid "Accessor method"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:132
msgid "Each field has accessor method. Accessor method is"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:134
msgid "In your content type class"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:136
msgid "Automatically generated if you don't give it manually"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:138
msgid "Has name ``get`` + schema field name with first letter uppercase. E.g. ``yourfield`` has accessor method ``context.getYourfield()`` There are a few exceptions to this rule, for fields that correspond to Dublin Core metadata. To conform to the Dublin Core specification, the accessor method for the ``title`` field is ``Title()`` and ``Description()`` for the ``description`` field."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:146
msgid "Raw access"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:148
msgid "Archetypes has two kinds of access methods:"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:150
msgid "normal, ``getSomething()``, which filters output;"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:152
msgid "raw, the so-called *edit* accessor, ``getRawSomething()`` which does not filter output."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:155
msgid "If you use direct attribute access, i.e. ``obj.something`` you can get a `BaseUnit <https://github.com/plone/Products.Archetypes/blob/master/Products/Archetypes/BaseUnit.py>`_ object. ``BaseUnit`` is an encapsulation of raw data for long text or file. It contains information about mimetype, filename, encoding. To get the raw value of a ``BaseUnit`` object you can use the ``getRaw`` method, or more simply ``str(baseunit)`` (but take care that you don't mess up the encoding)."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:164
msgid "Indirect access"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:166
msgid "You can use field.get(context) to read values of fields indirectly, without knowing the accessor method."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:168
msgid "This example shows how to read and duplicate all values of lc object to nc::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:193
msgid "Validating objects"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:195
msgid "Example for *nc* AT object::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:203
msgid "Checking permissions"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:205
msgid "field.writable() provides a short-cut whether the currently logged in user can change the field value."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:213
msgid "There is also a verbose debugging version which will print the reason to log if the writable condition is not effective::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:220
msgid "Modifying all fields in schema"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:222
msgid "You might want to modify all schema fields based on some criteria."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:224
msgid "Example how to hide all metadata fields::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:229
msgid "Reordering fields"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:231
msgid "See moveField() in `Schema/__init__.py <https://github.com/plone/Products.Archetypes/blob/master/Products/Archetypes/Schema/__init__.py>`_."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:268
msgid "Hiding widgets"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:270
msgid "You should not remove core Plone fields (Title, Description) as they are used by Plone internally e.g. in the navigation tree"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:273
msgid "But you can override their accessor functions ``Title()`` and ``Description()``"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:276
msgid "You can also hide the widgets"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:278
msgid "The recommended approach is to hide the widgets, then update the field contents when the relevant data is update. E.g. you can generate title value from fields firstname and lastname."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:283
msgid "Below is an example which uses custom JSON field as input, and then sets title and description based on it::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:445
msgid "Rendering widget"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:447
msgid "Archetypes is hardwired to render widgets from viewless TAL page templates."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:449
msgid "Example how to render widget for field 'maintext'::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:463
msgid "Creating your own Field"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:465
msgid "Here is an example how to create a custom field based on TextField."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:467
msgid "Example (mfabrik/rstpage/archetypes/fields.py)::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:514
msgid "Automatically generating description based on body text"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:516
msgid "Below is a sample through-the-web Python Script which you can drop to any Plone through Zope Management Interface."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:519
msgid "Use case: People are lazy to write descriptions (as in Dublin Core metadata). You can generate some kind of description by taking the few first sentences of the text. This is not perfect, but this is way better than empty description."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:524
msgid "This script will provide one-time operation to automatically generate content item descriptions based on their body text by taking the first three sentences."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:528
msgid "The script will provide logging output to standard Plone log (var/log and stdout if Plone is run in the debug mode)."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:531
#: ../develop/plone/content/listing.rst:692
#: ../develop/plone/functionality/portlets.rst:280
msgid "Example code::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:592
msgid "http://blog.mfabrik.com/2010/06/04/automatically-generating-description-based-on-body-text/"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:597
msgid "Archetypes has its own vocabulary infrastructure which is not compatible with :doc:`zope.schema vocabularies </develop/plone/forms/vocabularies>`."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:602
msgid "http://www.universalwebservices.net/web-programming-resources/zope-plone/dynamic-vocabularies-in-plone-archetypes"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:605
msgid "Rendering single field"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:612
msgid "Hiding widgets conditionally"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:614
msgid "AT widgets have ``condition`` :doc:`expression </develop/plone/functionality/expressions>`."
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:616
msgid "Example how to set a condition for multiple widgets to call a BrowserView to ask whether the widget should be visible or not::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:623
msgid "The related view with some sample code::"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:644
msgid "Dynamic field definitions"
msgstr ""

#: ../develop/plone/content/archetypes/fields.rst:646
msgid "You can override ``Schema()`` and ``Schemata()`` methods in your content type class to poke the schema per HTTP request access basis."
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:3
msgid "Files"
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:7
msgid "Using files with Archetype field"
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:12
msgid "Download URL for files for ATFile content"
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:14
msgid "Append ``@@download`` view to URL."
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:17
msgid "Checking whether a File field has uploaded content"
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:19
msgid "Calling AT File field accessor will return a ``File`` object::"
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:24
msgid "Note that this may return ``None`` if the content item has been constructed but the form has not been properly saved."
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:27
msgid "If the size is ``0``, the file is not yet uploaded::"
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:32
msgid "Example how to check in a view whether AT context file size exists::"
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:50
msgid "Setting max file size to FileField and ImageField"
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:52
msgid "TODO"
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:54
msgid "http://stackoverflow.com/questions/11347200/setting-max-upload-size-for-archetypes-filefield"
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:57
msgid "Old, deprecated, info"
msgstr ""

#: ../develop/plone/content/archetypes/files.rst:59
msgid "http://keeshink.blogspot.fi/2009/09/how-to-limit-file-upload-size.html"
msgstr ""

#: ../develop/plone/content/archetypes/index.rst:5
msgid "Archetypes is a subsystem to create content types in Plone 2.x, 3.x and 4.x. Dexterity is replacing it, and is available in 4.1+, becoming the default content type system in Plone 5. Archetypes will remain available through the Plone 5 series."
msgstr ""

#: ../develop/plone/content/archetypes/references.rst:3
msgid "References"
msgstr ""

#: ../develop/plone/content/archetypes/references.rst:7
msgid "Inter-content references in Plone are done using the ``reference_catalog`` tool."
msgstr ""

#: ../develop/plone/content/archetypes/references.rst:16
msgid "Plone uses a persistent tool called ``reference_catalog`` to store (Archetypes) object references.  It is used by the out-of-the-box \"Related items\" and you can use it in your own content types with ``ReferenceField``."
msgstr ""

#: ../develop/plone/content/archetypes/references.rst:20
msgid "``reference_catalog`` references can be bidirectional."
msgstr ""

#: ../develop/plone/content/archetypes/references.rst:22
msgid "The ``reference_catalog`` is a catalog just like the :doc:`portal_catalog </develop/plone/searching_and_indexing/catalog>` |---| it just uses different indexes and metadata."
msgstr ""

#: ../develop/plone/content/archetypes/references.rst:26
msgid "The ``reference_catalog`` is defined in `ReferenceEngine.py <https://github.com/plone/Products.Archetypes/blob/master/Products/Archetypes/ReferenceEngine.py>`_."
msgstr ""

#: ../develop/plone/content/archetypes/references.rst:29
msgid "Using references"
msgstr ""

#: ../develop/plone/content/archetypes/references.rst:31
msgid "Here is an example how to use reference field to make *programme* -> *researcher* references, and how to do reverse look-ups for the relationship."
msgstr ""

#: ../develop/plone/content/archetypes/references.rst:35
msgid "You use ``getReferences()`` and ``getBackReferences()`` methods to look up relationships."
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:3
msgid "Field storages"
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:5
msgid "Field storage tells how the value of schema field is stored."
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:8
msgid "AttributeStorage"
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:10
msgid "``Products.Archetypes.storage.AttributeStorage``"
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:12
msgid "This is recommended for data which is *always* read when the object is accessed:``title``, ``description``, etc."
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:17
msgid "AnnotationStorage"
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:19
msgid "``Products.Archetypes.storage.annotation.AnnotationStorage``"
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:21
msgid "``AnnotationStorage`` creates an object attribute ``__annotations__`` which is an ``OOBTree`` object.  An ``OOBTree`` uses *buckets* as the smallest persistent entity. A bucket usually holds a small number of items. Buckets are loaded on request and as needed compared to using native Python datatypes."
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:27
msgid "It is safe to assume that you can fit few variables to one bucket easily."
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:29
msgid "You also might want to define ``ATFieldProperty`` accessor if you are using this storage.  This allows you to read the object value using standard Python attribute access notation."
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:33
msgid "Note that in this case the access goes through AT accessor and mutator functions.  This differs from raw storage value access: for example the AT accessor encodes strings to UTF-8 before returning them."
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:56
msgid "SQLStorage"
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:58
msgid "This stores field values in an external SQL database."
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:60
msgid "`An old documentation how to use SQL storage <http://plone.sourceforge.net/archetypes/sqlstorage-howto.html>`_."
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:63
msgid "FSSStorage"
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:65
msgid "Store the raw values of fields on the file system."
msgstr ""

#: ../develop/plone/content/archetypes/storages.rst:83
msgid "`Official documentation of fss <https://pypi.python.org/pypi/iw.fss/>`_."
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:3
msgid "Templates"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:7
msgid "Overriding templates with Archetypes"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:14
msgid "This document will tell how to create custom templates for Plone and Archetypes based content."
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:17
msgid "This does not deal with"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:19
msgid ":doc:`browser views </develop/plone/views/browserviews>`"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:21
msgid ":doc:`generic old style template overrides </adapt-and-extend/theming/templates_css/skin_layers>`"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:24
msgid "The template loading mechanism"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:26
msgid "Archetypes tries to look up a template with name"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:28
msgid "*Content type name lowercased* + *_view.pt*"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:30
msgid "*Content type name lowercased* + *_edit.cpt*"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:32
msgid "from portal_skins."
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:34
msgid "Example controlled page template (cpt) file yourcontenttype.cpt:"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:36
msgid "Check More info links"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:38
msgid "For cpt files (controlled page template) you'll also need corresponding .metadata file::"
msgstr ""

#: ../develop/plone/content/archetypes/templates.rst:59
msgid "https://plone.org/documentation/manual/theme-reference/buildingblocks/skin/templates/how-to-customise-view-or-edit-on-archetypes-content-items"
msgstr ""

#: ../develop/plone/content/archetypes/validators.rst:3
#: ../develop/plone/forms/z3c.form.rst:2167
msgid "Validators"
msgstr ""

#: ../develop/plone/content/archetypes/validators.rst:10
msgid "This page has tips how to validate fields defined in Archetypes schema."
msgstr ""

#: ../develop/plone/content/archetypes/validators.rst:13
msgid "List of default validators"
msgstr ""

#: ../develop/plone/content/archetypes/validators.rst:15
msgid "https://github.com/plone/Products.validation/blob/master/Products/validation/validators/BaseValidators.py"
msgstr ""

#: ../develop/plone/content/archetypes/validators.rst:18
msgid "Creating a validator"
msgstr ""

#: ../develop/plone/content/archetypes/validators.rst:20
msgid "A custom validator should return True if valid, or an error string if validation fails. This is especially important to remember when chaining validators together. See the tutorials below for further details:"
msgstr ""

#: ../develop/plone/content/archetypes/validators.rst:24
msgid "http://play.pixelblaster.ro/blog/archive/2006/08/27/creating-an-archetypes-validator"
msgstr ""

#: ../develop/plone/content/archetypes/validators.rst:26
msgid "http://www.pererikstrandberg.se/blog/index.cgi?page=PloneArchetypesFieldValidator"
msgstr ""

#: ../develop/plone/content/behaviors.rst:3
msgid "Behaviors"
msgstr ""

#: ../develop/plone/content/behaviors.rst:5
msgid "Behaviors allow you the extend the functionality of existing content."
msgstr ""

#: ../develop/plone/content/behaviors.rst:7
msgid "`Tutorial <https://plone.org/products/dexterity/documentation/manual/behaviors>`_"
msgstr ""

#: ../develop/plone/content/behaviors.rst:9
msgid "`Source code <https://github.com/plone/plone.behavior/blob/master/plone/behavior/>`_"
msgstr ""

#: ../develop/plone/content/behaviors.rst:11
msgid "`Good known component version set for plone.behavior <http://good-py.appspot.com/release/dexterity/1.0a1>`_"
msgstr ""

#: ../develop/plone/content/content_rules.rst:3
msgid "Content rules"
msgstr ""

#: ../develop/plone/content/content_rules.rst:5
msgid "`User manual <https://plone.org/documentation/tutorial/creating-content-rule-conditions-and-actions/>`_"
msgstr ""

#: ../develop/plone/content/content_rules.rst:7
msgid "`Developer manual <https://plone.org/documentation/how-to/content-rules>`_"
msgstr ""

#: ../develop/plone/content/creating.rst:3
msgid "Creating objects"
msgstr ""

#: ../develop/plone/content/creating.rst:7
msgid "Creating and controlling creation of Plone content items programmatically."
msgstr ""

#: ../develop/plone/content/creating.rst:13
msgid "Creating content objects"
msgstr ""

#: ../develop/plone/content/creating.rst:16
msgid "Permission-aware way (Dexterity)"
msgstr ""

#: ../develop/plone/content/creating.rst:18
msgid "These instructions apply for :doc:`Dexterity </develop/plone/content/dexterity>` content types."
msgstr ""

#: ../develop/plone/content/creating.rst:31
msgid "Permission-aware way (Archetypes and Dexterity)"
msgstr ""

#: ../develop/plone/content/creating.rst:33
msgid "``invokeFactory()`` is available on all folderish content objects. ``invokeFactory()`` calls the ``portal_factory`` persistent utility to create content item."
msgstr ""

#: ../develop/plone/content/creating.rst:69
msgid "Example (from unit tests)::"
msgstr ""

#: ../develop/plone/content/creating.rst:76
msgid "``invokeFactory()`` will raise an ``Unauthorized`` exception if the logged-in user does not have permission to create content in the folder (lacks type specific creation permission and ``Add portal content`` permissions).  This exception can be imported as follows::"
msgstr ""

#: ../develop/plone/content/creating.rst:85
msgid "If the content class has  ``_at_rename_after_creation = True`` (Archetypes-based content) the next call to ``obj.update()`` (edit form post) will automatically generate a friendly id for the object based on the title of the object."
msgstr ""

#: ../develop/plone/content/creating.rst:92
msgid "Bypassing permissions when creating content item"
msgstr ""

#: ../develop/plone/content/creating.rst:94
msgid "If you need to have special workflows where you bypass the workflow and logged in users when creating the content item, do as follows::"
msgstr ""

#: ../develop/plone/content/creating.rst:121
msgid "The function above only bypasses the content item construction permission check.  It does not bypass checks for setting field values for initially created content."
msgstr ""

#: ../develop/plone/content/creating.rst:125
msgid "There is also an alternative way::"
msgstr ""

#: ../develop/plone/content/creating.rst:134
msgid "Manual friendly id generation"
msgstr ""

#: ../develop/plone/content/creating.rst:136
msgid "If you are creating Plone objects by hand e.g. in a batch job and Plone automatic id generation does not kick in, you can use the following example to see how to create friendly object ids manually::"
msgstr ""

#: ../develop/plone/content/creating.rst:187
msgid "PortalFactory"
msgstr ""

#: ../develop/plone/content/creating.rst:189
msgid "``PortalFactory`` (only for Archetypes) creates the object in a temporary folder and only moves it to the real folder when it is first saved."
msgstr ""

#: ../develop/plone/content/creating.rst:194
msgid "To see if content is still temporary, use ``portal_factory.isTemporary(obj)``."
msgstr ""

#: ../develop/plone/content/creating.rst:198
msgid "Restricting creating on content types"
msgstr ""

#: ../develop/plone/content/creating.rst:200
msgid "Plone can restrict which content types are available for creation in a folder via the :guilabel:`Add...` menu."
msgstr ""

#: ../develop/plone/content/creating.rst:204
msgid "Restricting available types per content type"
msgstr ""

#: ../develop/plone/content/creating.rst:206
msgid "``portal_types`` defines which content types can be created inside a folderish content type.  By default, all content types which have the ``global_allow`` property set can be added."
msgstr ""

#: ../develop/plone/content/creating.rst:210
msgid "The behavior can be controlled with ``allowed_content_types`` setting."
msgstr ""

#: ../develop/plone/content/creating.rst:212
msgid "You can change it through the ``portal_types`` management interface."
msgstr ""

#: ../develop/plone/content/creating.rst:214
msgid "You can change it in your add-on installer :doc:`GenericSetup </develop/addons/components/genericsetup>` profile."
msgstr ""

#: ../develop/plone/content/creating.rst:217
msgid "Example for :doc:`Dexterity content type </develop/plone/content/dexterity>`. The file would be something like ``profiles/default/types/yourcompany.app.typeid.xml``::"
msgstr ""

#: ../develop/plone/content/creating.rst:229
msgid "Example for :doc:`Archetypes content </develop/plone/content/archetypes/index>`. The file would be something like ``profiles/default/types/YourType.xml``::"
msgstr ""

#: ../develop/plone/content/creating.rst:242
msgid "Restricting available types per folder instance"
msgstr ""

#: ../develop/plone/content/creating.rst:244
msgid "In the UI, you can access this feature via the :guilabel:`Add...` menu :guilabel:`Restrict` option."
msgstr ""

#: ../develop/plone/content/creating.rst:247
msgid "Type contraining is managed by the ``ATContentTypes`` product:"
msgstr ""

#: ../develop/plone/content/creating.rst:249
msgid "https://github.com/plone/Products.ATContentTypes/blob/master/Products/ATContentTypes/lib/constraintypes.py"
msgstr ""

#: ../develop/plone/content/creating.rst:266
msgid "You can also override the ``contraintypes`` accessor method to have programmable logic regarding which types are addable and which not."
msgstr ""

#: ../develop/plone/content/creating.rst:272
msgid "Other restrictions"
msgstr ""

#: ../develop/plone/content/creating.rst:274
msgid "See this discussion thread:"
msgstr ""

#: ../develop/plone/content/creating.rst:276
msgid "http://plone.293351.n2.nabble.com/Folder-constraints-not-applicable-to-custom-content-types-tp6073100p6074327.html"
msgstr ""

#: ../develop/plone/content/creating.rst:279
msgid "Creating OFS objects"
msgstr ""

#: ../develop/plone/content/creating.rst:281
msgid "Zope has facilities for basic folder and contained objects using the `IObjectManager definition <http://svn.zope.org/Zope/trunk/src/OFS/interfaces.py?rev=96262&view=auto>`_ subsystem. You do not need to work with raw objects unless you are doing your custom lightweight, Plone-free, persistent data."
msgstr ""

#: ../develop/plone/content/creating.rst:288
msgid "Object construction life cycle"
msgstr ""

#: ../develop/plone/content/creating.rst:292
msgid "The following applies to Archetypes-based objects only. The process might be different for Dexterity-based content."
msgstr ""

#: ../develop/plone/content/creating.rst:295
msgid "Archetypes content construction has two phases:"
msgstr ""

#: ../develop/plone/content/creating.rst:297
msgid "The object is created using a ``?createType=`` URL or a ``Folder.invokeFactory()`` call.  If ``createType`` is used then the object is given a temporary id. The object has an \"in creation\" flag set."
msgstr ""

#: ../develop/plone/content/creating.rst:302
msgid "The object is saved for the first time and the final id is generated based on the object title. The object is renamed. The creation flag is cleared."
msgstr ""

#: ../develop/plone/content/creating.rst:306
msgid "You are supposed to call either ``object.unmarkCreationFlag()`` or ``object.processForm()`` after content is created manually using ``invokeFactory()``."
msgstr ""

#: ../develop/plone/content/creating.rst:310
msgid "``processForm()`` will perform the following tasks:"
msgstr ""

#: ../develop/plone/content/creating.rst:312
msgid "unmarks creation flag;"
msgstr ""

#: ../develop/plone/content/creating.rst:313
msgid "renames object according to title;"
msgstr ""

#: ../develop/plone/content/creating.rst:314
msgid "reindexes object;"
msgstr ""

#: ../develop/plone/content/creating.rst:315
msgid "invokes the ``after_creation`` script and fires the ``ObjectInitialized`` event."
msgstr ""

#: ../develop/plone/content/creating.rst:318
msgid "If you don't want some particular step to be executed, study ``Archetypes/BaseObject.py`` and call only what you really want.  But unless ``unmarkCreationFlag()`` is called, the object will behave strangely after the first edit."
msgstr ""

#: ../develop/plone/content/creating.rst:324
msgid "Rename after creation"
msgstr ""

#: ../develop/plone/content/creating.rst:326
msgid "To prevent the automatic rename on the first through-the-web save, add the following attribute to your class::"
msgstr ""

#: ../develop/plone/content/creating.rst:334
msgid "Factory type information"
msgstr ""

#: ../develop/plone/content/creating.rst:336
msgid "Factory type information (FTI) is responsible for content creation in the portal.  It is independent from content type (Archetypes, Dexterity) subsystems."
msgstr ""

#: ../develop/plone/content/creating.rst:342
msgid "The FTI codebase is old (updated circa 2001). Useful documentation might be hard to find."
msgstr ""

#: ../develop/plone/content/creating.rst:345
msgid "FTI is responsible for:"
msgstr ""

#: ../develop/plone/content/creating.rst:347
msgid "Which function is called when new content type is added;"
msgstr ""

#: ../develop/plone/content/creating.rst:348
msgid "icons available for content types;"
msgstr ""

#: ../develop/plone/content/creating.rst:349
msgid "creation views for content types;"
msgstr ""

#: ../develop/plone/content/creating.rst:350
msgid "permission and security;"
msgstr ""

#: ../develop/plone/content/creating.rst:351
msgid "whether discussion is enabled;"
msgstr ""

#: ../develop/plone/content/creating.rst:352
msgid "providing the ``factory_type_information`` dictionary. This is used elsewhere in the code (often in ``__init__.py`` of a product) to set the initial values for a *ZODB Factory Type Information* object (an object in the ``portal_types`` tool)."
msgstr ""

#: ../develop/plone/content/creating.rst:357
#: ../develop/plone/content/importexport.rst:219
#: ../develop/plone/functionality/collections.rst:73
#: ../develop/plone/i18n/internationalisation.rst:337
msgid "See:"
msgstr ""

#: ../develop/plone/content/creating.rst:359
msgid "`FTI source code <http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/TypesTool.py?rev=101748&view=auto>`_."
msgstr ""

#: ../develop/plone/content/creating.rst:361
msgid "`Scriptable Types Information HOW TO <http://www.zope.org/Products/CMF/docs/devel/using_scriptable_type_info/view>`_"
msgstr ""

#: ../develop/plone/content/creating.rst:363
msgid "`Notes Zope types mechanism <http://www.zope.org/Products/CMF/docs/devel/taming_types_tool/view>`_"
msgstr ""

#: ../develop/plone/content/creating.rst:366
msgid "Content does not show in :guilabel:`Add` menu, or ``Unauthorized`` errors"
msgstr ""

#: ../develop/plone/content/creating.rst:368
msgid "These instructions are for Archetypes content to debug issues when creating custom content types which somehow fail to become creatable."
msgstr ""

#: ../develop/plone/content/creating.rst:371
msgid "When creating new content types, many things can silently fail due to human errors in the complex content type setup chain and security limitations. The consequence is that you don't see your content type in the :guilabel:`Add` drop-down menu.  Here are some tips for debugging."
msgstr ""

#: ../develop/plone/content/creating.rst:376
msgid "Is your product broken due to Python import time errors? Check :term:`ZMI`: :guilabel:`Control panel` -> :guilabel:`Products`. Turn on Zope debugging mode to trace import errors."
msgstr ""

#: ../develop/plone/content/creating.rst:380
msgid "Have you rerun the quick installer (``GenericSetup``) after creating/modifying the content type?"
msgstr ""

#: ../develop/plone/content/creating.rst:383
msgid "Do you have a correct :guilabel:`Add` permission for the product? Check ``__init__.py`` ``ContentInit()`` call."
msgstr ""

#: ../develop/plone/content/creating.rst:386
msgid "Does it show up in the portal factory? Check :term:`ZMI`: :guilabel:`portal_factory` and ``factorytool.xml``."
msgstr ""

#: ../develop/plone/content/creating.rst:389
msgid "Is it corretly registered as a portal type and implictly addable? Check :term:`ZMI`: :guilabel:`portal_types`. Check ``default/profiles/type/yourtype.xml``."
msgstr ""

#: ../develop/plone/content/creating.rst:393
msgid "Does it have correct product name defined? Check :term:`ZMI`: :guilabel:`portal_types`."
msgstr ""

#: ../develop/plone/content/creating.rst:396
msgid "Does it have a proper factory method? Check :term:`ZMI`: :guilabel:`portal_types`. Check Zope logs for ``_queryFactory`` and import errors."
msgstr ""

#: ../develop/plone/content/creating.rst:400
msgid "Does it register itself with Archetypes? Check :term:`ZMI`: :guilabel:`archetypes_tool`. Make sure that you have ``ContentInit`` properly run in your ``__init__.py``. Make sure that all modules having Archetypes content types defined and ``registerType()`` call are imported in ``__init__py``."
msgstr ""

#: ../develop/plone/content/creating.rst:407
msgid "Link to creation page"
msgstr ""

#: ../develop/plone/content/creating.rst:409
msgid "The :guilabel:`Add...` menu contains links for creating individual content types. Copy the URLs that you see there."
msgstr ""

#: ../develop/plone/content/creating.rst:412
msgid "If you want to the user to have a choice about which content type to create, you can link to ``/folder_factories`` page. (This is also the creation page when Javascript is disabled)."
msgstr ""

#: ../develop/plone/content/creating.rst:417
msgid "Populating folder on creation"
msgstr ""

#: ../develop/plone/content/creating.rst:419
msgid "Archetypes have a hook called ``initializeArchetype()``. Your content type subclass can override this."
msgstr ""

#: ../develop/plone/content/creating.rst:445
msgid "Creating content from PloneFormGen"
msgstr ""

#: ../develop/plone/content/creating.rst:447
msgid "PloneFormGen is a popular add-on for Plone."
msgstr ""

#: ../develop/plone/content/creating.rst:449
msgid "Below is a snippet for a ``Custom Script Adapter`` which allows to create content straight out of PloneFormGen in the *pending* review state (it is not public and will appear in the review list)::"
msgstr ""

#: ../develop/plone/content/creating.rst:493
#: ../develop/plone/content/creating.rst:495
msgid "https://plone.org/products/ploneformgen/documentation/how-to/creating-content-from-pfg"
msgstr ""

#: ../develop/plone/content/creating.rst:498
msgid "Creating content using Generic Setup"
msgstr ""

#: ../develop/plone/content/creating.rst:501
msgid "Purpose"
msgstr ""

#: ../develop/plone/content/creating.rst:503
msgid "You want your product to create default content in the site.  (For example, because you have a product which adds a new content type, and you want to create a special folder to put these items in.)"
msgstr ""

#: ../develop/plone/content/creating.rst:507
msgid "You could do this programmatically, but if you don't want anything fancy (see \"Limitations\" below), Generic Setup can also take care of it."
msgstr ""

#: ../develop/plone/content/creating.rst:511
msgid "Step by step"
msgstr ""

#: ../develop/plone/content/creating.rst:513
msgid "In your product's ``profiles/default`` folder, create a directory called ``structure``."
msgstr ""

#: ../develop/plone/content/creating.rst:515
msgid "To create a top-level folder with id ``my-folder-gs-created``, add a directory of that name to the structure folder."
msgstr ""

#: ../develop/plone/content/creating.rst:517
msgid "Create a file called .objects in the ``structure`` directory"
msgstr ""

#: ../develop/plone/content/creating.rst:519
msgid "Create a file called .properties in the ``my-folder-gs-created`` directory"
msgstr ""

#: ../develop/plone/content/creating.rst:521
msgid "Create a file called .preserve in the ``structure`` directory"
msgstr ""

#: ../develop/plone/content/creating.rst:523
msgid "``.objects`` registers the folder to be created::"
msgstr ""

#: ../develop/plone/content/creating.rst:527
msgid "``.properties`` sets properties of the folder to be created::"
msgstr ""

#: ../develop/plone/content/creating.rst:533
msgid "``.preserve`` will make sure the folder isn't overwritten if it already exists::"
msgstr ""

#: ../develop/plone/content/creating.rst:538
msgid "Limitations"
msgstr ""

#: ../develop/plone/content/creating.rst:540
msgid "This will only work for Plone's own content types"
msgstr ""

#: ../develop/plone/content/creating.rst:542
msgid "Items will be in their initial workflow state"
msgstr ""

#: ../develop/plone/content/creating.rst:544
msgid "If you want to create objects of a custom content type, or manipulate them more, you'll have to write a setuphandler. See below under \"Further Information\"."
msgstr ""

#: ../develop/plone/content/creating.rst:552
msgid "I don't see titles in the navigation, only ids"
msgstr ""

#: ../develop/plone/content/creating.rst:554
msgid "You may notice that the new generated content's title appears to be set to its id. In this case, the catalog needs to be updated. You can do this through the ZMI, in ``portal_catalog``."
msgstr ""

#: ../develop/plone/content/creating.rst:558
msgid "You could automate this process by adding a GS import step in configure.zcml, which looks like this::"
msgstr ""

#: ../develop/plone/content/creating.rst:568
msgid "This is the preferred way to define dependencies for import profiles: The import step declares its dependency on the content import step. 'content' is the name for the step which creates content from ``profiles/default/structure``. You could then add a method which updates the catalog in the product's ``setuphandlers.py``::"
msgstr ""

#: ../develop/plone/content/creating.rst:586
msgid "Further information"
msgstr ""

#: ../develop/plone/content/creating.rst:588
msgid "Original manual: http://vanrees.org/weblog/creating-content-with-genericsetup"
msgstr ""

#: ../develop/plone/content/creating.rst:590
msgid "If you want to do things like workflow transitions or setting default views after creating, read http://keeshink.blogspot.de/2011/05/creating-plone-content-when-installing.html"
msgstr ""

#: ../develop/plone/content/deleting.rst:3
msgid "Deleting"
msgstr ""

#: ../develop/plone/content/deleting.rst:7
msgid "Deleting content items in Plone programmatically. How link integrity checks work and how (and when!) to avoid them."
msgstr ""

#: ../develop/plone/content/deleting.rst:15
msgid "This document explains how to programmatically delete objects in Plone."
msgstr ""

#: ../develop/plone/content/deleting.rst:18
msgid "Deleting content by id"
msgstr ""

#: ../develop/plone/content/deleting.rst:20
msgid "Deleting content objects is done by IObjectManager."
msgstr ""

#: ../develop/plone/content/deleting.rst:22
msgid "`IObjectManager definition <http://svn.zope.org/Zope/trunk/src/OFS/interfaces.py?rev=96262&view=auto>`_."
msgstr ""

#: ../develop/plone/content/deleting.rst:29
#: ../develop/plone/images/pil.rst:55
msgid "Or::"
msgstr ""

#: ../develop/plone/content/deleting.rst:35
#: ../develop/plone/security/permission_lists.rst:0
#: ../develop/plone/security/permissions.rst:3
#: ../develop/plone/serving/webdav.rst:31
msgid "Permissions"
msgstr ""

#: ../develop/plone/content/deleting.rst:37
msgid "The user must have Zope 2 *Delete objects* permission on the *content item* being deleted. This is checked in ``Products.CMFPlone.PloneFolder.manage_delObjects()``."
msgstr ""

#: ../develop/plone/content/deleting.rst:40
msgid "Otherwise an ``Unauthorized`` exception is raised."
msgstr ""

#: ../develop/plone/content/deleting.rst:42
msgid "Example how to check for this permission::"
msgstr ""

#: ../develop/plone/content/deleting.rst:57
msgid "Bypassing permissions"
msgstr ""

#: ../develop/plone/content/deleting.rst:59
msgid "This is handy if you work e.g. in a :doc:`debug shell </develop/plone/misc/commandline>` and you are deleting badly behaved objects::"
msgstr ""

#: ../develop/plone/content/deleting.rst:70
msgid "Deleting all content in a folder"
msgstr ""

#: ../develop/plone/content/deleting.rst:72
msgid "This can be a bit tricky. An example::"
msgstr ""

#: ../develop/plone/content/deleting.rst:84
msgid "Bypassing link integrity check"
msgstr ""

#: ../develop/plone/content/deleting.rst:86
msgid "If link integrity checks has been enabled in the site setup, you cannot delete objects which themselves are link targets or if their children are link targets."
msgstr ""

#: ../develop/plone/content/deleting.rst:90
msgid "Instead, a ``LinkIntegrityException`` will be raised. The ``LinkIntegrityException`` contains information identifying the content which could not be deleted."
msgstr ""

#: ../develop/plone/content/deleting.rst:94
msgid "The ``plone.app.linkintegrity.browser.remote`` module contains code which allows you to delete the object in any case. It catches the exception, modifies the HTTP request to contain a marker interface allowing delete to happen and then replays the transaction."
msgstr ""

#: ../develop/plone/content/deleting.rst:100
msgid "In case the link integrity check fails for ``manage_delObjects()``, you will be shown a confirmation dialog. The original request payload gets pickled and is stored encoded in the HTML form."
msgstr ""

#: ../develop/plone/content/deleting.rst:104
msgid "When the user presses confirm, the original request gets unpickled from the ``HTTP POST`` payload. Then the view modifies the Zope publisher so that it will play the original unpickled ``HTTP POST`` with the marker interface \"Do not care about link integrity breaches\" turned on."
msgstr ""

#: ../develop/plone/content/deleting.rst:110
msgid "Here is an sample batch delete code which tries to work around the link integrity check::"
msgstr ""

#: ../develop/plone/content/deleting.rst:148
msgid "Fail safe deleting"
msgstr ""

#: ../develop/plone/content/deleting.rst:150
msgid "Sometimes deletion might fail because it dispatches events which might raise exception due to bad broken objects or badly behaving code."
msgstr ""

#: ../develop/plone/content/deleting.rst:154
msgid "`OFS.ObjectManager <http://svn.zope.org/Zope/trunk/src/OFS/ObjectManager.py?rev=115507&view=auto>`_, the base class for Zope folders, provides an internal method to delete objects from a folder without firing any events::"
msgstr ""

#: ../develop/plone/content/deleting.rst:161
msgid "The best way to clean up bad objects on your site is via a :doc:`command line script </develop/plone/misc/commandline>`, in which case remember to commit the transaction after removing the broken objects."
msgstr ""

#: ../develop/plone/content/deleting.rst:167
msgid "Purging site from old content"
msgstr ""

#: ../develop/plone/content/deleting.rst:169
msgid "This term:`ZMI` script allows you to find content items of certain type and delete them if they are created too long ago::"
msgstr ""

#: ../develop/plone/content/deleting.rst:203
msgid "Below is an advanced version for old item-date-based deletion code which is suitable for huge sites. This snippet is from the ``Products.feedfeeder`` package. It will look for ``Feedfeeder`` items (automatically generated from RSS) which are older than X days and delete them."
msgstr ""

#: ../develop/plone/content/deleting.rst:210
msgid "It's based on Zope 3 page registration (sidenote: I noticed that views do not need to be based on BrowserView page class)."
msgstr ""

#: ../develop/plone/content/deleting.rst:213
msgid "Transaction thresholds make sure the code runs faster and does not run out of RAM"
msgstr ""

#: ../develop/plone/content/deleting.rst:216
msgid "Logging to Plone event log files"
msgstr ""

#: ../develop/plone/content/deleting.rst:218
msgid "Number of days to look into past is not hardcoded"
msgstr ""

#: ../develop/plone/content/deleting.rst:220
msgid "Manage rights needed to execute the code"
msgstr ""

#: ../develop/plone/content/deleting.rst:222
msgid "You can call this view like::"
msgstr ""

#: ../develop/plone/content/deleting.rst:226
msgid "Here is the view Python source code::"
msgstr ""

#: ../develop/plone/content/deleting.rst:307
msgid "Then we have the view ZCML registration:"
msgstr ""

#: ../develop/plone/content/dexterity.rst:3
#: ../develop/plone/content/types.rst:193
#: ../develop/plone/forms/wysiwyg.rst:127
#: ../develop/plone/i18n/translating_content.rst:78
#: ../develop/plone/i18n/translating_content.rst:103
msgid "Dexterity"
msgstr ""

#: ../develop/plone/content/dexterity.rst:7
msgid "Dexterity content subsystem for Plone: info for the developers."
msgstr ""

#: ../develop/plone/content/dexterity.rst:14
msgid "Dexterity is a subsystem for content objects. It is the standard content type for Plone 5 and onward and can be already used with Plone 4."
msgstr ""

#: ../develop/plone/content/dexterity.rst:18
msgid ":doc:`Dexterity developer manual </external/plone.app.dexterity/docs/index>`"
msgstr ""

#: ../develop/plone/content/dexterity.rst:20
msgid ":doc:`How Dexterity is related to Archetypes </external/plone.app.dexterity/docs/intro>`"
msgstr ""

#: ../develop/plone/content/dexterity.rst:23
msgid "mr.bob templates"
msgstr ""

#: ../develop/plone/content/dexterity.rst:25
msgid "Please see :doc:`ZopeSkel page </develop/addons/bobtemplates.plone/README>` for project skeleton templates for Dexterity."
msgstr ""

#: ../develop/plone/content/dexterity.rst:31
msgid "Content creation permissions"
msgstr ""

#: ../develop/plone/content/dexterity.rst:33
msgid "Please read :doc:`dexterity and permissions </external/plone.app.dexterity/docs/advanced/permissions>`"
msgstr ""

#: ../develop/plone/content/dexterity.rst:36
msgid "Exclusion from navigation"
msgstr ""

#: ../develop/plone/content/dexterity.rst:38
msgid "This must be enabled separately for Dexterity content types with a behavior."
msgstr ""

#: ../develop/plone/content/dexterity.rst:48
msgid "Then you can manually also check this property::"
msgstr ""

#: ../develop/plone/content/dexterity.rst:63
msgid "Custom add form/view"
msgstr ""

#: ../develop/plone/content/dexterity.rst:65
msgid "Dexterity relies on ``++add++yourcontent.type.name`` traverser hook defined in ``Products/CMFCore/namespace.py``."
msgstr ""

#: ../develop/plone/content/dexterity.rst:68
msgid "It will look up a multi-adapter using this expression::"
msgstr ""

#: ../develop/plone/content/dexterity.rst:76
msgid "The ``name`` parameter is the ``portal_types`` id of your content type."
msgstr ""

#: ../develop/plone/content/dexterity.rst:78
msgid "You can register such an adapter in ``configure.zcml``"
msgstr ""

#: ../develop/plone/content/dexterity.rst:99
msgid "Then you can inherit from the proper ``plone.dexterity`` base classes::"
msgstr ""

#: ../develop/plone/content/dexterity.rst:118
#: ../develop/plone/members/member_basics.rst:295
msgid "See also:"
msgstr ""

#: ../develop/plone/content/dexterity.rst:120
msgid ":doc:`FTI </develop/plone/content/types>`"
msgstr ""

#: ../develop/plone/content/dexterity.rst:122
msgid ":doc:`z3c.form </develop/plone/forms/z3c.form>`"
msgstr ""

#: ../develop/plone/content/dexterity.rst:126
msgid "Custom edit form"
msgstr ""

#: ../develop/plone/content/dexterity.rst:143
msgid "Registering an edit form works by registering a normal browser page."
msgstr ""

#: ../develop/plone/content/dexterity.rst:160
msgid "In the example above it is important, that you give the browser page the name \"edit\"."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:3
msgid "Dynamic views"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:9
msgid "How to programmatically change the active view of a Plone content item"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:14
msgid "Dynamic views are views which the content editor can choose for his or her content from the :guilabel:`Display...` drop-down menu in the green edit frame."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:18
msgid "By default, Plone comes with dynamic views for:"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:20
#: ../develop/plone/content/listing.rst:386
msgid "Folder listing"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:21
msgid "Summary"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:22
msgid "Photo album"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:23
#: ../develop/plone/content/index.rst:18
#: ../develop/plone/getstarted/index.rst:148
msgid "etc."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:25
msgid "The default view can be also a content item picked from the folder. Available content item types can be managed from the :term:`ZMI` at :guilabel:`portal_properties` -> :guilabel:`site_properties` -> :guilabel:`default_page_types`."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:32
msgid "http://stackoverflow.com/questions/9432229/enabling-folder-as-one-of-default-content-item-views"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:35
msgid "Permission for changing the view template of an item"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:37
msgid "A user needs the :guilabel:`Modify view template` permission to use the dynamic view dropdown. If you want to restrict this ability, grant or revoke this permission as appropriate."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:42
msgid "This can be useful for some content-types like Dexterity ones, where dynamic views are enabled by default, and the easiest way to disable them is using this permission."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:48
msgid "Default dynamic views"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:50
msgid "Plone supports a few dynamic views for folders out of the box:"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:52
msgid "Summary view (``folder_summary_view``)"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:53
msgid "Tabular view (``folder_tabular_view``)"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:54
msgid "Album view (``atct_album_view``)"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:55
msgid "Listing (``folder_listing``)"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:56
msgid "Full view (``folder_full_view``)"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:58
msgid "These are defined in :doc:`portal_types information </develop/plone/content/types>` for the *Folder* content type and mapped to the *Display* menu all over in ZCML using ``browser:menuItem`` as described below."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:62
msgid "Newly created folders have this dynamic view applied:"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:64
msgid "``Products.CMFPlone/skins/plone_content/folder_summary_view.pt`` (a non-view based old style Zope 2 page template)"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:69
msgid ":doc:`Overriding views </develop/plone/views/browserviews>`"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:72
msgid "Creating a dynamic view"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:74
msgid "Here are instructions how to create your own dynamic view."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:76
msgid "There is also an example product `Listless view <https://github.com/miohtama/listlessview>`_, which provides \"no content listing\" view for Folder content types."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:81
msgid "Registering a dynamic view menu item"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:83
msgid "In order to be able to register dynamic views, your content type must support them."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:86
msgid "To do this, the content type should subclass ``Products.CMFDynamicViewFTI.browserdefault.BrowserDefaultMixin``."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:89
msgid "Then, you need to register a dynamic view menu item with the corresponding view in your ``configure.zcml``:"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:103
msgid "``Products.ATContentTypes`` uses a non-standard name for the ``interfaces`` package. There, it is ``interface``, while all other packages use ``interfaces``."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:107
msgid "The view must be listed in ``portal_types`` for the content type. In this case, we should enable it for Archetypes folders using the following GenericSetup XML: ``profiles/default/types/Folder.xml``."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:111
msgid "Note that you don't need to copy the whole ``Folder.xml`` / ``Topic.xml`` from ``Products/CMFPlone/profiles/default/types``. Including the changed ``view_methods`` in the XML code is enough."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:115
msgid "You can also change this through portal_types in the ZMI."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:119
msgid "``view_methods`` must not have the ``@@view`` signature in their method name."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:135
msgid "Also, if you want :guilabel:`Collection`\\s to have this listing, you need to add the following ``profiles/default/types/Topic.xml``."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:159
msgid "Working around broken default view"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:161
msgid "If you manage to:"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:163
msgid "Create a new view"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:164
msgid "set it to the default as a folder"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:165
msgid "and this view has a bug"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:167
msgid "... you cannot access the folder anymore, because you are taken to the broken view stack trace instead instead of rendering the green edit menubar."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:170
msgid "The fix is to reset the view by browsing to the ``select_default_view`` directly. Access your folder like this::"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:177
msgid "Checking that your view is available"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:179
msgid "``Products.CMFDynamicViewFTI.browserdefault.BrowserDefaultMixin.getAvailableLayouts()`` returns the list of known layouts in the following format::"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:188
msgid "So to see if your view is available, check it against the ids from that result::"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:195
msgid "Getting active layout"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:204
msgid "Changing default view programmatically"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:211
msgid "Default page"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:213
msgid "The default page is a *content item* chosen to be displayed when the visitor arrives at a URL without any subpages or views selected."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:216
msgid "This is useful if you are doing the folder listing manually and you want to replace the default view."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:219
msgid "The ``default_page`` helper view can be used to manipulate default pages."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:221
msgid "Getting the default page::"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:231
msgid "Another example how to use this::"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:258
msgid "Bare except?"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:260
msgid "Setting the default page can be done as simply as setting a ``default_page`` attribute on the folder to the id of the default page::"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:265
msgid "More information can be found in"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:267
msgid "https://github.com/plone/plone.app.layout/blob/master/plone/app/layout/globals/context.py"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:269
msgid "https://github.com/plone/plone.app.layout/blob/master/plone/app/layout/navigation/defaultpage.py"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:272
msgid "Disabling dynamic views"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:274
msgid "Add to your content type class::"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:284
msgid "Setting a view using marker interfaces"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:286
msgid "If you need to have a view for few individual content items only, it is best to do this using marker interfaces."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:289
msgid "Register a view against a marker interface"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:291
msgid "Assign this marker interface to a content item using the Zope Management Interface (:term:`ZMI`)"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:294
msgid "For more info, see"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:296
msgid "http://www.netsight.co.uk/blog/2010/5/21/setting-a-default-view-of-a-folder-in-plone"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:298
msgid ":doc:`marker interfaces </develop/addons/components/interfaces>`"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:302
msgid "Migration script from default view to another"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:304
msgid "Below is a script snippet which allows you to change the default view for all folders to another type. You can execute the script through the :term:`ZMI` as a Python Script."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:308
msgid "Script code::"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:321
msgid "This will allow you to migrate from ``collective.fancyzoom`` to Plone 4's default album view or ``Products.PipBox``."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:325
msgid "Method aliases"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:327
msgid "Method aliases allow you to redirect basic actions (view, edit) to content-type specific views.  Aliases are configured in ``portal_types``."
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:333
msgid "https://plone.org/documentation/how-to/how-to-create-and-set-a-custom-homepage-template-using-generic-setup"
msgstr ""

#: ../develop/plone/content/dynamic_views.rst:335
msgid "`CMFDynamicView plone.org product page <https://plone.org/products/cmfdynamicviewfti/>`_"
msgstr ""

#: ../develop/plone/content/events.rst:3
msgid "Eventish content types"
msgstr ""

#: ../develop/plone/content/events.rst:7
msgid "Creating and programming event and eventish content types in Plone"
msgstr ""

#: ../develop/plone/content/events.rst:14
msgid "Plone supports events as content. Events have a start time, end time and other fields. They can be exported to standard ``vCal`` (compatible with Outlook) and ``iCal`` (compatible with OSX) formats. A default calendar shows published events in a calendar view."
msgstr ""

#: ../develop/plone/content/events.rst:20
msgid "Recurring events (events repeating with an interval) are supported out-of-the-box on Plone 5."
msgstr ""

#: ../develop/plone/content/events.rst:23
msgid "This is provided by `plone.app.event <https://github.com/plone/plone.app.event>`_ (`documentation <https://ploneappevent.readthedocs.org/en/latest/>`_)"
msgstr ""

#: ../develop/plone/content/events.rst:28
msgid "Purging old events"
msgstr ""

#: ../develop/plone/content/events.rst:30
msgid "After the event end day the event stays visible in Plone listings."
msgstr ""

#: ../develop/plone/content/events.rst:32
msgid "You need to have a special janitor script / job if you want to delete old events from your site."
msgstr ""

#: ../develop/plone/content/history.rst:3
msgid "History and versioning"
msgstr ""

#: ../develop/plone/content/history.rst:10
msgid "Plone versioning allows you to go back between older edits of the same content object."
msgstr ""

#: ../develop/plone/content/history.rst:12
msgid "`Versioning allows you to restore and diff previous copies of the same content <https://plone.org/documentation/manual/plone-3-user-manual/managing-content/versioning-plone-v3.0-plone-v3.2>`_. More about `CMFEditions here <https://plone.org/products/cmfeditions/documentation/refmanual/cmfeditionoverview>`_."
msgstr ""

#: ../develop/plone/content/history.rst:17
msgid "`Versioning tutorial for custom content types <http://www.uwosh.edu/ploneprojects/docs/how-tos/how-to-enable-versioning-history-tab-for-a-custom-content-type/>`_."
msgstr ""

#: ../develop/plone/content/history.rst:21
msgid "Checking whether versioning is enabled"
msgstr ""

#: ../develop/plone/content/history.rst:23
msgid "The following check is performed by update_versioning_before_edit and update_versioning_on_edit scripts::"
msgstr ""

#: ../develop/plone/content/history.rst:37
msgid "Inspecting versioning policies"
msgstr ""

#: ../develop/plone/content/history.rst:45
msgid "Will output (inc. some custom content types)::"
msgstr ""

#: ../develop/plone/content/history.rst:58
msgid "How versioning (CMFEditions) works"
msgstr ""

#: ../develop/plone/content/history.rst:60
msgid "http://svn.zope.de/plone.org/collective/Products.CMFEditions/trunk/doc/DevelDoc.html"
msgstr ""

#: ../develop/plone/content/history.rst:64
msgid "You might actually want to check out the package to get your web browser to properly read the file."
msgstr ""

#: ../develop/plone/content/history.rst:68
msgid "Getting the complete revision history for an object"
msgstr ""

#: ../develop/plone/content/history.rst:70
msgid "You may find yourself needing to (programmatically) get some/all of a content object's revision history. The content history view can be utilised to do this; this view is the same one that is visible through Plone's web interface at ``@@contenthistory`` (or indirectly on ``@@historyview``).  This code works with Plone 4.1 and has been utilised for exporting raw content modification information:"
msgstr ""

#: ../develop/plone/content/history.rst:83
msgid "If you want to run this from somewhere without a ``REQUEST`` available, such as the *Plone/Zope debug console*, then you'll need to fake a request and access level accordingly. Note the subtle change to using ``ContentHistoryViewlet`` rather than ``ContentHistoryView`` - we need to avoid initialising an entire view because this involves component lookups (and thus, pain).  We also need to fake our security as well to avoid anything being left out from the history."
msgstr ""

#: ../develop/plone/content/history.rst:107
msgid "The end result should look something like this, which has plenty of tasty morsels to pull apart and use::"
msgstr ""

#: ../develop/plone/content/history.rst:161
msgid "For instance, you can determine who the last person to modify this Plone content was by looking at the first list element (and get all their details from the actor information). Refer to the source of ``plone.app.layout.viewlets.content`` for more information about ``ContentHistoryView``, ``ContentHistoryViewlet`` and ``WorkflowHistoryViewlet``.  Using these other class definitions, you can see that you can get just the workflow history using ``.workflowHistory()`` or just the revision history using ``.revisionHistory()``."
msgstr ""

#: ../develop/plone/content/history.rst:171
msgid "Purging history"
msgstr ""

#: ../develop/plone/content/history.rst:173
msgid "http://stackoverflow.com/questions/9683466/purging-all-old-cmfeditions-versions"
msgstr ""

#: ../develop/plone/content/importexport.rst:3
msgid "Importing and exporting content"
msgstr ""

#: ../develop/plone/content/importexport.rst:7
msgid "Importing and exporting content between Plone sites and other CMS systems"
msgstr ""

#: ../develop/plone/content/importexport.rst:14
msgid "Goal: you want to import and export content between Plone sites."
msgstr ""

#: ../develop/plone/content/importexport.rst:16
msgid "If both sites have identical version and add-on product configuration you can use Zope Management Interface export/import"
msgstr ""

#: ../develop/plone/content/importexport.rst:18
msgid "If they don't (e.g. have different Plone version on source and target site), you need to use add-on products to export and import the content to a common format, e.g. JSON files."
msgstr ""

#: ../develop/plone/content/importexport.rst:23
msgid "Zope 2 import / export"
msgstr ""

#: ../develop/plone/content/importexport.rst:25
msgid "Zope 2 can import/export parts of the site in .zexp format. This is basically Python pickle data of the exported objects. The data is a raw dump of Python internal data structures, which means that the source and the target Plone versions must be compatible. For example, a export from Plone 3 to Plone 4 is not possible."
msgstr ""

#: ../develop/plone/content/importexport.rst:27
msgid "To export objects from a site to another, do the following:"
msgstr ""

#: ../develop/plone/content/importexport.rst:29
msgid "In the Zope Management Interface, navigate to the Folder, which holds the object to be exported."
msgstr ""

#: ../develop/plone/content/importexport.rst:31
msgid "Tick the checkbox for a object to be exported."
msgstr ""

#: ../develop/plone/content/importexport.rst:33
msgid "Click *Import / Export*"
msgstr ""

#: ../develop/plone/content/importexport.rst:35
msgid "Export as .zexp."
msgstr ""

#: ../develop/plone/content/importexport.rst:37
msgid "Zope 2 will tell you the path where .zexp was created on the server."
msgstr ""

#: ../develop/plone/content/importexport.rst:39
msgid "Zope .zexp to *youranothersite*/var/instance/import folder"
msgstr ""

#: ../develop/plone/content/importexport.rst:41
msgid "Go to ZMI root of your another site"
msgstr ""

#: ../develop/plone/content/importexport.rst:43
msgid "Press Import / Export"
msgstr ""

#: ../develop/plone/content/importexport.rst:45
msgid "In *Import from file* you should see now your .zexp file"
msgstr ""

#: ../develop/plone/content/importexport.rst:47
msgid "Import it"
msgstr ""

#: ../develop/plone/content/importexport.rst:49
msgid "Go to portal_catalog -> Advanced tab. *Clear and Rebuild* the catalog (raw Zope pickle does not know about anything living inside the catalog)"
msgstr ""

#: ../develop/plone/content/importexport.rst:55
msgid "On it's own `collective.transmogrifier <https://pypi.python.org/pypi/collective.transmogrifier>`_ isn't an import tool, rather a generic framework for creating pipelines to process data. Pipeline configs are .ini-style files that join together blueprints to quickly create a tool for processing data."
msgstr ""

#: ../develop/plone/content/importexport.rst:59
msgid "The following add-ons make it useful in a Plone context:"
msgstr ""

#: ../develop/plone/content/importexport.rst:61
msgid "`plone.app.transmogrifier <https://pypi.python.org/pypi/plone.app.transmogrifier>`_ provides integration with GenericSetup, so you can run pipelines as part of import steps, and some useful blueprints."
msgstr ""

#: ../develop/plone/content/importexport.rst:64
msgid "`quintagroup.transmogrifier <http://projects.quintagroup.com/products/wiki/quintagroup.transmogrifier>`_ also provides it's own Plone integration, and some useful blueprints. See the site for some example configs for migration."
msgstr ""

#: ../develop/plone/content/importexport.rst:67
msgid "`transmogrify.dexterity <https://github.com/collective/transmogrify.dexterity>`_ provides some blueprints relevant to Dexterity types, and has some default pipelines for you to use."
msgstr ""

#: ../develop/plone/content/importexport.rst:69
msgid "`collective.jsonmigrator <https://github.com/collective/collective.jsonmigrator>`_ is particularly useful when the old site is not able to install collective.transmogrifier, as collective.jsonmigrator has a very low level of dependencies for that end of the migration."
msgstr ""

#: ../develop/plone/content/importexport.rst:72
msgid "transmogrify.dexterity: CSV import"
msgstr ""

#: ../develop/plone/content/importexport.rst:74
msgid "``transmogrify.dexterity`` will register the pipeline ``transmogrify.dexterity.csvimport``, which can be used to import from CSV to dexterity objects."
msgstr ""

#: ../develop/plone/content/importexport.rst:77
msgid "For more information on using, see `the package documentation <https://github.com/collective/transmogrify.dexterity>`_."
msgstr ""

#: ../develop/plone/content/importexport.rst:80
msgid "transmogrify.dexterity: JSON import/export"
msgstr ""

#: ../develop/plone/content/importexport.rst:82
msgid "``transmogrify.dexterity`` also contains some ``quintagroup.transmogrifier`` pipeline configs. To use these, first install both ``quintagroup.transmogrifier`` and ``transmogrify.dexterity``, then add the following to your ZCML::"
msgstr ""

#: ../develop/plone/content/importexport.rst:88
msgid "Then the \"Content (transmogrifier)\" generic setup import / export will import / export site content to JSON files."
msgstr ""

#: ../develop/plone/content/importexport.rst:90
msgid "For more information on using, see `this transmogrify blog post <http://shuttlethread.com/blog/development-with-transmogrify.dexterity>`_."
msgstr ""

#: ../develop/plone/content/importexport.rst:93
msgid "quintagroup.transmogrifier: Exporting single folder only"
msgstr ""

#: ../develop/plone/content/importexport.rst:95
msgid "Here is explained how to export and import `Plone CMS <https://plone.org>`_ folders between different Plonen versions, or different CMS systems, using  XML based content marshalling and `quintagroup.transmogrifier <http://projects.quintagroup.com/products/wiki/quintagroup.transmogrifier>`_."
msgstr ""

#: ../develop/plone/content/importexport.rst:100
msgid "This overcomes some problems with Zope management based export/import which uses `Python pickles <http://docs.python.org/library/pickle.html>`_ and thus needs identical codebase on the source and target site. Exporting and importing between Plone 3 and Plone 4 is possible."
msgstr ""

#: ../develop/plone/content/importexport.rst:104
msgid "You can limit export to cover source content to with arbitrary :doc:`portal_catalog </develop/plone/searching_and_indexing/query>` conditions. If you limit source content by path you can effectively export single folder only."
msgstr ""

#: ../develop/plone/content/importexport.rst:107
msgid "The recipe described here assumes the exported and imported site have the same path for the folder. Manually rename or move the folder on source or target to change its location."
msgstr ""

#: ../develop/plone/content/importexport.rst:112
msgid "The instructions here requires quintagroup.transmogrify version 0.4 or later."
msgstr ""

#: ../develop/plone/content/importexport.rst:115
msgid "Source site"
msgstr ""

#: ../develop/plone/content/importexport.rst:117
msgid "Execute these actions on the source Plone site."
msgstr ""

#: ../develop/plone/content/importexport.rst:119
#: ../develop/plone/content/importexport.rst:178
msgid "Install ``quintagroup.transmogrifier`` via buildout and Plone add-on control panel."
msgstr ""

#: ../develop/plone/content/importexport.rst:121
msgid "Go to *Site setup* > *Content migration*."
msgstr ""

#: ../develop/plone/content/importexport.rst:123
msgid "Edit export settings. Remove unnecessary pipeline entries by looking the example below. Add a new ``catalogsource`` blueprint. The ``exclude-contained`` option makes sure we do not export unnecessary items from the parent folders::"
msgstr ""

#: ../develop/plone/content/importexport.rst:140
msgid "Also we need to include some field-level excluding bits for the folders, because the target site does not necessary have the same content types available as the source site and this may prevent setting up folderish content settings::"
msgstr ""

#: ../develop/plone/content/importexport.rst:150
msgid "You might want to remove other, unneeded blueprints from the export ``pipeline``. For example, ``portletexporter`` may cause problems if the source and target site do not have the same portlet code."
msgstr ""

#: ../develop/plone/content/importexport.rst:154
msgid "Go to *Zope Management Interface* > *portal_setup* > *Export* tab. Check Content (transmogrifier) step. Press *Export Selected Steps* at the bottom of the page. Now a .tar.gz file will be downloaded."
msgstr ""

#: ../develop/plone/content/importexport.rst:157
msgid "During the export process ``instance.log`` file is updated with status info. You might want to follow it in real-time from UNIX command line"
msgstr ""

#: ../develop/plone/content/importexport.rst:164
msgid "In log you should see entries running like::"
msgstr ""

#: ../develop/plone/content/importexport.rst:174
msgid "Target site"
msgstr ""

#: ../develop/plone/content/importexport.rst:176
msgid "Execute these actions on the target Plone site."
msgstr ""

#: ../develop/plone/content/importexport.rst:180
msgid "Open target site ``instance.log`` file for monitoring the import process"
msgstr ""

#: ../develop/plone/content/importexport.rst:186
msgid "Go to *Zope Management Interface* > *portal_setup* > *Import* tab."
msgstr ""

#: ../develop/plone/content/importexport.rst:188
msgid "Choose downloaded ``setup_toolxxx.tar.gz`` file at the bottom of the page, for *Import uploaded tarball* input."
msgstr ""

#: ../develop/plone/content/importexport.rst:191
msgid "Run import and monitoring log file for possible errors. Note that the import completes even if the target site would not able to process incoming content. If there is a serious problem the import seems to complete successfully, but no content is created."
msgstr ""

#: ../develop/plone/content/importexport.rst:198
msgid "Currently export/import is not perfect. For example, ZMI content type icons  are currently lost in the process. It is recommended to do a test run on a staging server before doing this process on a production server. Also, the item order in the folder is being lost."
msgstr ""

#: ../develop/plone/content/importexport.rst:206
msgid ":doc:`How to perform portal_catalog queries </develop/plone/searching_and_indexing/query>`"
msgstr ""

#: ../develop/plone/content/importexport.rst:208
msgid "http://webteam.medsci.ox.ac.uk/integrators-developers/transmogrifier-i-want-to-.../"
msgstr ""

#: ../develop/plone/content/importexport.rst:210
msgid "https://github.com/collective/quintagroup.transmogrifier/blob/master/quintagroup/transmogrifier/catalogsource.py"
msgstr ""

#: ../develop/plone/content/importexport.rst:213
msgid "collective.jsonmigrator"
msgstr ""

#: ../develop/plone/content/importexport.rst:215
msgid "collective.jsonmigrator is basically a collective.transmogrifier pipeline that pulls Plone content from to JSON views on an old site and writes it into your new site. It's major advantage is that the JSON view product: collective.jsonify is very low on dependencies (basically just simplejson), so it can be installed on very old Plone sites that would be difficult if not impossible to install collective.transmogrifier into."
msgstr ""

#: ../develop/plone/content/importexport.rst:221
msgid "<https://github.com/collective/collective.jsonmigrator>`_"
msgstr ""

#: ../develop/plone/content/importexport.rst:223
msgid "<https://github.com/collective/collective.jsonify>`_"
msgstr ""

#: ../develop/plone/content/importexport.rst:225
msgid "A basic tutorial: <http://www.jowettenterprises.com/blog/plone-content-migration-using-transmogrifier-and-collective.jsonify>`_"
msgstr ""

#: ../develop/plone/content/importexport.rst:227
msgid "<http://stackoverflow.com/questions/13721016/exporting-plone-archetypes-data-in-json>`_"
msgstr ""

#: ../develop/plone/content/importexport.rst:230
msgid "Fast content import"
msgstr ""

#: ../develop/plone/content/importexport.rst:232
msgid "For specific use-cases, you can create 'brains' first and import later * See `this blog post <http://blog.redturtle.it/redturtle-blog/fast-content-import>`_"
msgstr ""

#: ../develop/plone/content/importexport.rst:236
msgid "Simple JSON export"
msgstr ""

#: ../develop/plone/content/importexport.rst:238
msgid "Below is a simple helper script / BrowserView for a JSON export of Plone folder content. Works Plone 3.3+. It handles also binary data and nested folders."
msgstr ""

#: ../develop/plone/content/importexport.rst:241
msgid "export.py::"
msgstr ""

#: ../develop/plone/content/index.rst:3
msgid "Content management"
msgstr ""

#: ../develop/plone/content/index.rst:5
msgid "In Plone, User editable objects are content objects. Content objects have different flavours depending on their type."
msgstr ""

#: ../develop/plone/content/index.rst:8
#: ../develop/plone/i18n/internationalisation.rst:341
#: ../develop/plone/serving/http_request_and_response.rst:549
#: ../develop/plone/views/layers.rst:18
msgid "Examples:"
msgstr ""

#: ../develop/plone/content/index.rst:10
msgid "Pages (ATDocument class)"
msgstr ""

#: ../develop/plone/content/index.rst:12
msgid "Images (ATImage class)"
msgstr ""

#: ../develop/plone/content/index.rst:14
msgid "News items"
msgstr ""

#: ../develop/plone/content/index.rst:20
msgid "There are two different subsystems to create content objects in Plone"
msgstr ""

#: ../develop/plone/content/index.rst:22
msgid "Archetypes (Plone 2.x and Plone 3.x)"
msgstr ""

#: ../develop/plone/content/index.rst:24
msgid "Dexterity (Plone 4.x and Plone 3.x)"
msgstr ""

#: ../develop/plone/content/listing.rst:3
msgid "Listing objects"
msgstr ""

#: ../develop/plone/content/listing.rst:7
msgid "How to programmatically generate folder listings in Plone."
msgstr ""

#: ../develop/plone/content/listing.rst:14
msgid "Plone has several methods of getting the list of folder items, depending on whether:"
msgstr ""

#: ../develop/plone/content/listing.rst:17
msgid "you want to get all items, or only items visible for the currently logged in user;"
msgstr ""

#: ../develop/plone/content/listing.rst:19
msgid "you want to get hold of the item objects themselves or just indexed metadata (the latter is faster);"
msgstr ""

#: ../develop/plone/content/listing.rst:23
msgid "you want to get Plone's contentish items only (``contentItems``) or Zope 2 management objects too (``objectIds``); the latter covers various site utilities found in the portal root and otherwise hidden magical items."
msgstr ""

#: ../develop/plone/content/listing.rst:28
msgid "Special attention must be paid also to object ids. Zope locates all objects by traversing the site graph using ids. The id mapping is usually a property of a *parent* object, not the child. Thus most of the listing methods tend to return ``(id, object)`` tuples instead of plain objects."
msgstr ""

#: ../develop/plone/content/listing.rst:35
msgid "Ensuring that the content item is a folder"
msgstr ""

#: ../develop/plone/content/listing.rst:37
msgid "All Plone folderish content types provide the ``IFolderish`` interface. Check that this is present to make sure that a content item is a folder, and that ``contentItems()`` and the other methods are available::"
msgstr ""

#: ../develop/plone/content/listing.rst:64
msgid "Getting all content objects inside a folder"
msgstr ""

#: ../develop/plone/content/listing.rst:66
msgid "The ``contentItems`` method is defined in ``CMFCore/PortalFolder.py``. From Plone 4 and later, you can also use ``folder.items()`` instead (this applies to the whole section below). See source code for details, e.g. filtering and other forms of listing."
msgstr ""

#: ../develop/plone/content/listing.rst:72
msgid "Querying folder through catalog"
msgstr ""

#: ../develop/plone/content/listing.rst:74
msgid "These methods apply for real folders, and not for collections."
msgstr ""

#: ../develop/plone/content/listing.rst:77
msgid "Getting indexed objects"
msgstr ""

#: ../develop/plone/content/listing.rst:79
msgid "This is a faster method. ``portal_catalog`` must be up-to-date for the folder. This will return :doc:`brain objects </develop/plone/searching_and_indexing/query>`::"
msgstr ""

#: ../develop/plone/content/listing.rst:85
msgid "Getting full objects"
msgstr ""

#: ../develop/plone/content/listing.rst:93
msgid "The ``contentItems()`` call may be costly, since it will return the actual content objects, not the indexed metadata from the ``portal_catalog``. You should avoid this method if possible."
msgstr ""

#: ../develop/plone/content/listing.rst:100
msgid "``folder.contentItems()`` returns all items regardless of the user security context."
msgstr ""

#: ../develop/plone/content/listing.rst:103
msgid "Getting folder objects filtered"
msgstr ""

#: ../develop/plone/content/listing.rst:105
msgid "The ``listFolderContents()`` method retrieves the content objects from the folder. It takes ``contentFilter`` as an argument to specify filtering of the results. ``contentFilter`` uses the same syntax as ``portal_catalog`` queries, but does not support all the same parameters; e.g. ``object_provides`` is not supported. See the `ContentFilter class <http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/PortalFolder.py?view=markup>`_ for details."
msgstr ""

#: ../develop/plone/content/listing.rst:123
msgid "Security warning: ``listFolderContents()`` honors the currently logged-in user roles."
msgstr ""

#: ../develop/plone/content/listing.rst:128
msgid "Performance warning: slow for large folders. Rather use ``portal_catalog`` and path-based queries to query items in a large folder."
msgstr ""

#: ../develop/plone/content/listing.rst:133
msgid "Rules for filtering items"
msgstr ""

#: ../develop/plone/content/listing.rst:135
msgid "Plone applies some default rules for ``listFolderContents()``"
msgstr ""

#: ../develop/plone/content/listing.rst:137
msgid "``portal_properties.nav_tree_properties.metaTypesNotToQuery``: folders (large folders) don't generate listing."
msgstr ""

#: ../develop/plone/content/listing.rst:140
msgid ":doc:`default_page </develop/plone/content/dynamic_views>` are not listed."
msgstr ""

#: ../develop/plone/content/listing.rst:142
msgid "``portal_properties.nav_tree_properties``: meta types marked here do not appear in the listing."
msgstr ""

#: ../develop/plone/content/listing.rst:146
msgid "Why does ``folder_listing`` not list my contents?"
msgstr ""

#: ../develop/plone/content/listing.rst:148
msgid "The site search settings (*Site Setup*--> *Search*) modifies the way ``folder_listing`` works."
msgstr ""

#: ../develop/plone/content/listing.rst:151
msgid "So for example, if you specifify that you do not want to search objects of type *Page*, they will not appear in ``folder_listing`` anymore."
msgstr ""

#: ../develop/plone/content/listing.rst:154
msgid "From `this thread <http://lists.plone.org/pipermail/plone-product-developers/2012-March/thread.html#11436>`_."
msgstr ""

#: ../develop/plone/content/listing.rst:158
msgid "orderObjects() to set a key for ordering the items in a particular folder"
msgstr ""

#: ../develop/plone/content/listing.rst:160
msgid "With Plone 4+ an adapter can be registered and used to apply a custom order to a particular folder: see ``setOrdering``. The ``DefaultOrdering`` adapter allows a key to be set for a particular folder, and optionally to reverse the order. This can be adjusted via a method on the folder::"
msgstr ""

#: ../develop/plone/content/listing.rst:170
msgid "Unlike the python sort() and sorted() methods, the key parameter expects an attribute, not a function."
msgstr ""

#: ../develop/plone/content/listing.rst:176
msgid "Enforcing manual sort order"
msgstr ""

#: ../develop/plone/content/listing.rst:178
msgid "Below is an example of how to order content items by their manual sort order (the one you create via drag and drop on the contents tab)::"
msgstr ""

#: ../develop/plone/content/listing.rst:207
msgid "Getting object ids"
msgstr ""

#: ../develop/plone/content/listing.rst:209
msgid "If you need to get ids only, use the ``objectIds()`` method, or ``keys()`` in Plone 4. This is a fast method::"
msgstr ""

#: ../develop/plone/content/listing.rst:219
msgid "``objectIds()`` and ``keys()`` will return ids for raw Zope 2 objects too, not just Plone content.  If you call ``objectIds()`` on the portal root object, you will get objects like ``acl_users``, ``portal_workflow`` and so on ..."
msgstr ""

#: ../develop/plone/content/listing.rst:226
msgid "Getting non-contentish Zope objects"
msgstr ""

#: ../develop/plone/content/listing.rst:228
msgid "In some special cases, it is necessary to manipulate non-contentish Zope objects."
msgstr ""

#: ../develop/plone/content/listing.rst:230
msgid "This listing method applies to all `OFS.Folder.Folder objects <http://svn.zope.org/Zope/trunk/src/OFS/interfaces.py?rev=96262&view=auto>`_, not just Plone content objects::"
msgstr ""

#: ../develop/plone/content/listing.rst:241
msgid "Checking for the existence of a particular object id"
msgstr ""

#: ../develop/plone/content/listing.rst:243
msgid "If you want to know whether the folder has a certain item or not, you can use the following snippet."
msgstr ""

#: ../develop/plone/content/listing.rst:247
#: ../develop/plone/i18n/internationalisation.rst:249
msgid "Plone 4"
msgstr ""

#: ../develop/plone/content/listing.rst:249
msgid "Use ``has_key``::"
msgstr ""

#: ../develop/plone/content/listing.rst:257
msgid "Plone 3"
msgstr ""

#: ../develop/plone/content/listing.rst:259
msgid "There is a special case for Large Plone Folders (BTree-based). The following is optimal code, but you can simplify it if you don't need to check if the folder is a ``BTreeFolder``::"
msgstr ""

#: ../develop/plone/content/listing.rst:277
msgid "Listing the folder items using ``portal_catalog``"
msgstr ""

#: ../develop/plone/content/listing.rst:279
msgid "This should be your preferred method for querying folder items. ``portal_catalog`` searches are fast, because they return catalog brain objects instead of the real content objects (less database look ups)."
msgstr ""

#: ../develop/plone/content/listing.rst:286
msgid "Returned catalog brain data, such as ``Title``, will be UTF-8 encoded. You need to call ``brain[\"title\"].decode(\"utf-8\")`` or similar on all text you want to extract from the data."
msgstr ""

#: ../develop/plone/content/listing.rst:290
msgid "Simple example how to get all items in a folder::"
msgstr ""

#: ../develop/plone/content/listing.rst:307
msgid "Here's a complex example of how to perform various filtering operations, honouring some default Plone filtering rules. This example is taken from ``Products.CMFPlone/skins/plone_scripts/getFolderContents``::"
msgstr ""

#: ../develop/plone/content/listing.rst:351
msgid "Count of content items"
msgstr ""

#: ../develop/plone/content/listing.rst:354
msgid "Counting items using ``getFolderContents``"
msgstr ""

#: ../develop/plone/content/listing.rst:356
msgid "The least expensive call for this, if you have tens of items, is to call ``len()`` on the result of calling ``getFolderContents()``, which is a ``portal_catalog`` based query::"
msgstr ""

#: ../develop/plone/content/listing.rst:363
msgid "Counting items using ``contentItems``"
msgstr ""

#: ../develop/plone/content/listing.rst:365
msgid "Alternatively, if you know there are not many objects in in the folder, you can call ``contentItems()`` (or simply ``items()`` in Plone 4 or newer), as this will potentially wake fewer items than a complex catalog query."
msgstr ""

#: ../develop/plone/content/listing.rst:371
msgid "Security: This method does not consider access rights."
msgstr ""

#: ../develop/plone/content/listing.rst:373
msgid "Example (AT content class method)::"
msgstr ""

#: ../develop/plone/content/listing.rst:382
msgid "Navigational view URL"
msgstr ""

#: ../develop/plone/content/listing.rst:384
msgid "Plone has a special default navigation URL which is used in"
msgstr ""

#: ../develop/plone/content/listing.rst:388
msgid "Navigation tree"
msgstr ""

#: ../develop/plone/content/listing.rst:390
msgid "It is not necessarily the object URL itself (``/folder/item``), but can be e.g. ``/folder/item/@@yourcustomview``"
msgstr ""

#: ../develop/plone/content/listing.rst:393
msgid "The view action URL must be configured in ``portal_types`` and separately enabled for the content type in ``site_properties``."
msgstr ""

#: ../develop/plone/content/listing.rst:396
#: ../develop/plone/searching_and_indexing/indexing.rst:216
#: ../develop/plone/serving/xmlrpc.rst:31
msgid "For more information see"
msgstr ""

#: ../develop/plone/content/listing.rst:398
msgid "http://stackoverflow.com/questions/12033414/change-link-in-contents-listing-for-custom-content-type#comment16065296_12033414"
msgstr ""

#: ../develop/plone/content/listing.rst:401
msgid "Custom folder listing"
msgstr ""

#: ../develop/plone/content/listing.rst:403
msgid "Here is an example how to create a view which will render a custom listing for a folder or a collection (``ATTopic``)."
msgstr ""

#: ../develop/plone/content/listing.rst:406
msgid "The view is called ``ProductSummaryView`` and it is registered with the name ``productsummary``. This example is not suitable for your add-on product as is: you need to tailor it for your specific needs."
msgstr ""

#: ../develop/plone/content/listing.rst:413
msgid "If you are going to call ``item/getObject`` on a catalog brain, it might cause excessive database load as it causes a new database query per object. Try use information available in the catalog or add more catalog indexes. To know more about the issue read about waking up database objects."
msgstr ""

#: ../develop/plone/content/listing.rst:420
msgid "First, let's register our view. We could limit content types for which the view is enabled by specifying ``Products.ATContentTypes.interface.IATFolder`` or ``Products.ATContentTypes.interface.IATTopic`` in the ``for`` attribute. Cf. the ``configure.zcml`` snippet below:"
msgstr ""

#: ../develop/plone/content/listing.rst:437
msgid "Below is the example view code, named as ``productcardsummaryview.py``::"
msgstr ""

#: ../develop/plone/content/listing.rst:519
msgid "Below is the corresponding page template skeleton ``productcardsummaryview.pt``:"
msgstr ""

#: ../develop/plone/content/listing.rst:624
msgid "Go to view page by adding ``/@@productsummary`` to your folder URL."
msgstr ""

#: ../develop/plone/content/listing.rst:627
msgid "Making view available in the :guilabel:`Display...` menu"
msgstr ""

#: ../develop/plone/content/listing.rst:629
msgid "You need to add the ``browser:menuItem`` entry to make your view appear in the :guilabel:`Display...` menu from which folders and topics can choose the style of the display."
msgstr ""

#: ../develop/plone/content/listing.rst:633
msgid "See :doc:`dynamic views </develop/plone/content/dynamic_views>`."
msgstr ""

#: ../develop/plone/content/listing.rst:635
msgid "You need to add:"
msgstr ""

#: ../develop/plone/content/listing.rst:637
msgid "``<browser:menuItem>`` configuration directive with view id (e.g. ``@@productsummary``)"
msgstr ""

#: ../develop/plone/content/listing.rst:640
msgid "New properties to ``Folder.xml`` or ``Topic.xml`` so that the view becomes available"
msgstr ""

#: ../develop/plone/content/listing.rst:644
msgid "Preventing folder listing"
msgstr ""

#: ../develop/plone/content/listing.rst:646
msgid "If the users can access the content items they can usually also list them."
msgstr ""

#: ../develop/plone/content/listing.rst:648
msgid "Here is a no-warranty hack how to prevent ``folder_listing`` if needed::"
msgstr ""

#: ../develop/plone/content/listing.rst:675
msgid "Complex folder listings and filtering"
msgstr ""

#: ../develop/plone/content/listing.rst:677
msgid "The following example is for a very complex folder listing view. You can call view methods to returns the listed items themselves and render the HTML in another view --- this allows you to recycle this listing code easily."
msgstr ""

#: ../develop/plone/content/listing.rst:682
msgid "The view does the various sanity checks that normal Plone item listings do:"
msgstr ""

#: ../develop/plone/content/listing.rst:684
msgid "no meta items,"
msgstr ""

#: ../develop/plone/content/listing.rst:685
msgid "no large folders,"
msgstr ""

#: ../develop/plone/content/listing.rst:686
msgid "no default views,"
msgstr ""

#: ../develop/plone/content/listing.rst:687
msgid "filter by active language,"
msgstr ""

#: ../develop/plone/content/listing.rst:688
msgid "do not list items where you do not have the ``View`` permission,"
msgstr ""

#: ../develop/plone/content/listing.rst:689
msgid "perform the listing on the parent container if the context itself is not folderish."
msgstr ""

#: ../develop/plone/content/listing.rst:861
msgid "Empty listing view"
msgstr ""

#: ../develop/plone/content/listing.rst:863
msgid "Sometimes you want a show folder without listing its content. You can create a :doc:`dynamic view </develop/plone/content/dynamic_views>` in your add-on which is available from *Display...* menu."
msgstr ""

#: ../develop/plone/content/listing.rst:867
msgid "Example ``configure.zcml`` bit"
msgstr ""

#: ../develop/plone/content/listing.rst:879
msgid "Example ``empty-listing.pt``"
msgstr ""

#: ../develop/plone/content/listing.rst:899
msgid "Example ``profiles/default/types/Folder.xml``"
msgstr ""

#: ../develop/plone/content/listing.rst:914
msgid "Reinstall your add-on."
msgstr ""

#: ../develop/plone/content/listing.rst:916
msgid "*empty-listing* should appear in *Display...* menu."
msgstr ""

#: ../develop/plone/content/manipulating.rst:3
msgid "Manipulating objects"
msgstr ""

#: ../develop/plone/content/manipulating.rst:10
msgid "Manipulating objects depends on whether they are based on the Archetypes subsystem or on the Dexterity subsystem."
msgstr ""

#: ../develop/plone/content/manipulating.rst:13
msgid "For more information, consult the manual of the relevant subsystem:"
msgstr ""

#: ../develop/plone/content/manipulating.rst:15
msgid ":doc:`Archetypes examples <archetypes/index>`."
msgstr ""

#: ../develop/plone/content/manipulating.rst:17
msgid "See :doc:`Manipulating Content Objects </external/plone.app.dexterity/docs/reference/manipulating-content-objects>` in the Dexterity manual"
msgstr ""

#: ../develop/plone/content/manipulating.rst:20
msgid "Reindexing modified objects"
msgstr ""

#: ../develop/plone/content/manipulating.rst:22
msgid "After modifying the object, you need to reindex it in the ``portal_catalog`` to update the search and listing information."
msgstr ""

#: ../develop/plone/content/manipulating.rst:25
msgid "Cataloging has a quirk regarding the ``modified`` metadata: when calling ``reindexObject`` on an object, the value for ``modified`` in ``portal_catalog`` will be set to the time of the reindex, regardless of the value of the modified property of the object."
msgstr ""

#: ../develop/plone/content/manipulating.rst:30
msgid "In order to store the correct value you can do an extra reindex of the object with the ``modified`` index as parameter."
msgstr ""

#: ../develop/plone/content/manipulating.rst:33
msgid "First do a normal ``reindexObject``, then call it with the modified index explicitly::"
msgstr ""

#: ../develop/plone/content/manipulating.rst:39
msgid "For more information, see :doc:`\\** How to update this document </develop/plone/searching_and_indexing/indexing>`."
msgstr ""

#: ../develop/plone/content/ownership.rst:3
msgid "Ownership of content"
msgstr ""

#: ../develop/plone/content/ownership.rst:9
msgid "Programmatically manipulate Plone content item's ownership"
msgstr ""

#: ../develop/plone/content/ownership.rst:14
msgid "Each content item has an owner user."
msgstr ""

#: ../develop/plone/content/ownership.rst:16
msgid "Owned item instances are of subclass of AccessControl.Owned"
msgstr ""

#: ../develop/plone/content/ownership.rst:18
msgid "http://svn.zope.org/Zope/trunk/src/AccessControl/Owned.py?rev=96262&view=auto"
msgstr ""

#: ../develop/plone/content/ownership.rst:21
msgid "Getting the owner of the item"
msgstr ""

#: ../develop/plone/content/ownership.rst:30
msgid "Changing ownership of content"
msgstr ""

#: ../develop/plone/content/ownership.rst:32
msgid "You can use AccessControl.Owner.changeOwnership::"
msgstr ""

#: ../develop/plone/content/ownership.rst:36
msgid "User is PropertiedUser object."
msgstr ""

#: ../develop/plone/content/ownership.rst:49
msgid "This only changes the owner attribute, not the role assignments. You need to change those too."
msgstr ""

#: ../develop/plone/content/ownership.rst:52
msgid "Example how to add ownership for additional user using local roles::"
msgstr ""

#: ../develop/plone/content/ownership.rst:59
msgid "This does not update Dublin Core metadata fields like creator."
msgstr ""

#: ../develop/plone/content/ownership.rst:63
msgid "Contributors"
msgstr ""

#: ../develop/plone/content/ownership.rst:65
msgid "Contributors is an automatically managed list where persons, who have been editing in the past, real names are listed. Contributors data is available as Python list of real names."
msgstr ""

#: ../develop/plone/content/ownership.rst:70
msgid "Contributors does not store user references, because one might want to maintain contributor data even after the user has been deleted."
msgstr ""

#: ../develop/plone/content/ownership.rst:73
msgid "Some sample code::"
msgstr ""

#: ../develop/plone/content/rename.rst:3
msgid "Renaming content"
msgstr ""

#: ../develop/plone/content/rename.rst:7
msgid "How to programmatically rename Plone content items"
msgstr ""

#: ../develop/plone/content/rename.rst:14
msgid "This page tells how to rename Plone content objects and change their ids."
msgstr ""

#: ../develop/plone/content/rename.rst:16
msgid "This only concerns URL path ids"
msgstr ""

#: ../develop/plone/content/rename.rst:18
msgid "Archetypes' Unique ID (UID) is not affected by the rename operation"
msgstr ""

#: ../develop/plone/content/rename.rst:20
msgid "Title can be changed using ``setTitle()`` (Archetypes) or related mutator"
msgstr ""

#: ../develop/plone/content/rename.rst:23
msgid "Renaming objects"
msgstr ""

#: ../develop/plone/content/rename.rst:25
msgid "OFS interface has facilities to rename objects"
msgstr ""

#: ../develop/plone/content/rename.rst:27
msgid "http://svn.zope.org/Zope/trunk/src/OFS/interfaces.py?rev=105745&view=auto"
msgstr ""

#: ../develop/plone/content/rename.rst:29
msgid "``manage_renameObject(oldid, newid)`` for one item"
msgstr ""

#: ../develop/plone/content/rename.rst:31
msgid "``manage_renameObject([oldid, oldid2], [newid, newid2])`` for rename many items"
msgstr ""

#: ../develop/plone/content/rename.rst:33
msgid "Products.CMFPlone.PloneFolder overrides manage_renameObject() to have hooks to reindex the new object path"
msgstr ""

#: ../develop/plone/content/rename.rst:39
msgid "Security warning: \"Copy or Move\" permission is needed on the object by the logged in user."
msgstr ""

#: ../develop/plone/content/rename.rst:44
msgid "New id must be a 8-bit string, not unicode. The system might accept values in invalid format."
msgstr ""

#: ../develop/plone/content/rename.rst:47
msgid "Example how to rename object *lc* to have *-old* suffix::"
msgstr ""

#: ../develop/plone/content/rename.rst:57
msgid "These checks performed before rename by the manage_renameObject()::"
msgstr ""

#: ../develop/plone/content/rename.rst:71
msgid "Testing warning: Rename mechanism relies of Persistent attribute called _p_jar to be present on the content object. By default, this is not the case on unit tests. You need to call transaction.savepoint() to make _p_jar appear on persistent objects."
msgstr ""

#: ../develop/plone/content/rename.rst:75
msgid "If you don't do this, you'll receive a \"CopyError\" when calling manage_renameObjects that the operation is not supported."
msgstr ""

#: ../develop/plone/content/timestamps.rst:3
msgid "Timestamps"
msgstr ""

#: ../develop/plone/content/timestamps.rst:7
msgid "How to read created and modified timestamps on Plone content items programmatically"
msgstr ""

#: ../develop/plone/content/timestamps.rst:15
msgid "Here are some useful timestamps you can extract from content objects and examples how to use them."
msgstr ""

#: ../develop/plone/content/timestamps.rst:18
msgid "Timestamps are part of metadata. For Archetypes, metadata is defined in `ExtensibleMetadata <https://github.com/plone/Products.Archetypes/blob/master/Products/Archetypes/ExtensibleMetadata.py>`_."
msgstr ""

#: ../develop/plone/content/timestamps.rst:21
msgid ":doc:`Zope 2 DateTime </develop/plone/misc/datetime>` date objects are used."
msgstr ""

#: ../develop/plone/content/timestamps.rst:24
msgid "Last modification date"
msgstr ""

#: ../develop/plone/content/timestamps.rst:26
msgid "Products.Archetypes.ExtensibleMetadata.modified() function will give the last modification date as Zope DateTime object. This is part of Dublin Core metadata."
msgstr ""

#: ../develop/plone/content/timestamps.rst:29
#: ../develop/plone/content/timestamps.rst:123
msgid "Example (Zope console debug mode)::"
msgstr ""

#: ../develop/plone/content/timestamps.rst:35
msgid "Setting modification date explicitly"
msgstr ""

#: ../develop/plone/content/timestamps.rst:37
msgid "You might want to manual set modification date"
msgstr ""

#: ../develop/plone/content/timestamps.rst:39
msgid "When you migrate content"
msgstr ""

#: ../develop/plone/content/timestamps.rst:41
msgid "When you edit content subobjects and want to update the timestamp of parent object to reflect this changes"
msgstr ""

#: ../develop/plone/content/timestamps.rst:43
msgid "Example (Zope console debug mode, assume obj is Archetypes content item)::"
msgstr ""

#: ../develop/plone/content/timestamps.rst:59
msgid "Viewlet example"
msgstr ""

#: ../develop/plone/content/timestamps.rst:61
msgid "Below is an example how to create a custom last modified viewlet."
msgstr ""

#: ../develop/plone/content/timestamps.rst:63
msgid "Viewlet code::"
msgstr ""

#: ../develop/plone/content/timestamps.rst:88
msgid "Template (lastmodified.py)::"
msgstr ""

#: ../develop/plone/content/timestamps.rst:94
msgid "Viewlet registration::"
msgstr ""

#: ../develop/plone/content/timestamps.rst:107
msgid "CSS::"
msgstr ""

#: ../develop/plone/content/timestamps.rst:118
msgid "Creation date"
msgstr ""

#: ../develop/plone/content/timestamps.rst:120
msgid "Products.Archetypes.ExtensibleMetadata.created() function will give the creation date as Zope DateTime object. This is part of Dublin Core metadata."
msgstr ""

#: ../develop/plone/content/timestamps.rst:130
msgid "IsExpired()"
msgstr ""

#: ../develop/plone/content/timestamps.rst:132
msgid "https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/utils.py#L112"
msgstr ""

#: ../develop/plone/content/types.rst:3
msgid "Content types"
msgstr ""

#: ../develop/plone/content/types.rst:7
msgid "Plone's content type subsystems and creating new content types programmatically."
msgstr ""

#: ../develop/plone/content/types.rst:14
msgid "Plone has two kind of content types subsystems:"
msgstr ""

#: ../develop/plone/content/types.rst:16
msgid ":doc:`Archetypes </develop/plone/content/archetypes/index>`-based"
msgstr ""

#: ../develop/plone/content/types.rst:18
msgid ":doc:`Dexterity </develop/plone/content/dexterity>`-based (new)"
msgstr ""

#: ../develop/plone/content/types.rst:20
msgid "See also Plomino (later in this document)."
msgstr ""

#: ../develop/plone/content/types.rst:22
msgid "Flexible architecture allows other kinds of content type subsystems as well."
msgstr ""

#: ../develop/plone/content/types.rst:25
msgid "Type information registry"
msgstr ""

#: ../develop/plone/content/types.rst:27
msgid "Plone maintains available content types in the ``portal_types`` tool."
msgstr ""

#: ../develop/plone/content/types.rst:29
msgid "``portal_types`` is a folderish object which stores type information as child objects, keyed by the ``portal_type`` property of the types."
msgstr ""

#: ../develop/plone/content/types.rst:33
msgid "``portal_factory`` is a tool responsible for creating the persistent object representing the content."
msgstr ""

#: ../develop/plone/content/types.rst:35
msgid "`TypesTool source code <http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/TypesTool.py?rev=101748&view=auto>`_."
msgstr ""

#: ../develop/plone/content/types.rst:38
msgid "Listing available content types"
msgstr ""

#: ../develop/plone/content/types.rst:40
msgid "Often you need to ask the user to choose specific Plone content types."
msgstr ""

#: ../develop/plone/content/types.rst:42
msgid "Plone offers two Zope 3 vocabularies for this purpose:"
msgstr ""

#: ../develop/plone/content/types.rst:44
msgid "``plone.app.vocabularies.PortalTypes``"
msgstr ""

#: ../develop/plone/content/types.rst:45
msgid "a list of types installed in ``portal_types``"
msgstr ""

#: ../develop/plone/content/types.rst:47
msgid "``plone.app.vocabularies.ReallyUserFriendlyTypes``"
msgstr ""

#: ../develop/plone/content/types.rst:47
msgid "a list of those types that are likely to mean something to users."
msgstr ""

#: ../develop/plone/content/types.rst:49
msgid "If you need to build a vocabulary of user-selectable content types in Python instead, here's how::"
msgstr ""

#: ../develop/plone/content/types.rst:88
msgid "Creating a new content type"
msgstr ""

#: ../develop/plone/content/types.rst:90
msgid "These instructions apply to :doc:`Archetypes</develop/plone/content/archetypes/index>`-based content types."
msgstr ""

#: ../develop/plone/content/types.rst:96
msgid "Add ZopeSkel to your buildout.cfg and run buildout::"
msgstr ""

#: ../develop/plone/content/types.rst:113
msgid "Create an archetypes product"
msgstr ""

#: ../develop/plone/content/types.rst:115
msgid "Run the following command and answer the questions e.g. for the project name use my.product::"
msgstr ""

#: ../develop/plone/content/types.rst:121
msgid "Install the product"
msgstr ""

#: ../develop/plone/content/types.rst:123
msgid "Adjust your buildout.cfg and run buildout again::"
msgstr ""

#: ../develop/plone/content/types.rst:138
msgid "You need to install your new product using buildout before you can add a new content type in the next step. Otherwise paster complains with the following message: \"Command 'addcontent' not known\"."
msgstr ""

#: ../develop/plone/content/types.rst:144
msgid "Create a new content type"
msgstr ""

#: ../develop/plone/content/types.rst:149
msgid "Change into the directory of the new product and then use paster to add a new content type::"
msgstr ""

#: ../develop/plone/content/types.rst:157
msgid "Related how-tos:"
msgstr ""

#: ../develop/plone/content/types.rst:159
msgid "http://lionfacelemonface.wordpress.com/tutorials/zopeskel-archetypes-howto/"
msgstr ""

#: ../develop/plone/content/types.rst:161
msgid "http://docs.openia.com/howtos/development/plone/creating-a-site-archetypes-object-and-contenttypes-with-paster?set_language=fi&cl=fi"
msgstr ""

#: ../develop/plone/content/types.rst:163
msgid "http://www.unc.edu/~jj/plone/"
msgstr ""

#: ../develop/plone/content/types.rst:167
msgid "Creating types by hand is not worth the trouble. Please use a code generator to create the skeleton for your new content type."
msgstr ""

#: ../develop/plone/content/types.rst:172
msgid "The content type name must not contain spaces. Neither the content type name or the description may contain non-ASCII letters. If you need to change these please create a translation catalog which will translate the text to one with spaces or international letters."
msgstr ""

#: ../develop/plone/content/types.rst:180
msgid "Debugging new content type problems"
msgstr ""

#: ../develop/plone/content/types.rst:182
msgid "Creating types by hand is not worth the trouble."
msgstr ""

#: ../develop/plone/content/types.rst:184
msgid "`Why doesn't my custom content type show up in add menu <https://plone.org/documentation/faq/why-doesnt-my-custom-content-type-show-up-in-add-menu/>`_ checklist."
msgstr ""

#: ../develop/plone/content/types.rst:187
msgid "Creating new content types through-the-web"
msgstr ""

#: ../develop/plone/content/types.rst:189
msgid "There exist solutions for non-programmers and Plone novices to create their content types more easily."
msgstr ""

#: ../develop/plone/content/types.rst:195
msgid "https://plone.org/products/dexterity"
msgstr ""

#: ../develop/plone/content/types.rst:197
msgid "Core feature"
msgstr ""

#: ../develop/plone/content/types.rst:199
msgid "Use Dexterity control panel in site setup"
msgstr ""

#: ../develop/plone/content/types.rst:202
msgid "Plomino (Archetypes-based add-on)"
msgstr ""

#: ../develop/plone/content/types.rst:204
msgid "With Plomino you can make an entire web application that can organize & manipulate data with very limited programming experience."
msgstr ""

#: ../develop/plone/content/types.rst:207
msgid "http://www.plomino.net/"
msgstr ""

#: ../develop/plone/content/types.rst:209
msgid "http://www.youtube.com/view_play_list?p=469DE37C742F31D1"
msgstr ""

#: ../develop/plone/content/types.rst:212
msgid "Implicitly allowed"
msgstr ""

#: ../develop/plone/content/types.rst:214
msgid ":guilabel:`Implictly allowed` is a flag specifying whether the content is globally addable or must be specifically enabled for certain folders."
msgstr ""

#: ../develop/plone/content/types.rst:218
msgid "The following example allows creation of :guilabel:`Large Plone Folder` anywhere at the site (it is disabled by default). For available properties, see ``TypesTool._advanced_properties``."
msgstr ""

#: ../develop/plone/content/types.rst:231
msgid "Constraining the addable types per type instance"
msgstr ""

#: ../develop/plone/content/types.rst:233
msgid "For the instances of some content types, the user may manually restrict which kinds of objects may be added inside. This is done by clicking the :guilabel:`Add new...` link on the green edit bar and then choosing :guilabel:`Restrictions...`."
msgstr ""

#: ../develop/plone/content/types.rst:238
msgid "This can also be done programmatically on an instance of a content type that supports it."
msgstr ""

#: ../develop/plone/content/types.rst:241
msgid "First, we need to know whether the instance supports this."
msgstr ""

#: ../develop/plone/content/types.rst:251
msgid "If ``setConstrainTypesMode`` is ``1``, then only the types enabled by using ``setLocallyAllowedTypes`` will be allowed."
msgstr ""

#: ../develop/plone/content/types.rst:254
msgid "The types specified by ``setLocallyAllowedTypes`` must be a subset of the allowable types specified in the content-type's FTI (Factory Type Information) in the ``portal_types`` tool."
msgstr ""

#: ../develop/plone/content/types.rst:259
msgid "If you want the types to appear in the :guilabel: ``Add new..`` dropdown menu, then you must also set the immediately addable types. Otherwise, they will appear under the :guilabel:`more` submenu of :guilabel:`Add new..`."
msgstr ""

#: ../develop/plone/content/types.rst:268
msgid "The immediately addable types must be a subset of the locally allowed types."
msgstr ""

#: ../develop/plone/content/types.rst:270
msgid "To retrieve information on the constrained types, you can just use the accessor equivalents of the above methods."
msgstr ""

#: ../develop/plone/content/types.rst:281
msgid "**Be careful of Acquisition**. You might be acquiring these methods from the current instance's parent. It would be wise to first check whether the current object has this attribute, either by using ``shasattr`` or by using ``hasattr`` on the object's base (access the base object using ``aq_base``)."
msgstr ""

#: ../develop/plone/content/types.rst:287
msgid "The default addable types are the types that are addable when ``constrainTypesMode`` is ``0`` (i.e not enabled)."
msgstr ""

#: ../develop/plone/content/types.rst:290
msgid "For more information, see **Products/CMFPlone/interfaces/constraints.py**"
msgstr ""

#: ../develop/plone/content/uid.rst:3
msgid "Content identification (ids)"
msgstr ""

#: ../develop/plone/content/uid.rst:7
msgid "Different ids, UIDs, integer ids or whatever can identify your Plone content and give access to it."
msgstr ""

#: ../develop/plone/content/uid.rst:16
msgid "Id"
msgstr ""

#: ../develop/plone/content/uid.rst:18
msgid "Content id generally refers the item id **within the folder**. Together with folder path this identifies the content in unique way."
msgstr ""

#: ../develop/plone/content/uid.rst:21
msgid "Naturally, this id changes when the content is renamed or moved."
msgstr ""

#: ../develop/plone/content/uid.rst:23
msgid "Use :doc:`traversing </develop/plone/serving/traversing>` to resolve object by path+id."
msgstr ""

#: ../develop/plone/content/uid.rst:26
msgid "UID and UUID"
msgstr ""

#: ../develop/plone/content/uid.rst:28
msgid "UID is a unique, non-human-readable identifier for a content object which stays on the object even if the object is moved."
msgstr ""

#: ../develop/plone/content/uid.rst:31
msgid "Plone uses UUIDs for"
msgstr ""

#: ../develop/plone/content/uid.rst:33
msgid "Storing content-to-content references (Archetypes, ReferenceField)"
msgstr ""

#: ../develop/plone/content/uid.rst:35
msgid "Linking by UIDs (Kupu) - this enables persistent links even though the object is moved"
msgstr ""

#: ../develop/plone/content/uid.rst:37
msgid "Plain UID is supported by Archetypes only and is based on reference_catalog"
msgstr ""

#: ../develop/plone/content/uid.rst:39
msgid "UUID is supported by Archetypes and Dexterity both and you should use this for new projects"
msgstr ""

#: ../develop/plone/content/uid.rst:41
msgid "UIDs are available for Archetypes content and unified UUIDs for both Archetypes and Dexterity content items since ``plone.app.dexterity`` version 1.1."
msgstr ""

#: ../develop/plone/content/uid.rst:46
msgid "If you have pre-Dexterity 1.1 content items you must run a migration step in portal_setup to give them UUIDs."
msgstr ""

#: ../develop/plone/content/uid.rst:49
msgid "To get object UUID you can use `plone.app.uuid <https://pypi.python.org/pypi/plone.app.uuid/>`_ package."
msgstr ""

#: ../develop/plone/content/uid.rst:51
msgid "Getting object UUID::"
msgstr ""

#: ../develop/plone/content/uid.rst:66
msgid "Looking up object by UUID:"
msgstr ""

#: ../develop/plone/content/uid.rst:68
msgid "Use `plone.app.uuid.utils.uuidToObject <https://github.com/plone/plone.app.uuid/blob/master/plone/app/uuid/utils.py>`_::"
msgstr ""

#: ../develop/plone/content/uid.rst:81
msgid "http://stackoverflow.com/questions/8618917/portal-catalog-unique-ids-for-both-archetypes-and-dexterity-content"
msgstr ""

#: ../develop/plone/content/uid.rst:85
msgid "UUID Acquisition problem with Dexterity Content Types"
msgstr ""

#: ../develop/plone/content/uid.rst:87
msgid "Make sure your Dexterity content type has the `plone.app.referenceablebehavior.interfaces.IReferenceable <https://github.com/plone/plone.app.referenceablebehavior/blob/master/plone/app/referenceablebehavior/interfaces.py>`_ behavior enabled. If not, when querying for an object's UUID, you will get its parent UUID. Then you can end up with a lot of objects with the same UUID as their parent."
msgstr ""

#: ../develop/plone/content/uid.rst:89
msgid "If you run into this issue, here's an easy upgrade step to fix it::"
msgstr ""

#: ../develop/plone/content/uid.rst:123
msgid "Make sure to have the IReferenceable behavior listed in the content type XML definition before running the upgrade step. Also note that this upgrade step will recalculate the UUID for all \"my.custom.content.type\" objects."
msgstr ""

#: ../develop/plone/content/uid.rst:128
msgid "intids"
msgstr ""

#: ../develop/plone/content/uid.rst:130
msgid "Integer ids (\"intids\") are fast look-up ids provided by ``plone.app.intid`` and ``five.intid`` packages.  Instead of relying on globally unique identifier strings (UIDs) they use 64-bit integers, making low-level resolution faster."
msgstr ""

#: ../develop/plone/content/uid.rst:135
msgid "https://github.com/plone/plone.app.intid"
msgstr ""

#: ../develop/plone/content/uid.rst:137
msgid "http://stackoverflow.com/questions/8629390/how-to-use-intids"
msgstr ""

#: ../develop/plone/content/uid.rst:142
msgid "This info only for Plone 3.x projects."
msgstr ""

#: ../develop/plone/content/uid.rst:145
msgid "Getting the object's UID"
msgstr ""

#: ../develop/plone/content/uid.rst:147
msgid "Use UID() accessor function"
msgstr ""

#: ../develop/plone/content/uid.rst:149
msgid "Example how to get UID of *events* folder::"
msgstr ""

#: ../develop/plone/content/uid.rst:156
msgid "Looking up object by UID"
msgstr ""

#: ../develop/plone/content/uid.rst:158
msgid "Use lookupObject() in reference catalog."
msgstr ""

#: ../develop/plone/content/uid.rst:163
msgid "*None* will be returned if there is content item with matching UID (the item has been deleted)."
msgstr ""

#: ../develop/plone/content/workflow.rst:3
msgid "Workflows"
msgstr ""

#: ../develop/plone/content/workflow.rst:7
msgid "Programming workflows in Plone."
msgstr ""

#: ../develop/plone/content/workflow.rst:14
msgid "The DCWorkflow product manages the default Plone workflow system."
msgstr ""

#: ../develop/plone/content/workflow.rst:16
msgid "A workflow state is not directly stored on the object. Instead, a separate portal_workflow tool must be used to access a workflow state. Workflow look-ups involve an extra database fetch."
msgstr ""

#: ../develop/plone/content/workflow.rst:20
#: ../develop/plone/forms/wysiwyg.rst:374
#: ../develop/plone/i18n/internationalisation.rst:306
#: ../develop/plone/persistency/persistent.rst:66
#: ../develop/plone/persistency/persistent.rst:222
#: ../develop/plone/searching_and_indexing/query.rst:253
#: ../develop/plone/views/browserviews.rst:471
msgid "For more information, see"
msgstr ""

#: ../develop/plone/content/workflow.rst:22
msgid "http://www.martinaspeli.net/articles/dcworkflows-hidden-gems"
msgstr ""

#: ../develop/plone/content/workflow.rst:25
msgid "Creating workflows"
msgstr ""

#: ../develop/plone/content/workflow.rst:27
msgid "The recommended method is to use the portal_workflow user interface in the Zope Management Interface to construct the workflow through-the-web and then you can export it using GenericSetup's portal_setup tool."
msgstr ""

#: ../develop/plone/content/workflow.rst:30
msgid "Include necessary parts from exported workflows.xml and workflows folder in your add-on product GenericSetup profile (add-on folder profiles/default)."
msgstr ""

#: ../develop/plone/content/workflow.rst:34
msgid "Model the workflow online"
msgstr ""

#: ../develop/plone/content/workflow.rst:36
msgid "Go to 'http:yourhost.com:8080/yourPloneSiteName/portal_workflows/manage_main', copy and paste 'simple_publication_workflow', to have a skeleton for start-off, rename 'copy_of_simple_publication_workflow' to 'your_workflow' or add a new workflow via the dropdwon-menu and have a tabula rasa."
msgstr ""

#: ../develop/plone/content/workflow.rst:40
msgid "Add and remove states and transitions, assign permissions etc."
msgstr ""

#: ../develop/plone/content/workflow.rst:45
msgid "Putting it in your product"
msgstr ""

#: ../develop/plone/content/workflow.rst:46
msgid "Go to 'http:yourhost.com:8080/yourPloneSiteName/portal_setup/manage_exportSteps', check 'Workflow Tool' and hit 'Export selected steps', unzip the downloaded file and put the definitions.xml-file in 'your/product/profiles/default/workflows/your_workflow/' (you'll need to create the latter two directories)."
msgstr ""

#: ../develop/plone/content/workflow.rst:52
msgid "Configure workflow via GenericSetup"
msgstr ""

#: ../develop/plone/content/workflow.rst:55
msgid "Assign a workflow"
msgstr ""

#: ../develop/plone/content/workflow.rst:57
msgid "In your/product/profiles/default/workflows.xml, insert:"
msgstr ""

#: ../develop/plone/content/workflow.rst:70
msgid "Assigning a workflow globally as default"
msgstr ""

#: ../develop/plone/content/workflow.rst:72
msgid "In your/product/profiles/default/workflows.xml, add:"
msgstr ""

#: ../develop/plone/content/workflow.rst:86
msgid "Binding a workflow to a content type"
msgstr ""

#: ../develop/plone/content/workflow.rst:88
msgid "Example with GenericSetup *workflows.xml*"
msgstr ""

#: ../develop/plone/content/workflow.rst:102
msgid "Disabling workflow for a content type"
msgstr ""

#: ../develop/plone/content/workflow.rst:103
msgid "If a content type doesn't have a workflow it uses its parent container security settings. By default, content types Image and File have no workflow."
msgstr ""

#: ../develop/plone/content/workflow.rst:106
msgid "Workflows can be disabled by setting the workflow setting empty in portal_workflow in ZMI."
msgstr ""

#: ../develop/plone/content/workflow.rst:108
msgid "Example how to do it with GenericSetup *workflows.xml*"
msgstr ""

#: ../develop/plone/content/workflow.rst:125
msgid "Updating security settings after changing workflow"
msgstr ""

#: ../develop/plone/content/workflow.rst:127
msgid "Through the web this would be done by going to ZMI > portal_workflow > update security settings"
msgstr ""

#: ../develop/plone/content/workflow.rst:130
msgid "To update security settings programmatically use the method updateRoleMappings. The snippet below demonstrates this::"
msgstr ""

#: ../develop/plone/content/workflow.rst:140
msgid "Programatically"
msgstr ""

#: ../develop/plone/content/workflow.rst:143
msgid "Getting the current workflow state"
msgstr ""

#: ../develop/plone/content/workflow.rst:156
msgid "Filtering content item list by workflow state"
msgstr ""

#: ../develop/plone/content/workflow.rst:158
msgid "Here is an example how to iterate through content item list and let through only content items having certain state."
msgstr ""

#: ../develop/plone/content/workflow.rst:163
msgid "Usually you don't want to do this, but use content aware folder listing method or portal_catalog query which does filtering by permission check."
msgstr ""

#: ../develop/plone/content/workflow.rst:184
msgid "Changing workflow state"
msgstr ""

#: ../develop/plone/content/workflow.rst:186
msgid "You cannot directly set the workflow to any state, but you must push it through legal state transitions."
msgstr ""

#: ../develop/plone/content/workflow.rst:189
msgid "**Security warning**: Workflows may have security assertations which are bypassed by admin user. Always test your workflow methods using a normal user."
msgstr ""

#: ../develop/plone/content/workflow.rst:192
msgid "Example how to publish content item ``banner``::"
msgstr ""

#: ../develop/plone/content/workflow.rst:207
msgid "Example how to submit to review::"
msgstr ""

#: ../develop/plone/content/workflow.rst:222
msgid "Example how to cause specific transitions based on another event (e.g. a parent folder state change). This code must be part of your product's trusted code not a workflow script because of the permission issues mentioned above. See also see :doc:`/develop/addons/components/events` ::"
msgstr ""

#: ../develop/plone/content/workflow.rst:254
msgid "Gets the list of ids of all installed workflows"
msgstr ""

#: ../develop/plone/content/workflow.rst:256
msgid "Useful to test if a particular workflow is installed::"
msgstr ""

#: ../develop/plone/content/workflow.rst:263
msgid "Getting default workflow for a portal type"
msgstr ""

#: ../develop/plone/content/workflow.rst:265
msgid "Get default workflow for the type::"
msgstr ""

#: ../develop/plone/content/workflow.rst:271
msgid "Getting workflows for an object"
msgstr ""

#: ../develop/plone/content/workflow.rst:273
msgid "How to test which workflow the object has::"
msgstr ""

#: ../develop/plone/content/workflow.rst:288
msgid "Via HTTP"
msgstr ""

#: ../develop/plone/content/workflow.rst:290
msgid "Plone provides a ``workflow_action`` script which is able to trigger the status modification through an HTTP request (browser address bar)."
msgstr ""

#: ../develop/plone/forms/files.rst:3
msgid "Files and images"
msgstr ""

#: ../develop/plone/forms/files.rst:7
msgid "How to program files and image fields for ``z3c.forms`` and Dexterity content types"
msgstr ""

#: ../develop/plone/forms/files.rst:15
msgid "This chapter discuss about file uploads and downloads using zope.schema based forms and content with :doc:`Dexterity content subsystem </develop/plone/content/dexterity>`."
msgstr ""

#: ../develop/plone/forms/files.rst:20
msgid "These instructions apply for Plone 4 and forward. These instructions does not apply for Archetypes content or PloneFormGen."
msgstr ""

#: ../develop/plone/forms/files.rst:23
msgid "Plone uses \"blobs\" (large binary objects) to store file-like data in the ZODB. The ZODB writes these objects to the filesystem as separate files, but due to security, performance and transaction consideration, the original filename is not visible. The files are stored in a distributed tree."
msgstr ""

#: ../develop/plone/forms/files.rst:28
msgid "For more introduction information, see:"
msgstr ""

#: ../develop/plone/forms/files.rst:30
#: ../develop/plone/forms/files.rst:35
msgid ":doc:`Dexterity developer manual </external/plone.app.dexterity/docs/advanced/files-and-images>`"
msgstr ""

#: ../develop/plone/forms/files.rst:33
msgid "Simple content item file or image field"
msgstr ""

#: ../develop/plone/forms/files.rst:38
msgid "Simple upload form example"
msgstr ""

#: ../develop/plone/forms/files.rst:40
msgid "We use `plone.namedfile <https://pypi.python.org/pypi/plone.namedfile>`_ for the upload field, which is a CSV file. We accept the upload and then process the file."
msgstr ""

#: ../develop/plone/forms/files.rst:44
msgid "You need to declare an ``extends`` directive to pin down required dependency versions in ``buildout.cfg``. For more information, see :doc:`buildout troubleshooting </manage/troubleshooting/buildout>`."
msgstr ""

#: ../develop/plone/forms/files.rst:48
msgid "You also need to declare the following packages as dependencies in the ``install_dependencies`` directive of your ``setup.py`` file:"
msgstr ""

#: ../develop/plone/forms/files.rst:51
msgid "``plone.autoform``,"
msgstr ""

#: ../develop/plone/forms/files.rst:52
msgid "``plone.directives.form``."
msgstr ""

#: ../develop/plone/forms/files.rst:54
msgid "After doing this, rerunning ``buildout`` will pull in these packages for you and you will be able to import them successfully. For more information, see `plone.directives.form README <https://pypi.python.org/pypi/plone.directives.form>`_."
msgstr ""

#: ../develop/plone/forms/files.rst:59
msgid "Open the *configure.zcml* file and add register the view::"
msgstr ""

#: ../develop/plone/forms/files.rst:78
msgid "Create a module named *importusers.py*, and add the following code to it::"
msgstr ""

#: ../develop/plone/forms/files.rst:201
msgid "File field contents"
msgstr ""

#: ../develop/plone/forms/files.rst:252
msgid "Connstring download URLs"
msgstr ""

#: ../develop/plone/forms/files.rst:255
msgid "Simple example"
msgstr ""

#: ../develop/plone/forms/files.rst:257
msgid "In Dexterity you can specify a ``@@download`` field for content types:"
msgstr ""

#: ../develop/plone/forms/files.rst:268
msgid "Complex example"
msgstr ""

#: ../develop/plone/forms/files.rst:270
msgid "You need to expose file content to the site user through a view and then refer to the URL of the view in your HTML template. There are some tricks you need to keep in mind:"
msgstr ""

#: ../develop/plone/forms/files.rst:274
msgid "All file download URLs should be timestamped, or the reupload file change will not be reflected in the browser."
msgstr ""

#: ../develop/plone/forms/files.rst:277
msgid "You might want to serve different file types from different URLs and set special HTTP headers for them."
msgstr ""

#: ../develop/plone/forms/files.rst:280
msgid "Complex example (``plone.app.headeranimations``)::"
msgstr ""

#: ../develop/plone/forms/files.rst:332
msgid "Streaming file data"
msgstr ""

#: ../develop/plone/forms/files.rst:334
msgid "File data is delivered to the browser as a stream. The view function returns a streaming iterator instead of raw data. This greatly reduces the latency and memory usage when the file should not be buffered as a whole to memory before sending."
msgstr ""

#: ../develop/plone/forms/files.rst:339
msgid "Example (``plone.app.headeranimation``)::"
msgstr ""

#: ../develop/plone/forms/files.rst:410
msgid "``POSKeyError`` on missing blob"
msgstr ""

#: ../develop/plone/forms/files.rst:412
msgid "A ``POSKeyError`` is raised when you try to access blob *attributes*, but the actual file is not available on the disk. You can still load the blob object itself fine (as it's being stored in the ZODB, not on the filesystem)."
msgstr ""

#: ../develop/plone/forms/files.rst:431
msgid "This might occur for example because you have copied the ``Data.fs`` file to another computer, but not blob files."
msgstr ""

#: ../develop/plone/forms/files.rst:434
msgid "You probably want to catch ``POSKeyError`` s and return something more sane instead::"
msgstr ""

#: ../develop/plone/forms/files.rst:471
msgid "https://pypi.python.org/pypi/experimental.gracefulblobmissing/"
msgstr ""

#: ../develop/plone/forms/files.rst:474
msgid "Widget download URLs"
msgstr ""

#: ../develop/plone/forms/files.rst:476
msgid "Some things you might want to keep in mind when playing with forms and images:"
msgstr ""

#: ../develop/plone/forms/files.rst:479
msgid "Image data might be incomplete (no width/height) during the first ``POST``."
msgstr ""

#: ../develop/plone/forms/files.rst:481
msgid "Image URLs might change in the middle of request (image was updated)."
msgstr ""

#: ../develop/plone/forms/files.rst:483
msgid "If your form content is something else than traversable context object then you must fix file download URLs manually."
msgstr ""

#: ../develop/plone/forms/files.rst:487
msgid "Migrating custom content for blobs"
msgstr ""

#: ../develop/plone/forms/files.rst:489
msgid "Some hints how to migrate your custom content:"
msgstr ""

#: ../develop/plone/forms/files.rst:491
msgid "http://plone.293351.n2.nabble.com/plone-4-upgrade-blob-and-large-files-tp5500503p5500503.html"
msgstr ""

#: ../develop/plone/forms/files.rst:494
msgid "Form encoding"
msgstr ""

#: ../develop/plone/forms/files.rst:498
msgid "Make sure that all forms containing file content are posted as ``enctype=\"multipart/form-data\"``.  If you don't do this, Zope decodes request ``POST`` values as string input and you get either empty strings or filenames as your file content data. The older ``plone.app.z3cform`` templates do not necessarily declare ``enctype``, meaning that you need to use a custom page template file for forms doing uploads."
msgstr ""

#: ../develop/plone/forms/files.rst:505
msgid "Example correct form header:"
msgstr ""

#: ../develop/plone/forms/files.rst:513
msgid "File-system access in load-balanced configurations"
msgstr ""

#: ../develop/plone/forms/files.rst:515
msgid "The `plone.namedfiled <https://plone.org/products/plone.app.blob>`_ product page contains configuration instructions for ``plone.namedfile`` and ZEO."
msgstr ""

#: ../develop/plone/forms/index.rst:3
msgid "Models, forms, fields and widgets"
msgstr ""

#: ../develop/plone/forms/index.rst:5
msgid "Plone includes several alternative form mechanisms:"
msgstr ""

#: ../develop/plone/forms/index.rst:7
msgid "For content-oriented forms:"
msgstr ""

#: ../develop/plone/forms/index.rst:9
msgid ":doc:`Dexterity </develop/addons/index>` for Plone 4.1+"
msgstr ""

#: ../develop/plone/forms/index.rst:11
msgid ":doc:`Archetypes </develop/plone/content/archetypes/index>` was used for content types in Plone 3.x, but can still be used in Plone 4 and 5 for migrated sites. For any new development, Dexterity is **strongly** recommended."
msgstr ""

#: ../develop/plone/forms/index.rst:13
msgid "For convenience forms built and maintained through-the-web and where the results are stored in CSV sheet or emailed:"
msgstr ""

#: ../develop/plone/forms/index.rst:15
msgid ":doc:`PloneFormGen </working-with-content/managing-content/ploneformgen/index>`"
msgstr ""

#: ../develop/plone/forms/index.rst:17
msgid "For application and utility forms where custom logic is added by writing Python code:"
msgstr ""

#: ../develop/plone/forms/index.rst:19
msgid "z3c.form for Plone 4.x"
msgstr ""

#: ../develop/plone/forms/index.rst:21
msgid "zope.formlib was used for stock forms in Plone 3.x"
msgstr ""

#: ../develop/plone/forms/index.rst:23
msgid "This documentation applies only for form libraries."
msgstr ""

#: ../develop/plone/forms/index.rst:25
msgid "You need to identify which form library you are dealing with and read the form library specific documentation."
msgstr ""

#: ../develop/plone/forms/index.rst:28
msgid "Zope 3 schema (zope.schema package) is database-neutral and framework-neutral way to describe Python data models."
msgstr ""

#: ../develop/plone/forms/index.rst:31
msgid "Modelling data"
msgstr ""

#: ../develop/plone/forms/index.rst:40
msgid "Forms, fields and widgets"
msgstr ""

#: ../develop/plone/forms/index.rst:51
msgid "Creating forms through-the-web without programming"
msgstr ""

#: ../develop/plone/forms/manual.rst:3
msgid "Processing raw HTTP post requests"
msgstr ""

#: ../develop/plone/forms/manual.rst:7
msgid "How to read incoming HTTP POST values without form frameworks"
msgstr ""

#: ../develop/plone/forms/manual.rst:12
msgid "See :doc:`HTTP request object </develop/plone/serving/http_request_and_response>` for basics."
msgstr ""

#: ../develop/plone/forms/manual.rst:14
msgid "Here is an example view which checks if a form button has been pressed, and takes action accordingly."
msgstr ""

#: ../develop/plone/forms/manual.rst:17
msgid "Register the view in ``configure.zcml``::"
msgstr ""

#: ../develop/plone/forms/manual.rst:38
msgid "Code for the browser view, name the file ``yourview.py``::"
msgstr ""

#: ../develop/plone/forms/manual.rst:61
msgid "Page template code, name the file ``yourview.pt``:"
msgstr ""

#: ../develop/plone/forms/manual.rst:97
msgid "Magical Zope form variables"
msgstr ""

#: ../develop/plone/forms/manual.rst:100
msgid "Zope provides some magical HTTP POST variable names which are automatically converted to native Python primitives by ZPublisher."
msgstr ""

#: ../develop/plone/forms/manual.rst:104
msgid "Quick explanation"
msgstr ""

#: ../develop/plone/forms/manual.rst:106
msgid "If you have HTML::"
msgstr ""

#: ../develop/plone/forms/manual.rst:110
msgid "Then::"
msgstr ""

#: ../develop/plone/forms/manual.rst:114
msgid "will return integer 30 instead of string \"30\"."
msgstr ""

#: ../develop/plone/forms/manual.rst:118
msgid "This behavior is hard-coded to ZPublisher and cannot be extended or disabled. The recommendation is not to use it, but do the conversion of data-types yourself or use a more high-level form framework like z3c.form."
msgstr ""

#: ../develop/plone/forms/manual.rst:125
msgid "http://www.zope.org/Members/Zen/howto/FormVariableTypes"
msgstr ""

#: ../develop/plone/forms/ploneformgen.rst:3
msgid "PloneFormGen"
msgstr ""

#: ../develop/plone/forms/ploneformgen.rst:7
msgid "PloneFormGen allows you to build and maintain convenience forms through Plone edit interface."
msgstr ""

#: ../develop/plone/forms/ploneformgen.rst:12
msgid "*PloneFormGen* is a Plone add-on Product that provides a generic Plone form generator using fields, widgets and validators from Archetypes. Use it to build simple, one-of-a-kind, web forms that save or mail form input."
msgstr ""

#: ../develop/plone/forms/ploneformgen.rst:14
msgid "To build a web form, create a form folder, then add form fields as contents. Individual fields can display and validate themselves for testing purposes. The form folder creates a form from all the contained field content objects."
msgstr ""

#: ../develop/plone/forms/ploneformgen.rst:16
msgid "Final disposition of form input is handled via plug-in action products. Action adapters included with this release include a mailer, a save-data adapter that saves input in tab-separated format for later download, and a custom-script adapter that makes it possible to script simple actions without recourse to the Zope Management Interface."
msgstr ""

#: ../develop/plone/forms/ploneformgen.rst:18
msgid "To make it easy to get started, newly created form folders are pre-populated to act as a simple e-mail response form."
msgstr ""

#: ../develop/plone/forms/ploneformgen.rst:20
msgid "`PloneFormGen product page <https://plone.org/products/ploneformgen>`_"
msgstr ""

#: ../develop/plone/forms/ploneformgen.rst:22
msgid ":doc:`PloneFormGen documentation and tutorials </working-with-content/managing-content/ploneformgen/index>`"
msgstr ""

#: ../develop/plone/forms/ploneformgen.rst:24
msgid ":doc:`Creating forms with PloneFormGen add-on without programming </working-with-content/managing-content/ploneformgen/getting_started>`"
msgstr ""

#: ../develop/plone/forms/schemas.rst:3
msgid "Modelling using zope.schema"
msgstr ""

#: ../develop/plone/forms/schemas.rst:7
msgid "zope.schema package provide a storage-neutral way to define Python object models with validators."
msgstr ""

#: ../develop/plone/forms/schemas.rst:15
msgid "Zope 3 schemas are a database-neutral and form-library-neutral way to describe Python data models."
msgstr ""

#: ../develop/plone/forms/schemas.rst:18
msgid "Plone uses Zope 3 schemas for these purposes:"
msgstr ""

#: ../develop/plone/forms/schemas.rst:20
msgid "to describe persistent data models;"
msgstr ""

#: ../develop/plone/forms/schemas.rst:21
msgid "to describe HTML form data;"
msgstr ""

#: ../develop/plone/forms/schemas.rst:22
msgid "to describe ZCML configuration data."
msgstr ""

#: ../develop/plone/forms/schemas.rst:24
msgid "Since Zope 3 schemas are not bound to e.g. a SQL database engine, it gives you very reusable way to define data models."
msgstr ""

#: ../develop/plone/forms/schemas.rst:27
msgid "Schemas are just regular Python classes, with some special attribute declarations.  They are always subclasses of ``zope.interface.Interface``. The schema itself cannot be a concrete object instance |---| you need to either have a ``persistent.Persistent`` object (for database data) or a ``z3c.form.form.Form`` object (for HTML forms)."
msgstr ""

#: ../develop/plone/forms/schemas.rst:33
msgid "Zope 3 schemas are used for tasks like:"
msgstr ""

#: ../develop/plone/forms/schemas.rst:35
msgid "defining allowed input data format (string, integer, object, list, etc.) for Python class instance attributes;"
msgstr ""

#: ../develop/plone/forms/schemas.rst:37
msgid "specifying required attributes on an object;"
msgstr ""

#: ../develop/plone/forms/schemas.rst:38
msgid "defining custom validators on input data."
msgstr ""

#: ../develop/plone/forms/schemas.rst:40
msgid "The basic unit of data model declaration is the *field*, which specifies what kind of data each Python attribute can hold."
msgstr ""

#: ../develop/plone/forms/schemas.rst:46
msgid "`zope.schema <https://pypi.python.org/pypi/zope.schema>`_ on PyPi"
msgstr ""

#: ../develop/plone/forms/schemas.rst:48
msgid "`zope.schema source code <http://svn.zope.org/zope.schema/trunk/src/zope/schema/>`_ - definite source for field types and usage."
msgstr ""

#: ../develop/plone/forms/schemas.rst:50
msgid "``zope.schema`` provides a very comprehensive set of fields out of the box. Finding good documentation for them, however, can be challenging.  Here are some starting points:"
msgstr ""

#: ../develop/plone/forms/schemas.rst:55
msgid ":doc:`Dexterity field list </external/plone.app.dexterity/docs/reference/fields>`."
msgstr ""

#: ../develop/plone/forms/schemas.rst:59
msgid "Example of a schema"
msgstr ""

#: ../develop/plone/forms/schemas.rst:61
msgid "Let's define a data model to store addresses::"
msgstr ""

#: ../develop/plone/forms/schemas.rst:85
msgid "Next, we define a concrete persistent class which uses this data model.  We can use this class to store data based on our model definition in the ZODB database."
msgstr ""

#: ../develop/plone/forms/schemas.rst:89
msgid "We use ``zope.schema.fieldproperty.FieldProperty`` to bind persistent class attributes to the data definition."
msgstr ""

#: ../develop/plone/forms/schemas.rst:115
msgid "For persistent objects, see :doc:`persistent object documentation </develop/plone/persistency/persistent>`."
msgstr ""

#: ../develop/plone/forms/schemas.rst:120
msgid "Using schemas as data models"
msgstr ""

#: ../develop/plone/forms/schemas.rst:123
msgid "Based on the example data model above, we can use it in e.g. content type :doc:`browser views </develop/plone/views/browserviews>` to store arbitrary data as content type attributes."
msgstr ""

#: ../develop/plone/forms/schemas.rst:151
msgid "Field constructor parameters"
msgstr ""

#: ../develop/plone/forms/schemas.rst:153
msgid "The ``Field`` base class defines a list of standard parameters that you can use to construct schema fields.  Each subclass of ``Field`` will have its own set of possible parameters in addition to this."
msgstr ""

#: ../develop/plone/forms/schemas.rst:157
msgid "See the full list `here <http://apidoc.zope.org/++apidoc++/Code/zope/schema/_bootstrapfields/Field/index.html>`_."
msgstr ""

#: ../develop/plone/forms/schemas.rst:161
#: ../develop/plone/searching_and_indexing/query.rst:117
msgid "Title"
msgstr ""

#: ../develop/plone/forms/schemas.rst:161
msgid "field title as unicode string"
msgstr ""

#: ../develop/plone/forms/schemas.rst:164
msgid "field description as unicode string"
msgstr ""

#: ../develop/plone/forms/schemas.rst:167
msgid "required"
msgstr ""

#: ../develop/plone/forms/schemas.rst:167
msgid "boolean, whether the field is required"
msgstr ""

#: ../develop/plone/forms/schemas.rst:170
msgid "default"
msgstr ""

#: ../develop/plone/forms/schemas.rst:170
msgid "Default value if the attribute is not present"
msgstr ""

#: ../develop/plone/forms/schemas.rst:172
msgid "... and so on."
msgstr ""

#: ../develop/plone/forms/schemas.rst:176
msgid "Do not initialize any non-primitive values using the *default* keyword parameter of schema fields.  Python and the ZODB stores objects by reference.  Python code will construct only *one* field value during schema construction, and share its content across all objects.  This is probably not what you intend. Instead, initialize objects in the ``__init__()`` method of your schema implementer."
msgstr ""

#: ../develop/plone/forms/schemas.rst:183
msgid "In particular, dangerous defaults are: ``default=[]``, ``default={}``, ``default=SomeObject()``."
msgstr ""

#: ../develop/plone/forms/schemas.rst:190
msgid "The ``zope.schema._schema`` module provides some introspection functions:"
msgstr ""

#: ../develop/plone/forms/schemas.rst:192
msgid "``getFieldNames(schema_class)``"
msgstr ""

#: ../develop/plone/forms/schemas.rst:193
msgid "``getFields(schema_class)``"
msgstr ""

#: ../develop/plone/forms/schemas.rst:194
msgid "``getFieldNamesInOrder(schema)`` |---| retain the orignal field declaration order."
msgstr ""

#: ../develop/plone/forms/schemas.rst:196
msgid "``getFieldsInOrder(schema)`` |---| retain the orignal field declaration order."
msgstr ""

#: ../develop/plone/forms/schemas.rst:212
msgid "Dumping schema data"
msgstr ""

#: ../develop/plone/forms/schemas.rst:214
msgid "Below is an example how to extract all schema defined fields from an object."
msgstr ""

#: ../develop/plone/forms/schemas.rst:242
msgid "Finding the schema for a Dexterity type"
msgstr ""

#: ../develop/plone/forms/schemas.rst:244
msgid "When trying to introspect a Dexterity type, you can get a reference to the schema thus::"
msgstr ""

#: ../develop/plone/forms/schemas.rst:251
msgid "...and then inspect it using the methods above. Note this won't have behavior fields added to it at this stage, only the fields directly defined in your schema."
msgstr ""

#: ../develop/plone/forms/schemas.rst:256
msgid "Field order"
msgstr ""

#: ../develop/plone/forms/schemas.rst:258
msgid "The ``order`` attribute can be used to determine the order in which fields in a schema were defined. If one field was created after another (in the same thread), the value of ``order`` will be greater."
msgstr ""

#: ../develop/plone/forms/schemas.rst:264
msgid "Default values"
msgstr ""

#: ../develop/plone/forms/schemas.rst:266
msgid "To make default values of schema effective, class attributes must be implemented using ``FieldProperty``."
msgstr ""

#: ../develop/plone/forms/schemas.rst:291
msgid "Validation and type constrains"
msgstr ""

#: ../develop/plone/forms/schemas.rst:293
msgid "Schema objects using field properties provide automatic validation facilities, preventing setting badly formatted attributes."
msgstr ""

#: ../develop/plone/forms/schemas.rst:296
msgid "There are two aspects to validation:"
msgstr ""

#: ../develop/plone/forms/schemas.rst:298
msgid "Checking the type constraints (done automatically)."
msgstr ""

#: ../develop/plone/forms/schemas.rst:299
msgid "Checking whether the value fills certain constrains (validation)."
msgstr ""

#: ../develop/plone/forms/schemas.rst:301
msgid "Example of how type constraints work::"
msgstr ""

#: ../develop/plone/forms/schemas.rst:332
msgid "Example of validation (email field)::"
msgstr ""

#: ../develop/plone/forms/schemas.rst:352
msgid "Persistent objects and schema"
msgstr ""

#: ../develop/plone/forms/schemas.rst:354
msgid "ZODB persistent objects do not provide facilities for setting field defaults or validating the data input."
msgstr ""

#: ../develop/plone/forms/schemas.rst:357
msgid "When you create a persistent class, you need to provide field properties for it, which will sanify the incoming and outgoing data."
msgstr ""

#: ../develop/plone/forms/schemas.rst:360
msgid "When the persistent object is created it has no attributes. When you try to access the attribute through a named ``zope.schema.fieldproperty.FieldProperty`` accessor, it first checks whether the attribute exists. If the attribute is not there, it is created and the default value is returned."
msgstr ""

#: ../develop/plone/forms/schemas.rst:417
msgid "Now you see the magic::"
msgstr ""

#: ../develop/plone/forms/schemas.rst:426
msgid "Collections (and multichoice fields)"
msgstr ""

#: ../develop/plone/forms/schemas.rst:428
msgid "Collections are fields composed of several other fields. Collections also act as multi-choice fields."
msgstr ""

#: ../develop/plone/forms/schemas.rst:431
#: ../develop/plone/forms/vocabularies.rst:361
msgid "For more information see:"
msgstr ""

#: ../develop/plone/forms/schemas.rst:433
msgid "`Using Zope schemas with a complex vocabulary and multi-select fields <http://www.upfrontsystems.co.za/Members/izak/sysadman/using-zope-schemas-with-a-complex-vocabulary-and-multi-select-fields>`_"
msgstr ""

#: ../develop/plone/forms/schemas.rst:435
msgid "Collections section in `zope.schema documentation <http://apidoc.zope.org/++apidoc++/Code/zope/schema/fields.txt/index.html>`_"
msgstr ""

#: ../develop/plone/forms/schemas.rst:437
msgid "Schema `field sources documentation <http://apidoc.zope.org/++apidoc++/Code/zope/schema/sources.txt/index.html>`_"
msgstr ""

#: ../develop/plone/forms/schemas.rst:439
msgid "`Choice field <http://apidoc.zope.org/++apidoc++/Code/zope/schema/_field/Choice/index.html>`_"
msgstr ""

#: ../develop/plone/forms/schemas.rst:441
msgid "`List field <http://apidoc.zope.org/++apidoc++/Code/zope/schema/_field/List/index.html>`_."
msgstr ""

#: ../develop/plone/forms/schemas.rst:445
msgid "Single-choice example"
msgstr ""

#: ../develop/plone/forms/schemas.rst:447
msgid "Only one value can be chosen."
msgstr ""

#: ../develop/plone/forms/schemas.rst:449
msgid "Below is code to create Python logging level choice::"
msgstr ""

#: ../develop/plone/forms/schemas.rst:487
msgid "Multi-choice example"
msgstr ""

#: ../develop/plone/forms/schemas.rst:489
msgid "Using zope.schema.List, many values can be chosen once. Each value is atomically constrained by *value_type* schema field."
msgstr ""

#: ../develop/plone/forms/schemas.rst:513
#: ../develop/plone/forms/z3c.form.rst:522
msgid "Dynamic schemas"
msgstr ""

#: ../develop/plone/forms/schemas.rst:515
msgid "Schemas are singletons, as there only exist one class instance per Python run-time. For example, if you need to feed schemas generated dynamically to form engine, you need to"
msgstr ""

#: ../develop/plone/forms/schemas.rst:519
msgid "If the form engine (e.g. z3c.form refers to schema fields, then replace these references with dynamically generated copes)"
msgstr ""

#: ../develop/plone/forms/schemas.rst:522
msgid "Generate a Python class dynamically. Output Python source code, then ``eval()`` it. Using ``eval()`` is almost always considered as a bad practice."
msgstr ""

#: ../develop/plone/forms/schemas.rst:528
msgid "Though it is possible, you should not modify zope.schema classes in-place as the same copy is shared between different threads and if there are two concurrent HTTP requests problems occur."
msgstr ""

#: ../develop/plone/forms/schemas.rst:534
msgid "Replacing schema fields with dynamically modified copies"
msgstr ""

#: ../develop/plone/forms/schemas.rst:536
msgid "The below is an example for z3c.form. It uses Python ``copy`` module to copy f.field reference, which points to zope.schema field. For this field copy, we modify *required* attribute based on input."
msgstr ""

#: ../develop/plone/forms/schemas.rst:568
msgid "Don't use dict {} or list [] as a default value"
msgstr ""

#: ../develop/plone/forms/schemas.rst:570
msgid "Because how Python object construction works, giving [] or {} as a default value will make all created field values to share this same object."
msgstr ""

#: ../develop/plone/forms/schemas.rst:573
msgid "http://effbot.org/zone/default-values.htm"
msgstr ""

#: ../develop/plone/forms/schemas.rst:575
msgid "Use value adapters instead"
msgstr ""

#: ../develop/plone/forms/schemas.rst:577
msgid "https://pypi.python.org/pypi/plone.directives.form#value-adapters"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:7
msgid "Vocabularies are lists of (value -> human readable title) pairs used by e.g. selection drop downs. zope.schema provides tools to programmatically construct their vocabularies."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:16
msgid "Vocabularies specify options for choice fields."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:18
msgid "Vocabularies are normally described using zope.schema.vocabulary.SimpleVocabulary and zope.schema.vocabulary.SimpleTerm objects. `See the source code <http://svn.zope.org/zope.schema/trunk/src/zope/schema/vocabulary.py?rev=75170&view=auto>`_."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:24
msgid "Vocabulary terms"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:26
msgid "zope.schema defines different vocabulary term possibilities."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:28
msgid "A term is an entry in the vocabulary. The term has a value. Most terms are tokenised terms which also have a token, and some terms are titled, meaning they have a title that is different to the token."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:30
msgid "In ``SimpleTerm`` instances"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:32
msgid "``SimpleTerm.token`` must be an ASCII string. It is the value passed with the request when the form is submitted. A token must uniquely identify a term."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:34
msgid "``SimpleTerm.value`` is the actual value stored on the object. This is not passed to the browser or used in the form. The value is often a unicode string, but can be any type of object."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:36
msgid "``SimpleTerm.title`` is a unicode string or translatable message. It is used in the form."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:38
msgid "Some info::"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:67
msgid "If you need international texts please note that only title is, and should be, translated. Value and token should always carry the same value."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:72
msgid "Creating a vocabulary"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:84
msgid "Example 2::"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:101
msgid "Stock vocabularies"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:103
msgid "Some vocabularies Plone provides out of the box"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:105
msgid ":doc:`Some common named vocabularies </external/plone.app.dexterity/docs/advanced/vocabularies>`"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:107
msgid "`Thumbnail size vocabulary (TinyMCE) <https://github.com/plone/Products.TinyMCE/blob/master/Products/TinyMCE/vocabularies.py>`_"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:110
msgid "Creating vocabulary from list of objects"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:112
msgid "Here is one example where value = title in term::"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:117
msgid "Retrieving a vocabulary"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:119
msgid "zope.schema's SimpleVocabulary objects are retrieved via factories registered as utilities."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:121
msgid "To get one, use zope.component's getUtility::"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:131
msgid "Getting a term"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:133
msgid "By term value::"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:141
msgid "Listing a vocabulary"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:152
msgid "Dynamic vocabularies' values may change run-time. They are usually generated based on some context data."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:155
msgid "Note that the examples below need grok package installed and <grok:grok package=\"...\"> directive in configure.zcml."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:158
msgid "Complete example with portal_catalog query, vocabulary creation and form"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:271
msgid "Complex example 2"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:336
msgid "For another example, see the :doc:`Dynamic sources </external/plone.app.dexterity/docs/advanced/vocabularies>` chapter in the Dexterity manual."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:340
msgid "Registering a named vocabulary provider in ZCML"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:342
msgid "You can use ``<utility>`` in ZCML to register vocabularies by name and then refer them by name via ``getUtility()`` or in zope.schema.Choice."
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:353
msgid "Then you can refer to vocabulary by its name::"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:363
msgid "`vocabularies API doc <http://docs.zope.org/zope3/ZCML/http_co__sl__sl_namespaces.zope.org_sl_zope/vocabulary/index.html>`_"
msgstr ""

#: ../develop/plone/forms/vocabularies.rst:364
msgid "`zope.component docs <https://raw.githubusercontent.com/zopefoundation/zope.component/master/docs/zcml.rst>`_"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:3
msgid "WYSIWYG text editing and TinyMCE"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:7
msgid "WYSIWYG text field editor programming in Plone."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:14
msgid "Plone supports TinyMCE (default), Kupu and CKEditor."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:16
msgid "TinyMCE and Plone integration is distributed in `Products.TinyMCE package <https://pypi.python.org/pypi/Products.TinyMCE>`_."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:20
msgid "Disabling HTML filtering and safe HTML transformation"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:22
msgid "By default Plone does HTML filtering to prevent `cross-site scripting <http://en.wikipedia.org/wiki/Cross-site_scripting>`_ attacks. This will make Plone to strip away from HTML"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:25
msgid "`<script>` tags"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:27
msgid "Some other potentially unsafe tags and attributes"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:29
msgid "If you need to put a `<script>` tag on your content text in TinyMCE you can disable this security feature."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:33
msgid "If you don't trust all of your site editors, then this will open your site for an attack."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:35
msgid "**Step 1:** Turn off Plone’s safe_html transform. Go to /portal_transforms/safe_html in the ZMI, and enter a 1 in the ‘disable_transform’ box. This prevents Plone from removing tags and attributes while rendering rich text."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:37
msgid "**Step 2:** Set the \"X-XSS-Protection: 0\" response header. This can be done in your frontend webserver such as apache or nginx. Alternatively, if you only need to disable the protection for users who have permission to edit, you can add this to the site’s main_template:"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:39
msgid "tal:define=\"dummy python:checkPermission('Modify portal content', context) and request.RESPONSE.setHeader('X-XSS-Protection', '0');\""
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:43
msgid "http://glicksoftware.com/blog/disable-html-filtering"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:48
msgid "Content linking"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:50
msgid "Plone offers many kind of support and enhancements in site internal content linking"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:52
msgid "Delete protection: :doc:`warning if you try to delete content which is being referred </develop/plone/content/deleting>`."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:54
msgid "Migrating of links when the content is being moved"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:56
msgid "The recommended method for linking the content is *Linking by UID* since *Products.TinyMCE* version 1.3."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:58
msgid "When the text is saved in TinyMCE all relative links are converted to :doc:`UID links </develop/plone/content/uid>` in the saved HTML payload"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:60
msgid "When the text is displayed again, the HTML is run through output filter and UID links are converted back to human readable links"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:62
msgid "This solves issues with earlier Plone versions where the link targets become invalid when a HTML textfield with relative links where shown on the other page as the original context."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:67
msgid "You might need to turn on *Linking by UID* setting on in the site setup if you are migrating from older Plone sites."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:70
msgid "Editor preferences"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:72
msgid "Plone supports user text changeable editor. The active editor is stored in the :doc:`user preferences </develop/plone/members/member_profile>`."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:75
msgid "The user can fallback to hand-edited HTML by setting active editor to none."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:77
msgid "The rich text widget can also support optional input formats besides HTML: structured text and so on."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:81
msgid "Text format selector"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:83
msgid "The format selector itself is rendered by ``wysiwyg_support.pt`` macros which is Plone core"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:86
msgid "https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/skins/plone_wysiwyg/wysiwyg_support.pt"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:89
msgid "Applying styles only edit view"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:91
msgid "You can use TinyMCE body selector make your CSS class have different styles in view and edit modes (inside TinyMCE)"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:115
msgid "Firefox does not actually support column breaks, so this was useful headaching experience."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:118
msgid "Customizing TinyMCE options"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:120
msgid "In your add-on code, all TinyMCE options in the control panel can be exported and imported :doc:`using GenericSetup, portal_setup and tinymce.xml </develop/addons/components/genericsetup>`."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:124
msgid "Custom field-specific style list for TinyMCE"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:129
msgid "Oho."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:134
msgid "For Archetypes see"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:136
msgid "https://plone.org/products/tinymce/documentation/how-to/how-to-customize-tinymce-for-an-archetypes-richwidget"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:139
msgid "Rich text transformations"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:141
msgid ":doc:`/external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations`"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:143
msgid "https://pypi.python.org/pypi/plone.app.textfield"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:147
msgid "Hacking TinyMCE Javascript"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:149
msgid "Plone ships with pre-compressed TinyMCE source code enabled by default."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:151
msgid "If you want to toy around with TinyMCE source code itself, you might want to first enable the usage of debug version of TinyMCE source."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:154
msgid "In ``Products.TinyMCE.skins`` open tiny_mce_src.js and copy-paste its content into tiny_mce.js."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:159
msgid "Replacing tiny_mce.js with tiny_mce_src.js in portal_javascripts doesn't seem to work as it breaks TinyMCE plug-in loading."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:163
msgid "TinyMCE plug-ins"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:165
msgid "TinyMCE consists of plug-ins. Existing plug-ins can be overlaid with your custom version by loading Javascript after core TinyMCE load."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:168
msgid "Default TinyMCE plug-in Javascript files can be found under Products.TinyMCE/skins/tinymce/plugins"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:170
msgid "Usually TinyMCE plug-ins dialogs load in <iframe> and HTML code loads separate CSS and JS files from the main site"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:175
msgid "Adding a new plug-in"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:177
msgid "Here are instructions how to add new buttons to TinyMCE"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:179
msgid "Some rules"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:181
msgid "Plug-in id goes to ``tinymce.xml``"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:183
msgid "Your plug-in must be in a file called ``editor_plugin.js`` in skins layer"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:185
msgid "You must have a skins layer folder named after your plug-in id"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:187
msgid "You don't register plug-in Javascript *portal_javascripts*"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:189
msgid "TinyMCE button row is in the main document. However, the edit area itself is in <iframe>. Also, many of TinyMCE dialogs are launched in <iframe> and they load a hardcoded set of Javascript files (they don't use any kind of Plone master template or <head> section)."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:193
msgid "So in the end you'll have a file::"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:197
msgid "Why all this? I don't know. And honestly, in this point, I don't care."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:199
msgid "Register your specially named skin layer in ``skins.xml``::"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:216
msgid "Register your plugin in ``tinymce.xml`` GenericSetup install profile"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:235
msgid "Then finally drop a ``editor_plugin.js`` to your plug-in folder"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:286
msgid "Media resources"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:288
msgid "TinyMCE exposes URL to your plug-in base folder, where editor_plugin.js is, as plug-in ``init()`` parameter."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:290
msgid "You can construct relative URLs to set media resources in ``init()``."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:301
msgid "Language resources"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:303
msgid "TinyMCE does not directly accept strings as labels, but uses its own internal translation mechanism which is not gettext."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:305
msgid "Create folder ``langs`` under plug-in base folder"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:307
msgid "There create file ``en.js``"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:309
msgid "Sample content"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:319
msgid "Customizing existing plug-in"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:321
msgid "The recommended way is to customize TinyMCE"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:323
msgid "Re-register plug-in by simply including a plug-in JS code in a separate Javascript file loaded after tinymce.js"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:326
msgid "override existing individual TinyMCE files using :doc:`jbot </adapt-and-extend/theming/templates_css/skin_layers>`."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:330
msgid "Overriding plug-in"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:332
msgid "Create a duplicate of plug-in JS file (table.js), register it as a custom Javascript from your add-on resource folder."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:335
msgid "TinyMCE overrides previous plug-in registrations with new ones and you can just re-register your own plug-in version to override the existing version."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:338
msgid "Refer it in portal_javascripts"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:354
msgid "Overriding plug-in resources"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:356
msgid "Yoiu can also override CSS, HTML (.htm.pt templates) with ``z3c.jbot`` as instructed above."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:365
msgid "Since there resources are loaded in <iframe> the normal browser refresh does not trigger reload for them. Right click <iframe>, choose Refresh from context menu."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:370
msgid "Ploneboard and anonymous editor"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:372
msgid "Problems with TinyMCE and Ploneboard."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:376
msgid "http://www.llakomy.com/articles/enable-kupu-for-anonymous-in-ploneboard"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:380
msgid "TinyMCE shortcuts"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:382
msgid "``Products.TinyMCE`` versions 1.3+ provide a shortcut view in link and image dialogs. You can add your own site specific shortcuts here."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:385
msgid "The most common use case is a shortcut link a folder which acts as a site image bank. On multilingual sites this folder is"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:388
msgid "Below natural language folders in the site root"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:390
msgid "Language neutral"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:392
msgid "These make navigating to the folder using normal means very difficult."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:394
msgid "New TinyMCE shortcuts can be registered as global utility via `Products.TinyMCE.interfaces.IShortcut interface <https://github.com/plone/Products.TinyMCE/blob/master/Products/TinyMCE/interfaces/shortcut.py>`_."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:399
msgid "We'll register our image bank as a shortcut into TinyMCE image dialog."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:401
msgid "The view is registered at ``configure.zcml`` in your :doc:`add-on </develop/plone/getstarted/index>`::"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:421
msgid "Then add the following to the ``shortcut.py`` file::"
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:442
msgid "After this you still need to go to TinyMCE control panel (``http://localhost:8080/Plone/@@tinymce-controlpanel``) and enable the link button in the settings for *Image Shortcuts*."
msgstr ""

#: ../develop/plone/forms/wysiwyg.rst:448
msgid "You might also want to disable TinyMCE inline image uploads through CSS and disable image creation in arbitrary folders on your site. Currently the only way is to override TinyMCE internal CSS files using z3c.bot."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:3
msgid "z3c.form library"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:7
msgid "``z3c.form`` is flexible and powerful form library for Zope 3 applications. It is the recommended way to create complex Python-driven forms for Plone 4 and later versions."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:16
msgid "Plone uses *z3c.form* library with the following integration steps"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:18
msgid "`plone.app.z3cform <https://pypi.python.org/pypi/plone.app.z3cform>`_ provides Plone specific widgets and main template"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:21
msgid "`plone.z3cform <https://pypi.python.org/pypi/plone.z3cform>`_ integrates *z3c.form* with applications using Zope 2 mechanisms like acquisition"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:24
msgid "`z3c.form <https://pypi.python.org/pypi/z3c.form/>`_ is a form library which can be used with any Python application using Zope 3 HTTP requests objects"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:27
msgid "(Plone 4.4+ only) `plone.app.widgets <https://github.com/plone/plone.app.widgets/>`_ provide a better widget set over *z3c.form* default with more JavaScript-enabled features"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:31
msgid "Forms are modelled using :doc:`zope.schema </develop/plone/forms/schemas>` models written as Python classes. Widgets for modelled data are set by using either *plone.directives.form* hints set onto schema class or in ``z3c.form.form.Form`` based classes body."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:35
msgid "Starting points to learn *z3c.form* in Plone"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:37
msgid "Read about :doc:`creating schema-driven forms with Dexterity content subsystem </develop/addons/schema-driven-forms/index>`"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:39
msgid ":doc:`TODO app tutorial for Plone </external/tutorial.todoapp/docs/index>`"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:41
msgid "Other related packages you might want to take a closer look"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:43
msgid "Extra, more powerful widgets, from `collective.z3cform.widgets <https://github.com/collective/collective.z3cform.widgets>`_"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:45
msgid "Tabular data edit `collective.z3cform.datagridfield <https://github.com/collective/collective.z3cform.datagridfield>`_"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:47
msgid "Build JavaScript interfaces with `plone.app.jqueryui <https://github.com/plone/plone.app.jqueryui>`_"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:49
msgid "Handling image and file fields with `plone.namedfile <https://github.com/plone/plone.namedfile>`_"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:51
msgid "Configuring forms with `plone.form.directives <https://pypi.python.org/pypi/plone.directives.form>`_"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:54
msgid "``z3c.form`` big picture"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:56
msgid "The form model consists of:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:59
msgid "``self.request``"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:59
msgid "The incoming HTTP request."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:63
msgid "``self.context``"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:62
msgid "The Plone content item which was associated with the form view when URL traversing was done."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:67
msgid "``self.getContent()``"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:66
msgid "The actual object extracted from context and manipulated by the form if ``ignoreContext`` is not ``False``."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:71
msgid "``self.status``"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:70
msgid "A message displayed at the top of the form to the user when the form is rendered. Usually it will be \"Please correct the errors below\"."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:73
msgid "The call-chain for a form goes like this:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:75
msgid "``Form.update()`` is called"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:77
msgid "[``plone.autoform``-based forms only] Calls ``Form.updateFields()`` - this will set widget factory methods for fields. If you want to customize the type of the widget associated with the field, do it here. If your form is not ``plone.autoform``-based you need to edit ``form.schema`` widget factories on the module level code after the class has been constructed. The logic mapping widget hints to widgets is in ``plone.autoform.utils``."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:86
msgid "Calls ``Form.updateWidgets()`` - you can customize widgets at this point, if you override this method. The ``self.widgets`` instance is created based on the ``self.fields`` property."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:90
msgid "Calls ``Form.updateActions()``"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:92
msgid "Calls the action handler (the handler for the button which was clicked)"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:95
msgid "If it's an edit form, the action handler calls ``applyChanges()`` to store new values on the object and returns ``True`` if any value was changed."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:99
msgid "``Form.render()`` is called"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:101
msgid "This renders the form as HTML, based on widgets and their templates."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:104
msgid "Form"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:107
msgid "Simple boilerplate"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:109
msgid "Here is a minimal form implementation using ``z3c.form`` and Dexterity:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:111
msgid "Include Dexterity in your buildout as instructed by Dexterity manual"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:113
msgid "Create Plone add-on product using `Paster <http://docs.plone.org/4/en/develop/addons/paste.html>`_"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:115
msgid "Use :doc:`bobtemplates.plone </develop/addons/bobtemplates.plone/README>`"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:118
msgid "Register the form in ``configure.zcml``::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:142
msgid "Toss ``form.py`` into your add-on product::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:199
msgid "Setting form status message"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:201
msgid "The form's global status message tells whether the form action succeeded or not."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:204
msgid "The form status message will be rendered only on the form. If you want to set a message which will be visible even if the user renders another page after submitting the form, you need to use ``Products.statusmessage``."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:209
msgid "To set the form status message::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:215
msgid "Emulating form HTTP POST in unit tests"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:217
msgid "The HTTP request must include at least one buttons field."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:219
msgid "Form widget naming must match HTTP post values. Usually widgets have ``form.widgets`` prefix."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:222
msgid "You must emulate the ZPublisher behavior which automatically converts string input to Python primitives. For example, all choice/select values are Python lists."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:226
msgid "Some ``z3c`` widgets, like ``<select>``, need to have ``WIDGETNAME-empty-marker`` value set to the integer 1 to be processed."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:230
msgid "Usually you can get the dummy HTTP request object via acquisition from ``self.portal.REQUEST``"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:233
msgid "Example (incomplete)::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:250
msgid "A more complete example::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:283
msgid "Note that you will need to set ``IFormLayer`` on the request, to prevent a ``ComponentLookupError``."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:288
msgid "Changing form ACTION attribute"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:290
msgid "By default, the HTTP ``POST`` request is made to ``context.absolute_url()``. However you might want to make the post go to an external server."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:293
msgid "See `how to set <form> action attribute <https://pypi.python.org/pypi/plone.app.z3cform#form-action>`_"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:296
msgid "Customizing form inner template"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:298
msgid "If you want to change the page template producing ``<form>...</form>`` part of the HTML code, follow the instructions below."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:301
msgid "Generally, when you have a template which extends Plone's ``main_template`` you need to use the ``Products.Five.browser.pagetemplatefile.ViewPageTemplateFile`` class."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:318
msgid "Customizing form frame"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:320
msgid "Please see `plone.app.z3cform README <https://github.com/plone/plone.app.z3cform>`__."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:323
msgid "Rendering a form manually"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:325
msgid "You can directly create a form instance and call it's ``form.render()`` method. This will output the full page HTML. However, there is a way to only render the form body payload."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:329
msgid "First create a form and ``update()``::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:334
msgid "Then you can invoke ``plone.app.z3cform`` macros directly to render the form body in your view's page template."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:376
msgid "Fields"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:378
msgid "A field is responsible for: 1) pre-populating form values from context 2) storing data to context after successful ``POST``."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:382
msgid "Form fields are stored in the ``form.fields`` variable, which is an instance of the ``Fields`` class (ordered, dictionary-like)."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:386
msgid "Creating a field"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:388
msgid "Fields are created by adapting one or more ``zope.schema`` fields for ``z3c.form`` using the ``Fields()`` constructor."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:391
msgid "Example of creating one field::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:402
msgid "Another example::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:423
msgid "Adding a field to a form"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:425
msgid "Use the overridden ``+=`` operator of a ``Fields`` instance. Fields instances can be added to existing Fields instances."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:433
msgid "Modifying a field"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:435
msgid "Fields can be accessed by their name in ``form.fields``. Example::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:440
#: ../develop/plone/forms/z3c.form.rst:997
msgid "Accessing the schema of the field"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:442
msgid "A ``zope.schema`` Field is stored as a ``field`` attribute of a field. Example::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:449
msgid "There exist only one singleton instance of a schema during run-time. If you modify the schema fields, the changes are reflected to all subsequent form updates and other forms which use the same schema."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:455
msgid "Read-only fields"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:457
msgid "There is ``field.readonly`` flag."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:459
#: ../develop/plone/persistency/transactions.rst:49
msgid "Example code:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:497
msgid "You might also want to disable the *edit* button if none of the fields are editable::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:505
msgid "You can also set ``z3c.form.interfaces.DISPLAY_MODE`` in ``updateWidgets()`` if you are not dynamically poking form fields themselves."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:511
msgid "Do not modify fields on singleton instances (form or fields objects are shared between all forms). This causes problems on concurrent access."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:517
msgid "``zope.schema.Field`` has a ``readonly`` property. ``z3c.form.field.Field`` does not have this property, but has the ``mode`` property. Do not confuse these two."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:524
msgid "Below is an example of how to include new schemas on the fly:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:564
msgid "Date and time"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:579
msgid "http://stackoverflow.com/questions/5776498/specify-datetime-format-on-zope-schema-date-on-plone"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:581
msgid "http://svn.zope.org/zope.schema/trunk/src/zope/schema/tests/test_datetime.py?rev=113055&view=auto"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:584
msgid "Making boolean field required"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:586
msgid "E.g. to make \"Accept Terms and Conditions\" checkbox"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:588
msgid "http://stackoverflow.com/questions/9670819/how-do-i-make-a-boolean-field-required-in-a-z3c-form"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:593
msgid "Widget are responsible for 1) rendering HTML code for input; 2) parsing HTTP post input."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:597
msgid "Widgets are stored as the ``widgets`` attribute of a form. It is presented by an ordered dict-like ``Widgets`` class."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:600
msgid "Widgets are only available after the form's ``update()`` and ``updateWidgets()`` methods have been called. ``updateWidgets()`` will bind widgets to the form context. For example, vocabularies defined by name are resolved at this point."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:605
msgid "A widget has two names:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:607
msgid "``widget.__name__`` is the name of the corresponding field. Lookups from ``form.widgets[]`` can be done using this name."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:610
msgid "``widget.name`` is the decorated name used in HTML code. It has the format ``${form name}.${field set name}.${widget.__name__}``."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:614
msgid "The Zope publisher will also mangle widget names based on what kind of input the widget takes. When an HTTP ``POST`` request comes in, Zope publisher automatically converts ``<select>`` dropdowns to lists and so on."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:620
msgid "Setting a widget for a field"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:623
msgid "Using plone.directives.form schema hints"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:655
msgid ":doc:`Form schema hints </external/plone.app.dexterity/docs/reference/form-schema-hints>`"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:659
msgid "Setting widget for z3c.form plain forms"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:661
msgid "You can set field's widgetFactory after fields have been declared in form class body."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:693
msgid "Setting widget dynamically Form.updateWidgets()"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:695
msgid "Widget type can be set dynamically based on external conditions."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:711
msgid "Accessing a widget"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:713
msgid "A widget can be accessed by its field's name. Example::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:725
msgid "Introspecting form widgets"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:743
msgid "Reordering and hiding widgets"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:745
msgid "With Dexterity forms you can use `plone.directives.form <https://pypi.python.org/pypi/plone.directives.form>`_::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:765
msgid "Modifying a widget"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:767
msgid "Widgets are stored in the ``form.widgets`` dictionary, which maps *field name* to *widget*. The widget label can be different than the field name."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:782
msgid "If you want to have a completely different Python class for a widget, you need to override field's widget factory in the module body code after fields have been constructed in the class, or in the ``update()`` method for dynamically constructed fields::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:791
msgid "Reorder form widgets"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:793
msgid "``plone.z3cform`` allows you to reorder the field widgets by overriding the ``update`` method of the form class."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:809
msgid "For more information about how to reorder fields see the ``plone.z3cform`` page at PyPI:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:812
msgid "<https://pypi.python.org/pypi/plone.z3cform#fieldsets-and-form-extenders>`_"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:816
msgid "Hiding fields"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:818
msgid "Here's how to do it in pure ``z3c.form``::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:826
msgid "If you want to hide a widget that is part of a group, you cannot use the updateWidgets method. The groups and their widgets get initialized after the widgets have been updated. Before that, the groups variable is just a list of group factories. During the update method though, the groups have been initialized and have their own widget list each. For hiding widgets there, you have to access the group in the update method like so::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:841
msgid "groups itself is a list like object, you can also remove a complete group by just removing it from the group dictionary."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:844
msgid "Unprefixing widgets"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:846
msgid "By default each form widget gets a name prefixed by the form id. This allows you to combine several forms on the same page."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:849
msgid "You can override this behavior in ``updateWidgets()``::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:859
msgid "Some templates, like ``select_input.pt``, have hard-coded name suffixes like ``:list`` to satisfy ZPublisher machinery. If you need to get rid of these, you need to override the template."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:864
msgid "Making widgets required conditionally"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:866
msgid "If you want to avoid hardwired ``required`` on fields and toggle then conditionally, you need to supply a dynamically modified schema field to the ``z3c.form.field.Fields`` instance of the form."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:914
msgid "Setting widget types"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:916
msgid "By default, widgets for form fields are determined by ``FieldWidget`` adapters (defined in :term:`ZCML`). You can override adapters per field using field's ``widgetFactory`` property."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:920
msgid "Below is an example which creates a custom widget, its ``FieldWidget`` factory, and uses it for one field in one form::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:962
msgid "Alternatively, you can use `plone.directives.form <https://pypi.python.org/pypi/plone.directives.form>`_ to add widget hints to form schema."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:967
msgid "Widget save"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:969
msgid "After ``form.update()`` if the request was *save* and all data was valid, ``form.applyChanges(data)`` is called."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:972
msgid "By default widgets use ``datamanger.AttributeField`` and try to store their values as a member attribute of the object returned by ``form.getContent()``."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:975
msgid "How do add custom DataManager"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:978
msgid "Widget value"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:980
msgid "The widget value, either from form ``POST`` or previous context data, is available as ``widget.value`` after the ``form.update()`` call."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:985
msgid "Adding a CSS class"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:987
msgid "Widgets have a method ``addClass()`` to add extra CSS classes. This is useful if you have Javascript/JQuery associated with your special form::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:993
msgid "Note that these classes are directly applied to ``<input>``, ``<select>``, etc. itself, and not to the wrapping ``<div>`` element."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:999
msgid "A ``zope.schema`` Field is stored as a ``field`` attribute of a widget. Example::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1006
msgid "``Widget.field`` is not a ``z3c.form.field.Field`` object."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1009
msgid "Getting selection widget vocabulary value as human readable text"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1019
msgid "Example (page template)"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1029
msgid "Setting widget templates"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1031
msgid "You might want to customize the template of a widget to have custom HTML code for a specific use case."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1035
msgid "Setting the template of an individual widget"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1037
msgid "First copy the existing page template code of the widget. For basic widgets you can find the template in the `z3c.form source tree <http://svn.zope.org/z3c.form/trunk/src/z3c/form/browser/>`_."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1042
msgid "``yourwidget.pt`` (text area widget copied over an example text)"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1084
msgid "Now you can override the template factory in the ``updateWidgets()`` method of your form class"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1109
msgid "You can also interact with your ``form`` class instance from the widget template"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1119
msgid "Setting template for your own widget type"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1121
msgid "You can set the template used by the widget with the ``<z3c:widgetTemplate>`` ZCML directive"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1133
msgid "You can also enforce the widget template in the ``render()`` method of the widget class::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1159
msgid "Widget template example::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1193
msgid "Setting widget frame template"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1195
msgid "You can change how the frame around each widget is rendered in the widget rendering loop. This frame has elements like label, required marker, field description and so on."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1199
msgid "For instructions see `plone.app.z3cform README <https://github.com/plone/plone.app.z3cform/>`__"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1202
msgid "Combined widgets"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1204
msgid "You can combine multiple widgets to one with ``z3c.form.browser.multil.MultiWidget`` and ``z3c.form.browser.object.ObjectWidget`` classes."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1206
msgid "Example how to create a min max input widget."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1208
msgid "Python code to setup the widget:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1241
msgid "Then we do some widget marking in ``updateWidgets()``::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1256
msgid "And then the page template which renders both 0. widget  (min) and 1. widget (max) on the same line."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1313
msgid "Buttons"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1315
msgid "Buttons enable actions in forms. ``AddForm`` and ``EditForm`` base classes come with default buttons (:guilabel:`Save`)."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1318
msgid "More information in ``z3c.form`` documentation"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1320
msgid "http://packages.python.org/z3c.form/button.html"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1323
msgid "Adding a button to form"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1325
msgid "The easiest way to add handlers for buttons is to use a function decorator ``z3c.form.button.buttonAndHandler()``."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1328
msgid "The first parameter is the user visible label and the second one is the ``<input>`` name."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1348
msgid "The default ``z3c.form.form.AddForm`` and ``z3c.form.form.EditForm`` :guilabel:`Add` and :guilabel:`Save` button handler calls are good code examples."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1352
msgid "http://svn.zope.org/z3c.form/trunk/src/z3c/form/form.py?rev=114824&view=auto"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1354
msgid "If you created a form based on another form, the buttons defined on that other form get lost. To prevent that, you must explicitly add the buttons of the base class in your form class::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1369
msgid "Adding buttons conditionally"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1371
msgid "The ``buttonAndHandler`` decorator can accept a condition argument. The condition should be a function that accepts the form as an argument and returns a boolean. Example, a button that only shows when a condition is met::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1391
msgid "Manipulating form buttons programmatically"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1393
msgid "You want to manipulate buttons if you want to hide buttons dynamically, manipulate labels, etc."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1396
msgid "Buttons are stored in ``buttons`` class attribute."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1400
msgid "Button storage is shared between all form instances, so do not mutate its content. Instead create a copy of it if you wish to have form-specific changes."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1405
msgid "Reading buttons"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1416
msgid "Removing or hiding buttons"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1418
msgid "Here is an example how to hide all buttons from a certain form instance."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1436
msgid "Adding buttons dynamically"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1438
msgid "In the example below, the ``Buttons`` array is already constructed dynamically and we can manipulate it::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1457
msgid "Subforms"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1459
msgid "Subforms are embedded ``z3c`` forms inside a master form."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1461
msgid "Subforms may have their own buttons or use the controls from the master form. You need to call ``update()`` manually for subforms."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1467
msgid "http://packages.python.org/z3c.form/subform.html"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1470
msgid "Adding an action to parent and subform"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1472
msgid "Parent and subform actions must be linked."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1527
msgid "Creating subforms at run-time"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1529
msgid "Below is an example how to convert existing form instance to be used as an subform in another form::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1565
msgid "If possible, try to construct your form class hierarchy so that you can use the same class mix-in for normal forms and subforms."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1569
msgid "CRUD form"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1571
msgid "CRUD (Create, read, update, delete) forms manage list of objects."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1573
msgid "CRUD form elements:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1575
msgid "Add form creates new objects and renders the form below the table"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1577
msgid "Edit sub-form edits existing object and renders one table row"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1579
msgid "Edit form lists all objects and allows deleting them (table master)"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1581
msgid "CRUD form orchestrates the whole thing and renders add and edit forms"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1583
msgid "``view_schema`` outputs read-only fields in CRUD table"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1585
msgid "``update_schema`` outputs editable fields in CRUD table. Usually you want either ``view_schema`` or ``update_schema``."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1588
msgid "``add_schema`` outputs add form."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1590
msgid "the ``context`` attribute of add and edit form is the parent CRUD form. The ``context`` attribute of an edit subform is the edit form."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1596
msgid "https://pypi.python.org/pypi/plone.z3cform#crud-create-read-update-and-delete-forms"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1599
msgid "Displaying the status message in a non-standard location"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1601
msgid "By default, the status message is rendered inside ``plone.app.z3cform`` ``macros.pt`` above the form:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1623
msgid "We can decouple the status message from the form, without overriding all the templates, by copying status message variable to another variable and then playing around with it in our wrapper view template."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1628
msgid "Form class::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1667
msgid "... and then we can use a special ``result_message`` view accessor in our view template code"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1686
msgid "Storage format and data managers"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1688
msgid "By default, ``z3c.form`` reads incoming context values as the object attributes. This behavior can be customized using data managers."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1692
msgid "You can, for example, use Python dictionaries to read and store form data."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1694
msgid "http://packages.python.org/z3c.form/datamanager.html"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1697
msgid "Custom content objects"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1699
msgid "The following hack can be used if you have an object which does not conform your form interface and you want to expose only certain object attribute to the form to be edited."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1735
msgid "Since ``getContent()`` is also used in ``applyChanges()``, you need to override ``applyChanges()`` as well to save values correctly to a persistent object."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1740
msgid "Custom change applying"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1742
msgid "The default, the behavior of the ``z3c.form`` edit form is to write incoming data as the attributes of the object returned by ``getContent()``."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1745
msgid "You can override this behavior by overriding ``applyChanges()`` method."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1766
msgid "WYSIWYG widgets"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1768
msgid "By using `plone.directives.form <https://pypi.python.org/pypi/plone.directives.form>`_ and `plone.app.z3cform <https://pypi.python.org/pypi/plone.app.z3cform>`_ packages you can do::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1788
msgid "https://pypi.python.org/pypi/plone.directives.form"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1791
msgid "Wrapped and non-wrapped forms"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1793
msgid "A ``z3c.form.form.Form`` object is \"wrapped\" when it is rendered inside Plone page frame and having acquisition chain in intact."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1797
msgid "Since ``plone.app.z3cform`` 0.5.0 the behavior goes like this:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1799
msgid "Plone 3 forms are automatically wrapped"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1801
msgid "Plone 4 forms are unwrapped"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1803
msgid "The wrapper is a ``plone.z3cform.interfaces.IWrappedForm`` :doc:`marker interface </develop/addons/components/interfaces>` on the form object, applied it after the form instance has been constructed. If this marker interface is not applied, ``plone.z3cform.ZopeTwoFormTemplateFactory`` tries to embed the form into Plone page frame. If the form is not intended to be rendered as a full page form, this usually leads to the following exception::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1814
msgid "The form tries to render the full Plone page. Rendering this page needs an acquisition chain set-up for the view and the template. Embedded forms do not have this, or it would lead to recursion error."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1819
msgid "If you are constructing form instances manually and want to render them without Plone page decoration, you must make sure that automatic form wrapping does not take place::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1849
msgid "Embedding z3c.form forms in portlets, viewlets and views"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1851
msgid "By default, when ``plone.app.z3cform`` is installed through the add-on installer, all forms have full Plone page frame. If you are rendering forms inside non-full-page objects, you need to change the default template."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1856
msgid "Below is an example how to include a ``z3c.form``-based form in a portlet."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1860
msgid "``plone.app.z3cform`` version 0.5.1 or later is needed, as older versions do not support overriding ``form.action`` property."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1864
msgid "You need the following:"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1866
msgid "a ``z3c.form`` class"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1868
msgid "the viewlet/portlet class"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1870
msgid "A form wrapper template which renders the frame around the form. The default version renders the whole Plone page frame --- you don't want this when the form is embedded, otherwise you get infinite recursion (plone page having a form having a plone page...)"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1876
msgid "Portlet/viewlet template which refers to the form"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1878
msgid "ZCML to register all components"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1880
msgid "Portlet code::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1940
msgid "``formwrapper.pt`` is just a dummy form view template which wraps the form. This differs from standard form wrapper by *not* rendering Plone main layout around the form."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1950
msgid "Then the portlet template itself (``zohoportlet.pt``) renders the portlet. The form is rendered using: ``<form tal:replace=\"structure view/form_wrapper\" />``."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1985
msgid "Viewlets behave a little differently, since they do some acquisition chain mangling when you assign variables to ``self``. Thus you should never have ``self.view = view`` or ``self.form = form`` in a viewlet."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1989
msgid "Template example for viewlet (don't do ``sel.form_wrapper``)"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:1997
msgid "Then the necessary parts of form itself::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2161
msgid "This example code was taken from the ``mfabrik.plonezohointegration`` product which is in the Plone collective."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2172
msgid "Please read `Dexterity manual validators chapter <https://plone.org/products/dexterity/documentation/manual/schema-driven-forms/customising-form-behaviour/referencemanual-all-pages>`_."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2174
msgid "There are three kind of validation hooks you can use with z3c.form"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2176
msgid "zope.schema field parameter specific"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2178
msgid "zope.schema @invariant (validation is model specific)"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2180
msgid "zope.schema constrain (validation is model specific)"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2182
msgid "z3c.form (validation is bound ot the form instance)"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2185
msgid "Field specific internal validators"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2187
msgid "When you define your field with *zope.schema* you can enable flags for field internal validation. This include e.g."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2191
msgid "``required`` is field required on the form or not"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2193
msgid "``min`` and ``max`` for number based fields"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2206
msgid "For available internal validation options, see the field source code in zope.schema package."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2209
msgid "Constrain validators"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2211
msgid "zope.schema fields take a callable argument ``constrain`` which defines a Python function validating the incoming value."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2232
msgid "For more information, see ``zope.schema`` documentation."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2235
msgid "Invariant validators"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2237
msgid "TODO: Are invariants useful with z3c.form??"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2240
msgid "Form widget validators"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2242
msgid "Validators are best added in the schema itself."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2244
msgid "If you are using plain ``z3c.form``, you can check the `validators documentation <http://packages.python.org/z3c.form/validator.html>`_."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2247
msgid "The plone.form.directives package provides convenient `decorators for form validators <https://pypi.python.org/pypi/plone.directives.form#validators>`_. If you use ``plone.form.directives`` validators, make sure your package is `grokked <http://docs.plone.org/4/en/appendices/grok.html>`_ (otherwise validators are not registered)."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2255
msgid "using Grok is not recommended anymore!"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2257
msgid "Example: How to use widget specific validators with ``z3c.form``::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2302
msgid "https://plone.org/products/dexterity/documentation/manual/schema-driven-forms/customising-form-behaviour/validation"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2305
msgid "Custom field specific validation in form action handlers and update()"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2307
msgid "http://stackoverflow.com/a/17466776/315168"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2310
msgid "Customizing and translating error messages"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2312
msgid "If you want to custom error messages on per-field level::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2318
msgid "Leave ``field`` parameter out if you want the new error message to apply to all fields."
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2323
msgid "Read-only and disabled fields"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2325
msgid "Read-only fields are not rendered in form edit mode::"
msgstr ""

#: ../develop/plone/forms/z3c.form.rst:2333
msgid "If the widget mode is ``display`` then it is rendered as in form view mode, so that the user cannot edit::"
msgstr ""

#: ../develop/plone/functionality/actions.rst:3
msgid "Actions"
msgstr ""

#: ../develop/plone/functionality/actions.rst:7
msgid "Creating and using portal_actions mechanism"
msgstr ""

#: ../develop/plone/functionality/actions.rst:14
msgid "Plone has concept of actions which refer the end user functionality associated with site or content objects:"
msgstr ""

#: ../develop/plone/functionality/actions.rst:17
msgid "View, edit, sharing etc. are actions"
msgstr ""

#: ../develop/plone/functionality/actions.rst:19
msgid "Sitemap is action"
msgstr ""

#: ../develop/plone/functionality/actions.rst:21
msgid "Contact form is action"
msgstr ""

#: ../develop/plone/functionality/actions.rst:23
msgid "Cut, copy, paste are actions"
msgstr ""

#: ../develop/plone/functionality/actions.rst:25
msgid "Logged in menu is populated by actions"
msgstr ""

#: ../develop/plone/functionality/actions.rst:27
msgid "Actions are managed by"
msgstr ""

#: ../develop/plone/functionality/actions.rst:29
msgid "portal_actions for generic actions"
msgstr ""

#: ../develop/plone/functionality/actions.rst:31
msgid "portal_types for view, edit etc. actions and object default action... all actions which are tied to a particular content type and may vary by type"
msgstr ""

#: ../develop/plone/functionality/actions.rst:35
msgid "Iterating through available actions"
msgstr ""

#: ../develop/plone/functionality/actions.rst:37
msgid "Here is a page template example"
msgstr ""

#: ../develop/plone/functionality/actions.rst:52
msgid "Creating actions through-the-web"
msgstr ""

#: ../develop/plone/functionality/actions.rst:54
msgid "Visit portal_actions in ZMI."
msgstr ""

#: ../develop/plone/functionality/actions.rst:57
msgid "Exporting and importing all portal_actions"
msgstr ""

#: ../develop/plone/functionality/actions.rst:59
msgid "You can transfer action configuration from a Plone site to another using GenericSetup export/import XML. You can also do this to generate XML from which you can cut out snippets for creating actions.xml by hand."
msgstr ""

#: ../develop/plone/functionality/actions.rst:63
msgid "Go to portal_setup"
msgstr ""

#: ../develop/plone/functionality/actions.rst:65
msgid "Choose Export"
msgstr ""

#: ../develop/plone/functionality/actions.rst:67
msgid "Choose actions"
msgstr ""

#: ../develop/plone/functionality/actions.rst:69
msgid "Choose \"Export selected steps\" button at the end of the page"
msgstr ""

#: ../develop/plone/functionality/actions.rst:71
#: ../develop/plone/serving/traversing.rst:81
msgid "...and so on"
msgstr ""

#: ../develop/plone/functionality/actions.rst:74
msgid "Creating actions.xml by hand"
msgstr ""

#: ../develop/plone/functionality/actions.rst:76
msgid "Usually all actions are rewritten by site policy product using portal_actions import/export. Actions are in GenericSetup profile file *default/profiles/actions.xml*."
msgstr ""

#: ../develop/plone/functionality/actions.rst:79
msgid "actions.xml is exported from the development instance using portal_setup"
msgstr ""

#: ../develop/plone/functionality/actions.rst:81
msgid "actions.xml is made part of the site policy product"
msgstr ""

#: ../develop/plone/functionality/actions.rst:83
msgid "Alternatively, if you are developing add-on product, you can add actions one-by-one by manually creating entries in actions.xml."
msgstr ""

#: ../develop/plone/functionality/actions.rst:86
msgid "Example how to add an action to the ``document_actions`` (like ``rss`` and ``print``):"
msgstr ""

#: ../develop/plone/functionality/actions.rst:108
msgid "Example how to add actions to user menu, which is visible in the top right corner for logged in users (Plone 4):"
msgstr ""

#: ../develop/plone/functionality/actions.rst:132
msgid "Reordering actions in actions.xml"
msgstr ""

#: ../develop/plone/functionality/actions.rst:134
msgid "Try using these attributes"
msgstr ""

#: ../develop/plone/functionality/actions.rst:136
msgid "insert-after"
msgstr ""

#: ../develop/plone/functionality/actions.rst:138
msgid "insert-before"
msgstr ""

#: ../develop/plone/functionality/actions.rst:140
msgid "They accept * and action name parameters."
msgstr ""

#: ../develop/plone/functionality/actions.rst:149
msgid "Action URLs"
msgstr ""

#: ../develop/plone/functionality/actions.rst:151
msgid "Actions are applied to objects by adding action name to url."
msgstr ""

#: ../develop/plone/functionality/actions.rst:153
msgid "E.g.::"
msgstr ""

#: ../develop/plone/functionality/actions.rst:157
msgid "for view action and::"
msgstr ""

#: ../develop/plone/functionality/actions.rst:161
msgid "for edit action."
msgstr ""

#: ../develop/plone/functionality/actions.rst:163
msgid "Action can be also not related to document, like::"
msgstr ""

#: ../develop/plone/functionality/actions.rst:168
msgid "Default action"
msgstr ""

#: ../develop/plone/functionality/actions.rst:170
msgid "Default action is executed when the content URL is opened without any prefix."
msgstr ""

#: ../develop/plone/functionality/actions.rst:173
msgid "Default action is defined in portal_types."
msgstr ""

#: ../develop/plone/functionality/actions.rst:175
msgid "Default action can be dynamic - meaning that site editor may set it from Display menu. For more information see Dynamic Views."
msgstr ""

#: ../develop/plone/functionality/actions.rst:181
msgid "Content-type specific actions"
msgstr ""

#: ../develop/plone/functionality/actions.rst:183
msgid "Content-type specific actions can be registered in portal_types. Actions are viewable and editable in Zope Management Interface under portal_types. After editing actions, content type XML can be  exported and placed to your content type add-on product."
msgstr ""

#: ../develop/plone/functionality/actions.rst:188
msgid "GenericSetup example file for content type \"ProductCard\" which has a new tab added next to view, edit, sharing, etc. File is located in profiles/default/types/ProductCard.xml."
msgstr ""

#: ../develop/plone/functionality/actions.rst:223
msgid "The corresponding BrowserView is registered as any other view in *browser/configure.zcml*:"
msgstr ""

#: ../develop/plone/functionality/actions.rst:237
msgid "Toggling action visibility programmatically"
msgstr ""

#: ../develop/plone/functionality/actions.rst:241
msgid "This applies only for Plone 2.5. You should use actions.xml instead."
msgstr ""

#: ../develop/plone/functionality/actions.rst:259
msgid "Visibility expressions"
msgstr ""

#: ../develop/plone/functionality/actions.rst:261
msgid "In portal_actions expression is used to determine whether an action is visible on a particular page."
msgstr ""

#: ../develop/plone/functionality/actions.rst:264
msgid "Expression is \"expression\" field in actions.xml or \"Expression\" field in portal_actions."
msgstr ""

#: ../develop/plone/functionality/actions.rst:269
msgid "This check is just a visibility check. Users can still try to type the action by typing the URL manually. You need to do the permission level security check on the view providing the action."
msgstr ""

#: ../develop/plone/functionality/actions.rst:273
msgid "For more information see :doc:`expressions </develop/plone/functionality/expressions>`."
msgstr ""

#: ../develop/plone/functionality/actions.rst:276
msgid "Condition examples"
msgstr ""

#: ../develop/plone/functionality/actions.rst:278
msgid "See in :doc:`expressions </develop/plone/functionality/expressions>`."
msgstr ""

#: ../develop/plone/functionality/actions.rst:281
msgid "Using actions in views and viewlets"
msgstr ""

#: ../develop/plone/functionality/actions.rst:293
msgid "Tabs (sections)"
msgstr ""

#: ../develop/plone/functionality/actions.rst:295
msgid "Tabs are special actions"
msgstr ""

#: ../develop/plone/functionality/actions.rst:297
msgid "Some of tabs are automatically generated from root level content items"
msgstr ""

#: ../develop/plone/functionality/actions.rst:299
msgid "Some of tabs are manually added to portal_actions.portal_tabs"
msgstr ""

#: ../develop/plone/functionality/actions.rst:301
msgid "By default, they are shown as the top vertical navigation of Plone site."
msgstr ""

#: ../develop/plone/functionality/actions.rst:303
msgid "Example how to generate tabs list::"
msgstr ""

#: ../develop/plone/functionality/actions.rst:334
msgid "Custom action listings"
msgstr ""

#: ../develop/plone/functionality/actions.rst:356
msgid "Different tabs per section/folder"
msgstr ""

#: ../develop/plone/functionality/actions.rst:358
msgid "You might want to have different actions for different site sections or folders."
msgstr ""

#: ../develop/plone/functionality/actions.rst:360
msgid "http://plone.293351.n2.nabble.com/Custom-portal-tabs-per-subsection-tp5747768p5747768.html"
msgstr ""

#: ../develop/plone/functionality/actions.rst:363
msgid "Copy, cut and paste"
msgstr ""

#: ../develop/plone/functionality/actions.rst:365
msgid "These action are based on ``OFS`` Zope 2 package SimpleItem mechanisms. Plone specific event handlers are used to update Plone related stuff like ``portal_catalog`` on move."
msgstr ""

#: ../develop/plone/functionality/actions.rst:369
msgid "Plone internal clipboard relies on the presence of Zope 2 session (different from authentication session). Paste action fails silenlty (is missing) if ``_ZopeId`` session cookie does not work correctly on your web server."
msgstr ""

#: ../develop/plone/functionality/breadcrumbs.rst:3
msgid "Breadcrumbs (path bar)"
msgstr ""

#: ../develop/plone/functionality/breadcrumbs.rst:7
msgid "Breadcrumbs is visual element showing where the user is on the site. This document shows some example code how to create breadcrumbs programmatically."
msgstr ""

#: ../develop/plone/functionality/breadcrumbs.rst:14
msgid "Navigation level sensitive breadcrumbs"
msgstr ""

#: ../develop/plone/functionality/breadcrumbs.rst:16
msgid "Below is a breadcrumbs viewlet displayed only on 3rd navigation level downwards.  Drop this in `your add-on template <https://github.com/miohtama/sane_plone_addon_template>`_. Tune the ``visible()`` function for further functionality."
msgstr ""

#: ../develop/plone/functionality/breadcrumbs.rst:21
msgid "Python code to be dropped in ``viewlets.py``::"
msgstr ""

#: ../develop/plone/functionality/breadcrumbs.rst:53
msgid "Template code ``templates/breadcrumbs.pt``:"
msgstr ""

#: ../develop/plone/functionality/breadcrumbs.rst:98
msgid "Back button"
msgstr ""

#: ../develop/plone/functionality/breadcrumbs.rst:100
msgid "Below is an example how we have extracted information like the parent container and such from breadcrumbs."
msgstr ""

#: ../develop/plone/functionality/breadcrumbs.rst:105
msgid "We need special dealing for \"default view\" of objects... that's the canonical part."
msgstr ""

#: ../develop/plone/functionality/breadcrumbs.rst:146
msgid "http://code.google.com/p/plonegomobile/source/browse/gomobiletheme.basic/trunk/gomobiletheme/basic/viewlets.py#281"
msgstr ""

#: ../develop/plone/functionality/collections.rst:3
msgid "Collections"
msgstr ""

#: ../develop/plone/functionality/collections.rst:7
msgid "Collections are site editor enabled searches.  They provide automatic, folder like view, for the content fetched from the Plone site by criteria defined by the site editor."
msgstr ""

#: ../develop/plone/functionality/collections.rst:14
msgid "In Plone 4.2, old style collections have been replaced with new style collections, featuring a vastly improved user interface and a de-coupling from the ATTopic content type (i.e. they no longer use ATTopic)."
msgstr ""

#: ../develop/plone/functionality/collections.rst:16
msgid "They are useful to generate different listings."
msgstr ""

#: ../develop/plone/functionality/collections.rst:18
msgid "Collections are internally called \"topics\" and the corresponding content type is \"ATTopic\" (< 4.2 only). Collections were renamed from topics in Plone 3.0."
msgstr ""

#: ../develop/plone/functionality/collections.rst:20
msgid "Collection searches are driven by two factors:"
msgstr ""

#: ../develop/plone/functionality/collections.rst:22
msgid "User visible \"criteria\" which is mapped to portal_catalog queries"
msgstr ""

#: ../develop/plone/functionality/collections.rst:24
msgid "portal_catalog() indexes which you need to add yourself for custom content types. Read more about them in :doc:`Searching and Indexing chapter </develop/plone/searching_and_indexing/index>`"
msgstr ""

#: ../develop/plone/functionality/collections.rst:27
msgid "Add new collection criteria (new style, plone.app.collection installed)"
msgstr ""

#: ../develop/plone/functionality/collections.rst:28
msgid "How to add your own criteria to a collection plone.app.collection and (or more precisely the underlying plone.app.querystring) uses plone.app.registry records to define possible search criteria for a collection."
msgstr ""

#: ../develop/plone/functionality/collections.rst:31
msgid "If you want to add your own criteria, say to choose a value from a custom index, you have to create a plone.app.registry record for this index in your generic setup profile (e.g profiles/default/registry.xml)::"
msgstr ""

#: ../develop/plone/functionality/collections.rst:47
msgid "The title-value refers to the custom index (\"Department\"), the operations-value is used to filter the items and the group-value defines under which group the entry shows up in the selection widget."
msgstr ""

#: ../develop/plone/functionality/collections.rst:49
msgid "Note"
msgstr ""

#: ../develop/plone/functionality/collections.rst:51
msgid "For a full list of all existing QueryField declarations see https://github.com/plone/plone.app.querystring/blob/master/plone/app/querystring/profiles/default/registry.xml#L197"
msgstr ""

#: ../develop/plone/functionality/collections.rst:53
msgid "For a full list of all existing operations see https://github.com/plone/plone.app.querystring/blob/master/plone/app/querystring/profiles/default/registry.xml#L1"
msgstr ""

#: ../develop/plone/functionality/collections.rst:56
msgid "Adding new collection criteria (old style, < 4.2 only)"
msgstr ""

#: ../develop/plone/functionality/collections.rst:58
msgid "portal_catalog search indexes are not directly exposed to the collection criteria management backend, since portal_catalog indices do not support features like localization and user-friendly titles."
msgstr ""

#: ../develop/plone/functionality/collections.rst:62
msgid "In Plone 4.2, the Collection configlet is no longer listed in Site Setup. But you can still access it here: http://localhost:8080/Plone/portal_atct/atct_manageTopicIndex."
msgstr ""

#: ../develop/plone/functionality/collections.rst:64
msgid "New criteria can be created through-the-web in Site setup -> Collection section.  Click \"All fields\" to see unenabled portal_catalog criteria.  Later the edited settings can be exported to GenericSetup XML profile using portal_setup tool (no need to create profile XMl files by hand)."
msgstr ""

#: ../develop/plone/functionality/collections.rst:66
msgid "portal_catalog indices can be added through-the-web on ZMI portal_catalog tool tabs."
msgstr ""

#: ../develop/plone/functionality/collections.rst:68
msgid "If you still want to create XML files by hand, read more about it in `Enable Collection Indices (fields for searching) for custom types HOW TO <https://plone.org/documentation/how-to/enable-collection-indices-fields-for-searching-for-custom-types>`_."
msgstr ""

#: ../develop/plone/functionality/collections.rst:71
msgid "Sticky sorting"
msgstr ""

#: ../develop/plone/functionality/collections.rst:75
msgid "http://stackoverflow.com/questions/8791132/how-to-create-sticky-news-items-in-plone-4"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:3
msgid "Contact forms"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:10
msgid "Plone ships with a"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:12
msgid "site contact form which is form-to-mail to the site administration email"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:14
msgid "document comment form"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:16
msgid "email this to friend form"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:18
msgid "Default address /contact-info."
msgstr ""

#: ../develop/plone/functionality/contactform.rst:21
msgid "Customizing site contact form"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:23
msgid "Contact form files are"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:25
msgid "Products/CMFPlone/skins/plone_templates/contact-info.cpt"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:27
msgid "Products/CMFPlone/skins/plone_templates/contact-info.cpt.metadata"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:29
msgid "Products/CMFPlone/skins/plone_templates/site_feedback_template.pt"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:31
msgid "Products/CMFPlone/skins/plone_formscripts/validate_feedback.vpy"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:33
msgid "Products/CMFPlone/skins/plone_formscripts/send_feedback.cpy"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:35
msgid "Products/CMFPlone/skins/plone_formscripts/send_feedback.cpy.metadata"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:37
msgid "Products/CMFPlone/skins/plone_formscripts/send_feedback_site.cpy"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:39
msgid "Products/CMFPlone/skins/plone_formscripts/send_feedback_site.cpy.metadata"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:41
msgid "Inspect the files to known which you need to change. Copy these files to skin layer folder (any folder under skins) in your add-on product."
msgstr ""

#: ../develop/plone/functionality/contactform.rst:46
msgid "Different contact for is displayed for logged-in and anonymous users. Logged in user email is not asked, but one stored in member properties is used."
msgstr ""

#: ../develop/plone/functionality/contactform.rst:52
msgid "Below is an example how to add \"phone number\" field for all *not logged in* users feedback form."
msgstr ""

#: ../develop/plone/functionality/contactform.rst:55
msgid "Add a new optional field to contact-info.cpt (language hardcoded)::"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:76
msgid "Refer this field in site_feedback_template.pt::"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:106
msgid "As a crude hack we add new field to the very bottom of the email, as everything side <div i18n:translate> is replaced from translation catalogs."
msgstr ""

#: ../develop/plone/functionality/contactform.rst:110
msgid "Replacing the site contact form with a content object"
msgstr ""

#: ../develop/plone/functionality/contactform.rst:112
msgid "Sometimes you want to turn off the builtin form in favour of a piece of content. For example you might want a PloneFormGen form that content editors can alter. Naming your content item ``contact-info`` works because Zope traversal will find your content item before the page template. However Plone won't allow a new piece of content to be named ``contact-info`` since that's a reserved identifier, so the trick is to rename it in the ZMI from the Plone-generated ``contact-info-1`` back to ``contact-info``."
msgstr ""

#: ../develop/plone/functionality/contactform.rst:121
msgid "This works for ``accessibility-info`` too."
msgstr ""

#: ../develop/plone/functionality/contactform.rst:123
msgid "If you have a PFG contact form at, say, ``about/contact-us`` and want to turn off the builtin ``contact-info`` form, use the rename trick to create a ``contact-info`` Link object at the site root that points to your new form. Through acquisition, even URLS like ``events/contact-info`` will successfully redirect to your custom form."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:3
msgid "Site setup and configuration"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:7
msgid "How to create settings for your add-on product and how to programmatically add new Plone control panel entries."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:15
msgid "This documentation tells you how to create new \"configlets\" to Plone site setup control panel."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:18
msgid "Configlets can be created in two ways:"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:20
msgid "Using the ``plone.app.registry`` configuration framework for Plone (recommended);"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:22
msgid "Using any :doc:`view code </develop/plone/views/browserviews>`."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:26
msgid "``plone.app.registry``"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:28
msgid "``plone.app.registry`` is the state of the art way to add settings for your Plone 4.x+ add-ons."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:31
msgid "For tutorial and more information please see the `PyPi page <https://pypi.python.org/pypi/plone.app.registry>`_."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:34
msgid "Example products:"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:36
msgid "https://pypi.python.org/pypi/collective.gtags"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:38
msgid "https://plone.org/products/collective.habla"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:40
msgid "https://pypi.python.org/pypi/collective.xdv"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:43
msgid "Minimal example"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:45
msgid "Below is a minimal example for creating a configlet using ``plone.app.registry``."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:47
msgid "It is based on the `youraddon template <https://github.com/miohtama/sane_plone_addon_template/blob/master>`_. The add-on package in this case is called `silvuple <https://github.com/miohtama/silvuple>`_."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:52
msgid "In ``buildout.cfg``, make sure you have the ``extends`` line for Dexterity (see the `Dexterity installation guide <https://plone.org/products/dexterity/documentation/how-to/install>`_."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:57
msgid "``setup.py``::"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:61
#: ../develop/plone/i18n/language.rst:379
msgid "``configure.zcml``"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:83
#: ../develop/plone/functionality/controlpanel.rst:231
msgid "``settings.py``::"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:124
msgid "``profiles/default/controlpanel.xml``"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:149
msgid "``profiles/default/registry.xml``"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:163
msgid "Control panel widget settings"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:165
msgid "``plone.app.registry`` provides the ``RegistryEditForm`` class, which is a subclass of ``z3c.form.form.Form``."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:168
msgid "It has two places to override which widgets will be used for which field:"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:171
msgid "``updateFields()`` may set widget factories, i.e. widget type, to be used;"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:173
msgid "``updateWidgets()`` may play with widget properties and widget values shown to the user."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:176
msgid "Example (``collective.gtags`` project, ``controlpanel.py``)::"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:196
msgid "``plone.app.registry`` imports --- backwards compatibility"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:198
msgid "You need this if you started using ``plone.app.registry`` before April 2010."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:200
msgid "There is a change concerning the 1.0b1 codebase::"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:213
msgid "Configlets without ``plone.registry``"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:215
msgid "Just add ``controlpanel.xml`` pointing to your custom form."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:219
msgid "Content type choice setting"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:221
msgid "Often you need to have a setting whether a certain functionality is enabled on particular content types."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:224
msgid "Here are the ingredients:"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:226
msgid "A custom schema-defined interface for settings (``registry.xml`` schemas don't support multiple-choice widgets in ``plone.app.registry`` 1.0b2);"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:229
msgid "a vocabulary factory to pull friendly type information out of ``portal_types`` ."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:283
msgid "``profiles/default/registry.xml``:"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:303
msgid "Configuring Plone products from buildout"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:305
msgid "See a section in the `Buildout chapter <http://docs.plone.org/4/en/old-reference-manuals/buildout/additional.html#configuring-products-from-buildout>`_"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:309
msgid "Configuration using environment variables"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:311
msgid "If your add-on requires \"setting file\" for few simple settings you can change for each buildout you can use operating system environment variables."
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:315
msgid "For example, see:"
msgstr ""

#: ../develop/plone/functionality/controlpanel.rst:317
msgid "https://pypi.python.org/pypi/Products.LongRequestLogger"
msgstr ""

#: ../develop/plone/functionality/dashboard.rst:3
msgid "Dashboard"
msgstr ""

#: ../develop/plone/functionality/dashboard.rst:10
msgid "Dashboard is a \"block\" in user preferences."
msgstr ""

#: ../develop/plone/functionality/dashboard.rst:13
msgid "Tutorial"
msgstr ""

#: ../develop/plone/functionality/dashboard.rst:15
msgid "https://plone.org/documentation/kb/setup-a-custom-dashboard"
msgstr ""

#: ../develop/plone/functionality/discussion.rst:3
msgid "Discussion and comments"
msgstr ""

#: ../develop/plone/functionality/discussion.rst:7
msgid "How to control commenting and discussion in Plone programmatically"
msgstr ""

#: ../develop/plone/functionality/discussion.rst:15
msgid "``plone.app.discussion`` provides basic in-site discussion support."
msgstr ""

#: ../develop/plone/functionality/discussion.rst:17
msgid "Disqus is a popular external <iframe> embed service used for commenting."
msgstr ""

#: ../develop/plone/functionality/discussion.rst:21
msgid "http://packages.python.org/plone.app.discussion/"
msgstr ""

#: ../develop/plone/functionality/discussion.rst:23
msgid "https://pypi.python.org/pypi/plone.app.discussion"
msgstr ""

#: ../develop/plone/functionality/discussion.rst:26
msgid "Content type support"
msgstr ""

#: ../develop/plone/functionality/discussion.rst:28
msgid "Enable discussion in :doc:`portal_types </develop/plone/content/types>` for each content typ It's the *Allow Discussion* checkbox."
msgstr ""

#: ../develop/plone/functionality/discussion.rst:31
msgid "Discussion shows up as ``plone.comments`` viewlet in ``plone.app.layout.viewlets.interfaces.IBelowContent`` viewlet manager."
msgstr ""

#: ../develop/plone/functionality/discussion.rst:35
msgid "Getting total comment count"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:3
msgid "Expressions"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:7
msgid "Expressions are string templates or Python expressions which are used in various places in Plone for templates, action conditions and URL generation."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:17
msgid "Expressions are part of :term:`TAL`, the Template Attribute Language. They are used in Zope Page Templates (:term:`ZPT`) and as part of workflow definitions, among other things. You might want to use expressions in your own add-on product to provide user-written conditions for viewlet visibility, portlets, dynamic text, etc."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:24
msgid "The authoritative reference is `Appendix C: Zope Page Templates Reference <http://docs.zope.org/zope2/zope2book/AppendixC.html>`_ of the `Zope 2 Book <http://docs.zope.org/zope2/zope2book/index.html>`_"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:28
msgid "Expressions are used in:"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:30
msgid "the ``tal:condition``, ``tal:content``, ``tal:replace``, ``tal:attribute``, ``tal:define`` :term:`TAL` directives;"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:33
msgid "``portal_css``, ``portal_javascript`` and other resource managers, to express when a resource should be included or not;"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:36
msgid "``portal_actions`` to define when content, site and user actions are visible."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:40
msgid "Expression types"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:42
msgid "There are three main categories of expressions."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:44
msgid "Expression can contain an optional ``protocol:`` prefix to determine the expression type."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:48
msgid "path expression (default)"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:50
msgid "Unless you specify an expression type using ``python:`` or ``string:`` notation, a `path expression <http://docs.zope.org/zope2/zope2book/AppendixC.html#tales-path-expressions>`_ is assumed."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:55
msgid "Path expressions use slashes for traversal (:doc:`traversing <../serving/traversing>`), and will implicitly call callables."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:59
msgid "Example: call the ``Title()`` method on the ``context`` object (finding it by :term:`acquisition` if necessary) and return its value::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:65
msgid "Variables can be included using ``?``. Example: access a folder using the id stored in the ``myItemId`` variable, and return its title::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:73
msgid "With this kind of usage, if the variable you're dereferencing isn't sanitized, there could be security ramifications. Use ``python:restrictedTraverse()`` instead if you need to use variables in your path parts."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:79
msgid "__call__() and nocall: behavior in TAL path traversing"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:81
msgid "The TAL path expression will call Python callable objects by default."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:83
msgid "If you try to get a hold of a :doc:`helper view </develop/plone/views/browserviews>` like this::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:87
msgid "You might get this exception::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:95
msgid "It basically means that your view does not have a template assigned and the traversing logic tries to render that template."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:98
msgid "This happens because"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:100
msgid "`` context/@@comments_view`` creates a view instance"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:102
msgid "then calls its ``__call__()`` method"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:104
msgid "the default ``BrowserView.__call__()``  behavior  to render a template by doing::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:109
msgid "Because your view does not have a template assigned it also lacks self.index attribute"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:111
msgid "The workaround for cases like this is to use ``nocall::`` traversing::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:117
msgid "``string:`` expressions"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:119
msgid "Do string replace operation."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:126
msgid "``python:`` expression"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:128
msgid "Evaluate as Python code."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:136
msgid "Expression variables"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:138
msgid "Available expression variables are defined in ``CMFCore/Expressions.py``::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:154
msgid "You can also access :doc:`helper views </develop/plone/misc/context>` directly by name."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:157
msgid "Using expressions in your own code"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:159
msgid "Expressions are persistent objects. You usually want to attach them to something, but this is not necessary."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:190
msgid "Custom expression using a helper view"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:192
msgid "If you need to add complex Python code to your expression conditions it is best to put this code in a BrowserView and expose it as a method."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:196
msgid "Then you can call the method on a view from a TALES expression::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:200
msgid "Your view code would look like::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:215
msgid "Register the view as \"my_view_name\", using ``configure.zcml`` as usual."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:217
msgid "You can use context interfaces like"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:221
msgid "``zope.interface.Interface`` (or ``*``)"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:223
msgid "to make sure that this view is available on all content objects, as TALES will be evaluated on every page, depending on what kind of content the page will present."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:228
msgid "Expression examples"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:231
msgid "Get current language"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:233
msgid "Use :doc:`IPortalState context helper </develop/plone/misc/context>` view."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:235
msgid "Example how to generate a multilingual-aware RSS feed link::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:239
msgid "... or you can use a Python expression for comparison::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:244
msgid "Check current language in TAL page template"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:246
msgid "For example, in case you need to generate HTML such as links conditionally, depending on the current language:"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:256
msgid "Example to have different footers (or something similar) for different languages:"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:268
msgid "Check if object implements an interface"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:274
msgid "Returns ``True`` or ``False``. Useful for actions."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:277
msgid "Check if a certain hostname was used for HTTP request"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:285
msgid "Check if the object is a certain content type"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:293
msgid "Get portal description"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:302
msgid "Doing <input CHECKED> and boolean like HTML attributes in TAL"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:304
msgid "To have a value appear in TAL or not you can do::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:308
msgid "We execute a Python snippet which"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:310
msgid "We will dynamically create a *checked* attribute on `<input>` based on Python evaluation"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:312
msgid "Return \"checked\" string if some condition we check in Python evaluates to True"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:314
msgid "Otherwise we return an empty string and TAL won't output this attribute (TODO: has TAL some special support for CHECKED and SELECTED attributes)"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:319
msgid "Python 2.6, Plone 4+ syntax"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:324
msgid "Through-the-web scripts"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:328
msgid "Move TTW script info to its own chapter."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:330
msgid "The Zope Management Interface allows one to create, edit and execute :doc:`RestrictedPython sandboxed scripts </develop/plone/security/sandboxing>` directly through the web management interface. This functionality is generally discouraged nowadays in the favor of :doc:`view classes </develop/plone/views/browserviews>`."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:338
msgid "Creating a TTW Python script in an add-on installer"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:340
msgid "Here is an example of how one can pre-seed a Python script in an add-on installer :doc:`GenericSetup profile </develop/addons/components/genericsetup>`."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:343
msgid "``setuphandlers.py``::"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:393
msgid "See `the full example <https://github.com/collective/collective.scriptedredirect/>`_."
msgstr ""

#: ../develop/plone/functionality/expressions.rst:396
msgid "Dynamically hiding content menu items"
msgstr ""

#: ../develop/plone/functionality/expressions.rst:398
msgid "http://blog.affinitic.be/2013/03/04/filter-menu-using-a-grok-view/"
msgstr ""

#: ../develop/plone/functionality/index.rst:3
msgid "Functionality and features"
msgstr ""

#: ../develop/plone/functionality/index.rst:7
msgid "Explanations how specific user visible features are programmed in Plone."
msgstr ""

#: ../develop/plone/functionality/locks.rst:3
msgid "Locked content"
msgstr ""

#: ../develop/plone/functionality/locks.rst:5
msgid "Since Plone 3.1 content edit locking has been supported. This feature is to prevent simultaneous conflicting edits of the same content."
msgstr ""

#: ../develop/plone/functionality/locks.rst:8
msgid "If the editor forgot to press Save or Cancel explicit unlocking must be performed on locked objects if you want to modify them. Unfortunately the side-effect is that if site has objects left to locked state they usually interfere with your programming."
msgstr ""

#: ../develop/plone/functionality/locks.rst:13
msgid "Since Plone 3.3 the feature can be disabled from the site settings."
msgstr ""

#: ../develop/plone/functionality/locks.rst:16
msgid "Unlocking content"
msgstr ""

#: ../develop/plone/functionality/locks.rst:18
msgid "Unlocking can be performed from the object view or edit tab."
msgstr ""

#: ../develop/plone/functionality/locks.rst:21
msgid "Unlocking from Zope control panel"
msgstr ""

#: ../develop/plone/functionality/locks.rst:23
msgid "http://destefano.wordpress.com/2009/01/15/more-fun-with-plone-locks/"
msgstr ""

#: ../develop/plone/functionality/locks.rst:26
msgid "Scripts to unlock all site content"
msgstr ""

#: ../develop/plone/functionality/locks.rst:28
msgid "http://m10880.kaivo.com/Plone/help-center/how-to/unlock-webdav-locks"
msgstr ""

#: ../develop/plone/functionality/locks.rst:30
msgid "http://www.zopelabs.com/cookbook/1002703851"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:3
msgid "Portlets"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:7
msgid "Programmatical manipulation of portlets in Plone."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:14
msgid "Portlets are editable boxes in the left and right side bar of Plone user interface. Add-ons allow portlets in other parts in of the user interface too, like above and below the content."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:17
msgid "This document contains quick how-to information only. Please visit the `Portlets reference manual <http://docs/plone.org/4/en/old-reference-manuals/portlets/index.html>`_ for in-depth information."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:21
msgid "Related add-ons and packages"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:23
msgid "You might want to check these before starting to write your own portlet - for ready solution, for examples, for inspiration."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:26
msgid "`Create your own portlet managers with collective.panels <https://pypi.python.org/pypi/collective.panels>`_"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:28
msgid "https://github.com/collective/collective.portletalias"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:30
msgid "https://plone.org/products/contentwellportlets"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:32
msgid "https://github.com/miohtama/imageportlet"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:34
msgid "https://github.com/collective/collective.cover"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:41
msgid "Creating a portlet"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:43
msgid "You need a paster-compatible product skeleton created using *paster create -t plone* or *paster create -t archetypes* commands."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:46
msgid "Use project specific paster command *paster addcontent portlet* to create a code skeleton for your new portlet."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:53
msgid "Subclassing a portlet"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:55
msgid "You can subclass a portlet to create a new portlet type with your enhanced functionality."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:57
msgid "`subclassing portlets <http://docs/plone.org/4/en/old-reference-manuals/portlets/appendix/subclassing.html>`_"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:60
msgid "Using z3c.form in portlets"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:62
msgid ":doc:`z3c.form </develop/plone/forms/z3c.form>` is a modern form library for Plone. The out of the box Plone portlets use older *zope.formlib*."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:65
msgid "Discussion related to the matter"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:67
msgid "http://stackoverflow.com/questions/5174905/can-i-use-z3c-form-on-plone-portlets-instead-of-zope-formlib"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:70
msgid "Overriding portlet rendering"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:72
msgid "Use ``<plone:portletRenderer>`` directive. Specify 1) layer, 2) template and/or 3) class 4) portlet interface."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:75
msgid "You need ``<include package=\"\">`` directive for the package whose portlet you are going to override."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:98
msgid "update() and render()"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:100
#: ../develop/plone/views/viewlets.rst:237
msgid "These methods should honour `zope.contentprovider.interfaces.IContentProvider call contract <https://github.com/zopefoundation/zope.contentprovider/blob/3.7.2/src/zope/contentprovider/interfaces.py>`_."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:103
msgid "available property"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:105
msgid "The portlet renderer can define available property to hint the portlet manager when the portlet should be rendered."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:107
msgid "Example ::"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:117
msgid "Iterate portlets assigned to the portal root"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:119
msgid "Below is an simple example how to print all portlets which have been assigned to the portal root::"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:146
msgid "Looking up a portlet by id"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:148
msgid "Here are some tips how to extract the portlet id data in the portlet renderer to pass around to be consumed elsewhere."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:151
msgid "portlets.py::"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:175
msgid "Then we can re-look-up this portlet and its image field, based on the field name, in the downloader view::"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:270
msgid "See *imageportlet* add-on for the complete example."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:274
msgid "Walking through every portlet on the site"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:276
msgid "The following code iterates through all portlets assigned directly to content items. This excludes dashboard, group and content type based portlets. Then it prints some info about them and renders them."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:350
msgid "For more information about portlet assignments and managers, see"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:352
msgid "https://github.com/plone/plone.app.portlets/blob/master/plone/app/portlets/tests/test_mapping.py"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:354
msgid "https://github.com/plone/plone.app.portlets/blob/master/plone/app/portlets/tests/test_traversal.py"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:356
msgid "https://github.com/plone/plone.app.portlets/blob/master/plone/app/portlets/configure.zcml"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:358
msgid "https://github.com/plone/plone.portlets/blob/master/plone/portlets/interfaces.py"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:360
msgid "https://github.com/zopefoundation/zope.contentprovider/blob/3.7.2/src/zope/contentprovider/interfaces.py (for portlet renderers)"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:363
msgid "Checking if a certain context portlet is active on a page"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:365
msgid "Iterate through portlet managers by name"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:367
msgid "Get portlet retriever for the manager"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:369
msgid "Get portlets"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:371
msgid "Check if the portlet assignment provides your particular portlet marker interface"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:400
msgid "Rendering a portlet"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:402
msgid "Below is an example how to render a portlet in Plone"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:404
msgid "A portlet is assigned to some context in some portlet manager"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:406
msgid "We can dig these assignments up by portlet id (not user visible) or portlet type (portlet assignment interface)"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:408
msgid "How to get your portlet HTML::"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:499
msgid "How to use this code in your own view, please see `collective.portletalias source <https://github.com/collective/collective.portletalias/blob/master/collective/portletalias/portlets/aliasportlet.py#L73>`_"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:503
msgid "http://blog.mfabrik.com/2011/03/10/how%C2%A0to-render-a-portlet-in-plone/"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:506
msgid "Hiding unwanted portlets"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:508
msgid "Example portlets.xml::"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:527
msgid "Portlet names can be found in ``plone.app.portlets/configure.zcml``."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:531
msgid "http://stackoverflow.com/questions/5897656/disabling-portlet-types-site-wide-in-plone"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:534
msgid "Disabling right or left columns in a view or template"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:536
msgid "Sometimes, when you work with custom views and custom templates you need to disable right or left column for portlets."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:539
msgid "This is how you do from within a template:"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:547
msgid "And this is how you do it from within a view::"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:559
msgid "Source: http://stackoverflow.com/questions/5872306/how-can-i-remove-portlets-in-edit-mode-with-plone-4"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:562
msgid "Disabling right or left columns on a context"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:564
msgid "Sometimes you just want to turn off the portlets in a certain context that doesn't have a template or fancy view.  To do this in code do this::"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:584
msgid "Or just do it using GenericSetup like a sane person:"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:586
msgid "https://plone.org/documentation/manual/developer-manual/generic-setup/reference/portlets"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:588
msgid "https://plone.org/products/plone/roadmap/203"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:591
msgid "Creating a new portlet manager"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:593
msgid "If you need additional portlet slots at the site. In this example we use ``Products.ContentWellCode`` to provide us some facilities as a dependency."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:597
msgid "Create a viewlet which will handle portlet rendering in a normal page mode. Have several portlet slots, a.k.a. wells, where you can drop in portlets. Wells are rendered horizontally side-by-side and portlets going in from top to bottom."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:602
msgid "Register this viewlet in a viewlet manager where you wish to show your portlets on the main template"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:605
msgid "Have a management view which allows you to shuffle portlets around. This is borrowed from ``Products.ContentWellPortlets``."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:608
msgid "Register portlet wells in ``portlets.xml`` - note that one management view can handle several slots as in the example below"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:611
msgid "The code skeleton works against `this Plone add-on template <https://github.com/miohtama/sane_plone_addon_template>`_."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:613
msgid "Example portlet manager viewlets.py::"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:735
msgid "Example ZCML bit"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:759
msgid "The page template for the manager ``manage-portlets-colophon.pt`` is the following"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:841
msgid "Then we have ``portlets-colophon.pt`` page template for the viewlet which renders the portlets and related management link"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:872
msgid "Finally there is ``portlets.xml`` which lists all the portlet managers and associates them with the used interface"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:912
msgid "https://weblion.psu.edu/svn/weblion/weblion/Products.ContentWellPortlets/trunk/Products/ContentWellPortlets/"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:914
msgid "http://stackoverflow.com/questions/9766744/dynamic-tal-provider-expressions"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:917
msgid "Fixing relative links for static text portlets"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:921
msgid "This should be no longer issue with Plone 4.1 and TinyMCE 1.3+ when using UID links."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:924
msgid "Example how to convert links in all static text portlets::"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:968
msgid "Other resources and examples"
msgstr ""

#: ../develop/plone/functionality/portlets.rst:970
msgid "`Static text portlet <https://github.com/plone/plone.portlet.static/blob/master/plone/portlet/static/>`_."
msgstr ""

#: ../develop/plone/functionality/portlets.rst:972
msgid "`Templated portlet <https://github.com/collective/collective.easytemplate/blob/master/collective/easytemplate/browser/portlets/templated.py>`_"
msgstr ""

#: ../develop/plone/functionality/rss.rst:3
msgid "RSS"
msgstr ""

#: ../develop/plone/functionality/rss.rst:7
msgid "Programming RSS feeds on Plone sites"
msgstr ""

#: ../develop/plone/functionality/rss.rst:14
msgid "Plone can generate RSS feeds from folderish content types (folder / collection). If you want to aggregate content from all the site to RSS feed, you first create a collection content item and then enable RSS feed on this collection content item."
msgstr ""

#: ../develop/plone/functionality/rss.rst:19
msgid "Creating a global, language neutral, Plone site content aggregator"
msgstr ""

#: ../develop/plone/functionality/rss.rst:21
msgid "These instructions tell you how to create a RSS feed collection for your Plone site. You can choose what content types ends up to the RSS stream. Also, the aggregator is language aware so that it works correctly on multilingual sites."
msgstr ""

#: ../develop/plone/functionality/rss.rst:26
msgid "Creating the collection"
msgstr ""

#: ../develop/plone/functionality/rss.rst:27
msgid "First we create a collection which will aggregate all the site content for the RSS feed."
msgstr ""

#: ../develop/plone/functionality/rss.rst:30
msgid "Go to site root"
msgstr ""

#: ../develop/plone/functionality/rss.rst:32
msgid "Add new collection"
msgstr ""

#: ../develop/plone/functionality/rss.rst:34
msgid "Title \"Your site name - RSS feed\""
msgstr ""

#: ../develop/plone/functionality/rss.rst:36
msgid "On *Category* tab, set *Language* to neutral"
msgstr ""

#: ../develop/plone/functionality/rss.rst:38
msgid "On *Settings* tab, choose *Exclude from navigation*"
msgstr ""

#: ../develop/plone/functionality/rss.rst:40
#: ../develop/plone/functionality/rss.rst:61
msgid "Save"
msgstr ""

#: ../develop/plone/functionality/rss.rst:42
msgid "Go to site root / *Contents* tab"
msgstr ""

#: ../develop/plone/functionality/rss.rst:44
msgid "Check your RSS content collection"
msgstr ""

#: ../develop/plone/functionality/rss.rst:46
msgid "Choose *Rename* button"
msgstr ""

#: ../develop/plone/functionality/rss.rst:48
msgid "Change item id to ``site-feed``"
msgstr ""

#: ../develop/plone/functionality/rss.rst:51
msgid "Collecting content for the RSS feed"
msgstr ""

#: ../develop/plone/functionality/rss.rst:53
msgid "Go to your collection content item"
msgstr ""

#: ../develop/plone/functionality/rss.rst:55
msgid "Go to *criteria* tab"
msgstr ""

#: ../develop/plone/functionality/rss.rst:57
msgid "Set *content types* criteria"
msgstr ""

#: ../develop/plone/functionality/rss.rst:59
msgid "Set sort by publishing date, reverse"
msgstr ""

#: ../develop/plone/functionality/rss.rst:63
msgid "Now, choose content items you want to appear in the feed and *Save* again"
msgstr ""

#: ../develop/plone/functionality/rss.rst:65
msgid "You can now preview the content of RSS feed on *View* tab."
msgstr ""

#: ../develop/plone/functionality/rss.rst:69
msgid "Linking the RSS feed to site action links"
msgstr ""

#: ../develop/plone/functionality/rss.rst:71
msgid "*Site actions* is the top right link slot on the Plone site. By default, Plone site wide RSS link will appear there if enabled."
msgstr ""

#: ../develop/plone/functionality/rss.rst:74
msgid "Go to portal_actions in ZMI"
msgstr ""

#: ../develop/plone/functionality/rss.rst:76
msgid "Go to */portal_actions/site_actions/rss*"
msgstr ""

#: ../develop/plone/functionality/rss.rst:78
msgid "In URL expression type::"
msgstr ""

#: ../develop/plone/functionality/rss.rst:82
msgid "This expression will"
msgstr ""

#: ../develop/plone/functionality/rss.rst:84
msgid "Get URL for *site-feed* object, using *RSS* template"
msgstr ""

#: ../develop/plone/functionality/rss.rst:86
msgid "Will explicitly set HTTP GET query parameter *set_language* which can be used to manually force Plone content language. We use the current language (from the user cookie) here, to make sure that the user gets RSS feed in correct language on multilingual sites."
msgstr ""

#: ../develop/plone/functionality/rss.rst:90
msgid "More about :doc:`expressions </develop/plone/functionality/expressions>`."
msgstr ""

#: ../develop/plone/functionality/rss.rst:93
msgid "Publish and test"
msgstr ""

#: ../develop/plone/functionality/rss.rst:95
msgid "Publish collection after the content seems to be right, using the workflow menu on the collection content item."
msgstr ""

#: ../develop/plone/functionality/rss.rst:98
msgid "Test RSS feed by copy-pasting RSS URL from the site action to your RSS Reader, like *Google Reader*."
msgstr ""

#: ../develop/plone/functionality/rss.rst:102
msgid "Syndication Settings"
msgstr ""

#: ../develop/plone/functionality/rss.rst:105
msgid "Plone <= 4.2"
msgstr ""

#: ../develop/plone/functionality/rss.rst:107
msgid "``portal_syndication`` is a persistent utility  managing RSS settings. It provides settings to for formatting RSS feeds (frequency of updates, number of items)."
msgstr ""

#: ../develop/plone/functionality/rss.rst:110
msgid "https://github.com/plone/Products.CMFPlone/blob/4.2.x/Products/CMFPlone/SyndicationTool.py"
msgstr ""

#: ../develop/plone/functionality/rss.rst:113
msgid "Plone >= 4.3"
msgstr ""

#: ../develop/plone/functionality/rss.rst:115
msgid "In Plone 4.3, the ``portal_syndication`` utility was replaced by a browser view and registry settings."
msgstr ""

#: ../develop/plone/functionality/rss.rst:117
msgid "The view may be traversed to from any context with ``@@syndication-util``."
msgstr ""

#: ../develop/plone/functionality/rss.rst:119
msgid "for example, in Plone 4.2 you check for the ability to syndicate a context like so:"
msgstr ""

#: ../develop/plone/functionality/rss.rst:133
msgid "In Plone 4.3, this is updated to look like this:"
msgstr ""

#: ../develop/plone/functionality/rss.rst:147
msgid "The ``syndication-util`` view is found in ``Products.CMFPlone.browser.syndication.utils``"
msgstr ""

#: ../develop/plone/functionality/rss.rst:149
msgid "https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/browser/syndication/utils.py"
msgstr ""

#: ../develop/plone/functionality/rss.rst:152
msgid "Publishing content through RSS in Plone 4"
msgstr ""

#: ../develop/plone/functionality/rss.rst:154
msgid "Access /content/synPropertiesForm and publish."
msgstr ""

#: ../develop/plone/functionality/rss.rst:157
msgid "RSS feed content"
msgstr ""

#: ../develop/plone/functionality/rss.rst:159
msgid "RSS feed content is the content of the folder or special stream provided by the content type."
msgstr ""

#: ../develop/plone/functionality/rss.rst:162
msgid "``portal_syndication`` uses the following logic to pull the content::"
msgstr ""

#: ../develop/plone/functionality/rss.rst:172
msgid "Changing RSS feed template"
msgstr ""

#: ../develop/plone/functionality/rss.rst:174
msgid "RSS feed is stored in template *CMFPlone/skins/plone_templates/rss_template*."
msgstr ""

#: ../develop/plone/functionality/rss.rst:177
msgid "Enabling full body text in RSS feed"
msgstr ""

#: ../develop/plone/functionality/rss.rst:179
msgid "See `this example <http://rudd-o.com/en/linux-and-free-software/a-hack-to-enable-full-text-feeds-in-plone>`_."
msgstr ""

#: ../develop/plone/functionality/sitemap.rst:3
msgid "Sitemap protocol"
msgstr ""

#: ../develop/plone/functionality/sitemap.rst:10
msgid "Sitemap is used to submit the site content to search engines."
msgstr ""

#: ../develop/plone/functionality/sitemap.rst:12
msgid "http://www.google.com/webmasters/"
msgstr ""

#: ../develop/plone/functionality/sitemap.rst:15
msgid "Plone sitemap"
msgstr ""

#: ../develop/plone/functionality/sitemap.rst:17
msgid "Plone supports basic sitemap out of the box."
msgstr ""

#: ../develop/plone/functionality/sitemap.rst:19
msgid "https://github.com/plone/plone.app.layout/blob/master/plone/app/layout/sitemap/sitemap.py"
msgstr ""

#: ../develop/plone/functionality/sitemap.rst:22
msgid "Customized sitemap"
msgstr ""

#: ../develop/plone/functionality/sitemap.rst:26
msgid "https://plonegomobile.googlecode.com/svn/trunk/gomobile/gomobile.mobile/gomobile/mobile/browser/sitemap.py"
msgstr ""

#: ../develop/plone/functionality/sitemap.rst:29
msgid "Enabling sitemap programmatically"
msgstr ""

#: ../develop/plone/functionality/sitemap.rst:31
msgid "For unit tests::"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:3
msgid "Debug mode"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:7
msgid "Plone can be put in the debug mode where one can diagnose start up failures and any changes to CSS, Javascript and page templates take effect immediately."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:15
msgid "By default when you start Plone you start it in a **production mode**."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:17
msgid "Plone is faster"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:19
msgid "CSS and Javascript files are *merged* instead of causing multiple HTTP request to load these assets. CSS and Javascript behavior is different in production versus debug mode, especially with files with syntax errors because of merging."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:23
msgid "Plone does not reload changed files from the disk"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:25
msgid "Because of above optimizations the development against a production mode is not feasible. Instead you need to start Plone in debug mode (also known as development mode) if you are doing any site development."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:29
msgid "In **debug mode**"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:31
msgid "If Plone start-up fails, the Python traceback of the error is printed in the terminal"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:33
msgid "All logs and debug messages are printed in the terminal; Zope process does not detach from the terminal"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:36
msgid "Plone is slower"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:38
msgid "CSS and Javascript files are read file-by-file so line numbers match on the actual files on the disk. (*portal_css* and *portal_javascript* is set to debug mode when Plone is started in debug mode)"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:41
msgid "Plone reloads CSS, Javascript and .pt files when the page is refreshed"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:45
msgid "Plone does not reload .py or .zcml files in the debug mode by default."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:48
msgid "Reloading Python code"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:50
msgid "Reloading Python code automatically can be enabled with `sauna.reload add-on <https://pypi.python.org/pypi/sauna.reload/>`_."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:53
msgid "Javascript and CSS issues with production mode"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:55
msgid "See **portal_css** and **portal_javascript** in ZMI to inspect how your scripts are bundled."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:57
msgid "Make sure your Javascript and CSS files are valid, mergeable and compressable. If they are not then you can tweak the settings for individual file in the corresponding management tool."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:62
msgid "Refresh issues"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:64
msgid "Plone **production mode** should re-read CSS and Javascript files on Plone start-up."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:66
msgid "Possible things to debug and force refresh of static assets"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:68
msgid "Check HTML <head> links and the actual file contents"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:70
msgid "Go to *portal_css*, press *Save* to force CSS rebundling"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:72
msgid "Make sure you are not using *plone.app.caching* and doing caching forever"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:73
msgid "Use `hard browser refresh <http://support.mozilla.org/en-US/questions/746138>`_ to override local cache"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:78
msgid "Starting Plone in debug mode on Microsoft Windows"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:80
msgid "This document explains how to start and run the latest Plone (Plone 4.1.4) on Windows 7. This document explains post-installer steps on how to start and enter into a Plone site. Installation"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:85
msgid "This quick start has been tested on Windows 7.  Installation remains the same on older versions of Windows through WinXP."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:87
msgid "Run installer from `Plone.org <https://plone.org/products>`_ download page"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:89
msgid "The Plone buildout directory will be installed in C:\\\\Plone41"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:91
msgid "The installer will launch your Plone instance when it finishes.  To connect, direct your browser to: http://localhost:8080"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:94
msgid "In the buildout bin directory you'll find the executable files to control Plone instance."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:98
msgid "Starting and Stopping Plone"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:100
msgid "If your Plone instance is shutdown you can start and control it from the command prompt."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:103
msgid "To control Plone you need to execute your command prompt as an administrator."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:105
msgid "In the command prompt enter the following command to access your buildout directory (the varies according to Plone version)::"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:111
msgid "To start Plone in debug mode type::"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:115
msgid "You can interrupt the instance by pressing CTRL-C. This will also take down the Zope application server and your Plone site."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:118
msgid "Accessing Plone"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:120
msgid "When you launch Plone in debug or daemon mode it will take a few moments to launch.  If you are in debug mode, Plone will be ready serve pages when the following line is displayed in your command prompt::"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:124
msgid "When the instance is running and listing to port 8080, point your browser to address on your local computer::"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:128
msgid "The Plone welcome screen will load and you can create your first Plone site directly by clicking the **Create a new Plone Site** button."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:130
msgid "A form will load asking for the *Path Identifier* (aka the site id) and *Title* for a new Plone site.  It will also allow you to select the main site language, and select any add-on products you wish to install with the site."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:133
msgid "These entries can all be modified once the site is created.  Changing the site id is possible, but not recommended."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:135
msgid "To create your site, fill in this form and click the *Create Plone Site* button.  Plone will then create and load your site."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:138
msgid "The url of your local Plone instance will end with the site id you set when setting up your site.  If the site id were *Plone* then the resultant URL is: *http://localhost:8080/Plone*."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:140
msgid "Congratulations! You should be now logged in as an admin to your new Plone instance and you'll see the front page of Plone."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:144
msgid "Starting Plone in debug mode on UNIX"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:147
msgid "Single instance installation (\"zope\")"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:149
msgid "Enter to your installation folder using ``cd`` command (depends on where you have installed Plone)::"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:153
msgid "For root installation the default location is ``/usr/local/Plone``."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:155
msgid "Type in command::"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:159
msgid "Press CTRL+C to stop."
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:162
msgid "Clustered installation (\"zeo\")"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:164
msgid "If you have ZEO cluster mode installation you can start individual processes in debug mode::"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:173
msgid "Determining programmatically whether Zope is in debug mode"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:175
msgid "Zope2's shared global data *Globals*, keeps track on whether Zope2 is started in debug mode or not.::"
msgstr ""

#: ../develop/plone/getstarted/debug_mode.rst:183
msgid "There is a difference between Zope being in debug mode and the Javascript and CSS resource registries being in debug mode (although they will automatically be set to debug mode if you start Zope in debug mode)."
msgstr ""

#: ../develop/plone/getstarted/index.rst:3
msgid "Getting started"
msgstr ""

#: ../develop/plone/getstarted/index.rst:5
msgid "How to get started with Plone development."
msgstr ""

#: ../develop/plone/getstarted/index.rst:12
msgid "Plone is developed in the :doc:`Python </develop/plone/getstarted/python>` programming language. :doc:`You should master Python basics </develop/plone/getstarted/python>` before you can efficiently customize Plone. If you are very new to Python, Plone or software development, it is suggested that you read the `Professional Plone 4 Development book <http://www.packtpub.com/professional-plone-4-development/book>`_ before you attempt to develop your own solutions."
msgstr ""

#: ../develop/plone/getstarted/index.rst:18
msgid "If you quickly want to learn about current best-practices in developing with Plone you should also work through the `Todo list application tutorial <http://tutorialtodoapp.readthedocs.org/en/latest/index.html>`_."
msgstr ""

#: ../develop/plone/getstarted/index.rst:21
msgid "Plone runs on the top of the `Zope 2 application server <zope2.zope.org/>`_, meaning that one Zope 2 server process can contain and host several Plone sites. Plone also uses Zope 3 components. Zope 3 is not an upgrade for Zope 2, but a separate project."
msgstr ""

#: ../develop/plone/getstarted/index.rst:25
msgid "Internally, Plone uses the objected-oriented :doc:`ZODB </develop/plone/persistency/index>` database and the development mindset greatly differs from that of SQL based systems. SQL backends can still be integrated with Plone, like for any other Python application, but this is a more advanced topic."
msgstr ""

#: ../develop/plone/getstarted/index.rst:30
msgid "Installing Plone"
msgstr ""

#: ../develop/plone/getstarted/index.rst:32
msgid "It is recommended that you do Plone development on Linux or OS X. Development on Windows is possible, but you need to have much more experience dealing with Python and Windows related problems, so starting on Windows is not so easy."
msgstr ""

#: ../develop/plone/getstarted/index.rst:36
msgid "See :doc:`installation instructions </manage/installing/installation>` for how to create a Plone installation suitable for development."
msgstr ""

#: ../develop/plone/getstarted/index.rst:40
msgid "Non-programming approaches for customizing Plone"
msgstr ""

#: ../develop/plone/getstarted/index.rst:42
msgid "If you lack programming skill or resources, you can still get some things done in Plone:"
msgstr ""

#: ../develop/plone/getstarted/index.rst:44
msgid "`Plomino is a a powerful and flexible web-based application builder for Plone <http://www.plomino.net>`_"
msgstr ""

#: ../develop/plone/getstarted/index.rst:46
msgid "`PloneFormGen allows you to build forms in a web browser <https://plone.org/products/ploneformgen>`_"
msgstr ""

#: ../develop/plone/getstarted/index.rst:48
msgid "Plone comes with through-the-web Dexterity content type editor"
msgstr ""

#: ../develop/plone/getstarted/index.rst:50
msgid "However, for heavy customization, Python, JavaScript, TAL page templates and CSS programming is needed."
msgstr ""

#: ../develop/plone/getstarted/index.rst:53
msgid "Enabling debug mode"
msgstr ""

#: ../develop/plone/getstarted/index.rst:55
msgid "By default, Plone runs in a *production mode* where changed files in the file system are not reflected in the served HTML. When you start developing Plone you need to first :doc:`put it into a debug mode </develop/plone/getstarted/debug_mode>`."
msgstr ""

#: ../develop/plone/getstarted/index.rst:60
msgid "Plone add-ons as Python packages"
msgstr ""

#: ../develop/plone/getstarted/index.rst:62
msgid "Plone sites can be customized by installing *Plone add-ons*, which add or customize functionality. You can install existing add-ons that others have developed or you can develop and install your own add-ons. Add-ons are developed and distributed as `Python packages <http://packages.python.org/distribute/setuptools.html>`_. Many open-source Python packages, including Plone add-ons, are available from `PyPI (the Python Package index) <https://pypi.python.org>`_."
msgstr ""

#: ../develop/plone/getstarted/index.rst:68
msgid "Plone uses a tool called `Buildout <http://www.buildout.org/>`_ to manage the set of Python packages that are part of your Plone installation. Using Buildout involves using the ``buildout.cfg`` configuration file and the ``bin/buildout`` command."
msgstr ""

#: ../develop/plone/getstarted/index.rst:74
msgid "Finding and installing add-on packages"
msgstr ""

#: ../develop/plone/getstarted/index.rst:76
msgid "Plone add-ons can be found at the `plone.org Products <https://plone.org/products>`_ page or at the  `PyPI (the Python Package index) <https://pypi.python.org>`_."
msgstr ""

#: ../develop/plone/getstarted/index.rst:80
msgid "See the :doc:`Installing add-on packages using buildout </manage/installing/installing_addons>` section for more details."
msgstr ""

#: ../develop/plone/getstarted/index.rst:85
msgid "Creating your first add-on"
msgstr ""

#: ../develop/plone/getstarted/index.rst:89
msgid "Replace ZopeSkel and paster with bobtemplates !!"
msgstr ""

#: ../develop/plone/getstarted/index.rst:91
msgid "Since Python egg package structure is little bit complex, to get started with your first add-on you can create a code skeleton (scaffold) for it using :doc:`bobtemplates for Plone </develop/addons/bobtemplates.plone/README>`."
msgstr ""

#: ../develop/plone/getstarted/index.rst:93
msgid "Mr.Bob with the bobtemplates.plone generates a basic Python egg package with some Plone files in-place."
msgstr ""

#: ../develop/plone/getstarted/index.rst:95
msgid "This package is registered to buildout as a development egg in the ``buildout.cfg`` file."
msgstr ""

#: ../develop/plone/getstarted/index.rst:97
msgid "Buildout is rerun which regenerates your ``bin/instance`` script with the new set of Python eggs."
msgstr ""

#: ../develop/plone/getstarted/index.rst:99
msgid "You start your Plone instance in debug mode."
msgstr ""

#: ../develop/plone/getstarted/index.rst:101
msgid "You install your add-on through ``Add/remove add-ons``"
msgstr ""

#: ../develop/plone/getstarted/index.rst:105
msgid "Remove Plone 3 and ZopeSkel stuff"
msgstr ""

#: ../develop/plone/getstarted/index.rst:107
msgid "If you want to create a package with Dexterity content types please read about :doc:`Setting up a Dexterity project</external/plone.app.dexterity/docs/prerequisite>`."
msgstr ""

#: ../develop/plone/getstarted/index.rst:110
msgid "Plone development workflow"
msgstr ""

#: ../develop/plone/getstarted/index.rst:112
msgid "You never edit Plone files directly. Everything under ``parts`` and ``eggs`` folders in your Plone installation is downloaded from the Internet and dynamically generated by Buildout, based on ``buildout.cfg``. Buildout is free to override these files on any update."
msgstr ""

#: ../develop/plone/getstarted/index.rst:116
msgid "You need to have your own add-on in the ``src/`` folder as created above. There you overlay changes to the existing Plone core through extension mechanisms provided by Plone:"
msgstr ""

#: ../develop/plone/getstarted/index.rst:119
msgid ":doc:`Layers </develop/plone/views/layers>`"
msgstr ""

#: ../develop/plone/getstarted/index.rst:121
msgid ":doc:`Adapters </develop/addons/components/adapters>`"
msgstr ""

#: ../develop/plone/getstarted/index.rst:123
msgid ":doc:`Installation profiles </develop/addons/components/genericsetup>`"
msgstr ""

#: ../develop/plone/getstarted/index.rst:125
msgid "Plone development always happens on your local computer or the development server. The changes are moved to production through version control system like Git or Subversion."
msgstr ""

#: ../develop/plone/getstarted/index.rst:128
msgid "**The best practice is that you install Plone on your local computer for development**."
msgstr ""

#: ../develop/plone/getstarted/index.rst:131
msgid "Plone add-on features"
msgstr ""

#: ../develop/plone/getstarted/index.rst:135
msgid "Explain that Archetypes are old and basically there to support upgraded sites, but that new development should use Dexterity, maybe remove them even ?"
msgstr ""

#: ../develop/plone/getstarted/index.rst:137
msgid "Plone add-ons usually:"
msgstr ""

#: ../develop/plone/getstarted/index.rst:139
msgid "Create custom :doc:`content types </develop/plone/content/index>` or extend existing ones for your specialized need. Plone has two subsystems for <content types: :doc:`Dexterity</develop/plone/content/dexterity>`."
msgstr ""

#: ../develop/plone/getstarted/index.rst:142
msgid "Add new :doc:`views </develop/plone/views/browserviews>` for your site and its content."
msgstr ""

#: ../develop/plone/getstarted/index.rst:144
msgid "Create Python-processed :doc:`forms </develop/plone/forms/index>` on your site."
msgstr ""

#: ../develop/plone/getstarted/index.rst:146
msgid "Theme your site"
msgstr ""

#: ../develop/plone/getstarted/index.rst:150
msgid "A lot of Plone functionality is built on :doc:`Zope 3 development patterns </develop/addons/components/index>` like adapters and interfaces. These design patterns take some time to learn, but they are crucial in complex component based software like Plone."
msgstr ""

#: ../develop/plone/getstarted/index.rst:156
msgid "Development mode restarts"
msgstr ""

#: ../develop/plone/getstarted/index.rst:158
msgid "Plone must be started in the development mode using ``bin/instance fg`` command. Then"
msgstr ""

#: ../develop/plone/getstarted/index.rst:160
msgid "Javascript files are in debug mode and automatically loaded when you hit refresh"
msgstr ""

#: ../develop/plone/getstarted/index.rst:162
msgid "CSS files are in debug mode and automatically loaded when you hit refresh"
msgstr ""

#: ../develop/plone/getstarted/index.rst:164
msgid "TAL page templates (.pt files) are automatically reloaded on every request"
msgstr ""

#: ../develop/plone/getstarted/index.rst:166
msgid ":doc:`GenericSetup XML files are reloaded </develop/addons/components/genericsetup>`"
msgstr ""

#: ../develop/plone/getstarted/index.rst:168
msgid "Please note that Plone development mode does not reload ``.py`` or ``.zcml`` files by default. This is possible, however.  Use the `sauna.reload <https://pypi.python.org/pypi/sauna.reload/>`_ package to make Plone reload your Python code automatically when it is changed."
msgstr ""

#: ../develop/plone/getstarted/index.rst:173
msgid "Through-the-web customizations"
msgstr ""

#: ../develop/plone/getstarted/index.rst:175
msgid "Some aspects of Plone can be changed through the Zope Management Interface (ZMI). Documentation here does not focus on extending functionality through the ZMI because this method is severely limited and usually can take you only half way there."
msgstr ""

#: ../develop/plone/getstarted/index.rst:182
msgid "We have a :doc:`tutorial </develop/addons/helloworld/index>` introducing the basics of Plone development."
msgstr ""

#: ../develop/plone/getstarted/index.rst:184
msgid "The tutorial covers a basic form, a custom content-type, and a dynamic view. It also has detailed sections on building a development environment, installing Plone, and creating an add-on package for your development code."
msgstr ""

#: ../develop/plone/getstarted/index.rst:189
msgid "Plone resources"
msgstr ""

#: ../develop/plone/getstarted/index.rst:191
msgid "`Plone Issue Tracker <https://github.com/plone/Products.CMFPlone/issues>`_ contains bug reports, Plone source code and commits. Useful when you encounter a new exception or you are looking for a reference on how to use the API."
msgstr ""

#: ../develop/plone/getstarted/index.rst:195
msgid "`Plone source code in version control system <https://github.com/plone>`_."
msgstr ""

#: ../develop/plone/getstarted/index.rst:197
msgid "Fix link to Plone API"
msgstr ""

#: ../develop/plone/getstarted/index.rst:199
msgid "`Plone API (in development) <http://ploneapi.readthedocs.org/>`_."
msgstr ""

#: ../develop/plone/getstarted/index.rst:203
msgid "Zope resources"
msgstr ""

#: ../develop/plone/getstarted/index.rst:205
msgid "`Zope source code in version control system <http://svn.zope.org/>`_."
msgstr ""

#: ../develop/plone/getstarted/index.rst:207
msgid "`Zope 2 book <http://docs.zope.org/zope2/zope2book/>`_. This describes old Zope 2 technologies. The book is mostly good for explaining some old things, but '''do not''' use it as a reference for building new things."
msgstr ""

#: ../develop/plone/getstarted/index.rst:211
msgid "The chapters on Zope Page Templates however are still the best reference on the topic."
msgstr ""

#: ../develop/plone/getstarted/index.rst:215
msgid "Python resources"
msgstr ""

#: ../develop/plone/getstarted/index.rst:223
msgid "Debug mode explained"
msgstr ""

#: ../develop/plone/getstarted/python.rst:3
msgid "Python for beginners"
msgstr ""

#: ../develop/plone/getstarted/python.rst:7
msgid "The basics of Python programming, and performing Python interpreter installations."
msgstr ""

#: ../develop/plone/getstarted/python.rst:12
msgid "`Python <http://python.org>`_ is the programming language used by `Plone <https://plone.org>`_ and `Zope <http://zope.org>`_. One needs to have at least basic Python experience before considering building Plone add-ons or customizations."
msgstr ""

#: ../develop/plone/getstarted/python.rst:18
msgid "You should not try to write programs for Plone before you can program Python on the basic level."
msgstr ""

#: ../develop/plone/getstarted/python.rst:21
msgid "Python tutorials and online classes"
msgstr ""

#: ../develop/plone/getstarted/python.rst:23
msgid "`Official Python tutorial <http://docs.python.org/tutorial/>`_"
msgstr ""

#: ../develop/plone/getstarted/python.rst:25
msgid "`Google Python classes <http://code.google.com/edu/languages/google-python-class/>`_"
msgstr ""

#: ../develop/plone/getstarted/python.rst:27
msgid "`Free Python books <http://pythonbooks.revolunet.com/>`_"
msgstr ""

#: ../develop/plone/getstarted/python.rst:29
msgid "`Dive into Python book <http://www.diveintopython.net/toc/index.html>`_"
msgstr ""

#: ../develop/plone/getstarted/python.rst:31
msgid "`Python at codeacademy.org <http://www.codecademy.com/#!/exercises/0>`_"
msgstr ""

#: ../develop/plone/i18n/cache.rst:3
msgid "Internationalization and cache"
msgstr ""

#: ../develop/plone/i18n/cache.rst:7
msgid "Using Plone translation facilities in the presence of caching."
msgstr ""

#: ../develop/plone/i18n/cache.rst:14
msgid "You need to have the following monkey-patch in place if you intend to use LinguaPlone (translated content) with front-end caching servers. Otherwise CSS, JS and media files will have a language cookie set on them, preventing cache from working."
msgstr ""

#: ../develop/plone/i18n/cache.rst:21
msgid "This is a well-known Plone issue."
msgstr ""

#: ../develop/plone/i18n/cache.rst:48
msgid "http://stackoverflow.com/questions/5715216/why-plone-3-sets-language-cookie-to-css-js-registry-files-and-how-to-get-rid-of"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:3
msgid "How to contribute to Plone core translations"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:7
msgid "How to contribute to the Plone translations."
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:14
msgid "You need to have write access to https://github.com/collective/plone.app.locales to be able to commit your translation directly. You can also update a po file online and make a pull request."
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:21
msgid "Updating translations for Plone 4.2"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:23
msgid "To do."
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:27
msgid "Updating translations for Plone 4.3"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:29
msgid "If you want to test your latest translation with unreleased packages containing i18n fixes for Plone 4, get the buildout like this:"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:42
msgid "To update the buildout later:"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:49
msgid "To update your translation, you can go there:"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:55
msgid "Here you have the following directories:"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:57
msgid "``locales`` used for core Plone translations."
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:58
msgid "``locales-addons`` used for some addons packages."
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:59
msgid "``locales-future`` used for Plone 5 packages. The po files can change really often. The translations will normally be merged to the locales directory when Plone 5 will be released. This directory is not included in ``plone.app.locales`` 4.x releases. For developers: if you want to add a Plone 5 package to this directory, you can add it to the ``plone5`` variable in ``experimental/i18n.cfg``, don't forget to add a line in ``[sources]`` if it's missing."
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:67
msgid "Open the po file with poedit, kbabel or any other i18n tool. For example for French:"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:74
msgid "Please do a ``git pull`` before editing a po file to be sure you have the latest version."
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:78
msgid "Committing directly (commit access)"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:80
msgid "You can commit your translation from this locales directory:"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:89
msgid "Creating a pull request (no commit access)"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:91
msgid "If you do not have commit access on Github `collective group <https://github.com/collective>`_. you can do the following:"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:94
msgid "Login to Github. Go to Github `plone.app.locales <https://github.com/collective/plone.app.locales>`_"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:96
msgid "Press *Fork*. Now Github creates a copy of ``plone.app.locales`` package for you."
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:98
msgid "Then on your computer in ``plone.app.locales`` do a special git push to your own repository::"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:102
msgid "Go to Github ``https://github.com/YOURUSERNAME/plone.app.locales``"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:104
msgid "Press button *Create Pull request*. Fill it in."
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:106
msgid "The request will appear for *plone.app.locales* authors. If it does not get merged in timely manner, poke people on the #plone IRC channel or the mailing list below (sometimes requests go unnoticed)."
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:111
msgid "Support"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:113
msgid "Please ask questions on the `plone-i18n mailing-list <https://plone.org/support/forums/i18n>`_."
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:117
msgid "Statistics for Plone 4"
msgstr ""

#: ../develop/plone/i18n/contribute_to_translations.rst:119
msgid "http://www.transifex.net/projects/p/Plone/"
msgstr ""

#: ../develop/plone/i18n/index.rst:3
msgid "Internationalization (i18n)"
msgstr ""

#: ../develop/plone/i18n/index.rst:5
msgid "There are several layers involved in the processes that provide internationalization capabilities to Plone. Basically they are divided in the ones responsible to translate the user interface and the display of the localization particularities (dates, etc):"
msgstr ""

#: ../develop/plone/i18n/index.rst:10
msgid "Translating user interface text strings by using term:`gettext`, like the `zope.i18n`_ and `zope.i18nmessageid`_ packages."
msgstr ""

#: ../develop/plone/i18n/index.rst:13
msgid "Adapting locale-specific settings (such as the time format) for the site, like the `plone.i18n`_ package."
msgstr ""

#: ../develop/plone/i18n/index.rst:16
msgid "And the ones responsible for translating the user generated content. Since Plone 5, this is done out of the box with plone.app.multilingual"
msgstr ""

#: ../develop/plone/i18n/index.rst:20
msgid "`plone.app.multilingual`_ (Archetypes and Dexterity content types, requires at least Plone 4.1)"
msgstr ""

#: ../develop/plone/i18n/index.rst:29
msgid "Contents"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:3
msgid "Translating text strings"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:7
msgid "Translating Python and TAL template source code text strings using the term:`gettext` framework and other Plone/Zope term:`i18n` facilities."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:15
msgid "Internationalization is a process to make your code locale- and language-aware. Usually this means supplying translation files for text strings used in the code."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:18
msgid "Plone internally uses the UNIX standard term:`gettext` tool to perform :term:`i18n`."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:20
msgid "There are two separate gettext systems. Both use the :term:`.po` file format to describe translations."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:22
msgid "Note that this chapter concerns only *code-level* translations. *Content* translations are managed by the :doc:`plone.app.multilingual </external/plone.app.multilingual/README>` add-on product."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:26
msgid "zope.i18n"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:28
msgid "See also `zope.i18n on pypi <https://pypi.python.org/pypi/zope.i18n>`_"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:30
msgid "Follows term:`gettext` best practices"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:32
msgid "Translations are stored in the ``locales`` folder of your application. Example: ``locales/fi/LC_MESSAGES/your.app.po``"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:35
msgid "Has `zope.i18nmessageid <https://pypi.python.org/pypi/zope.i18nmessageid>`_ package, which provides a string-like class which allows storing the translation domain with translatable text strings easily."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:37
msgid "``.po`` files must usually be manually converted to ``.mo`` binary files every time the translations are updated.  See :term:`i18ndude`. (It is also possible to set an environment variable to trigger recompilation of ``.mo`` files; see below.)"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:39
msgid "Plone (at least 3.3) uses only filename and path to search for the translation files. Information in the ``.po`` file headers is ignored."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:43
msgid "Generating a ``.pot`` template file for your package(s)"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:45
msgid "`infrae.i18nextract <https://pypi.python.org/pypi/infrae.i18nextract>`_ can be used in your buildout to create a script which searches particular packages for translation strings. This can be particularly useful for creating a single *translations* package which contains the translations for the set of packages which make up your application."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:48
msgid "Add the following to your ``buildout.cfg``:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:61
msgid "Running the ``./bin/translation-extract`` script will produce a ``.pot`` file in the specified output directory which can then be used to create the ``.po`` files for each translation:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:67
msgid "The ``locales`` directory should contain a directory for each language, and a directory called ``LC_MESSAGES`` within each of these, followed by the corresponding ``.po`` files containing the translation strings:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:77
msgid "Marking translatable strings in Python"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:79
msgid "Each module declares its own ``MessageFactory`` which is a callable and marks strings with translation domain. ``MessageFactory`` is declared in the main ``__init__.py`` file of your package."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:89
msgid "You also need to have the following ZCML entry:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:97
msgid "After the setup above you can use message factory to mark strings with translation domains. ``i18ndude`` translation utilities use underscore ``_`` to mark translatable strings (term:`gettext` message ids). Message ids must be unicode strings."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:106
msgid "The object will still look like a string::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:111
msgid "But in reality it is a ``zope.i18nmessageid.message.Message`` object::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:119
msgid "To see the translation::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:127
msgid "Marking translatable strings in TAL page templates"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:129
msgid "Declare XML namespace ``i18n`` and translation domain at the beginning of your template, at the first element"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:135
msgid "Translate element content text using ``i18n:translate=\"\"``. It will use the text content of the element as msgid."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:144
msgid "Use attributes i18n:translate, i18n:attributes and so on"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:146
msgid "For examples look at any core Plone .pt files"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:149
msgid "Automatically translated message ids"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:151
msgid "Plone will automatically perform translation for message ids which are output in page templates."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:153
msgid "The following code would translate ``my_translateable_text`` to the native language activated for the current page."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:159
msgid "Since ``my_translateable_text`` is a ``zope.i18nmessageid.message.Message`` instance containing its own gettext domain information, the ``i18n:domain`` attribute in page templates does not affect message ids declared through message factories."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:166
msgid "Manually translated message ids"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:168
msgid "If you need to manipulate translated text outside page templates, you need to perform the final translation manually."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:170
msgid "Translation always needs context (i.e. under which site the translation happens), as the active language and other preferences are read from the HTTP request object and site object settings."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:172
msgid "Translation can be performed using the ``context.translate()`` method::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:182
msgid "``context.translate()`` uses the ``translate.py`` Python script from ``LanguageTool``."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:185
msgid "It has the signature::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:190
msgid "and does the trick::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:207
msgid "Translation needs HTTP request object and thus may not work correctly from command-line scripts."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:211
msgid "Non-python message ids"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:213
msgid "There are also other message id markers in code outside the Python domain, that have their own mechanisms:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:215
msgid "ZCML entries"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:216
msgid "GenericSetup XML"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:217
msgid "TAL page templates"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:221
msgid "Translating browser view names"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:223
msgid "Often you might want to translate browser view names, so that the \"Display\" contentmenu shows something more human readable than, for example, \"my_awesome_view\"."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:226
msgid "These are the steps needed to get it translated:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:228
msgid "Use the \"plone\" domain for your browser view name translations. Wether put the whole ZCML in the plone domain of just the view definitions with i18n:domain=\"plone\"."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:231
msgid "The msgids for the views are their names. Translate them in a plone.po override file in your locales folder."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:233
msgid "Please note, i18ndude does not parse the zcml files for translation strings (see below \"Translating other ZCML\")."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:238
msgid "Translating other ZCML"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:240
msgid "http://stackoverflow.com/questions/6899708/do-zcml-files-get-parsed-i18n-wise"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:244
msgid "Testing translations"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:246
msgid "Here is a simple way to check if your gettext domains are correctly loaded."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:251
msgid "You can start the Plone debug shell and manually check if translations can be performed."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:254
msgid "First start Plone in debug shell:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:260
msgid "and then call translation service, in your site, manually::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:269
msgid "Translation string substitution"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:271
msgid "*Translation string substitutions* must be used when the final translated message contains *variable strings*."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:274
msgid "Plone content classes inherit the ``translate()`` function which can be used to get the final translated string.  It will use the currently activate language.  Translation domain will be taken from the msgid object itself, which is a string-like ``zope.i18nmessageid`` instance."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:279
msgid "Message ids are immutable (read-only) objects so you need to always create a new message id if you use different variable substitution mappings."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:281
#: ../develop/plone/images/content.rst:159
msgid "Python code::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:298
msgid "Corresponding ``.po`` file entry::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:308
msgid "http://wiki.zope.org/zope3/TurningMessageIDsIntoRocks"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:311
msgid "i18ndude"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:313
msgid ":term:`i18ndude` is a developer-oriented command-line utility to manage ``.po`` and ``.mo`` files."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:316
msgid "Usually you build our own shell script wrapper around ``i18ndude`` to automate generation of ``.mo`` files of your product ``.po`` files."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:320
msgid "Plone 3.3 and onwards do not need manual ``.po`` -> ``.mo`` compilation. It is done on start up. Plone 4 has a special switch for this: in your ``buildout.cfg`` in the part using ``plone.recipe.zope2instance`` you can set an environment variable for this::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:329
msgid "Note that the value does not matter: the code in ``zope.i18n`` simply looks for the existence of the variable and does not care what its value is."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:333
msgid "If you use i18ndude make sure to use ``_`` as an alias for your ``MessageFactory`` else i18ndude won't find your message strings in python code and report that \"no entries for domain\" were found."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:339
#: ../develop/plone/i18n/internationalisation.rst:639
msgid "http://vincentfretin.ecreall.com/articles/my-translation-doesnt-show-up-in-plone-4"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:343
msgid "`i18ndude Python package <https://pypi.python.org/pypi/i18ndude>`_"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:345
msgid "`i18ndude example for Plone 3.0 and later <http://maurits.vanrees.org/weblog/archive/2007/09/i18n-locales-and-plone-3.0>`_"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:347
msgid "`i18ndude example for Plone 2.5 <http://blogs.ingeniweb.com/blogs/user/7/tag/i18ndude/>`_"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:350
msgid "Installing i18ndude"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:352
msgid "The recommended method is to have term:`i18ndude` installed via your `buildout <http://www.buildout.org/docs/index.html>`_."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:354
msgid "Add the following to your buildout.cfg:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:367
msgid "After this ``i18ndude`` is available in your ``buildout/bin`` folder"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:375
msgid "You can also call it relative to your current package source folder"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:384
msgid "Do not ``easy_install i18ndude``. ``i18ndude`` depends on various Zope packages and pulling them to your system-wide Python configuration could be dangerous, due to potential conflicts with corresponding, but different versions, of the same packages used with Plone."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:388
msgid "http://markmail.org/message/gru5oaxdl452ekh6#query:+page:1+mid:m22a2ap4xwtwogs5+state:results"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:392
msgid "Setting up folder structure for Finnish and English"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:405
msgid "Creating ``.pot`` base file"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:415
msgid "Manual ``.po`` entries"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:417
msgid "``i18ndude`` scans source ``.py`` and ``.pt`` files for translatable text strings. On some occasions this is not enough - for example if you dynamically generate message ids in your code. Entries which cannot be detected by automatic code scan are called *manual po entries*. They are managed in ``locales/manual.pot`` which is merged to generated ``locales/yournamespace.app.pot`` file."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:422
msgid "Here is a sample ``manual.pot`` file::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:441
msgid "Managing ``.po`` files"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:443
msgid "Example shell script to manage i18n files. Change ``CATALOGNAME`` to reflect the actual package of your product:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:445
msgid "The script will:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:447
msgid "pick up all changes to i18n strings in code and reflect them back to the translation catalog of each language;"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:450
msgid "pick up changes in ``manual.pot`` file and reflect them back to the translation catalog of each language."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:538
msgid "Remember to register the ``locales`` directory in ``configure.zcml`` for automatic ``.mo`` compilation as instructed above."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:543
msgid "http://plataforma.cenditel.gob.ve/browser/proyectosInstitucionales/eGov/ppm/trunk/rebuild_i18n"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:545
msgid "http://encolpe.wordpress.com/2008/04/28/manage-your-internationalization-with-i18ndude/"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:548
msgid "Distributing compiled translations"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:550
msgid "The rule for compiled .mo files is that"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:552
msgid "Source code repositories (SVN, Git) must not contain compiled .mo files"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:554
msgid "Released eggs on PyPi, however, **must** contain compiled .mo files"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:556
msgid "The easiest way to manage this is to use the `zest.releaser <https://pypi.python.org/pypi/zest.releaser>`_ tool together with `zest.pocompile package <https://pypi.python.org/pypi/zest.pocompile>`_ to release your eggs."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:559
msgid "Dynamic content"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:561
msgid "If your HTML template contains dynamic content such as"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:567
msgid "it will produce ``.po`` entry::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:571
msgid "You need to give the name to the dynamic part"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:580
msgid "... and then you can refer the dynamic part by a name::"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:591
msgid "http://permalink.gmane.org/gmane.comp.web.zope.plone.collective.cvs/111531"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:594
msgid "Overriding translations"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:596
msgid "If you need to change a translation from a ``.po`` file, you could create a new python package and register your own ``.po`` files."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:598
msgid "To do this, create the package and add a ``locales`` directory in there, along the lines of what `plone.app.locales`_ does. Then you can add your own translations in the language that you need; for example ``locales/fr/LC_MESSAGES/plone.po`` to override French messages in the ``plone`` domain."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:601
msgid "Reference the translation in ``configure.zcml`` of your package:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:610
msgid "Your ZCML needs to be included *before* the one from `plone.app.locales <https://pypi.python.org/pypi/plone.app.locales>`_: the first translation of a msgid wins. To manage this, you can include the ZCML in the buildout:"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:629
msgid "See the *Overriding Translations* section of Maurits van Rees's `blog entry on Plone i18n <http://maurits.vanrees.org/weblog/archive/2010/10/i18n-plone-4>`_, and Vincent Fretin's `posting <http://article.gmane.org/gmane.comp.web.zope.plone.user/109580>`_ on the Plone-Users mailing list."
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:633
#: ../develop/plone/i18n/language.rst:451
#: ../develop/plone/misc/normalizing_ids.rst:95
#: ../develop/plone/searching_and_indexing/indexing.rst:514
#: ../develop/plone/security/local_roles.rst:196
msgid "Other"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:635
#: ../develop/plone/i18n/language.rst:453
msgid "http://reinout.vanrees.org/weblog/2007/12/14/translating-schemata-names.html"
msgstr ""

#: ../develop/plone/i18n/internationalisation.rst:637
#: ../develop/plone/i18n/language.rst:459
msgid "https://plone.org/products/archgenxml/documentation/how-to/handling-i18n-translation-files-with-archgenxml-and-i18ndude/view?searchterm="
msgstr ""

#: ../develop/plone/i18n/language.rst:3
msgid "Language functions"
msgstr ""

#: ../develop/plone/i18n/language.rst:7
msgid "Accessing and changing the language state of Plone programmatically."
msgstr ""

#: ../develop/plone/i18n/language.rst:14
msgid "Each page view has a language associated with it."
msgstr ""

#: ../develop/plone/i18n/language.rst:16
msgid "The active language is negotiated by the ``plone.i18n.negotiator`` module. Several factors may be involved in determining what the language should be:"
msgstr ""

#: ../develop/plone/i18n/language.rst:19
msgid "Cookies (setting from the language selector)"
msgstr ""

#: ../develop/plone/i18n/language.rst:21
msgid "The top-level domain name (e.g. ``.fi`` for Finnish, ``.se`` for Swedish)"
msgstr ""

#: ../develop/plone/i18n/language.rst:23
msgid "Context (current content) language"
msgstr ""

#: ../develop/plone/i18n/language.rst:25
msgid "Browser language headers"
msgstr ""

#: ../develop/plone/i18n/language.rst:27
msgid "Language is negotiated at the beginning of the page view."
msgstr ""

#: ../develop/plone/i18n/language.rst:29
msgid "Languages are managed by `portal_languagetool <https://github.com/plone/Products.PloneLanguageTool/blob/master/Products/PloneLanguageTool/LanguageTool.py>`_."
msgstr ""

#: ../develop/plone/i18n/language.rst:32
msgid "Getting the current language"
msgstr ""

#: ../develop/plone/i18n/language.rst:34
msgid "Example view/viewlet method of getting the current language."
msgstr ""

#: ../develop/plone/i18n/language.rst:56
msgid "Getting language of content item"
msgstr ""

#: ../develop/plone/i18n/language.rst:58
msgid "All content objects don't necessarily support the ``Language()`` look-up defined by the ``IDublinCore`` interface. Below is the safe way to extract the served language on the content."
msgstr ""

#: ../develop/plone/i18n/language.rst:61
msgid "Example BrowserView method::"
msgstr ""

#: ../develop/plone/i18n/language.rst:78
msgid "Getting available site languages"
msgstr ""

#: ../develop/plone/i18n/language.rst:80
msgid "Example below::"
msgstr ""

#: ../develop/plone/i18n/language.rst:130
msgid "Simple language conditions in page templates"
msgstr ""

#: ../develop/plone/i18n/language.rst:132
msgid "You can do this if full translation strings are not worth the trouble:"
msgstr ""

#: ../develop/plone/i18n/language.rst:143
msgid "Set site language settings"
msgstr ""

#: ../develop/plone/i18n/language.rst:145
msgid "Manually::"
msgstr ""

#: ../develop/plone/i18n/language.rst:155
msgid "For unit testing, you need to run this in ``afterSetUp()`` after setting up the languages::"
msgstr ""

#: ../develop/plone/i18n/language.rst:164
msgid "Using ``GenericSetup`` and ``propertiestool.xml``"
msgstr ""

#: ../develop/plone/i18n/language.rst:174
msgid "On ``LinguaPlone``-enabled sites, using GenericSetup XML ``portal_languages.xml``"
msgstr ""

#: ../develop/plone/i18n/language.rst:197
msgid "Customizing language selector"
msgstr ""

#: ../develop/plone/i18n/language.rst:199
msgid "Multilingual Plone has two kinds of language selector viewlets:"
msgstr ""

#: ../develop/plone/i18n/language.rst:201
msgid "Plone vanilla"
msgstr ""

#: ../develop/plone/i18n/language.rst:203
msgid "LinguaPlone -  LinguaPlone has its own language selector which replaces the default Plone selector if the add on product is installed."
msgstr ""

#: ../develop/plone/i18n/language.rst:209
msgid "https://github.com/plone/plone.app.i18n/blob/master/plone/app/i18n/locales/browser/selector.py"
msgstr ""

#: ../develop/plone/i18n/language.rst:211
msgid "https://github.com/plone/plone.app.i18n/blob/master/plone/app/i18n/locales/browser/languageselector.pt"
msgstr ""

#: ../develop/plone/i18n/language.rst:213
msgid "https://github.com/plone/Products.LinguaPlone/blob/master/Products/LinguaPlone/browser/selector.py"
msgstr ""

#: ../develop/plone/i18n/language.rst:216
msgid "Making language flags point to different top level domains"
msgstr ""

#: ../develop/plone/i18n/language.rst:218
msgid "If you use multiple domain names for different languages it is often desirable to make the language selector point to a different domain. Search engines do not really like the dynamic language switchers and will index switching links, messing up your site search results."
msgstr ""

#: ../develop/plone/i18n/language.rst:285
msgid "Custom language negotiator"
msgstr ""

#: ../develop/plone/i18n/language.rst:287
msgid "Below some example code."
msgstr ""

#: ../develop/plone/i18n/language.rst:289
msgid "``languages.py``::"
msgstr ""

#: ../develop/plone/i18n/language.rst:399
msgid "Login-aware language negotiation"
msgstr ""

#: ../develop/plone/i18n/language.rst:401
msgid "By default, language negotiation happens before authentication. Therefore, if you wish to use authenticated credentials in the negotiation, you can do the following."
msgstr ""

#: ../develop/plone/i18n/language.rst:405
msgid "Hook the after-traversal event."
msgstr ""

#: ../develop/plone/i18n/language.rst:407
msgid "Example event registration"
msgstr ""

#: ../develop/plone/i18n/language.rst:419
msgid "Corresponding event handler::"
msgstr ""

#: ../develop/plone/i18n/language.rst:455
msgid "http://maurits.vanrees.org/weblog/archive/2007/09/i18n-locales-and-plone-3.0"
msgstr ""

#: ../develop/plone/i18n/language.rst:457
msgid "http://blogs.ingeniweb.com/blogs/user/7/tag/i18ndude/"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:3
msgid "Translated content"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:7
msgid "Translating content items in Plone, creating translations programmatically and working with translators."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:15
msgid "Plone ships out of the box with a multilingual solution for translating user generated content."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:17
msgid "For all practical purposes, you should use that package, plone.app.multilingual"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:21
msgid "For earlier Plone versions, there were other solutions like LinguaPlone and raptus.multilanguageplone. Refer to the `Plone 4 version of this document <http://docs.plone.org/4/en/develop/plone/i18n/translating_content.html>`_ if you need that information."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:29
msgid "plone.app.multilingual was designed originally to provide Plone a whole multilingual story. Using ZCA technologies, enables translations to Dexterity and Archetypes content types as well managed via an unified UI."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:33
msgid "This module provides the user interface for managing content translations. It's the app package of the next generation Plone multilingual engine. It's designed to work with Dexterity content types and the *old fashioned* Archetypes based content types as well. It only works with Plone 4.1 and above due to the use of UUIDs for referencing the translations."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:39
msgid "For more information see :doc:`plone.app.multilingual</external/plone.app.multilingual/README>`"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:44
msgid "To use this package with both Dexterity and Archetypes based content types you should add the following line to your *eggs* buildout section::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:50
msgid "If you need to use this package only with Archetypes based content types you only need the following line::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:56
msgid "While archetypes is default in Plone for now, you can strip ``[archetypes]``. This may change in future so we recommend adding an appendix as shown above."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:60
msgid "Setup"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:62
msgid "After re-running your buildout and installing the newly available add-ons, you should go to the *Languages* section of your site's control panel and select at least two or more languages for your site. You will now be able to create translations of Plone's default content types, or to link existing content as translations."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:69
msgid "Marking objects as translatables"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:74
msgid "By default, if PAM is installed, Archetypes-based content types are marked as translatables"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:80
msgid "Users should mark a dexterity content type as translatable by assigning a the multilingual behavior to the definition of the content type either via file system, supermodel or through the web."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:86
msgid "Marking fields as language independent"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:91
msgid "The language independent fields on Archetype-based content are marked the same way as in LinguaPlone::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:105
msgid "There are four ways of achieve it."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:108
msgid "Grok directive"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:110
msgid "In your content type class declaration::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:116
msgid "Supermodel"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:118
msgid "In your content type XML file declaration::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:126
msgid "Native"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:128
msgid "In your code::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:134
msgid "Through the web"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:136
msgid "Via the content type definition in the *Dexterity Content Types* control panel."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:139
msgid "Language get/set via an unified adapter"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:141
msgid "In order to access and modify the language of a content type regardless the type (Archetypes/Dexterity) there is a interface/adapter::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:146
msgid "You can use::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:151
msgid "or in case you want to set the language of a content::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:156
msgid "ITranslationManager adapter"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:158
msgid "The most interesting adapter that p.a.m. provides is: ``plone.multilingual.interfaces.ITranslationManager``."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:161
msgid "It adapts any ITranslatable object to provide convenience methods to manage the translations for that object."
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:165
msgid "Add a translation"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:167
msgid "Given an object `obj` and we want to translate it to Catalan language ('ca')::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:173
msgid "Register a translation for an already existing content"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:175
msgid "Given an object `obj` and we want to add `obj2` as a translation for Catalan language ('ca')::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:180
msgid "Get translations for an object"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:182
#: ../develop/plone/i18n/translating_content.rst:193
msgid "Given an object `obj`::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:186
msgid "and if we want a concrete translation::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:191
msgid "Check if an object has translations"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:197
msgid "or::"
msgstr ""

#: ../develop/plone/i18n/translating_content.rst:201
msgid "For more information see: https://github.com/plone/plone.multilingual/blob/master/src/plone/multilingual/interfaces.py#L66"
msgstr ""

#: ../develop/plone/images/content.rst:3
msgid "Image-like content"
msgstr ""

#: ../develop/plone/images/content.rst:7
msgid "How to programmatically manipulate images on your Plone site."
msgstr ""

#: ../develop/plone/images/content.rst:14
msgid "Plone supports image content in two forms:"
msgstr ""

#: ../develop/plone/images/content.rst:16
msgid "As stand-alone content type, images will be visible in the sitemap. This is the case for the default ``Image`` content type, but you can create custom content types with similar properties."
msgstr ""

#: ../develop/plone/images/content.rst:20
msgid "As a field, the image is directly associated with one content object.  Use ``Archetypes.fields.ImageField``."
msgstr ""

#: ../develop/plone/images/content.rst:25
msgid "Custom image content type"
msgstr ""

#: ../develop/plone/images/content.rst:27
msgid "If you want to have your custom content type behave like the stock Plone ``Image`` content type:"
msgstr ""

#: ../develop/plone/images/content.rst:30
msgid "Inherit from the content class ``Products.ATContentType.content.image.ATImage`` and use the schema from that class."
msgstr ""

#: ../develop/plone/images/content.rst:33
msgid "When writing the ``GenericSetup`` XML of your type, follow the example of `Image.xml <https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/profiles/default/types/Image.xml>`_."
msgstr ""

#: ../develop/plone/images/content.rst:35
msgid "Do not set workflow for your type in ``profiles/default/workflows.xml``"
msgstr ""

#: ../develop/plone/images/content.rst:48
msgid "Image scales"
msgstr ""

#: ../develop/plone/images/content.rst:50
msgid "Archetypes based content image scales is handled by `plone.namedfile <https://pypi.python.org/pypi/plone.namedfile>`_."
msgstr ""

#: ../develop/plone/images/content.rst:52
msgid "Dexterity based content image scales are handled by `plone.namedfile <https://pypi.python.org/pypi/plone.namedfile>`_."
msgstr ""

#: ../develop/plone/images/content.rst:54
msgid "Archetypes based content image scales is handled by `plone.app.imaging <https://plone.org/products/plone.app.imaging>`_."
msgstr ""

#: ../develop/plone/images/content.rst:56
msgid "Both packages offer the same traverseable `@@images` view which can be used from page templates and Python code to provide different image scales for image fields on content."
msgstr ""

#: ../develop/plone/images/content.rst:61
msgid "``getScale()``"
msgstr ""

#: ../develop/plone/images/content.rst:63
msgid "``ImageField`` provides a ``getScale()`` method to get the scaled version of the image based on the ``sizes`` configuration key."
msgstr ""

#: ../develop/plone/images/content.rst:66
msgid "See example in ``__bobo_traverse__``:"
msgstr ""

#: ../develop/plone/images/content.rst:72
msgid "Accessing images"
msgstr ""

#: ../develop/plone/images/content.rst:74
msgid "``ImageField`` is mapped to a traversable attribute of your content type. E.g. if your content object has a field ``imageOne`` and is found at this URL::"
msgstr ""

#: ../develop/plone/images/content.rst:79
msgid "the image can be directly downloaded from::"
msgstr ""

#: ../develop/plone/images/content.rst:85
msgid "Scaled versions for Image content (``ATImage``)"
msgstr ""

#: ../develop/plone/images/content.rst:87
msgid "If you want different scales you can add ``image_XXX`` prefix where ``XXX`` is the corresponding scale name::"
msgstr ""

#: ../develop/plone/images/content.rst:92
msgid "In **Plone 4** this behavior comes from the monkey-patch applied by the `plone.app.imaging <https://plone.org/products/plone.app.imaging>`_ package."
msgstr ""

#: ../develop/plone/images/content.rst:97
msgid "``portal_catalog`` and images"
msgstr ""

#: ../develop/plone/images/content.rst:99
msgid "Do not index image objects themselves, as adding image data to the ``portal_catalog`` brain objects would greatly increase their site and make brain look-up slow."
msgstr ""

#: ../develop/plone/images/content.rst:103
msgid "Instead, index only image paths using :doc:`getPhysicalPath() </develop/plone/serving/traversing>`. When you need to display image using metadata columns, you can generate the image URL manually. Then, the image object will be woken up when the browser makes a HTTP request for the image."
msgstr ""

#: ../develop/plone/images/content.rst:110
msgid "Custom image scales and recreating scale data"
msgstr ""

#: ../develop/plone/images/content.rst:113
msgid "For Plone 4"
msgstr ""

#: ../develop/plone/images/content.rst:115
msgid "`plone.app.imaging <https://plone.org/products/plone.app.imaging>`_ allows you to configure available image scales in ``portal_properties`` -> ``imaging_properties``."
msgstr ""

#: ../develop/plone/images/content.rst:119
msgid "You can update these through-the-web or using :doc:`GenericSetup profile </develop/addons/components/genericsetup>`."
msgstr ""

#: ../develop/plone/images/content.rst:122
msgid "``propertiestool.xml``"
msgstr ""

#: ../develop/plone/images/content.rst:151
msgid "For Plone 4, after adding new scales no batch processing of existing images are needed and new scales are created on-demand when the images are viewed for the first time."
msgstr ""

#: ../develop/plone/images/content.rst:157
msgid "Automatic image scales on ReferenceFields"
msgstr ""

#: ../develop/plone/images/content.rst:195
msgid "in configure.zcml::"
msgstr ""

#: ../develop/plone/images/index.rst:3
msgid "Images"
msgstr ""

#: ../develop/plone/images/index.rst:5
msgid "Image manipulation related documentation."
msgstr ""

#: ../develop/plone/images/pil.rst:3
msgid "Python Imaging Library (PIL)"
msgstr ""

#: ../develop/plone/images/pil.rst:5
msgid "Plone uses internally  Python Imaging Library (PIL) for low level image manipulation and decoding."
msgstr ""

#: ../develop/plone/images/pil.rst:9
msgid "Installing PIL"
msgstr ""

#: ../develop/plone/images/pil.rst:11
msgid "This concerns only UNIXes as Windows installer comes with PIL binaries."
msgstr ""

#: ../develop/plone/images/pil.rst:14
msgid "http://www.koansys.com/tech/install-plone-with-zopeskel-buildout-needs-pil"
msgstr ""

#: ../develop/plone/images/pil.rst:16
msgid "http://blog.twinapex.fi/2009/11/19/installing-python-imaging-library-pil-under-virtualenv-or-buildout/"
msgstr ""

#: ../develop/plone/images/pil.rst:18
msgid "http://destefano.wordpress.com/2008/03/18/zope-buildouts-for-plone-on-os-x-heaven-or-hell/"
msgstr ""

#: ../develop/plone/images/pil.rst:20
msgid "PIL has libjpeg as a dependency and you need to install it using your operating system package manager. On OSX you can use `macports <http://www.macports.org/>`_."
msgstr ""

#: ../develop/plone/images/pil.rst:24
msgid "Make sure that you don't have PIL without libjpeg support in your system-wide Python setup"
msgstr ""

#: ../develop/plone/images/pil.rst:28
msgid "Installing libjpeg on OS X"
msgstr ""

#: ../develop/plone/images/pil.rst:30
msgid "Get http://www.ijg.org/files/jpegsrc.v7.tar.gz, and then::"
msgstr ""

#: ../develop/plone/images/pil.rst:39
msgid "Then you can install PIL with JPEG support."
msgstr ""

#: ../develop/plone/images/pil.rst:42
msgid "Pillow"
msgstr ""

#: ../develop/plone/images/pil.rst:44
msgid "In late 2010, a packaging fork called `Pillow`_ was created to offer better multi-OS installation support. Specifically it offers:"
msgstr ""

#: ../develop/plone/images/pil.rst:46
msgid "Setuptools compatibility"
msgstr ""

#: ../develop/plone/images/pil.rst:47
msgid "Hosting (and mirroring) by PyPI (vs. off site)"
msgstr ""

#: ../develop/plone/images/pil.rst:48
msgid "Windows eggs"
msgstr ""

#: ../develop/plone/images/pil.rst:49
msgid "Bug fixes (many of which simply add vendor-specific library directories to the compiler's search path.)"
msgstr ""

#: ../develop/plone/images/pil.rst:51
msgid "As a result, PIL can now be installed on many more systems simply by using the \"Pillow\" package name. E.g.::"
msgstr ""

#: ../develop/plone/images/pil.rst:59
msgid "Or add to the list of eggs in your Buildout."
msgstr ""

#: ../develop/plone/images/templates.rst:3
msgid "Images in page templates"
msgstr ""

#: ../develop/plone/images/templates.rst:7
msgid "How to link to images in page templates in Plone."
msgstr ""

#: ../develop/plone/images/templates.rst:12
msgid "Putting a static image into a page template"
msgstr ""

#: ../develop/plone/images/templates.rst:14
msgid "Here is an example how to create an ``<img>`` tag in a ``.pt`` file:"
msgstr ""

#: ../develop/plone/images/templates.rst:20
msgid "Let's break this down:"
msgstr ""

#: ../develop/plone/images/templates.rst:22
msgid "Obviously we are rendering an ``<img>`` tag."
msgstr ""

#: ../develop/plone/images/templates.rst:24
msgid "The ``src`` attribute is dynamically generated using a :term:`TALES` expression."
msgstr ""

#: ../develop/plone/images/templates.rst:27
msgid "We use *string comprehension* to create the ``src`` attribute. Alternatively we could use e.g. the ``python:`` :term:`TALES` expression type and embed one line python of code to generate the attribute value."
msgstr ""

#: ../develop/plone/images/templates.rst:31
msgid "We look up a helper view called :doc:`plone_portal_state </develop/plone/misc/context>`. This is a ``BrowserView`` shipped with Plone. Its purpose is to expose different helper methods to page templates and Python code."
msgstr ""

#: ../develop/plone/images/templates.rst:35
msgid "We call ``plone_portal_state``'s ``portal_url()`` method. This will return the root URL of our site. Note that this is not necessary the domain's top-level URL, as Plone sites can be nested in folders, or served on a path among unrelated web properties."
msgstr ""

#: ../develop/plone/images/templates.rst:41
msgid "We append our Zope 3 resource path to our site root URL (see below). This maps to some static media folder in our add-on files on the disk."
msgstr ""

#: ../develop/plone/images/templates.rst:44
msgid "There we point to ``close-icon.png`` image file."
msgstr ""

#: ../develop/plone/images/templates.rst:46
msgid "We also add the ``alt`` attribute of the ``<img>`` tag normally. It is not dynamically generated."
msgstr ""

#: ../develop/plone/images/templates.rst:49
msgid "When the page template is generated, the following snippet could look like, for example:"
msgstr ""

#: ../develop/plone/images/templates.rst:56
msgid "... or:"
msgstr ""

#: ../develop/plone/images/templates.rst:62
msgid "... depending on the site virtual hosting configuration."
msgstr ""

#: ../develop/plone/images/templates.rst:65
msgid "Relative image look-ups"
msgstr ""

#: ../develop/plone/images/templates.rst:69
msgid "Never create relative image look-ups without prefixing the image source URL with the site root."
msgstr ""

#: ../develop/plone/images/templates.rst:72
msgid "Hardcoded relative image path might seem to work:"
msgstr ""

#: ../develop/plone/images/templates.rst:78
msgid "... but this causes a different image *base URL* to be used on every page. The image URLs, from the browser point of view, would be:"
msgstr ""

#: ../develop/plone/images/templates.rst:85
msgid "... and then in another folder:"
msgstr ""

#: ../develop/plone/images/templates.rst:91
msgid "... which **prevents the browser from caching the image**."
msgstr ""

#: ../develop/plone/images/templates.rst:94
msgid "Registering static media folders in your add-on product"
msgstr ""

#: ../develop/plone/images/templates.rst:97
msgid "Zope 3 resource directory"
msgstr ""

#: ../develop/plone/images/templates.rst:99
msgid "The right way to put in a static image is to use a Zope 3 resource directory."
msgstr ""

#: ../develop/plone/images/templates.rst:102
msgid "Create folder ``yourcompany.product/yourcompany/product/browser/static``."
msgstr ""

#: ../develop/plone/images/templates.rst:104
msgid "Add the following :term:`ZCML` to ``yourcompany.product/yourcompany/product/browser/configure.zcml``."
msgstr ""

#: ../develop/plone/images/templates.rst:115
msgid "This will be picked up at the ``++resource++yourcompany.product/`` static media path."
msgstr ""

#: ../develop/plone/images/templates.rst:118
msgid "Layer is optional: the static media path is available only when your add-on product is installed if the :doc:`layer </develop/plone/views/layers>` is specified."
msgstr ""

#: ../develop/plone/images/templates.rst:122
msgid "Also see :doc:`Resource folders </adapt-and-extend/theming/templates_css/resourcefolders>`"
msgstr ""

#: ../develop/plone/images/templates.rst:126
msgid "Rendering Image content items"
msgstr ""

#: ../develop/plone/images/templates.rst:128
msgid "You can refer to ``ATImage`` object's content data download by adding ``/image`` to the URL:"
msgstr ""

#: ../develop/plone/images/templates.rst:135
msgid "The magic is done in the ``__bobo_traverse__`` method of ``ATImage`` by providing traversable hooks to access image download:"
msgstr ""

#: ../develop/plone/images/templates.rst:141
msgid "Rendering ``ImageField``"
msgstr ""

#: ../develop/plone/images/templates.rst:143
msgid "Archetypes's ``ImageField`` maps its data to the content object at attribute which is the field's name. If you have a field ``campaignVideoThumbnail`` you can generate an image tag as follows:"
msgstr ""

#: ../develop/plone/images/templates.rst:152
msgid "If you need more complex ``<img>`` output, create a helper function in your ``BrowserView`` and use Python code to perform the ``ImageField`` manipulation."
msgstr ""

#: ../develop/plone/images/templates.rst:156
msgid "See ``ImageField`` for more information:"
msgstr ""

#: ../develop/plone/images/templates.rst:158
msgid "https://github.com/plone/Products.Archetypes/blob/master/Products/Archetypes/Field.py"
msgstr ""

#: ../develop/plone/images/templates.rst:161
msgid "``tag()`` method"
msgstr ""

#: ../develop/plone/images/templates.rst:165
msgid "Using ``tag()`` is discouraged. Create your image tags manually."
msgstr ""

#: ../develop/plone/images/templates.rst:167
msgid "Some content provides a handy ``tag()`` method to generate ``<img src=\"\" />`` tags with different image sizes."
msgstr ""

#: ../develop/plone/images/templates.rst:171
msgid "``tag()`` is available on"
msgstr ""

#: ../develop/plone/images/templates.rst:173
msgid "Archetypes ``ImageField``"
msgstr ""

#: ../develop/plone/images/templates.rst:175
msgid "``ATNewsItem``"
msgstr ""

#: ../develop/plone/images/templates.rst:177
msgid "``ATImage``"
msgstr ""

#: ../develop/plone/images/templates.rst:179
msgid "``FSImage`` (Zope 2 image object on the file-system)"
msgstr ""

#: ../develop/plone/images/templates.rst:181
msgid "``tag()`` is defined in `OFS.Image <http://svn.zope.org/Zope/trunk/src/OFS/Image.py?rev=96262&view=auto>`_."
msgstr ""

#: ../develop/plone/images/templates.rst:184
msgid "Scaling images"
msgstr ""

#: ../develop/plone/images/templates.rst:186
msgid "``tag()`` supports scaling. Scale sizes are predefined. When an ``ATImage`` is uploaded, various scaled versions of it are stored in the database."
msgstr ""

#: ../develop/plone/images/templates.rst:190
msgid "Displaying a version of the image using the \"preview\" scale::"
msgstr ""

#: ../develop/plone/images/templates.rst:194
msgid "This will generate:"
msgstr ""

#: ../develop/plone/images/templates.rst:202
msgid "If you are not using the ``alt`` attribute, you should set it to an empty string: ``alt=\"\"``. Otherwise screen readers will read the ``src`` attribute of the ``<img>`` tag aloud."
msgstr ""

#: ../develop/plone/images/templates.rst:206
msgid "In order to simplify accessing these image scales, use `archetypes.fieldtraverser <https://pypi.python.org/pypi/archetypes.fieldtraverser>`_. This package allows you to traverse to the stored image scales while still using ``AnnotationStorage`` and is a lot simpler to get going (in the author's humble opinion :)."
msgstr ""

#: ../develop/plone/images/templates.rst:212
msgid "Default scale names and sizes are defined in ``ImageField`` declaration for custom ``ImageField``\\s. For ``ATImage``, those are in `Products.ATContentTypes.content.image <https://github.com/plone/Products.ATContentTypes/blob/master/Products/ATContentTypes/content/image.py>`_."
msgstr ""

#: ../develop/plone/images/templates.rst:219
msgid "Lightbox style image pop-ups"
msgstr ""

#: ../develop/plone/images/templates.rst:221
msgid "Plone comes with `plone.app.jquerytools <https://pypi.python.org/pypi/plone.app.jquerytools>`_ which offers easy integration for lightbox style image pop-ups."
msgstr ""

#: ../develop/plone/images/templates.rst:224
msgid "You can use Plone standard image content type, defining scales using `plone.app.imaging <https://github.com/plone/plone.app.imaging/>`_ or you can define image fields in your schema."
msgstr ""

#: ../develop/plone/images/templates.rst:227
msgid "In the example below we define custom image fields in Archetypes schema."
msgstr ""

#: ../develop/plone/images/templates.rst:229
msgid "contenttype.py::"
msgstr ""

#: ../develop/plone/images/templates.rst:257
msgid "Related view page template file"
msgstr ""

#: ../develop/plone/images/templates.rst:269
msgid "And then we activate all this in a Javascript using ``prepOverlay()`` from ``plone.app.jquerytools``"
msgstr ""

#: ../develop/plone/images/templates.rst:301
msgid "Rotating banners"
msgstr ""

#: ../develop/plone/images/templates.rst:303
msgid "Simple rotating banneres can be done with `jQuery Cycle plug-in (lite) <http://jquery.malsup.com/cycle/>`_."
msgstr ""

#: ../develop/plone/images/templates.rst:305
msgid "Example TAL code... render list of content items and extract one image from each of them"
msgstr ""

#: ../develop/plone/images/templates.rst:319
msgid "Then use the the following Javascript to boostrap the cycling"
msgstr ""

#: ../develop/plone/images/templates.rst:337
msgid "You need to have this snippet and ``jquery.cycle.light.js`` in your portal_javascripts registry."
msgstr ""

#: ../develop/plone/images/templates.rst:339
msgid "You also may need to set pixel height for ``cycle`` elements, as they use absolute positioning making the element take otherwise 0 pixel of height."
msgstr ""

#: ../develop/plone/index.rst:2
msgid "Programming Plone"
msgstr ""

#: ../develop/plone/members/index.rst:3
msgid "Users and members"
msgstr ""

#: ../develop/plone/members/member_basics.rst:3
msgid "Member manipulation"
msgstr ""

#: ../develop/plone/members/member_basics.rst:7
msgid "How to programmatically create, read, edit and delete site members."
msgstr ""

#: ../develop/plone/members/member_basics.rst:14
msgid "In Plone, there are two loosely-coupled subsystems relating to members:"
msgstr ""

#: ../develop/plone/members/member_basics.rst:20
msgid "*Authentication and permission* information"
msgstr ""

#: ../develop/plone/members/member_basics.rst:17
msgid "(``acl_users`` under site root), managed by the :term:`PAS`. In a default installation, this corresponds to Zope user objects. PAS is *pluggable*, though, so it may also be authenticating against an LDAP server, Plone content objects, or other sources."
msgstr ""

#: ../develop/plone/members/member_basics.rst:26
msgid "*Member profile* information"
msgstr ""

#: ../develop/plone/members/member_basics.rst:23
msgid "accessible through the ``portal_membership`` tool. These represent Plone members. PAS authenticates, and the Plone member object provides metadata about the member."
msgstr ""

#: ../develop/plone/members/member_basics.rst:29
msgid "Getting the logged-in member"
msgstr ""

#: ../develop/plone/members/member_basics.rst:31
msgid "Anonymous and logged-in members are exposed via the :doc:`IPortalState context helper </develop/plone/misc/context>`."
msgstr ""

#: ../develop/plone/members/member_basics.rst:34
msgid "Example (browserview: use ``self.context`` since ``self`` is not acquisition-wrapped)::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:48
msgid "or from a template:"
msgstr ""

#: ../develop/plone/members/member_basics.rst:57
msgid "Getting any member"
msgstr ""

#: ../develop/plone/members/member_basics.rst:59
msgid "To get a member by username (you must have ``Manager`` role)::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:64
msgid "To get all usernames::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:70
msgid "Getting member information"
msgstr ""

#: ../develop/plone/members/member_basics.rst:72
msgid "Once you have access to the member object, you can grab basic information about it."
msgstr ""

#: ../develop/plone/members/member_basics.rst:75
msgid "Get the user's name::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:80
msgid "Reseting user password without emailing them"
msgstr ""

#: ../develop/plone/members/member_basics.rst:82
msgid "https://plone.org/documentation/kb/reset-a-password-without-having-to-email-one-to-the-user"
msgstr ""

#: ../develop/plone/members/member_basics.rst:85
msgid "Exporting and importing member passwords"
msgstr ""

#: ../develop/plone/members/member_basics.rst:87
msgid "You can also get at the hash of the user's password (only the hash is available, and only for standard Plone user objects) (in this example we're in Plone add-on context, since ``self`` is acquisition-wrapped)::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:96
msgid "Note that this is a private data structure. Depending on the Plone version and add-ons in use, it may not be available."
msgstr ""

#: ../develop/plone/members/member_basics.rst:99
msgid "You can use this hash directly when importing your user data, for example as follows (can be executed from a :doc:`debug prompt </develop/plone/misc/commandline>`.)::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:123
msgid "Also, take a look at a script for exporting Plone 3.0's memberdata and passwords:"
msgstr ""

#: ../develop/plone/members/member_basics.rst:126
msgid "http://blog.kagesenshi.org/2008/05/exporting-plone30-memberdata-and.html"
msgstr ""

#: ../develop/plone/members/member_basics.rst:131
msgid "Iterating all site users"
msgstr ""

#: ../develop/plone/members/member_basics.rst:148
msgid "Zope users, such as *admin*, are not included in this list."
msgstr ""

#: ../develop/plone/members/member_basics.rst:152
msgid "Getting all *Members* for a given *Role*"
msgstr ""

#: ../develop/plone/members/member_basics.rst:154
msgid "In this example we use the ``portal_membership`` tool. We assume that a role called ``Agent`` exists and that we already have the context::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:166
msgid "Groups"
msgstr ""

#: ../develop/plone/members/member_basics.rst:168
msgid "Groups are stored as ``PloneGroup`` objects. ``PloneGroup`` is a subclass of ``PloneUser``.  Groups are managed by the ``portal_groups`` tool."
msgstr ""

#: ../develop/plone/members/member_basics.rst:171
msgid "https://github.com/plone/Products.PlonePAS/blob/master/Products/PlonePAS/plugins/ufactory.py"
msgstr ""

#: ../develop/plone/members/member_basics.rst:173
#: ../develop/plone/members/member_basics.rst:190
msgid "https://github.com/plone/Products.PlonePAS/blob/master/Products/PlonePAS/plugins/group.py"
msgstr ""

#: ../develop/plone/members/member_basics.rst:176
msgid "Creating a group"
msgstr ""

#: ../develop/plone/members/member_basics.rst:186
#: ../develop/plone/serving/http_request_and_response.rst:148
#: ../develop/plone/serving/http_request_and_response.rst:456
#: ../develop/plone/serving/http_request_and_response.rst:541
msgid "For more information, see:"
msgstr ""

#: ../develop/plone/members/member_basics.rst:188
msgid "https://github.com/plone/Products.PlonePAS/blob/master/Products/PlonePAS/tests/test_groupstool.py"
msgstr ""

#: ../develop/plone/members/member_basics.rst:193
msgid "Add local roles to a group"
msgstr ""

#: ../develop/plone/members/member_basics.rst:201
msgid "This is an example of code in a *view*, where ``context`` is available."
msgstr ""

#: ../develop/plone/members/member_basics.rst:205
msgid "Update properties for a group"
msgstr ""

#: ../develop/plone/members/member_basics.rst:207
msgid "The ``editGroup`` method modifies the title and description in the ``source_groups`` plugin, and subsequently calls ``setGroupProperties(kw)`` which sets the properties on the ``mutable_properties`` plugin."
msgstr ""

#: ../develop/plone/members/member_basics.rst:218
msgid "Getting available groups"
msgstr ""

#: ../develop/plone/members/member_basics.rst:220
msgid "Getting all groups on the site is possible through ``acl_users`` and the ``source_groups`` plugin, which provides the functionality to manipulate Plone groups."
msgstr ""

#: ../develop/plone/members/member_basics.rst:224
msgid "Example to get only ids::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:230
msgid "Example to get full group information::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:240
msgid "List users within all groups"
msgstr ""

#: ../develop/plone/members/member_basics.rst:242
msgid "Example to get the email addresses of all users on a site, by group::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:257
msgid "Adding a user to a group"
msgstr ""

#: ../develop/plone/members/member_basics.rst:266
msgid "Removing a user from a group"
msgstr ""

#: ../develop/plone/members/member_basics.rst:273
msgid "Getting groups for a certain user"
msgstr ""

#: ../develop/plone/members/member_basics.rst:275
msgid "Below is an example of getting groups for the logged-in user (Plone 3 and earlier)::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:281
msgid "In Plone 4 you have to use::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:288
msgid "Checking whether a user exists"
msgstr ""

#: ../develop/plone/members/member_basics.rst:297
msgid "http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/RegistrationTool.py?rev=110418&view=auto"
msgstr ""

#: ../develop/plone/members/member_basics.rst:303
msgid "Creating users"
msgstr ""

#: ../develop/plone/members/member_basics.rst:305
msgid "Use the ``portal_registration`` tool. Example (browserview)::"
msgstr ""

#: ../develop/plone/members/member_basics.rst:361
msgid "Batch member creation"
msgstr ""

#: ../develop/plone/members/member_basics.rst:363
msgid "An example script can be run with bin/plonectl, tested on Plone 4.3.3; see http://gist.github.com/l34marr/02a9ef12a1e51c474bee"
msgstr ""

#: ../develop/plone/members/member_basics.rst:365
msgid "An example script tested on Plone 2.5.x; see https://plone.org/documentation/kb/batch-adding-users"
msgstr ""

#: ../develop/plone/members/member_basics.rst:369
msgid "Email login"
msgstr ""

#: ../develop/plone/members/member_basics.rst:372
msgid "In Plone 4 and up, it is a default feature."
msgstr ""

#: ../develop/plone/members/member_basics.rst:376
msgid "Custom member creation form: complex example"
msgstr ""

#: ../develop/plone/members/member_basics.rst:378
msgid "Below is an example of a Grok form which the administrator can use to create new users. New users will receive special properties and a folder for which they have ownership access.  The password is set to be the same as the username.  The user is added to a group named \"companies\"."
msgstr ""

#: ../develop/plone/members/member_basics.rst:383
msgid "Example ``company.py``::"
msgstr ""

#: ../develop/plone/members/member_profile.rst:3
msgid "Member profiles"
msgstr ""

#: ../develop/plone/members/member_profile.rst:9
msgid "How to manage Plone member properties programmatically"
msgstr ""

#: ../develop/plone/members/member_profile.rst:14
msgid "Member profile fields are the fields which the logged-in member can edit himself on his user account page."
msgstr ""

#: ../develop/plone/members/member_profile.rst:17
msgid "For more info, see:"
msgstr ""

#: ../develop/plone/members/member_profile.rst:20
msgid "``MemberDataTool``"
msgstr ""

#: ../develop/plone/members/member_profile.rst:20
#: ../develop/plone/members/member_profile.rst:23
msgid "http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/MemberDataTool.py?rev=110418&view=auto"
msgstr ""

#: ../develop/plone/members/member_profile.rst:23
msgid "``MemberData`` class"
msgstr ""

#: ../develop/plone/members/member_profile.rst:25
msgid "PlonePAS subclasses and extends MemberData and MemberDataTool."
msgstr ""

#: ../develop/plone/members/member_profile.rst:27
msgid "`See PlonePAS MemberDataTool <https://gist.github.com/svx/0f0b88ac2da4aaa38098>`_."
msgstr ""

#: ../develop/plone/members/member_profile.rst:29
msgid "`See PlonePAS MemberData class <https://gist.github.com/svx/7ced29e3dded6fe893c9>`_."
msgstr ""

#: ../develop/plone/members/member_profile.rst:32
msgid "Getting member profile properties"
msgstr ""

#: ../develop/plone/members/member_profile.rst:36
msgid "The following applies to vanilla Plone. If you have customized membership behavior it won't necessarily work."
msgstr ""

#: ../develop/plone/members/member_profile.rst:39
msgid "Member profile properties (title, address, biography, etc.) are stored in ``portal_membership`` tool."
msgstr ""

#: ../develop/plone/members/member_profile.rst:42
msgid "Available fields can be found in the :term:`ZMI` -> ``portal_membership`` -> :guilabel:`Properties` tab."
msgstr ""

#: ../develop/plone/members/member_profile.rst:45
msgid "The script below is a simple example showing how to list all member email addresses::"
msgstr ""

#: ../develop/plone/members/member_profile.rst:57
msgid "Accessing member data"
msgstr ""

#: ../develop/plone/members/member_profile.rst:61
msgid "Get member data by username"
msgstr ""

#: ../develop/plone/members/member_profile.rst:68
msgid "`ToolbarViewlet has some sample code <https://github.com/plone/plone.app.layout/blob/master/plone/app/layout/viewlets/common.py>`_"
msgstr ""

#: ../develop/plone/members/member_profile.rst:67
msgid "how to retrieve these properties."
msgstr ""

#: ../develop/plone/members/member_profile.rst:71
msgid "Getting member fullname"
msgstr ""

#: ../develop/plone/members/member_profile.rst:73
msgid "In Python code you can access properties on the ``MemberData`` object::"
msgstr ""

#: ../develop/plone/members/member_profile.rst:77
msgid "In a template you can do something along the same lines::"
msgstr ""

#: ../develop/plone/members/member_profile.rst:83
msgid "Note that this code won't work for anonymous users."
msgstr ""

#: ../develop/plone/members/member_profile.rst:86
msgid "Setting member profile properties"
msgstr ""

#: ../develop/plone/members/member_profile.rst:88
msgid "Use ``setMemberProperties(mapping={...})`` to batch update properties. Old properties are not removed."
msgstr ""

#: ../develop/plone/members/member_profile.rst:96
msgid "New properties must be explicitly declared in ``portal_memberdata``, before creation of the member, or ``setMemberProperties()`` will silently fail."
msgstr ""

#: ../develop/plone/members/member_profile.rst:102
msgid "How to retrofit existing members with new properties?"
msgstr ""

#: ../develop/plone/members/member_profile.rst:135
msgid "Setting password"
msgstr ""

#: ../develop/plone/members/member_profile.rst:137
msgid "Password is a special case."
msgstr ""

#: ../develop/plone/members/member_profile.rst:139
msgid "Example how to set the user password::"
msgstr ""

#: ../develop/plone/members/member_profile.rst:147
msgid "Increase minimum password size"
msgstr ""

#: ../develop/plone/members/member_profile.rst:149
msgid "To increase the minimum password size, copy ``validate_pwreset_password`` to your custom folder and insert the following lines::"
msgstr ""

#: ../develop/plone/members/member_profile.rst:155
msgid "This will increase the minimum password size for the password reset form to 8 characters. (This does not effect new user registration, that limit will still be 5.)"
msgstr ""

#: ../develop/plone/members/member_profile.rst:159
msgid "Don't forget to update your form templates to reflect your changes!"
msgstr ""

#: ../develop/plone/members/member_profile.rst:164
msgid "Default password length - password reset form"
msgstr ""

#: ../develop/plone/members/member_profile.rst:166
msgid "The password reset form's minimum password length is 5 characters. To increase this:"
msgstr ""

#: ../develop/plone/members/member_profile.rst:169
msgid "Copy ``validate_pwreset_password`` into your custom folder and add the following lines::"
msgstr ""

#: ../develop/plone/members/member_profile.rst:175
msgid "before the ``if state.getErrors():`` method."
msgstr ""

#: ../develop/plone/members/member_profile.rst:177
msgid "This would increase the minimum password size to 8 characters. Remember to update your form templates accordingly."
msgstr ""

#: ../develop/plone/members/member_profile.rst:182
msgid "Setting visual editor for all users"
msgstr ""

#: ../develop/plone/members/member_profile.rst:184
msgid "The *visual editor* property is set on the member upon creation."
msgstr ""

#: ../develop/plone/members/member_profile.rst:186
msgid "If you want to change all site members to use TinyMCE instead of Kupu. you have to do it using the command-line --- Plone provides no through-the-web way to change the properties of other members. Here is a script which does the job:"
msgstr ""

#: ../develop/plone/members/member_profile.rst:192
msgid "``migrate.py``::"
msgstr ""

#: ../develop/plone/members/member_profile.rst:222
msgid "Run it::"
msgstr ""

#: ../develop/plone/members/member_profile.rst:228
msgid "The script does not work through the :term:`ZMI` as member properties do not have proper security declarations, so no changes are permitted."
msgstr ""

#: ../develop/plone/members/member_profile.rst:233
msgid "Password reset requests"
msgstr ""

#: ../develop/plone/members/member_profile.rst:235
msgid "Directly manipulating password reset requests is useful e.g. for testing."
msgstr ""

#: ../develop/plone/members/member_profile.rst:237
msgid "Poking requests::"
msgstr ""

#: ../develop/plone/members/member_profile.rst:246
msgid "Clearing all requests::"
msgstr ""

#: ../develop/plone/members/membrane.rst:3
msgid "Members as content"
msgstr ""

#: ../develop/plone/members/membrane.rst:7
msgid "The ``Products.membrane`` and ``Products.remember`` add-ons provide member management where members are represented by Plone content items. The member-as-content paradigm makes member management radically flexible: members can be in different folders, have different workflows and states and different profile fields."
msgstr ""

#: ../develop/plone/members/membrane.rst:13
msgid "It is also possible to use this approach with dexterity; for that, use the ``dexterity.membrane`` add-on."
msgstr ""

#: ../develop/plone/members/membrane.rst:21
msgid "*remember* (small r) and *membrane* are framework add-on products for Plone which allows you to manipulate site members as normal content objects. The product also allows distributed user management and different user classes."
msgstr ""

#: ../develop/plone/members/membrane.rst:26
msgid "``Products.membrane`` provides a framework for integrating ``acl_users``, which manages access rights, with content-like members and tasks like login."
msgstr ""

#: ../develop/plone/members/membrane.rst:30
msgid "``Products.remember`` is a basic implementation of this with two different user workflows and a normal user schema."
msgstr ""

#: ../develop/plone/members/membrane.rst:33
msgid "``dexterity.membrane`` is a port of ``Products.membrane`` to the dexterity framework."
msgstr ""

#: ../develop/plone/members/membrane.rst:39
msgid "Read the `membrane tutorial <https://plone.org/documentation/tutorial/borg/membrane>`_."
msgstr ""

#: ../develop/plone/members/membrane.rst:41
msgid "See the example code ``Products.membrane.example``."
msgstr ""

#: ../develop/plone/members/membrane.rst:43
msgid "Read the documents at ``Products.remember/docs/tutorial``."
msgstr ""

#: ../develop/plone/members/membrane.rst:45
msgid "See the `Weblion FacultyStaffDirectory product <https://weblion.psu.edu/trac/weblion/wiki/FacultyStaffDirectory>`_, which is a sophisticated implementation of the framework."
msgstr ""

#: ../develop/plone/members/membrane.rst:49
msgid "It is recommended to enable debug-level logging output for membrane related unit tests, as ``PlonePAS`` code swallows several exceptions and does not output them unless debug level is activated."
msgstr ""

#: ../develop/plone/members/membrane.rst:54
msgid "Getting member by username"
msgstr ""

#: ../develop/plone/members/membrane.rst:69
msgid "Getting Plone member from ``MembraneUser`` or ``owner`` record"
msgstr ""

#: ../develop/plone/members/membrane.rst:71
msgid "Below is an example of how to resolve member content object from ``MembraneUser`` record \"owner\" who is user \"local_user\"::"
msgstr ""

#: ../develop/plone/members/membrane.rst:81
msgid "Creating a member"
msgstr ""

#: ../develop/plone/members/membrane.rst:83
msgid "The following snippet works in unit tests::"
msgstr ""

#: ../develop/plone/members/membrane.rst:114
msgid "Populating member fields automatically"
msgstr ""

#: ../develop/plone/members/membrane.rst:116
msgid "Use the following unit test snippet::"
msgstr ""

#: ../develop/plone/members/membrane.rst:154
msgid "Checking member validity"
msgstr ""

#: ../develop/plone/members/membrane.rst:156
msgid "The following snippet is useful for unit testing::"
msgstr ""

#: ../develop/plone/members/membrane.rst:169
msgid "Setting user password"
msgstr ""

#: ../develop/plone/members/membrane.rst:171
msgid "Passwords are stored hashed and can be set using the ``BaseMember._setPassword()`` method."
msgstr ""

#: ../develop/plone/members/membrane.rst:174
msgid "``_setPassword()`` takes the password as a plain-text argument and hashes it before storing::"
msgstr ""

#: ../develop/plone/members/membrane.rst:179
msgid "You may also use the ``portal_registrations`` tool. This method is security-checked and may be used from ZMI scripts::"
msgstr ""

#: ../develop/plone/members/membrane.rst:185
msgid "Use ``getToolByName`` rather than acquiring the tool from  ``context`` if you're doing this in a browser view."
msgstr ""

#: ../develop/plone/members/membrane.rst:189
msgid "Accessing hashed password"
msgstr ""

#: ../develop/plone/members/membrane.rst:191
msgid "Use the password attribute directly::"
msgstr ""

#: ../develop/plone/members/membrane.rst:195
msgid "The password hash should be a unicode string."
msgstr ""

#: ../develop/plone/members/membrane.rst:198
msgid "By default, ``Products.remember`` uses the ``HMACHash`` hasher. As a salt, the ``str(context)`` string is used. This means that it is not possible to move hashed password from one context item to another. For more information, see the ``Products.remember.content.password_hashers`` module."
msgstr ""

#: ../develop/plone/members/membrane.rst:205
msgid "Moving members"
msgstr ""

#: ../develop/plone/members/membrane.rst:207
msgid "Moving members is not straightforward, as by default member password is hashed with the member location."
msgstr ""

#: ../develop/plone/members/membrane.rst:210
msgid "Members need to reregister their password after being moved from one folder to another."
msgstr ""

#: ../develop/plone/members/membrane.rst:213
msgid "Here is a complex function to perform moving by recreating the user and deleting the old object::"
msgstr ""

#: ../develop/plone/members/membrane.rst:404
msgid "Configuring default roles with Dexterity"
msgstr ""

#: ../develop/plone/members/membrane.rst:406
msgid "To configure default roles for Dexterity-based members, you need a class providing the ``IMembraneUserRoles`` interface, and to register it as adapter."
msgstr ""

#: ../develop/plone/members/membrane.rst:409
msgid "Define the class (here, in a file named ``roles.py``)::"
msgstr ""

#: ../develop/plone/members/membrane.rst:427
msgid "And register this class in ``configure.zcml``:"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:3
msgid "Sharing"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:5
msgid "TODO: remove this file, eventually move code example to a \"cookbook\" section."
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:7
msgid "Out of date"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:9
msgid "This page is out of date. Please visit: :doc:`Local Roles </develop/plone/security/local_roles>`."
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:14
msgid "Customizing the sharing feature of Plone"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:22
msgid "`Sharing tab source code <https://github.com/plone/plone.app.workflow/blob/master/plone/app/workflow/browser/sharing.py>`_"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:24
msgid "`Default sharing tab role translations <https://github.com/plone/plone.app.workflow/blob/master/plone/app/workflow/configure.zcml>`_"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:28
msgid "https://pypi.python.org/pypi/collective.sharingroles"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:30
msgid "http://encolpe.wordpress.com/2010/02/08/add-a-new-role-in-the-sharing-tab-for-plone-3/"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:33
msgid "Setting sharing rights programmatically"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:36
msgid "Complex example: Create one folder per group and add sharing rights"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:38
msgid "The sample code"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:40
msgid "Creates one folder per group, with some groups excluded. The folder is not created if it exists."
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:42
msgid "Blocks role inheritance for the group"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:44
msgid "Gives edit access to the group through sharing"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:46
msgid "Gives view access to the logged in users through sharing"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:48
msgid "Example is provided as Zope External Method. Create External Method in the target parent folder through ZMI. Then run \"Test\" for this external method in ZMI."
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:107
msgid "General methods to manipulate local roles (sharing)"
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:114
msgid "would grant the role \"Reader\" (Can View on the Sharing Tab) to userid."
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:116
msgid "Beware that this will set the local roles for the user to only ['Reader']. If the user already has other local roles, this will (untested) clear those."
msgstr ""

#: ../develop/plone/members/sharing_tab.rst:118
msgid "It will not affect inherited roles."
msgstr ""

#: ../develop/plone/misc/annotations.rst:7
msgid "Annotations"
msgstr ""

#: ../develop/plone/misc/annotations.rst:11
#: ../develop/plone/misc/slideshow.rst:7
msgid "How to use annotation design pattern to store arbitrary values on Python objects (Plone site, HTTP request) for storage and caching purposes."
msgstr ""

#: ../develop/plone/misc/annotations.rst:19
msgid "Annotations is conflict-free way to stick attributes on arbitrary Python objects."
msgstr ""

#: ../develop/plone/misc/annotations.rst:21
msgid "Plone uses annotations for:"
msgstr ""

#: ../develop/plone/misc/annotations.rst:23
msgid "Storing field data in Archetypes (Annotation storage)."
msgstr ""

#: ../develop/plone/misc/annotations.rst:25
msgid "Caching values on HTTP request object (plone.memoize cache decorators)."
msgstr ""

#: ../develop/plone/misc/annotations.rst:27
msgid "Storing settings information in portal or content object (various add-on products)."
msgstr ""

#: ../develop/plone/misc/annotations.rst:30
msgid "See `zope.annotation package <https://pypi.python.org/pypi/zope.annotation/3.4.1>`_."
msgstr ""

#: ../develop/plone/misc/annotations.rst:33
msgid "HTTP request example"
msgstr ""

#: ../develop/plone/misc/annotations.rst:35
msgid "Store cached values on HTTP request during the life cycle of one request processing.  This allows you to cache computed values if the computation function is called from the different, unrelated, code paths."
msgstr ""

#: ../develop/plone/misc/annotations.rst:54
msgid "Content annotations"
msgstr ""

#: ../develop/plone/misc/annotations.rst:57
msgid "Overview and basic usage"
msgstr ""

#: ../develop/plone/misc/annotations.rst:59
msgid "If you want to extend any Plone content to contain \"custom\" settings annotations is the recommended way to do it."
msgstr ""

#: ../develop/plone/misc/annotations.rst:62
msgid "Your add-on can store its settings in Plone site root object using local utilities or annotations."
msgstr ""

#: ../develop/plone/misc/annotations.rst:65
msgid "You can store custom settings on content objects using annotations."
msgstr ""

#: ../develop/plone/misc/annotations.rst:67
msgid "By default, in content annotations are stored:"
msgstr ""

#: ../develop/plone/misc/annotations.rst:69
msgid "Assigned portlets and their settings."
msgstr ""

#: ../develop/plone/misc/annotations.rst:71
msgid "Archetypes content type fields using ``AnnotationStorage`` (like ``text`` field on Document)."
msgstr ""

#: ../develop/plone/misc/annotations.rst:74
msgid "Behavior data from :mod:`plone.behavior` package."
msgstr ""

#: ../develop/plone/misc/annotations.rst:91
msgid "Advanced content annotation"
msgstr ""

#: ../develop/plone/misc/annotations.rst:93
msgid "The above example is enough for storing simple values as annotations. You may provide more complex annotation objects depending on your application logic on various content types. This example shows how to add a simple \"Like / Dislike\" counter on a content object."
msgstr ""

#: ../develop/plone/misc/annotations.rst:119
msgid "At this step it is essential to check that your custom annotation class can be `pickled <http://docs.python.org/library/pickle.html#what-can-be-pickled-and-unpickled>`_. In the Zope world, this means that you cannot hold in your annotation object any reference to a content too."
msgstr ""

#: ../develop/plone/misc/annotations.rst:127
msgid "Use the UID of a content object if you need to keep the reference of that content object in an annotation."
msgstr ""

#: ../develop/plone/misc/annotations.rst:130
msgid "The most pythonic recipe to get (and set if not existing) your annotation for a given key is:"
msgstr ""

#: ../develop/plone/misc/annotations.rst:148
msgid "This way, you're sure that :"
msgstr ""

#: ../develop/plone/misc/annotations.rst:150
msgid "You won't create annotations on an object that can't support them."
msgstr ""

#: ../develop/plone/misc/annotations.rst:152
msgid "You will create a new fresh annotation mastered with your :class:`LikeDislike` for your context object if it does not already exist."
msgstr ""

#: ../develop/plone/misc/annotations.rst:155
msgid "You can play with your :class:`LikeDislike` annotation object as with any Python object, all attributes changes will be stored automatically in the annotations of the associated content object."
msgstr ""

#: ../develop/plone/misc/annotations.rst:162
msgid "Wrapping your annotation with an adapter"
msgstr ""

#: ../develop/plone/misc/annotations.rst:164
msgid ":mod:`zope.annotation` comes with the :func:`factory` function that transforms the annotation class into an adapter (possibly named as the annotation key)."
msgstr ""

#: ../develop/plone/misc/annotations.rst:167
msgid "In addition the annotation created this way have location awareness, having :attr:`__parent__` and :attr:`__name__` attributes."
msgstr ""

#: ../develop/plone/misc/annotations.rst:170
msgid "Let's go back to the above sample and use the :func:`zope.annotation.factory` function."
msgstr ""

#: ../develop/plone/misc/annotations.rst:246
msgid "Read a full doc / test / demo of the :func:`zope.annotation.factory` in the :file:`README.txt` file in the root of :mod:`zope.annotation` package for more advanced usages."
msgstr ""

#: ../develop/plone/misc/annotations.rst:251
msgid "Cleaning up content annotations"
msgstr ""

#: ../develop/plone/misc/annotations.rst:255
msgid "If you store full Python objects in annotations you need to clean them up during your add-on uninstallation. Otherwise if Python code is not present you can no longer import or export Plone site (annotations are pickled objects in the database and pickles do no longer work if the code is not present)."
msgstr ""

#: ../develop/plone/misc/annotations.rst:261
msgid "How to clean up annotations on content objects:"
msgstr ""

#: ../develop/plone/misc/annotations.rst:303
msgid "Make your code persistence free"
msgstr ""

#: ../develop/plone/misc/annotations.rst:305
msgid "There is one issue with the above methods: you are creating new persistent classes so your data need your source code. That makes your code hard to uninstall (have to keep the code BBB + cleaning up the DB by walking throw all objects)"
msgstr ""

#: ../develop/plone/misc/annotations.rst:310
msgid "So here is an other pattern to store data in annotations: Use already existing persistent base code instead of creating your own."
msgstr ""

#: ../develop/plone/misc/annotations.rst:313
msgid "Please use one of theses:"
msgstr ""

#: ../develop/plone/misc/annotations.rst:315
msgid "BTrees"
msgstr ""

#: ../develop/plone/misc/annotations.rst:316
msgid "PersistentList"
msgstr ""

#: ../develop/plone/misc/annotations.rst:317
msgid "PersistentDict"
msgstr ""

#: ../develop/plone/misc/annotations.rst:319
msgid "This pattern is used by cioppino.twothumbs and collective.favoriting addons."
msgstr ""

#: ../develop/plone/misc/annotations.rst:321
msgid "How to achieve this: https://gist.github.com/toutpt/7680498"
msgstr ""

#: ../develop/plone/misc/annotations.rst:326
msgid "https://plone.org/documentation/tutorial/embrace-and-extend-the-zope-3-way/annotations"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:3
msgid "Clock and asyncronous tasks"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:8
msgid "How to run background tasks or cron jobs with Zope"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:13
msgid "Cron jobs"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:15
msgid "You can use simple UNIX cron + wget combo to make timed jobs in Plone."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:17
msgid "If you need to authenticate, e.g. as an admin, Zope users (not Plone users) can be authenticated using HTTP Basic Auth."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:20
msgid "Create user in Zope root (not Plone site root) in acl_users folder"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:22
msgid "Call it via HTTP Basic Auth"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:24
msgid "http://username:password@localhost:8080/yoursideid/@@clock_view_name"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:26
msgid "The ``--auth-no-challenge`` option to the wget command will authenticate even if the server doesn't ask you to authenticate. It might come in handy, as Plone does not ask for HTTP authentication, and will just serve Unauthorized if permissions aren't sufficient."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:32
msgid "Clock server"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:34
msgid "You can make Zope to make regular calls to your views."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:36
msgid "Add in buildout.cfg::"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:55
msgid "Create a corresponding user in ZMI."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:57
msgid "In detail:"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:59
msgid "method - Path from root to an executable Zope method (Python script, external method, etc.) The method must receive no arguments."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:60
msgid "period - Seconds between each call to the method. Typically, at least 30 specified."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:61
msgid "user - a Zope Username"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:62
msgid "password - The password of this user Zope"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:63
msgid "host - The name of the host that is in the header of a request as host: is specified."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:65
msgid "To check whether the server clock is running, restart the instance or the ZEO client in the foreground and see if a message similar to the following is displayed::"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:71
msgid "If you are using a public source control repository for your ``buildout.cfg`` you might want to put zope-conf-additional= to ``secret.cfg`` which lies only on the production server and is never committed to the version control::"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:83
msgid "Creating a separate ZEO instance for long running tasks"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:85
msgid "Below is an example how to extend a single process Plone instance buildout to contain two ZEO front end processes, client1 and client2 and dedicate client2 for long running tasks. In this example, ``Products.feedfeeder`` RSS zopeuser is set to run on client2."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:90
msgid "Client1 keeps acting like standalone instance, in the same port as instance used to be"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:92
msgid "Clocked tasks are run on client2 - it does not serve other HTTP requests. Clocked tasks are done using Zope clock server."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:95
msgid "The purpose of this is that client2 does heavy writes to the database, potentially blocking the normal site operation of the site if we don't have a separate client for it."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:98
msgid "We create additional ``production.cfg`` file which extends the default ``buildout.cfg`` file. You still can use ``buildout.cfg`` as is for the development, but on the productoin server your buildout command must be run for the ZEO server enabled file."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:102
msgid "Actual clock server jobs, with usernames and passwords, are stored in a separate ``secret.cfg`` file which is only available on the production server and is not stored in the version control system. The user credentials for a specially created a Zope user, not Plone user. This user can be created through ``acl_users`` in Zope root in ZMI."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:107
msgid "We also include ``plonectl`` command for easy management of ZEO server, client1 and client2."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:109
msgid "``production.cfg`` (note - you need to run this with ``bin/buildout -c production.cfg``)::"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:163
msgid "``secret.cfg`` contains actual clocked jobs. This file contains passwords so it is not recommended to put it under the version control::"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:210
msgid "Asynchronous"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:212
msgid "Asyncronous tasks are long-running tasks which are run on their own thread."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:215
msgid "lovely.remotetask"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:217
msgid "``lovely.remotetask`` is worked based long-running task manager for Zope 3."
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:219
msgid "NO WORKING EXAMPLES HOW TO USE THIS"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:221
msgid "`lovely.remotetask package <https://pypi.python.org/pypi/lovely.remotetask>`_ package page"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:223
msgid "http://tarekziade.wordpress.com/2007/09/28/a-co-server-for-zope/"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:225
msgid "http://swik.net/Zope/Planet+Zope/Trying+lovely.remotetask+for+cron+jobs/c1kfs"
msgstr ""

#: ../develop/plone/misc/asyncronoustasks.rst:227
msgid "http://archives.free.net.ph/message/20081015.201535.2d147fec.fr.html"
msgstr ""

#: ../develop/plone/misc/commandline.rst:3
msgid "Command-line interaction and scripting"
msgstr ""

#: ../develop/plone/misc/commandline.rst:7
msgid "How to run command-line Python scripts, timed jobs (cron) and batch jobs against Plone sites and Zope application server."
msgstr ""

#: ../develop/plone/misc/commandline.rst:17
msgid "Plone code is somewhat ugly and expects you to have real HTTP request lifecycle to do many things. For command line scripts, you need to mock up this and mocking up ofter fails. Instead of trying to create a pure command-line script, just create a browser view and call that browser view usings wget or lynx or similar command line HTTP tool."
msgstr ""

#: ../develop/plone/misc/commandline.rst:23
msgid "Zope provides facilities to run command-line scripts. or maintenance work, like migration script."
msgstr ""

#: ../develop/plone/misc/commandline.rst:26
msgid "The output to terminal is instance (Plone buffers HTML output)"
msgstr ""

#: ../develop/plone/misc/commandline.rst:28
msgid "You can stop processing using CTRL+C"
msgstr ""

#: ../develop/plone/misc/commandline.rst:30
msgid "You can integrate scripts with standard UNIX tools, like cron"
msgstr ""

#: ../develop/plone/misc/commandline.rst:34
msgid "If the site runs in a single process Zope mode (no ZEO), the actual site instance must be stopped to run a command line script as the one process locks the database (Data.fs)."
msgstr ""

#: ../develop/plone/misc/commandline.rst:38
msgid "Command line scripts are also useful for long-running transaction processing"
msgstr ""

#: ../develop/plone/misc/commandline.rst:40
msgid "A web site runs in multi-client ZEO mode. One client is always offline, reserved for running command-line scripts."
msgstr ""

#: ../develop/plone/misc/commandline.rst:43
msgid "Asynchronous long-running transactions are run from this ZEO client, without disturbing the normal site functionality"
msgstr ""

#: ../develop/plone/misc/commandline.rst:48
msgid "`lovely.remotetask package <https://pypi.python.org/pypi/lovely.remotetask>`_ for more fine-graned control and Zope-based cron jobs"
msgstr ""

#: ../develop/plone/misc/commandline.rst:53
msgid "Starting interactive interpreter"
msgstr ""

#: ../develop/plone/misc/commandline.rst:55
msgid "The *bin/instance debug* command starts an interactive interpreter with the Zope application server and database loaded. To have persistent utilities loaded, you should also provide the id of your Plone site. The following example assumes you have a plone site named \"Plone\""
msgstr ""

#: ../develop/plone/misc/commandline.rst:65
msgid "The instance must be stopped in order to run this."
msgstr ""

#: ../develop/plone/misc/commandline.rst:68
msgid "Running scripts"
msgstr ""

#: ../develop/plone/misc/commandline.rst:70
msgid "Use *bin/instance run* command to run scripts which can interact with the opened database."
msgstr ""

#: ../develop/plone/misc/commandline.rst:77
msgid "The script will have global ``app`` variable assigned to the Zope application server root. You can use this as a starting point and traverse into your Plone site(s)."
msgstr ""

#: ../develop/plone/misc/commandline.rst:80
msgid "Script could look like::"
msgstr ""

#: ../develop/plone/misc/commandline.rst:108
msgid "You probably need to spoof your :doc:`security credentials </develop/plone/security/permissions>`."
msgstr ""

#: ../develop/plone/misc/commandline.rst:112
msgid "Instance must be stopped in order to run this."
msgstr ""

#: ../develop/plone/misc/commandline.rst:115
msgid "Cron and timed jobs"
msgstr ""

#: ../develop/plone/misc/commandline.rst:117
msgid "Cron is UNIX clock daemon for timed tasks."
msgstr ""

#: ../develop/plone/misc/commandline.rst:119
msgid "If you have a ZEO cluster you can have one ZEO client reserved for command line processing. Cron job will run scripts through this ZEO client."
msgstr ""

#: ../develop/plone/misc/commandline.rst:122
msgid "Alternatively, you can use"
msgstr ""

#: ../develop/plone/misc/commandline.rst:124
msgid "cron to call localhost URL using curl or wget UNIX commands"
msgstr ""

#: ../develop/plone/misc/commandline.rst:126
msgid "Use Zope clock daemon"
msgstr ""

#: ../develop/plone/misc/commandline.rst:130
msgid "For long running batch processes it is must that you run your site in ZEO mode. Otherwise the batch job will block the site access for the duration of the batch job transaction. If the batch job takes long to process the site might be unavailable for the visitors for a long period."
msgstr ""

#: ../develop/plone/misc/commandline.rst:138
msgid "Scripting context"
msgstr ""

#: ../develop/plone/misc/commandline.rst:140
msgid "The command line interpreter and scripts gets following global context variables"
msgstr ""

#: ../develop/plone/misc/commandline.rst:142
msgid "*app* global variable which holds the root of Zope application server."
msgstr ""

#: ../develop/plone/misc/commandline.rst:144
msgid "sys.argv contains command-line parameters after python script name"
msgstr ""

#: ../develop/plone/misc/commandline.rst:146
msgid "argv[0] = script name"
msgstr ""

#: ../develop/plone/misc/commandline.rst:148
msgid "arvg[1] = first command line argument"
msgstr ""

#: ../develop/plone/misc/commandline.rst:151
msgid "To access your site object, you can traverse down from app::"
msgstr ""

#: ../develop/plone/misc/commandline.rst:159
msgid "Committing transactions"
msgstr ""

#: ../develop/plone/misc/commandline.rst:161
msgid "You need to manually commit transactions if you change ZODB data from the command line."
msgstr ""

#: ../develop/plone/misc/commandline.rst:163
msgid "Example how to commit::"
msgstr ""

#: ../develop/plone/misc/commandline.rst:172
msgid "http://www.enfoldsystems.com/software/server/docs/4.0/enfolddebuggingtools.html"
msgstr ""

#: ../develop/plone/misc/commandline.rst:175
msgid "zopepy"
msgstr ""

#: ../develop/plone/misc/commandline.rst:177
msgid "zopepy buildout recipe creating bin/zopepy command which you can use to run Python scripts in Zope environment set-up (PYTHONPATH, database connection, etc.)"
msgstr ""

#: ../develop/plone/misc/commandline.rst:180
msgid "https://pypi.python.org/pypi/zc.recipe.egg"
msgstr ""

#: ../develop/plone/misc/commandline.rst:182
msgid "buildout.cfg example::"
msgstr ""

#: ../develop/plone/misc/commandline.rst:193
msgid "Then running::"
msgstr ""

#: ../develop/plone/misc/commandline.rst:197
msgid "...or if you want to run a script outside buildout folder::"
msgstr ""

#: ../develop/plone/misc/commandline.rst:204
msgid "Setting up ZEO for command line-processing"
msgstr ""

#: ../develop/plone/misc/commandline.rst:206
msgid "Plone site HTTP requests are processed by one process per requests. One process cannot handle more than one request once. If you need to have long-running transactions you need to at least two front end processes, ZEO clients, so that long-running transactions won't block your site."
msgstr ""

#: ../develop/plone/misc/commandline.rst:210
msgid "`Converting instance to ZEO based configuration <http://docs.plone.org/4/en/old-reference-manuals/buildout/zope_to_zeo.html>`_"
msgstr ""

#: ../develop/plone/misc/commandline.rst:212
msgid "Your code might want to call transaction.commit() now and then to commit the current transaction."
msgstr ""

#: ../develop/plone/misc/commandline.rst:215
msgid "Posing as user"
msgstr ""

#: ../develop/plone/misc/commandline.rst:217
msgid "Zope functionality often assumes you have logged in as certain user or you are anonymous user. Command-line scripts do not have user information set by default."
msgstr ""

#: ../develop/plone/misc/commandline.rst:221
msgid "How to set the effective Zope user to a regular user using `plone.api context managers </external/plone.api/docs/env.html>`_::"
msgstr ""

#: ../develop/plone/misc/commandline.rst:237
msgid "Spoofing HTTP request"
msgstr ""

#: ../develop/plone/misc/commandline.rst:239
msgid "When running from command-line, HTTP request object is not available. Some Zope code might expect this and you need to spoof the request."
msgstr ""

#: ../develop/plone/misc/commandline.rst:242
msgid "Below is an example command line script which set-ups faux HTTP request and portal_skins skin layers::"
msgstr ""

#: ../develop/plone/misc/commandline.rst:303
msgid "http://wiki.zope.org/zope2/HowToFakeREQUESTInDebugger"
msgstr ""

#: ../develop/plone/misc/commandline.rst:306
msgid "Creating Plone site in buildout"
msgstr ""

#: ../develop/plone/misc/commandline.rst:308
msgid "You can pre-generate the site from the buildout run."
msgstr ""

#: ../develop/plone/misc/commandline.rst:310
msgid "https://pypi.python.org/pypi/collective.recipe.plonesite#example"
msgstr ""

#: ../develop/plone/misc/commandline.rst:313
msgid "screen"
msgstr ""

#: ../develop/plone/misc/commandline.rst:315
msgid "screen is an UNIX command to start a virtual terminal. Screen lets processes run even if your physical terminal becomes disconnected. This effectively allows you to run long-running command line jobs over a crappy Internet connection."
msgstr ""

#: ../develop/plone/misc/commandline.rst:321
msgid "Start new screen"
msgstr ""

#: ../develop/plone/misc/commandline.rst:323
#: ../develop/plone/misc/commandline.rst:336
msgid "Type command::"
msgstr ""

#: ../develop/plone/misc/commandline.rst:327
msgid "If you have sudo'ed to another user you first need to run::"
msgstr ""

#: ../develop/plone/misc/commandline.rst:331
msgid "http://dbadump.blogspot.com/2009/04/start-screen-after-sudo-su-to-another.html"
msgstr ""

#: ../develop/plone/misc/commandline.rst:334
msgid "Attach to an existing screen"
msgstr ""

#: ../develop/plone/misc/context.rst:3
msgid "Helper views and tools"
msgstr ""

#: ../develop/plone/misc/context.rst:10
msgid "This document explains how to access view and context utilities in Plone."
msgstr ""

#: ../develop/plone/misc/context.rst:13
msgid "IPortalState and IContextState"
msgstr ""

#: ../develop/plone/misc/context.rst:15
msgid "``IPortalState`` defines ``IContextState`` view-like interfaces to access miscellaneous information useful for the rendering of the current page. The views are cached properly, so they should access the information quite effectively."
msgstr ""

#: ../develop/plone/misc/context.rst:20
msgid "``IPortalState`` is mapped as the ``plone_portal_state`` name view."
msgstr ""

#: ../develop/plone/misc/context.rst:22
msgid "``IContextState`` is mapped as the ``plone_context_state`` named view."
msgstr ""

#: ../develop/plone/misc/context.rst:24
msgid "``ITools`` is mapped as the ``plone_tools`` named view."
msgstr ""

#: ../develop/plone/misc/context.rst:26
msgid "To see what's available through the interface, read the documentation in the `plone.app.layout.globals.interfaces <https://github.com/plone/plone.app.layout/blob/master/plone/app/layout/globals/interfaces.py>`_ module."
msgstr ""

#: ../develop/plone/misc/context.rst:31
msgid "Example showing how to get the portal root URL::"
msgstr ""

#: ../develop/plone/misc/context.rst:51
msgid "Example showing how to get the current language::"
msgstr ""

#: ../develop/plone/misc/context.rst:60
msgid "Example showing how to expose ``portal_state`` helper to a template:"
msgstr ""

#: ../develop/plone/misc/context.rst:62
msgid "ZCML includes ``portal_state`` in ``allowed_attributes``"
msgstr ""

#: ../develop/plone/misc/context.rst:74
msgid "A Python class exposes the variable::"
msgstr ""

#: ../develop/plone/misc/context.rst:86
msgid "Templates can use it as follows:"
msgstr ""

#: ../develop/plone/misc/context.rst:94
msgid "You can directly look up ``portal_state`` in templates using acquisition and view traversal, without need of ZCML code or Python view code changes. This is useful e.g. in overridden viewlet templates:"
msgstr ""

#: ../develop/plone/misc/context.rst:117
msgid "Use in templates and expressions"
msgstr ""

#: ../develop/plone/misc/context.rst:119
msgid "You can use ``IContextState`` and ``IPortalState`` in :term:`TALES` expressions, e.g. ``portal_actions``, as well."
msgstr ""

#: ../develop/plone/misc/context.rst:122
msgid "Example ``portal_actions`` conditional expression::"
msgstr ""

#: ../develop/plone/misc/context.rst:130
msgid "Tools are persistent utility classes available in the site root. They are visible in the :term:`ZMI`, and sometimes expose useful information or configuration here. Tools include e.g.:"
msgstr ""

#: ../develop/plone/misc/context.rst:134
msgid "``portal_catalog``"
msgstr ""

#: ../develop/plone/misc/context.rst:135
msgid "Search and indexing facilities for content"
msgstr ""

#: ../develop/plone/misc/context.rst:136
msgid "``portal_workflow``"
msgstr ""

#: ../develop/plone/misc/context.rst:137
msgid "Look up workflow status, and do workflow-related actions."
msgstr ""

#: ../develop/plone/misc/context.rst:140
msgid "``portal_membership``"
msgstr ""

#: ../develop/plone/misc/context.rst:139
msgid "User registration information."
msgstr ""

#: ../develop/plone/misc/context.rst:143
msgid "Portal tools are deprecated and are phased out and being replaced by `utilities <develop/addons/components/utilities.html>`_. The `Removal of selected portal tools <https://dev.plone.org/ticket/13770>`_ PLIP is created to migrate from tools to utilities."
msgstr ""

#: ../develop/plone/misc/context.rst:150
msgid "Get a portal tool using plone.api"
msgstr ""

#: ../develop/plone/misc/context.rst:152
msgid "It is recommended to use `plone.api </external/plone.api/docs/portal.html#get-tool>`_ to get a portal tool::"
msgstr ""

#: ../develop/plone/misc/context.rst:158
msgid "The ``plone.api`` package exposes functionality from portal tools, it is not longer necessary to directly call a tool. For example; the API can be used the get the `workflow state </external/plone.api/docs/content.html#get-workflow-state>`_, `change the workflow state </external/plone.api/docs/content.html#transition>`_, `get a member </external/plone.api/docs/user.html#get-all-users>`_ and `get the member properties </external/plone.api/docs/user.html#user-properties>`_."
msgstr ""

#: ../develop/plone/misc/context.rst:168
msgid "ITools interface"
msgstr ""

#: ../develop/plone/misc/context.rst:170
msgid "`plone.app.layout.globals.interfaces.ITools interface <https://github.com/plone/plone.app.layout/blob/master/plone/app/layout/globals/interfaces.py>`_ and Tools BrowserView provide cached access for the most commonly needed tools."
msgstr ""

#: ../develop/plone/misc/context.rst:174
msgid "``ITools`` is mapped as the ``plone_tools`` view for traversing."
msgstr ""

#: ../develop/plone/misc/context.rst:192
msgid "``IPlone``"
msgstr ""

#: ../develop/plone/misc/context.rst:194
msgid "`Products.CMFPlone.browser.interfaces.IPlone <https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/browser/interfaces.py#L183>`_ provides some helper methods for Plone specific functionality and user interface."
msgstr ""

#: ../develop/plone/misc/context.rst:197
msgid "``IPlone`` helper views is registered under the name ``plone``"
msgstr ""

#: ../develop/plone/misc/context.rst:200
msgid "``getToolByName``"
msgstr ""

#: ../develop/plone/misc/context.rst:202
msgid "``getToolByName`` is the old-fashioned way of getting tools, using the context object as a starting point. It also works for tools which do not implement the ``ITools`` interface."
msgstr ""

#: ../develop/plone/misc/context.rst:206
msgid "``getToolByName`` gets any Plone portal root item using acquisition."
msgstr ""

#: ../develop/plone/misc/datetime.rst:3
msgid "Zope DateTime"
msgstr ""

#: ../develop/plone/misc/datetime.rst:7
msgid "Using Zope DateTime class in Plone programming"
msgstr ""

#: ../develop/plone/misc/datetime.rst:14
msgid "Some Plone dates are stored as Zope DateTime objects. This is different from standard Python datetime (notice the letter casing). Zope DateTime predates Python datetime which was added in Python 2.4. Zope DateTime is old code, so do rites necessary for your religion before programming with it."
msgstr ""

#: ../develop/plone/misc/datetime.rst:20
#: ../develop/plone/misc/datetime.rst:61
msgid "`Zope DateTime HTML API documentation <https://pypi.python.org/pypi/DateTime/>`_"
msgstr ""

#: ../develop/plone/misc/datetime.rst:22
msgid "`Python datetime documentation <http://docs.python.org/library/datetime.html>`_"
msgstr ""

#: ../develop/plone/misc/datetime.rst:26
msgid "Using Python datetime is recommended if possible. Zope DateTime should be dealt in legacy systems only as Python datetime is much more documented and widely used."
msgstr ""

#: ../develop/plone/misc/datetime.rst:31
msgid "Default formatting"
msgstr ""

#: ../develop/plone/misc/datetime.rst:33
msgid "Since Plone 4"
msgstr ""

#: ../develop/plone/misc/datetime.rst:35
msgid "A per-language format string from a translations is preferred"
msgstr ""

#: ../develop/plone/misc/datetime.rst:37
msgid "If such string is not available the default is taken from portal_properties / site_properties"
msgstr ""

#: ../develop/plone/misc/datetime.rst:40
msgid "Formatting examples"
msgstr ""

#: ../develop/plone/misc/datetime.rst:42
msgid "US example::"
msgstr ""

#: ../develop/plone/misc/datetime.rst:47
msgid "European style format:"
msgstr ""

#: ../develop/plone/misc/datetime.rst:49
msgid "localTimeFormat: %d.%m.%Y (like 1.12.2010) localLongTimeFormat: %H:%M %d.%m.%Y (like 12:59 1.12.2010)"
msgstr ""

#: ../develop/plone/misc/datetime.rst:54
msgid "https://dev.plone.org/wiki/DateTimeFormatting"
msgstr ""

#: ../develop/plone/misc/datetime.rst:56
msgid "http://docs.python.org/library/time.html#time.strftime"
msgstr ""

#: ../develop/plone/misc/datetime.rst:59
msgid "DateTime API"
msgstr ""

#: ../develop/plone/misc/datetime.rst:63
msgid "You may find the following links useful"
msgstr ""

#: ../develop/plone/misc/datetime.rst:65
msgid "`Source code <http://svn.zope.org/DateTime/trunk/src/DateTime/DateTime.py?rev=96241&view=auto>`_"
msgstr ""

#: ../develop/plone/misc/datetime.rst:67
msgid "`README <http://svn.zope.org/DateTime/trunk/src/DateTime/DateTime.txt?rev=96241&view=auto>`_"
msgstr ""

#: ../develop/plone/misc/datetime.rst:69
msgid "`Interface description <http://svn.zope.org/DateTime/trunk/src/DateTime/interfaces.py?rev=96241&view=auto>`_"
msgstr ""

#: ../develop/plone/misc/datetime.rst:72
msgid "Converting between DateTime and datetime"
msgstr ""

#: ../develop/plone/misc/datetime.rst:74
msgid "Since two different datetime object types are used, you need to often convert between them."
msgstr ""

#: ../develop/plone/misc/datetime.rst:76
msgid "You can convert Zope DateTime objects to datetime objects like so::"
msgstr ""

#: ../develop/plone/misc/datetime.rst:82
msgid "Vice versa, to convert from a Python datetime object to a Zope DateTime one::"
msgstr ""

#: ../develop/plone/misc/datetime.rst:86
msgid "Note, if you use timezone information in python datetime objects, you might loose some information when converting. Zope DateTime handles all timezone information as offsets from GMT."
msgstr ""

#: ../develop/plone/misc/datetime.rst:92
msgid "DateTime problems and pitfalls"
msgstr ""

#: ../develop/plone/misc/datetime.rst:94
msgid "This **will fail** silenty and you get a wrong date::"
msgstr ""

#: ../develop/plone/misc/datetime.rst:98
#: ../develop/plone/persistency/database.rst:231
msgid "Please see"
msgstr ""

#: ../develop/plone/misc/datetime.rst:100
msgid "http://pyyou.wordpress.com/2010/01/11/datetime-against-mx-datetime/"
msgstr ""

#: ../develop/plone/misc/datetime.rst:103
msgid "Parsing both US and European dates"
msgstr ""

#: ../develop/plone/misc/datetime.rst:119
msgid "Friendly date/time formatting"
msgstr ""

#: ../develop/plone/misc/datetime.rst:121
msgid "Format datetime relative to the current time, human-readable::"
msgstr ""

#: ../develop/plone/misc/datetime.rst:170
msgid "Friendly date/time from TAL"
msgstr ""

#: ../develop/plone/misc/datetime.rst:172
msgid "From within your TAL templates, you can call :meth:`toLocalizedTime` like::"
msgstr ""

#: ../develop/plone/misc/email.rst:3
msgid "Sending email"
msgstr ""

#: ../develop/plone/misc/email.rst:7
msgid "How to programmatically send email in Plone"
msgstr ""

#: ../develop/plone/misc/email.rst:14
msgid "This document tells how to send email from Plone."
msgstr ""

#: ../develop/plone/misc/email.rst:16
msgid "Email can be sent:"
msgstr ""

#: ../develop/plone/misc/email.rst:18
msgid "manually, by calling *MailHost*;"
msgstr ""

#: ../develop/plone/misc/email.rst:19
msgid "using a *Content Rule* (content rules have an email-out action by default) which can be activated by a workflow transition, for example;"
msgstr ""

#: ../develop/plone/misc/email.rst:21
msgid "triggering email-based password reset."
msgstr ""

#: ../develop/plone/misc/email.rst:25
msgid "Configuring MailHost for a mail queue"
msgstr ""

#: ../develop/plone/misc/email.rst:27
msgid "Products.MailHost supports asynchronous sending in a separate thread via a mail queue."
msgstr ""

#: ../develop/plone/misc/email.rst:31
msgid "Using a mail queue is recommended for production sites."
msgstr ""

#: ../develop/plone/misc/email.rst:33
msgid "To enable the queue, go to the ZMI and the MailHost tool. Here, check the \"Use mail queue\" setting and set the \"Queue directory\". The queue directory is given as an absolute path on your server, must have a maildir layout (it needs the directories 'cur', new' and 'tmp' in it) and must be writeable by the system user, under which the Zope thread runs."
msgstr ""

#: ../develop/plone/misc/email.rst:41
msgid "Manually calling MailHost"
msgstr ""

#: ../develop/plone/misc/email.rst:43
msgid "After your ``mail_text`` is prepared, sending it is as simple as::"
msgstr ""

#: ../develop/plone/misc/email.rst:59
msgid "Preparing mail text"
msgstr ""

#: ../develop/plone/misc/email.rst:61
msgid "``mail_text`` can be generated by calling a page template (``.pt``) with keyword arguments. The values are accessed in the template as ``option/keyword``. For example, take a sample template:"
msgstr ""

#: ../develop/plone/misc/email.rst:81
msgid "This can be called with a ``member`` object and the ``portal_url``::"
msgstr ""

#: ../develop/plone/misc/email.rst:89
msgid "For more complete examples (with i18n support, etc.) see the password reset modules (particularly ``Products.remember.tools.registration``)."
msgstr ""

#: ../develop/plone/misc/email.rst:94
msgid "If you don't need to have third parties to override your email templates it might be cleaned to use Python string templates, as XML based TAL templates are not designed for plain text templating."
msgstr ""

#: ../develop/plone/misc/email.rst:99
msgid "Graceful failing"
msgstr ""

#: ../develop/plone/misc/email.rst:101
msgid "In the case SMTP server rejects the connection. etc. don't abort the current transaction (which is the default behavior)"
msgstr ""

#: ../develop/plone/misc/email.rst:104
msgid "http://stackoverflow.com/questions/9013009/ploneformgen-and-fail-safe-email-send"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:3
msgid "Flowplayer"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:7
msgid "Using Flowplayer video player in your Plone add-ons."
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:14
msgid "Flowplayer is a GPL'ed Flash-based video player."
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:16
msgid "Plone integration exists as an add-on product:"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:18
msgid "https://plone.org/products/collective-flowplayer"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:21
msgid "Creating a custom Flowplayer"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:23
msgid "Here is a walkthrough how to create a custom content-type with a video field which plays the uploaded video using Flowplayer in a page template with parameters you define."
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:27
msgid "Dexterity model definition::"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:41
msgid "Helper view Python code::"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:55
msgid "Helper view template:"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:75
msgid "Using the view:"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:98
msgid "Javascript, registered in ``portal_javascripts``, doing the magic:"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:172
msgid "Needed CSS:"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:186
msgid "if your player is not displayed on the page load, but is displayed after you click somewhere to the player container area, be sure there is no HTML code nor text inside the player container HTML tag. Such code/text is considered as player splash screen and player is waiting for click to the splash."
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:193
msgid "Non-buffered MP4 playback fix"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:195
msgid "MPEG4 files must be specially prepared (quick play fix), so that the playback starts instantly and the player does not try to buffer the whole file first"
msgstr ""

#: ../develop/plone/misc/flowplayer.rst:199
msgid "https://twitter.com/moo9000/status/253947688276594688"
msgstr ""

#: ../develop/plone/misc/html.rst:3
msgid "HTML manipulation and transformations"
msgstr ""

#: ../develop/plone/misc/html.rst:7
msgid "How to programmatically rewrite HTML in Plone."
msgstr ""

#: ../develop/plone/misc/html.rst:14
msgid "It is recommended to use the `lxml <http://lxml.de/>`_ library for all HTML DOM manipulation in Python."
msgstr ""

#: ../develop/plone/misc/html.rst:17
msgid "Plone is no exception."
msgstr ""

#: ../develop/plone/misc/html.rst:20
msgid "Converting HTML to plain text"
msgstr ""

#: ../develop/plone/misc/html.rst:22
msgid "The most common use case is to override ``SearchableText()`` to return HTML content for portal_catalog for indexing."
msgstr ""

#: ../develop/plone/misc/html.rst:25
msgid "http://stackoverflow.com/questions/6956326/custom-searchabletext-and-html-fields-in-plone"
msgstr ""

#: ../develop/plone/misc/html.rst:28
msgid "Converting plain text to HTML"
msgstr ""

#: ../develop/plone/misc/html.rst:30
msgid "You can use ``portal_transforms`` to do plain text -> HTML conversion."
msgstr ""

#: ../develop/plone/misc/html.rst:32
msgid "Below is an example how to create a Description field rendered with new line support."
msgstr ""

#: ../develop/plone/misc/html.rst:35
#: ../develop/plone/misc/html.rst:125
msgid "Register the view in ``configure.zcml``:"
msgstr ""

#: ../develop/plone/misc/html.rst:57
msgid "Create a file ``description.py`` and add the following code::"
msgstr ""

#: ../develop/plone/misc/html.rst:89
msgid "Now you can do in your page template"
msgstr ""

#: ../develop/plone/misc/html.rst:112
msgid "https://github.com/plone/plone.intelligenttext/tree/master/plone/intelligenttext"
msgstr ""

#: ../develop/plone/misc/html.rst:115
msgid "Rewriting relative links"
msgstr ""

#: ../develop/plone/misc/html.rst:117
msgid "Below is an example which:"
msgstr ""

#: ../develop/plone/misc/html.rst:119
msgid "rewrites all relative links of Page content as absolute;"
msgstr ""

#: ../develop/plone/misc/html.rst:120
msgid "removes some nasty tags from Page content;"
msgstr ""

#: ../develop/plone/misc/html.rst:121
msgid "outputs the folder content and subcontent as one continuous page;"
msgstr ""

#: ../develop/plone/misc/html.rst:123
msgid "This is suitable for e.g. printing the whole folder in one pass."
msgstr ""

#: ../develop/plone/misc/html.rst:143
msgid "Add the file ``help.py``::"
msgstr ""

#: ../develop/plone/misc/html.rst:249
msgid "Add the ``help.pt`` template:"
msgstr ""

#: ../develop/plone/misc/index.rst:3
msgid "Miscellaneous information"
msgstr ""

#: ../develop/plone/misc/index.rst:5
msgid "This section describes functions and APIs which are not directly related to any bigger subsystems. Also some other information that does not fit in any specific category"
msgstr ""

#: ../develop/plone/misc/index.rst:8
msgid "# Managing member profile (portal_membership under site root)"
msgstr ""

#: ../develop/plone/misc/monkeypatch.rst:3
msgid "Monkey-patching"
msgstr ""

#: ../develop/plone/misc/monkeypatch.rst:5
msgid "A monkey patch (also spelled monkey-patch, MonkeyPatch) is a way to extend or modify the runtime code of dynamic languages (e.g. Smalltalk, JavaScript, Objective-C, Ruby, Perl, Python, Groovy, etc.) without altering the original source code."
msgstr ""

#: ../develop/plone/misc/monkeypatch.rst:10
msgid "Plone community promotes conflict free way to do monkey patching using `collective.monkeypatcher package <https://pypi.python.org/pypi/collective.monkeypatcher>`_."
msgstr ""

#: ../develop/plone/misc/monkeypatch.rst:15
msgid "Patching constants"
msgstr ""

#: ../develop/plone/misc/monkeypatch.rst:17
msgid "Some modules (typically ``config.py`` files) include constant definitions used throughout the package. Given that ``collective.monkeypatcher`` is intended to patch methods you'll not be able to patch a constant straightforward. Instead you'll have to make use of the ``handler`` option::"
msgstr ""

#: ../develop/plone/misc/monkeypatch.rst:31
#: ../develop/plone/misc/monkeypatch.rst:62
msgid "And your ``patches.py`` module should include this::"
msgstr ""

#: ../develop/plone/misc/monkeypatch.rst:43
msgid "This way the **original** ``SIZE_CONST`` constant would be replaced by the result of the lambda function, which is our new constant."
msgstr ""

#: ../develop/plone/misc/monkeypatch.rst:47
msgid "Patching @property methods"
msgstr ""

#: ../develop/plone/misc/monkeypatch.rst:49
msgid "If you are to patch a ``@property`` decorated method you can use the ``handler`` configuration option::"
msgstr ""

#: ../develop/plone/misc/monkeypatch.rst:77
msgid "This way the **original** ``items`` method would be replaced by the result of the lambda function, which is a ``@property`` decorated method written in a different way."
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:3
msgid "Navigation trees"
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:9
msgid "How navigation trees are generate in Plone and how to generate custom navigation trees."
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:15
msgid "Plone exposes methods to build navigation trees."
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:17
msgid "`Products.CMFPlone.browser.navtree <https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/browser/navtree.py>`_"
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:19
msgid "`plone.app.layout.navigation.navtree.buildFolderTree <https://github.com/plone/plone.app.layout/blob/master/plone/app/layout/navigation/navtree.py>`_"
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:21
msgid "These are internally used by navigation portlet and sitemap."
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:24
msgid "Creating a custom navigation tree"
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:26
msgid "See `Products.PloneHelpCenter <https://github.com/collective/Products.PloneHelpCenter/blob/0f2fac5a7216eb8c0d83736dbcbd6a4385f9b4f4/Products/PloneHelpCenter/content/ReferenceManual.py>`_ for full code."
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:28
msgid "The following example builds Table of Contents for *Reference Manual* content type::"
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:43
msgid "Excluding items in the navigation tree"
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:45
msgid "Your navigation tree strategy must define method ``nodeFilter()`` which can check for portal_catalog metadata column ``exclude_from_nav``."
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:48
msgid "Example (from Products.CMFPlone.broser.navtree)::"
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:61
msgid "Querying items in natural sort order"
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:63
msgid "Sometimes you want to display content items as they appear in Plone navigation. Below is an example which builds a flat vobulary for a form checbox list based on a custom portal_catalog query and root folder."
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:67
msgid "query_items_in_natural_sort_order::"
msgstr ""

#: ../develop/plone/misc/navigationtree.rst:119
msgid "How to use::"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:3
msgid "Normalizing ids"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:7
msgid "How to convert arbitrary text input to URL/CSS/file/programming safe ids."
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:14
msgid "Normalizers turns arbitrary string (with unicode letters) to machine friendly ASCII ids. Plone provides different id normalizers."
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:17
msgid "E.g::"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:21
msgid "Plone has conversion utilities for"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:23
msgid "For URIs and URLs (plone.i18n.normalizer.interfaces.IURLNormalizer)"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:25
msgid "For filenames"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:27
msgid "For HTML ids and CSS"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:29
msgid "Normalization depends on the locale. E.g. in English \"æ\" will be normalized as \"ae\" but in Finnish it will be normalized \"å\" -> \"a\"."
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:32
msgid "See `plone.i18n.normalizers package <https://github.com/plone/plone.i18n/blob/master/plone/i18n/normalizer/__init__.py>`_."
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:37
msgid "Simple example for CSS id::"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:45
msgid "Hard-coded id localizer which directly uses class instance and does not allow override by utility configuration. You can use normalizers this way also when getUtility() is not available (e.g. start up code)::"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:52
msgid "Language specific example for URL::"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:60
msgid "To see available language specific localizers, see the source code of plone.i18n.normalizers package."
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:62
msgid "More examples:"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:64
msgid "`Static text portlets normalizes portlet title for CSS class <https://github.com/plone/plone.portlet.static/blob/master/plone/portlet/static/static.py>`_."
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:67
msgid "Creating ids programmatically"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:69
msgid "If you are creating content programmatically using invokeFactory() or by calling the class constructor you need to provide the id yourself."
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:72
msgid "Below is an example how to generate id from a title. *container* is the folderish object that will contain our new object.::"
msgstr ""

#: ../develop/plone/misc/normalizing_ids.rst:97
msgid "`Enforcing normalization for old migrated context <https://plone.org/documentation/how-to/how-to-force-all-your-old-content-into-the-new-normalized-id-format>`_."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:2
msgid "Looking ahead towards Plone 5"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:5
msgid "Concerns regarding removal of portal_skins and reliance on browser views"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:10
msgid "Specific Things We Like to Do with portal_skins"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:13
msgid "This document includes a bunch of specific use cases showing how we as integrators typically rely on portal_skin."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:16
msgid "Nathan Van Gheem's responses below are indented."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:20
msgid "Live Sites"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:22
msgid "We can modify live sites’ appearance without having to touch the file system by putting things in the custom folder."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:27
msgid "Plone has, and will always try to provide a rich TTW editing and customization story. This is true with plone.app.theming and diazo. If all skins are removed, we WILL provide an alternative way to customize template TTW. Right now, it looks to me like making portal_view_customizations work better."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:35
msgid "No Filesystem or Buildout Access"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:37
msgid "We often do not have access to the file system nor can we run buildout."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:40
msgid "See Live Sites response."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:43
msgid "Customizing a collection’s display"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:45
msgid "We have some custom content types that we want to display using a collection. We build the collection and specify “item type”.  We want the display to show fields that are unique to the custom content types.  We locate the collection view template, customize it, rename it (to, say, custom_collection_view), enhance it to show the additional field values, then in portal_types we add the new custom_collection_view to the list of available views for Topics.  The collection’s “Display” menu now includes the new custom_collection_view."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:54
msgid "First off, best case we still have a story to do the exact same thing only with portal_view_customizations."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:57
msgid "Secondly, it can be easier to hit that use-case with a combination of collective.listingviews and diazo. There has been discussion of integrating a lot of what collective.listingviews does and more into plone.app.theming."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:63
msgid "Creating a cloned content type so that it has a different default view"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:65
msgid "Let’s say a site has a custom content type based on Document but we want to have the default view include boilerplate text around the rich text and description. We would go to portal_types, clone the Document type, rename the cloned type “Project”.  Then we go to portal_skins, find document_view, customize it, rename it to project_view, and add the boilerplate text we want.  Then back in portal_types for Project, we change the default view to project_view.  This way, anywhere in the site we create a Project object, its default view (its only view) shows the boilerplate text we wanted."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:75
msgid "Cloned content types will still be available with dexterity. In fact, it’ll be incredibly more robust and powerful."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:79
msgid "For the views, look to the previous point about using collective.listingviews and diazo."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:84
msgid "Classic Portlets"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:86
msgid "We use classic portlets a lot to put together (quickly) something that displays arbitrary content."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:90
msgid "There is nothing scheduled to get rid of portlet or the classic portlet right now. portal_skins will still be there."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:94
msgid "That being said, I might need more specific use-cases of how you’re using classic portlets in order to explain how it’d be a replacement."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:99
msgid "Things We Don’t Like About Having to Rely Only on Browser Views"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:102
msgid "Why browser views are hard for integrators (non-developers):"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:104
msgid "We may not have file system access"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:105
msgid "We may not want to have to (and are not in fact able to) create a product to register a new view"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:107
msgid "We may not want to have to re-run buildout (nor are we able to) to register a new view"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:109
msgid "Unless a browser view is correctly registered, customizing it via portal_view_customizations breaks Python methods associated with the view"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:113
msgid "I hope I’ve addressed your concerns. The final point is valid and a concern of mine also. We’ll need to make sure there is a way to customize all templates safely. I sort of hope people simply won’t be doing TTW customizations of templates as much anymore though and they’ll just use diazo with something like listingviews."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:119
msgid "Others might have different ideas about how things will work. Dylan Jay might be someone that can give really good answers regarding these questions."
msgstr ""

#: ../develop/plone/misc/plone5way.rst:122
msgid "A good discussion regarding some of these issues can be found at: http://plone.293351.n2.nabble.com/enhanced-collections-views-td7565206.html;cid=1372262563684-127"
msgstr ""

#: ../develop/plone/misc/plone5way.rst:125
msgid "The final response there has a good overview."
msgstr ""

#: ../develop/plone/misc/portal_transforms.rst:3
msgid "Changing Portal Transforms Settings via Python"
msgstr ""

#: ../develop/plone/misc/portal_transforms.rst:10
msgid "If you have to change some portal_transforms settings you can't use a Generic Setup config file for this (as of 2010-03-25, Products.PortalTransforms 2.0b4). But you can change it with python and a Generic Setup import step. Here's how to do it."
msgstr ""

#: ../develop/plone/misc/portal_transforms.rst:15
msgid "Security: The configuration shown below allows users to use nasty HTML tags which can be a security issue if not used carefully."
msgstr ""

#: ../develop/plone/misc/portal_transforms.rst:17
msgid "Let's say we have a plone package called MY.PACKAGE."
msgstr ""

#: ../develop/plone/misc/portal_transforms.rst:20
msgid "Writing an Generic Setup Import Step Method"
msgstr ""

#: ../develop/plone/misc/portal_transforms.rst:22
msgid "This setup method is defined in MY.PACKAGE/setuphandlers.py. It configures the safe_html portal_transform a bit less paranoid about nasty tags and valid_tags, so that content managers are allowed to insert iframe, object, embed, param, script, style, tags and more into the TinyMCE editor::"
msgstr ""

#: ../develop/plone/misc/portal_transforms.rst:86
msgid "Registering the Import Step Method with Generic Setup"
msgstr ""

#: ../develop/plone/misc/portal_transforms.rst:88
msgid "Add an import step in MY.PACKAGE/MYPROFILESDIR/PROFILENAME/import_steps.xml like so:::"
msgstr ""

#: ../develop/plone/misc/portal_transforms.rst:102
msgid "And create the File MY.PACKAGE/MYPROFILESDIR/PROFILENAME/MY.PACKAGE-PROFILENAME.txt, so that this import step is not run for any profile but just for this one."
msgstr ""

#: ../develop/plone/misc/portal_transforms.rst:108
msgid "Calling the Import Step Method in ZMI, portal_setup"
msgstr ""

#: ../develop/plone/misc/portal_transforms.rst:110
msgid "Goto your site's portal_setup in ZMI, select your registered profile and import the import step \"MY.PACKAGE portal_transforms setup\". That's it."
msgstr ""

#: ../develop/plone/misc/slideshow.rst:3
msgid "Slidehows and carousels"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:16
msgid "Header slideshows"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:18
msgid "`Products.Carousel <https://plone.org/products/carousel/>`_"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:20
msgid "AJAX'y image pop-ups"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:22
msgid "https://plone.org/products/pipbox"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:25
msgid "Migrate Products.Slideshow to Products.Carousel"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:27
msgid "Here is a sample migration code to transform your site from one add-on to another."
msgstr ""

#: ../develop/plone/misc/slideshow.rst:30
msgid "We create a migration view which you can call by typing in view name manually to web browser."
msgstr ""

#: ../develop/plone/misc/slideshow.rst:33
msgid "This code will"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:35
msgid "Scan site for folders which have Slideshow add-on enabled. In this example we check against a predefined list (scanned earlier), but the code contains example how to detect slideshow folders"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:38
msgid "Create Carousel for those folders"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:40
msgid "Create corresponds Carousel Banners for all Slideshow Image content items"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:42
msgid "Set some Carousel settings"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:44
msgid "Make sure that we invalidate cache for content items going through migration"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:46
msgid "Set a new default view for folders which were using slideshow"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:48
msgid "Also"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:50
msgid "After inspecting the process was ok you can delete migrated images"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:52
msgid "carousel.py::"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:341
msgid "ZCML bits::"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:358
msgid "Setting every carousel widths on the site"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:360
msgid "Another example to manipulate Products.Carousel. This script will update all carousel settings on the site to have new image width."
msgstr ""

#: ../develop/plone/misc/slideshow.rst:407
msgid "AJAX full-size image loading for album views"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:409
msgid "Plone album views can be easily converted to pop-up image viewing with PipBox."
msgstr ""

#: ../develop/plone/misc/slideshow.rst:411
msgid "Put the following to portal_properties / pipbox_properties"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:413
msgid "Album view <a> click handler::"
msgstr ""

#: ../develop/plone/misc/slideshow.rst:420
msgid "portal_javascript must be in debug mode while testing different Products.PipBox handlers."
msgstr ""

#: ../develop/plone/misc/sql.rst:3
msgid "SQL"
msgstr ""

#: ../develop/plone/misc/sql.rst:7
msgid "Using SQL databases (MySQL, PostgreSQL, others) in Plone"
msgstr ""

#: ../develop/plone/misc/sql.rst:14
msgid "If you are building the codebase Plone behaves as any other Python application."
msgstr ""

#: ../develop/plone/misc/sql.rst:16
msgid "Write your SQL related code using known available Python SQL libraries and frameworks"
msgstr ""

#: ../develop/plone/misc/sql.rst:18
msgid "Plug your code to Plone HTML pages through :doc:`views </develop/plone/views/browserviews>`"
msgstr ""

#: ../develop/plone/misc/sql.rst:20
msgid "Example Python SQL libraries"
msgstr ""

#: ../develop/plone/misc/sql.rst:22
msgid "http://www.sqlalchemy.org/"
msgstr ""

#: ../develop/plone/misc/sql.rst:25
msgid "ZSQL"
msgstr ""

#: ../develop/plone/misc/sql.rst:27
msgid "ZSQL is something probably written before you knew what SQL is. Never ever use ZSQL in new code. It's not following any modern best practices and has history of 1990s code. You have been warned. Stay away. The grue is near."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:3
msgid "Upgrade tips"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:7
msgid "Advanced tips for upgrading Plone."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:10
msgid "General Tips"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:12
msgid "This guide contains some tips for Plone upgrades. For more Information, see also the `Official Plone upgrade guide <https://plone.org/documentation/manual/upgrade-guide>`_"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:17
msgid "Recommended set-up"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:19
msgid "Test upgrade on your local development computer first."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:21
msgid "Create two buildouts. One for the old Plone version (your existing buildout) and one for new version."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:24
msgid "Prepare the migration in old buildout. After all preparations are done, copy Data.fs to new buildout and run plone_migration tool there."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:29
msgid "Clear catalog"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:31
msgid "Before moving the Data.fs to new version, clear all site portal_catalog information."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:36
msgid "Fix persistent utilities"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:38
msgid "You might need to clean up some leftovers from uninstalled add-ons which have not performed a clean uninstall."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:41
msgid "Use this utility:"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:43
msgid "https://pypi.python.org/pypi/wildcard.fixpersistentutilities"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:45
msgid "Perform this against old buildout"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:49
msgid "Content Upgrades"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:51
msgid "For content migrations, `Products.contentmigration <https://pypi.python.org/pypi/Products.contentmigration/>`_  can help you. Documentation on how to use it can be found on `plone.org <https://plone.org/documentation/kb/migrate-custom-types-with-products.contentmigration>`_."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:58
msgid "Migration from non-folderish to folderish Archetypes based content types"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:60
msgid "Non-folderish content types are missing some BTree attributes, which folderish content types have (See ``Products.BtreeFolder2.BTreeFolder2Base._initBtrees`` )."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:64
msgid "plone.app.folder provides an upgrade view to migrate pre-plone.app.folder (or non-folderish) types to the new BTree based implementation (defined in: ``plone.app.folder.migration.BTreeMigrationView``)."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:68
msgid "To upgrade your non-folderish content types to folderish ones, just call ``@@migrate-btrees`` on your Plone site root, and you're done."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:71
msgid "This applies to Archetypes based content types."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:75
msgid "Upgrading theme"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:77
msgid "Make sure that your site them works on Plone 4. Official upgrade guide has tips how the theme codebase should be upgraded."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:83
msgid "Theme fixing and portal_skins"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:85
msgid "Your theme might be messed up after upgrade."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:87
msgid "Try playing around setting in *portal_skins* *Properties* tab. You can enable, disable and reorder skins layer applied in the theme."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:90
msgid "Upgrade may change the default theme and you might want to restore custom theme in *portal_skins*."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:95
msgid "Upgrade tips for plone.app.discussion"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:98
msgid "Enabling plone.app.discussion after Plone 4.1 upgrade"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:100
msgid "After migration from an earlier version of Plone, you will may notice that you do not have a *Discussion* control panel for ``plone.app.discussion``, the new commenting infrastructure which now ships as part of new Plone installs beyond version 4.1.  If a check of your *Site Setup* page reveals that you do not have the *Discussion* control panel, implement the following."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:108
msgid "Install plone.app.discussion manually"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:110
msgid "Log into your Plone site as a user with Manager access"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:111
msgid "Browse to the following URL to manually install ``plone.app.discussion``::"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:115
msgid "In the *Select Profile or Snapshot* drop-down menu, select ``Plone Discussions``."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:117
msgid "Click the ``Import all steps`` button at the bottom of the page."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:118
msgid "Confirm that *Discussion* is now present as a control panel in your *Site Setup*"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:123
msgid "Migrate existing comments"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:125
msgid "Follow the instructions regarding `How to migrate comments to plone.app.discussion <https://plone.org/products/plone.app.discussion/documentation/how-to/how-to-migrate-comments-to-plone.app.discussion>`_ to migrate existing Plone comments."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:132
msgid "Fixing Creator details on existing comments"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:134
msgid "You may notice that some of your site's comments have the user's ID as their Creator property.  At time of writing (for ``plone.app.discussion==2.0.10``), the Creator field should refer to the user's full name and not their user ID. You'll likely notice that a number of other fields, including ``author_username``, ``author_name`` and ``author_email`` are not present on some of your migrated comments.  Reasons why comments get migrated but unsuccessfully are being investigated."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:142
msgid "This may change for future versions of ``plone.app.discussion``.  For now, though, having the user ID left as the Creator is less than helpful and means aspects like the username, name, and email not present affect usability of comments."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:147
msgid "If a site has many comments with this issue, it is possible to step through all of them and correct them.  Using a script like the following will process each of the affected comments accordingly:"
msgstr ""

#: ../develop/plone/misc/upgrade.rst:180
msgid "This can be run anywhere an Acquisition ``context`` object is available, such as running your Zope instance in ``debug`` mode, an ipython prompt, or some other function on the filesystem.  The ``getSite()`` function call can (and may need to) be replaced with some other pre-existing context object if that is more suitable."
msgstr ""

#: ../develop/plone/misc/upgrade.rst:186
msgid "Keep in mind that this script was successfully used in a situation where no possible collisions existed between correctly-migrated comments Creators' full names and user IDs (the code looks up the Creator in the hope of finding a valid Plone member).  So, if you had a situation where you had some correctly migrated comments written by a user with ID ``david`` and full name of ``Administrator``, and also had a user with the ID of ``Administrator``, then this script may not be suitable.  In the test situation, the three attributes of ``author_username``, ``author_name``, and ``author_email`` were observed as all being ``None``, so in checking for this too, this may avoid problems.  Test the code first with something like a ``print`` statement to ensure all comments will get modified correctly."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:3
msgid "Zope debug prompt"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:7
msgid "Interacting with Plone from the Zope debug prompt."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:14
msgid "The Zope debug prompt is a way of starting a Zope client from the command line, and allows you to directly interact with Plone."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:16
msgid "Some things that you can do through the debug prompt:"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:18
msgid "Examine objects to see their properties/methods"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:19
msgid "Update objects in bulk, as opposed to one at a time through the user interface."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:20
msgid "Produce reports or export data from objects"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:22
msgid "This is very similar to the Python debug prompt (just entering ``python`` at the command line) and the same whitespace restrictions apply."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:25
msgid "Cautions"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:27
msgid "**With great power comes great responsibility.**"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:29
msgid "Interacting with Plone from the Zope debug prompt is a very powerful tool, and lets you quickly make changes that  might take hours or days to implement manually."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:31
msgid "It is also a great way to severely damage your site, in a way that might take hours or days to fix."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:33
msgid "Precautions for developing code that makes updates via the debug prompt:"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:35
msgid "Log the changes that you're going to make using the ``print`` statement"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:36
msgid "Only commit the transaction (``transaction.commit()``) after the code has run successfully."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:37
msgid "Attempt to develop the code in an idempotent (able to be run multiple times with no ill effects) manner."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:40
msgid "Starting the debug prompt interactively"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:42
msgid "This assumes that you are running Plone in a ZEO configuration on a \\*NIX server, and your Zope clients run as the ``plone_daemon`` user."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:44
msgid "After logging into your server, start the debug prompt with::"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:48
msgid "The output will look something like::"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:57
msgid "There may be some additional warnings, based on the products installed."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:59
msgid "From here, the ``app`` variable is equivalent to the root of your Zope instance."
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:61
msgid "A simple example::"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:89
msgid "Code Snippets"
msgstr ""

#: ../develop/plone/misc/zope_debug_prompt.rst:91
msgid "`Sample code snippets <https://github.com/collective/code-snippets>`_ for use in the debug prompt."
msgstr ""

#: ../develop/plone/persistency/database.rst:3
msgid "ZODB Database"
msgstr ""

#: ../develop/plone/persistency/database.rst:7
msgid "Plone uses the ZODB object database to store its data.  The ZODB can act independently in-process, clustered over network or over another database engine, like SQL."
msgstr ""

#: ../develop/plone/persistency/database.rst:16
msgid "Plone uses the ZODB database.  The ZODB happily stores any Python object with any attributes |---| there is no need to write database schema or table descriptions as there is with SQL-based systems. If data models are described somehow the descriptions are written in Python, usually using ``zope.schema`` package."
msgstr ""

#: ../develop/plone/persistency/database.rst:23
msgid "This chapter is about the basics of the ZODB, working with the ZODB database directly, like tuning database settings."
msgstr ""

#: ../develop/plone/persistency/database.rst:26
msgid "More information about ZODB"
msgstr ""

#: ../develop/plone/persistency/database.rst:28
msgid "http://www.zodb.org/"
msgstr ""

#: ../develop/plone/persistency/database.rst:30
msgid "`Documentation <http://zodb.readthedocs.org/>`_"
msgstr ""

#: ../develop/plone/persistency/database.rst:32
msgid "`API documentation <http://zodb.readthedocs.org/en/latest/api.html>`_"
msgstr ""

#: ../develop/plone/persistency/database.rst:35
msgid "Database files"
msgstr ""

#: ../develop/plone/persistency/database.rst:37
msgid "Usually Plone's database is configured to file ``var/filestorage/Data.fs`` and uploaded files can be found as BLOBs in ``var/blobstorage``."
msgstr ""

#: ../develop/plone/persistency/database.rst:42
msgid "Object database features"
msgstr ""

#: ../develop/plone/persistency/database.rst:44
msgid "The ZODB is an object database.  It makes very easy to store different kinds of contentish data in a graph, supporting subclassing (something which SQL often does poorly)."
msgstr ""

#: ../develop/plone/persistency/database.rst:48
msgid "Since the database stores objects, and the objects are defined in Python code, you always need the corresponding Python source code to instantiate the objects stored inside the ZODB.  This might feel awkward at first, but you need to have MySQL running to read what's inside MySQL files stored on your disk and so on ..."
msgstr ""

#: ../develop/plone/persistency/database.rst:55
msgid "The ZODB database is not usable without the Python source code used to create the data. The data is not readable using any SQL-based tools, and there exist little tools to deal with the raw data. The way to access Plone data is running Plone itself and performing queries through it."
msgstr ""

#: ../develop/plone/persistency/database.rst:62
msgid "Since correct source code is needed to read ZODB data, this poses a problem for versioning. Even if you use the correct add-on product with proper source code, if the source code version is wrong, it might not work.  Data model attributes might be added, modified or deleted between source code revisions, making data operations on the existing database fail by raising Python exceptions (``AttributeError``, ``KeyError``)."
msgstr ""

#: ../develop/plone/persistency/database.rst:69
msgid "To work around the ZODB interoperability problems, products like *ore.contentmirror* exist to duplicate Plone content data to read-only SQL database."
msgstr ""

#: ../develop/plone/persistency/database.rst:74
msgid "Query and searching"
msgstr ""

#: ../develop/plone/persistency/database.rst:76
msgid "ZODB does not provide query services as is i.e. there is no SELECT statement."
msgstr ""

#: ../develop/plone/persistency/database.rst:79
msgid "Plone provides :doc:`cataloging </develop/plone/searching_and_indexing/catalog>` service for this purpose."
msgstr ""

#: ../develop/plone/persistency/database.rst:82
msgid "This gives some benefits"
msgstr ""

#: ../develop/plone/persistency/database.rst:84
msgid "You define yourself how data is indexed"
msgstr ""

#: ../develop/plone/persistency/database.rst:86
msgid "The backend to perform queries is flexible - you can plug-in custom indexes"
msgstr ""

#: ../develop/plone/persistency/database.rst:89
msgid "portal_catalog default catalog is used to all content items to provide basic CMS functionality easily"
msgstr ""

#: ../develop/plone/persistency/database.rst:92
msgid "You can have optimized catalogs for specialized data (e.g. reference look-ups using reference_catalog)"
msgstr ""

#: ../develop/plone/persistency/database.rst:96
msgid "Data model"
msgstr ""

#: ../develop/plone/persistency/database.rst:98
msgid "There is no hardwired way for describe data in ZODB database."
msgstr ""

#: ../develop/plone/persistency/database.rst:101
msgid "Subclasses of ZODB ``persistent.Persistent`` class will have all their attributes and referred objects written to the database using Python pickle mechanism. Lists and dictionaries will be automatically converted to persistent versions."
msgstr ""

#: ../develop/plone/persistency/database.rst:107
msgid "There are currently three primary ways to define data models in Plone"
msgstr ""

#: ../develop/plone/persistency/database.rst:109
msgid "Using zope.schema package (modern way) to describe Python object properties"
msgstr ""

#: ../develop/plone/persistency/database.rst:111
msgid "Using Archetypes content type subsystem (all Plone 3 content)"
msgstr ""

#: ../develop/plone/persistency/database.rst:113
msgid "Not defining the model, but relying on ad hoc object attributes"
msgstr ""

#: ../develop/plone/persistency/database.rst:115
msgid "Read about :doc:`zope.schema </develop/plone/forms/schemas>` how to define a model for the data to be stored in ZODB database."
msgstr ""

#: ../develop/plone/persistency/database.rst:120
msgid "Transactions and committing"
msgstr ""

#: ../develop/plone/persistency/database.rst:122
msgid "`This in-depth SO answer <http://stackoverflow.com/questions/11254384/when-to-commit-data-in-zodb/>`_ explains how committing works in ZODB."
msgstr ""

#: ../develop/plone/persistency/database.rst:125
msgid "Savepoints and optimism regarding them"
msgstr ""

#: ../develop/plone/persistency/database.rst:127
msgid "PersistentList and list differences when saving data"
msgstr ""

#: ../develop/plone/persistency/database.rst:131
msgid "Browsing"
msgstr ""

#: ../develop/plone/persistency/database.rst:133
msgid "You can explore ZODB with-in Plone using `ZODBBrowser <https://plone.org/products/zodbbrowser>`_."
msgstr ""

#: ../develop/plone/persistency/database.rst:136
msgid "Packing database"
msgstr ""

#: ../develop/plone/persistency/database.rst:138
msgid "As ZODB is append-only database it remembers all its history unless packed. Packing will erase undo history."
msgstr ""

#: ../develop/plone/persistency/database.rst:140
msgid "`Why you need to regularly pack ZODB database to keep the performance up <http://www.sixfeetup.com/blog/optimize-your-plone-development-by-packing-the-zodb>`_"
msgstr ""

#: ../develop/plone/persistency/database.rst:142
msgid "`Packing is similar to VACUUM in PostgreSQL <http://stackoverflow.com/questions/11254384/when-to-commit-data-in-zodb/>`_"
msgstr ""

#: ../develop/plone/persistency/database.rst:145
msgid "Packing through-the-web"
msgstr ""

#: ../develop/plone/persistency/database.rst:147
msgid "Manual packing can be executed through Zope Control Panel (not Plone control panel) in Zope application server root (not Plone site root) in ZMI."
msgstr ""

#: ../develop/plone/persistency/database.rst:151
msgid "Packing from command line"
msgstr ""

#: ../develop/plone/persistency/database.rst:153
msgid "`plone.recipe.zeoserver <https://github.com/plone/plone.recipe.zeoserver/>`_ buildout recipe provides command called ``bin/zeopack`` inside buildout. It allows you to trigger packing from the command line when Zope is clustered ZEO configuration. ``zeopack`` command runs against an on-line site."
msgstr ""

#: ../develop/plone/persistency/database.rst:158
msgid "This command is useful to run in cron to keep your Data.fs file growing forever. You can control the number of days of history to be kept, etc., using buildout recipe variables."
msgstr ""

#: ../develop/plone/persistency/database.rst:163
msgid "https://github.com/plone/plone.recipe.zeoserver"
msgstr ""

#: ../develop/plone/persistency/database.rst:166
msgid "Packing the database offline"
msgstr ""

#: ../develop/plone/persistency/database.rst:168
msgid "`See this blog post <http://blog.twinapex.fi/2009/09/01/packing-and-copying-data-fs-from-production-server-for-local-development/>`_."
msgstr ""

#: ../develop/plone/persistency/database.rst:170
msgid "Example how to pack a copy of Data.fs in offline using Python snippet::"
msgstr ""

#: ../develop/plone/persistency/database.rst:179
msgid "As this depends on ZODB egg, the easiest way to run the snippet is to ``zopepy`` script from your ``buildout/bin`` folder::"
msgstr ""

#: ../develop/plone/persistency/database.rst:184
msgid "For more information, see :doc:`command-line scripts </develop/plone/misc/commandline>`."
msgstr ""

#: ../develop/plone/persistency/database.rst:187
msgid "Visualizing object graphs"
msgstr ""

#: ../develop/plone/persistency/database.rst:189
#: ../develop/plone/persistency/persistent.rst:238
msgid "http://blog.hannosch.eu/2009/05/visualizing-persistent-structure-of.html"
msgstr ""

#: ../develop/plone/persistency/database.rst:191
msgid "http://david.wglick.org/2009/visualizing-the-zodb-with-graphviz/"
msgstr ""

#: ../develop/plone/persistency/database.rst:194
msgid "Cache size"
msgstr ""

#: ../develop/plone/persistency/database.rst:196
msgid "`Understanding ZODB cache size option <https://mail.zope.org/pipermail/zodb-dev/2010-March/013199.html>`_"
msgstr ""

#: ../develop/plone/persistency/database.rst:199
msgid "Integrity checks"
msgstr ""

#: ../develop/plone/persistency/database.rst:201
msgid "Especially when you back-up a Data.fs file, it is useful to run integrity checks for the transferred files."
msgstr ""

#: ../develop/plone/persistency/database.rst:203
msgid "ZODB provides scripts ``fstest`` and ``fsrefs`` to check if Data.fs data is intact and there are no problems due to low level disk corruption or bit flip."
msgstr ""

#: ../develop/plone/persistency/database.rst:206
msgid "http://wiki.zope.org/ZODB/FileStorageBackup"
msgstr ""

#: ../develop/plone/persistency/database.rst:210
msgid "It is recommended best practice to run integrity against your Data.fs regularly. This is the only way to detect corruption which would otherwise go unnoticed for a long time."
msgstr ""

#: ../develop/plone/persistency/database.rst:215
msgid "Restart and cache warm-up"
msgstr ""

#: ../develop/plone/persistency/database.rst:217
msgid "Discussion why Plone is slow after restart"
msgstr ""

#: ../develop/plone/persistency/database.rst:219
msgid "https://mail.zope.org/pipermail/zodb-dev/2013-March/014935.html"
msgstr ""

#: ../develop/plone/persistency/database.rst:222
msgid "Recovering old data"
msgstr ""

#: ../develop/plone/persistency/database.rst:224
msgid "Instructions for undoing deleted data and fixing broken databases."
msgstr ""

#: ../develop/plone/persistency/database.rst:226
msgid "http://www.zopatista.com/plone/2008/12/18/saving-the-day-recovering-lost-objects"
msgstr ""

#: ../develop/plone/persistency/database.rst:229
msgid "ZODB tips and tricks"
msgstr ""

#: ../develop/plone/persistency/database.rst:233
msgid "https://plone.org/events/regional/nola05/collateral/Chris%20McDonough-ZODB%20Tips%20and%20Tricks.pdf"
msgstr ""

#: ../develop/plone/persistency/index.rst:3
msgid "ZODB, persistency and transactions"
msgstr ""

#: ../develop/plone/persistency/lifecycle.rst:3
msgid "Object lifecycles"
msgstr ""

#: ../develop/plone/persistency/lifecycle.rst:5
msgid "Plone has different lifecycles for different objects"
msgstr ""

#: ../develop/plone/persistency/lifecycle.rst:7
msgid "Persistent objects: These objects are transparently persistent. They look like normal Python objects, but they are serialized to the disk if the transaction completes successfully. Persistent object inherit from Zope's various persistent classes: persistent.Persistent, PersistentDict, PersistentList and they have special attributes like _p_mtime when the object was last written to disk. To make object persistent, it must be referred from Zope's App traversing graph. Examples: content objects, user account objects."
msgstr ""

#: ../develop/plone/persistency/lifecycle.rst:15
msgid "Request attached objects and thread-local objects: Each HTTP request is processed by its own Python thread. These objects disappear when the request has been processed. Examples: request object itself, getSite() thread-local way to access the site object, request specific permission caches."
msgstr ""

#: ../develop/plone/persistency/lifecycle.rst:20
msgid "In-process objects, or \"static\" objects are created when the server application is launched and they are gone when the application quits. Usually these objects are set-up during Plone initialization and they are read-only for served HTTP requests. Examples: content type vocabulary lists."
msgstr ""

#: ../develop/plone/persistency/migrations.rst:3
msgid "Migrations"
msgstr ""

#: ../develop/plone/persistency/migrations.rst:5
msgid "Database migrations are needed if your internal data storage format changes between versions."
msgstr ""

#: ../develop/plone/persistency/migrations.rst:8
msgid "ZODB does not require you to set object format explicitly, like in SQL you need to create table schema. However, your code will naturally fail if the data format of the object is unexpected."
msgstr ""

#: ../develop/plone/persistency/migrations.rst:13
msgid "`Changing instance attributes <http://www.zodb.org/documentation/guide/prog-zodb.html#changing-instance-attributes>`_"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:3
msgid "Persistent objects"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:7
msgid "This document tells how to save objects to Plone/Zope database. Persistent objects are automatically read and written from ZODB database in Plone and they appear as normal Python objects in your code. This document clarifies some of special properties, like with containers, when you deal with persistent objects programmatically."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:18
msgid "**Q: How do I save() object in Plone**"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:20
msgid "**A: You don't**"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:22
msgid "Plone does this automatically for you. You just assign the file data as an attribute of some persistent object. When the HTTP request completes, Zope transaction manager will automatically update all changed persistent objects to the database. There is no \"save\" as such in Zope world - it all is transparent to the developer. If the transaction fails in any point, no data is being written and you do not need to worry about the partial data being written to the database."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:31
msgid "Changed objects will be automatically saved (if they are attached to the traversing graph)"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:34
msgid "Save will not occur if an exception is raised"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:36
msgid "If your data class inherits from higher level Plone base classes (all go up to persistent.Persitent class). persistency is handled transparently for you. Plone also handles transaction automatically for each HTTP request. Unless you wish to do manual transactions there is no need to call transaction.commit()."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:42
msgid "If you want to do your own persistent classes please read the following"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:44
msgid "`Writing a persistent class <http://www.zodb.org/documentation/guide/prog-zodb.html#writing-a-persistent-class>`_"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:46
msgid "`About persistent objects <http://www.zope.org/Documentation/Books/ZDG/current/Persistence.stx>`_"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:48
msgid "`Persistent interface description <http://apidoc.zope.org/++apidoc++/Interface/persistent.interfaces.IPersistent/index.html>`_."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:50
msgid "`ZODB tips and tricks <https://plone.org/events/regional/nola05/collateral/Chris%20McDonough-ZODB%20Tips%20and%20Tricks.pdf>`_"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:53
msgid "Lists and dictionaries"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:55
msgid "If you modify objects inside persistent lists and dictionaries, the change is not automatically reflected to the parent container."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:58
msgid "`Modifying mutable objects <http://zodb.readthedocs.org/en/latest/working.html#handling-changes-to-mutable-objects>`_"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:61
msgid "PersistentList vs. normal Python list"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:63
msgid "All items in normal Python list are stored as one write and loaded on one write. PersistentList is slower, but allows individual objects picked from the list without loading the whole list."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:68
msgid "https://mail.zope.org/pipermail/zodb-dev/2009-December/013011.html"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:72
msgid "Persistent, modifications, __setattr__ and transactions"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:74
msgid "When Persitent object is modified, via attribute set or __setattr__() call, the current transaction is converted to a write transaction. Write transactions are usually undoable (visible on Zope's Undo tab)."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:78
msgid "If you are using Python property mutator and even if it does not write to the object it still will trigger the object rewrite."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:83
msgid "https://mail.zope.org/pipermail/zodb-dev/2009-December/013047.html"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:86
msgid "Up-to-date reads"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:88
msgid "Normally, ZODB only assures that objects read are consistent, but not necessarily up to date. Checking whether an object is up to date is important when information read from one object is used to update another."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:92
msgid "The following will force the object to use the most up-to-date version in the transaction::"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:96
msgid "A conflict error will be raised if the version of ob read by the transaction isn't current when the transaction is committed."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:101
msgid "ZODB versions older than 3.10.0b5 do not support this feature."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:105
msgid "https://pypi.python.org/pypi/ZODB3/3.10.0b5#b5-2010-09-02"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:108
msgid "Accessing broken objects"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:110
msgid "ZODB is object database. By default, it cannot load object from the database if the code (Python class) is not present."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:114
msgid "You can still access data in the objects by creating Python code \"stubs\" which fake the non-existing classes in the run-time environment."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:119
msgid "http://mockit.blogspot.com/2010/11/getting-broken-objects-out-of-zodb.html"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:122
msgid "Fixing damaged objects"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:124
msgid "If your BTrees have been damaged, you can use ``dm.historical`` tool to inspect the object history and rewind it to a working state."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:127
msgid "http://plone.293351.n2.nabble.com/Cleaning-up-damaged-BTree-can-t-delete-folder-tp5761780p5773269.html"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:129
msgid "https://pypi.python.org/pypi/dm.historical/"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:133
msgid ":doc:`Deleting broken objects </develop/plone/content/deleting>`"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:136
msgid "Volatile references"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:138
msgid "Volatile attributes are attributes on persistent objects which never get stored. ZODB assumes variable is volatile if it has _v_ prefix."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:141
msgid "Volatiles are useful when framework expects the object to conform certain interface, like form frameworks. However, your persistent object edited by form cannot have persistent attributes for all variables the form expects to see."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:191
msgid "Correct use of volatile variables in functions"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:193
#: ../develop/plone/persistency/persistent.rst:211
msgid "**WRONG**::"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:198
#: ../develop/plone/persistency/persistent.rst:205
#: ../develop/plone/persistency/persistent.rst:216
msgid "**RIGHT**::"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:224
msgid "https://mail.zope.org/pipermail/zodb-dev/2010-May/013437.html"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:228
msgid "Measuring persistent object sizes"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:230
msgid "Get the size of the pickled object in the database."
msgstr ""

#: ../develop/plone/persistency/persistent.rst:232
msgid "Something like::"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:240
#: ../develop/plone/persistency/storage.rst:130
msgid "https://plone.org/documentation/kb/debug-zodb-bloat"
msgstr ""

#: ../develop/plone/persistency/persistent.rst:242
msgid "treeanalyze.py will give you the total size of a traverse graph http://svn.erp5.org/erp5/trunk/utils/treenalyser.py?view=markup&pathrev=24405"
msgstr ""

#: ../develop/plone/persistency/storage.rst:3
msgid "Storage"
msgstr ""

#: ../develop/plone/persistency/storage.rst:7
msgid "What kind of different storages (storing backends) ZODB has and how to use them."
msgstr ""

#: ../develop/plone/persistency/storage.rst:15
msgid "This page explains details how ZODB stores data. The information here is important to know to understand Plone database behavior and how to optimize your application."
msgstr ""

#: ../develop/plone/persistency/storage.rst:19
msgid "Pickling"
msgstr ""

#: ../develop/plone/persistency/storage.rst:21
msgid "ZODB is object oriented database. All data in ZODB is `pickled Python objects <http://docs.python.org/library/pickle.html>`_. Pickle is object serialization module for Python."
msgstr ""

#: ../develop/plone/persistency/storage.rst:24
msgid "Each time object is read and it is not cached, object is read from ZODB data storage and unpickled"
msgstr ""

#: ../develop/plone/persistency/storage.rst:26
msgid "Each time object is written, it is pickled and transaction machinery appends it to ZODB data storage"
msgstr ""

#: ../develop/plone/persistency/storage.rst:28
msgid "Pickle format is series of bytes. Here is example what it does look like::"
msgstr ""

#: ../develop/plone/persistency/storage.rst:41
msgid "It is not very human readable format."
msgstr ""

#: ../develop/plone/persistency/storage.rst:43
msgid "Even if you use SQL based `RelStorage <https://pypi.python.org/pypi/RelStorage/>`_ ZODB backends, the objects are still pickled to the database; SQL does not support varying table schema per row and Python objects do not have fixed schema format."
msgstr ""

#: ../develop/plone/persistency/storage.rst:48
msgid "Binary trees"
msgstr ""

#: ../develop/plone/persistency/storage.rst:50
msgid "Data is usually organized to binary trees or `BTrees <http://wiki.zope.org/ZODB/guide/node6.html>`_ . More specifically, data is usually stored as Object Oriented Binary Tree `OOBtree <http://docs.zope.org/zope3/Code/BTrees/OOBTree/OOBTree/index.html>`_ which provides Python object as key and Python object value mappings. Key is the object id in the parent container as a string and value is any pickleable Python object or primitive you store in your database."
msgstr ""

#: ../develop/plone/persistency/storage.rst:56
msgid "`ZODB data structure interfaces <http://svn.zope.org/ZODB/trunk/src/BTrees/Interfaces.py?rev=88776&view=markup>`_."
msgstr ""

#: ../develop/plone/persistency/storage.rst:58
msgid "`Using BTrees example from Zope Docs <http://zodb.org/documentation/articles/ZODB2.html#using-btrees>`_."
msgstr ""

#: ../develop/plone/persistency/storage.rst:61
msgid "Buckets"
msgstr ""

#: ../develop/plone/persistency/storage.rst:63
msgid "BTree stores data in buckets (`OOBucket <http://docs.zope.org/zope3/Code/BTrees/OOBTree/OOBucket/index.html>`_)."
msgstr ""

#: ../develop/plone/persistency/storage.rst:65
msgid "Bucket is the smallest unit of data which is written to the database once. Buckets are loaded lazily: BTree only loads buckets storing values of keys being accessed."
msgstr ""

#: ../develop/plone/persistency/storage.rst:69
msgid "BTree tries to stick as much data into one bucket once as possible. When one value in bucket is changed the whole bucket must be rewritten to the disk."
msgstr ""

#: ../develop/plone/persistency/storage.rst:72
msgid "`Default bucket size is 30 objects <http://svn.zope.org/ZODB/trunk/src/BTrees/_OOBTree.c?rev=25186&view=markup>`_."
msgstr ""

#: ../develop/plone/persistency/storage.rst:75
msgid "Storing as attribute vs. storing in BTree"
msgstr ""

#: ../develop/plone/persistency/storage.rst:77
msgid "Plone has two kinds of fundamental way to store data:"
msgstr ""

#: ../develop/plone/persistency/storage.rst:79
msgid "Attribute storage (stores values directly in the pickled objects)."
msgstr ""

#: ../develop/plone/persistency/storage.rst:81
msgid "Annotation storage (OOBTree based). Plone objects have attribute __annotations__ which is OOBtree for storing objects in name-conflict free way."
msgstr ""

#: ../develop/plone/persistency/storage.rst:84
msgid "When storing objects in annotation storage, reading object values need at least one extra database look up to load the first bucket of OOBTree."
msgstr ""

#: ../develop/plone/persistency/storage.rst:88
msgid "If the value is going to be used frequently, and especially if it is read when viewing the content object, storing it in an attribute is more efficient than storing it in an annotation. This is because the __annotations__ BTree is a separate persistent object which has to be loaded into memory, and may push something else out of the ZODB cache."
msgstr ""

#: ../develop/plone/persistency/storage.rst:93
msgid "If the attribute stores a large value, it will increase memory usage, as it will be loaded into memory each time the object is fetched from the ZODB."
msgstr ""

#: ../develop/plone/persistency/storage.rst:97
msgid "BLOBs"
msgstr ""

#: ../develop/plone/persistency/storage.rst:99
msgid "BLOBs are large binary objects like files or images."
msgstr ""

#: ../develop/plone/persistency/storage.rst:101
msgid "BLOBs are supported since ZODB 3.8.x. Plone 3.x still uses ZODB 3.7.x by default. ZODB 3.8.x works but it is not officially supported."
msgstr ""

#: ../develop/plone/persistency/storage.rst:105
msgid "When you use BLOB interface to store and retrieve data, they are stored physically as files on your file systems. File system, as the name says, was designed to handle files and has far better performance on large binary data as sticking the data into ZODB."
msgstr ""

#: ../develop/plone/persistency/storage.rst:110
msgid "BLOBs are streamable which means that you can start serving the file from the beginning of the file to HTTP wire without needing to buffer the whole data to the memory first (slow)."
msgstr ""

#: ../develop/plone/persistency/storage.rst:115
msgid "SQL values"
msgstr ""

#: ../develop/plone/persistency/storage.rst:117
msgid "Plone's Archetypes subsystem supports storing individual Archetypes fields in SQL database. This is mainly `an integration feature <http://plone.293351.n2.nabble.com/Work-with-Contents-in-SQL-database-td5868800.html>`_. Read more about this in `Archetypes manual <https://plone.org/products/archetypes/documentation/old/ArchetypesDeveloperGuide/index_html#advanced-storage-manual>`_."
msgstr ""

#: ../develop/plone/persistency/storage.rst:121
msgid "Transaction sizes"
msgstr ""

#: ../develop/plone/persistency/storage.rst:123
msgid "Discussion pointers"
msgstr ""

#: ../develop/plone/persistency/storage.rst:125
msgid "http://www.mail-archive.com/zodb-dev@zope.org/msg03398.html"
msgstr ""

#: ../develop/plone/persistency/storage.rst:128
msgid "Analysing Data.fs content offline"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:3
msgid "Transactions"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:10
msgid "Plone uses the `ZODB database <http://en.wikipedia.org/wiki/Zope_Object_database>`_ which implements `Multiversion concurrency control <http://en.wikipedia.org/wiki/Multiversion_concurrency_control>`_."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:15
msgid "Plone will complete either *all* database modifications that occur during a request, or *none* of them. It will never write incomplete data to the database."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:19
msgid "Plone and the underlying Zope handles transactions transparently."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:23
msgid "Every transaction is a *read* transaction until any of the objects participating in the transaction are mutated (object attribute set), turning the transaction to a *write* transaction."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:29
msgid "Old examples might refer to the ``get_transaction()`` function. This has been replaced by ``transaction.get()`` in the later Zope versions."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:32
msgid "Please read this `Zope transaction tutorial <http://www.zope.org/Members/mcdonc/HowTos/transaction>`_ to get started how to use transactions with your code."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:36
msgid "https://bugs.launchpad.net/zope2/+bug/143584"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:39
msgid "Using transactions"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:41
msgid "Normally transactions are managed by Plone and the developer should not be interested in them."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:44
msgid "Special cases where one would want to manage transaction life-cycle may include:"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:47
msgid "Batch creation or editing of many items once."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:51
msgid "`transaction source code <http://svn.zope.org/transaction/trunk/transaction/?rev=104430>`_."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:53
msgid "http://www.zope.org/Members/mcdonc/HowTos/transaction"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:55
msgid "https://bugs.launchpad.net/zope3/+bug/98382"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:59
msgid "Subtransactions"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:61
msgid "Normally, a Zope transaction keeps a list of objects modified within the transaction in a structure in RAM."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:64
msgid "This list of objects can grow quite large when there is a lot of work done across a lot of objects in the context of a transaction. *Subtransactions* write portions of this object list out to disk, freeing the RAM required by the transaction list. Using subtransactions can allow you to build transactions involving objects whose combined size is larger than available RAM."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:90
msgid "Failsafe crawling and committing in batches"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:92
msgid "In the case you need to access many objects in coherent and efficient manner."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:94
msgid "https://bitbucket.org/gocept/gocept.linkchecker/src/80a127405ac06d2054e61dd62fcd643d864357a0/src/gocept/linkchecker/scripts/crawl-site.py?at=default"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:97
msgid "Transaction boundary events"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:99
msgid "It is possible to perform actions before and after transaction is written to the database."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:102
msgid "See transaction documentation about `before commit hooks <http://zodb.readthedocs.org/en/latest/transactions.html#before-commit-hook>`_ and `after commit hooks <http://zodb.readthedocs.org/en/latest/transactions.html#after-commit-hooks>`_."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:108
msgid "Viewing transaction content and debugging transactions"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:110
msgid "Please see :doc:`Transaction troubleshooting </manage/troubleshooting/transactions>`"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:113
msgid "Undoing transactions"
msgstr ""

#: ../develop/plone/persistency/transactions.rst:115
msgid "Everything that has happened on Plone site can be undoed through the *Undo* tab in ZMI, in site root. By default you can undo latest 20 transactions."
msgstr ""

#: ../develop/plone/persistency/transactions.rst:118
msgid "If you need to raise this limit just replace all numbers of ``20`` with higher value in file ``App/Undo.py``, restart site and now you can undo more transactions."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:3
msgid "Catalogs"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:7
msgid "A brief introduction to ZCatalogs, the Catalog Tool and what they're used for."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:13
msgid "Why ZCatalogs?"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:15
msgid "Plone is built on the CMF, which uses the ZODB to store content in a very free-form manner with arbitrary hierarchy and a lot of flexibility in general. For some content use cases, however, it is very useful to treat content as more ordered, or tabular. This is where ZCatalog comes in."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:21
msgid "Searching, for example, requires being able to query content on structured data such as dates or workflow states. Additionally, query results often need to be sorted based on structured data of some sort. So when it comes to searching it is very valuable to treat our free-form persistent ZODB objects as if they were more tabular. ZCatalog indexes do exactly this."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:28
msgid "Since the ZCatalog is in the business of treating content as tabular when it isn't necessarily so, it is very tolerant of any missing data or exceptions when indexing. For example, Plone includes \"start\" and \"end\" indexes to support querying events on their start and end dates.  When a page is indexed, however, it doesn't have start or end dates.  Since the ZCatalog is tolerant, it doesn't raise any exception when indexing the start or end dates on a page. Instead it simply doesn't include pages in those indexes. As such, it is appropriate to use indexes in the catalog to support querying or sorting when not all content provides the data indexed."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:40
msgid "This manual is intended to be a brief start guide to ZCatalogs, specially aimed to tasks specific to Plone, and will not treat advanced ZCatalogs concepts in depth. If you want to learn more about ZCatalogs in the context of Zope, please refer to `The Zope Book, Searching and Categorizing Content`_. If you want to perform advanced searches, `AdvancedQuery`_, which is included with Plone since the 3.0 release, is what you're looking for. See `Boolean queries (AdvancedQuery)`_ for a brief introduction."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:50
msgid "Quick start"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:52
msgid "Every ZCatalog is composed of indexes and metadata. Indexes are fields you can search by, and metadata are copies of the contents of certain fields which can be accessed without waking up the associated content object."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:57
msgid "Most indexes are also metadata fields. For example, you can search objects by *Title* and then display the *Title* of each object found without fetching them, but note not all indexes need to be part of metadata."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:62
msgid "When you search inside the catalog, what you get as a result is a list of elements known as brains. Brains have one attribute for each metadata field defined in the catalog, in addition to some methods to retrieve the underlying object and its location. Metadata values for each brain are saved in the metadata table of the catalog upon the (re)indexing of each object."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:69
msgid "Brains are said to be lazy for two reasons; first, because they are only created 'just in time' as your code requests each result, and second, because retrieving a catalog brain doesn't wake up the objects themselves, avoiding a huge performance hit."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:74
msgid "To see the ZCatalogs in action, fire up your favourite browser and open the ZMI. You'll see an object in the root of your Plone site named *portal\\_catalog*. This is the Catalog Tool, a Plone tool (like the Membership Tool or the Quickinstaller Tool) based on ZCatalogs created by default in every Plone site which indexes all the created content."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:81
msgid "Open it and click the *Catalog* tab, at the top of the screen. There you can see the full list of currently indexed objects, filter them by path, and update and remove entries. If you click on any entry, a new tab (or window) will open showing the metadata and index values for the selected indexed object. Note that most fields are \"duplicated\" in the *Index Contents* and *Metadata Contents* tables, but its contents have different formats, because, as it was said earlier, indexes are meant to search by them, and metadata to retrieve certain attributes from the content object without waking it up."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:92
msgid "Back to the management view of the Catalog Tool, if you click the *Indexes* or the *Metadata* tab you'll see the full list of currently available indexes and metadata fields, respectively, its types and more. There you can also add and remove indexes and metadata fields. If you're working on a test environment, you can use this manager view to play with the catalog, but beware indexes and metadata are usually added through GenericSetup and not using the ZMI."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:103
msgid "Other catalogs"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:105
msgid "Besides, the main portal catalog, the site contains other catalogs."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:107
msgid "uid_catalog maintains object look up by Unique Identified (UID). UID is given to the object when it is created and it does not change even if the object is moved around the site."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:110
msgid "reference_catalog maintains inter-object references by object unique identified (UID). Archetypes's ReferenceField uses this catalog. The catalog contains indexes UID, relationship, sourceUID, targetId and targetUID."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:114
msgid "Add-on products may install their own catalogs which are optimized for specific purposes. For example, `betahaus.emaillogin <https://pypi.python.org/pypi/betahaus.emaillogin>`_ creates email_catalog is which is used to speed-up login by email process."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:119
msgid "Manually indexing object to a catalog"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:121
msgid "The default content object.reindexObject() is defined in `CMFCatalogAware <http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/CMFCatalogAware.py?rev=102742&view=auto>`_ and will update the object data to portal_catalog."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:125
msgid "If your code uses additional catalogs, you need to manually update cataloged values after the object has been modified."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:134
msgid "Manually uncatalog object to a catalog"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:136
msgid "Sometimes is useful to uncatalog object."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:138
msgid "code ::"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:147
msgid "Rebuilding a catalog"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:149
msgid "Catalog rebuild means walking through all the objects on Plone site and adding them to the catalog. Rebuilding the catalog is very slow as the whole database must be read through. Reasons for you to do this in code could be"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:153
msgid "Creating catalog after setting up objects in the unit tests"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:155
msgid "Rebuilding after massive content migration"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:157
msgid "How to trigger rebuild::"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:163
msgid "Retrieving unique values from a catalog"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:164
msgid "Catalogs have a uniqueValues method associated with each index. There are times when you will need to get a list of all the values currently stored on a particular index. For example if you wanted the highest and lowest price you might first need to retrieve the values currently indexed for price. This example demonstrates how you can list all the unique values on an index named 'price'."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:176
msgid "the result would be a listing of all the prices stored in the 'price' index::"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:182
msgid "Minimal code for creating a new catalog"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:282
msgid "Register a new catalog via portal_setup"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:284
msgid "In toolset.xml add this lines"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:299
msgid "archetype_tool catalog map"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:301
msgid "archetype_tool maintains map between content types and catalogs which are interested int them. When object is modified through Archetypes mechanisms, Archetypes post change notification to all catalogs enlisted."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:305
msgid "See *Catalogs* tab on archetype_tool in Zope Management Interface."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:308
msgid "Map an catalog for an new type"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:310
msgid "code"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:321
msgid "Additional info"
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:323
msgid "`ZCatalog source code <http://svn.zope.org/Zope/trunk/src/Products/ZCatalog/ZCatalog.py?rev=96262&view=auto>`_."
msgstr ""

#: ../develop/plone/searching_and_indexing/catalog.rst:325
msgid "http://wyden.com/plone/basics/searching-the-catalog"
msgstr ""

#: ../develop/plone/searching_and_indexing/index.rst:3
msgid "Queries, search and indexing"
msgstr ""

#: ../develop/plone/searching_and_indexing/index.rst:5
msgid "In plone, database index and search facilities are provided by portal_catalog tool. There are two distinct functions. Indexing: All searchable data is copied to the catalog when the object is indexed, to make object searchable and listable. Querying: Search keys are matched against the indexed catalog copies to return the indexed metadata of the object."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:3
msgid "Indexes and metadata"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:7
msgid "How to program your custom fields and data queries through portal_catalog."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:13
msgid "What does indexing mean?"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:15
msgid "Indexing is the action to make object data search-able. Plone stores available indexes in the database. You can create them through-the-web and inspect existing indexes in portal_catalog on Index tab."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:20
msgid "The Catalog Tool can be configured through the ZMI or programatically in Python but current best practice in the CMF world is to use GenericSetup to configure it using the declarative *catalog.xml* file. The GenericSetup profile for Plone, for example, uses the *CMFPlone/profiles/default/catalog.xml* XML data file to configure the Catalog Tool when a Plone site is created. It is fairly readable so taking a quick look through it can be very informative."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:29
msgid "When using a GenericSetup extension profile to customize the Catalog Tool in your portal, you only need to include XML for the pieces of the catalog you are changing. To add an index for the Archetypes location field, as in the example below, a policy package could include the following *profiles/default/catalog.xml*:"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:45
msgid "The GenericSetup import handler for the Catalog Tool also supports removing indexes from the catalog if present using the \"remove\" attribute of the *<index>* element. To remove the \"start\" and \"end\" indexes used for events, for example, a policy package could include the following *profiles/default/catalog.xml*:"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:59
msgid "Warning"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:61
msgid "Care must be taken when setting up indexes with GenericSetup - if the import step for a *catalog.xml* is run a second time (for example when you reinstall the product), the indexes specified will be destroyed, losing all currently indexed entries, and then re-created fresh (and empty!). If you want to workaround this behaviour, you can either update the catalog afterwards or add the indexes yourself in Python code using a custom import handler."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:69
msgid "For more info, see this setuphandler https://github.com/plone/plone.app.event/blob/master/plone/app/event/setuphandlers.py in plone.app.event or these discussions on more about this problem:"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:72
msgid "http://plone.293351.n2.nabble.com/How-to-import-catalog-xml-without-emptying-the-indexes-td2302709.html"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:74
msgid "https://mail.zope.org/pipermail/zope-cmf/2007-March/025664.html"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:78
msgid "Viewing indexes and indexed data"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:81
msgid "Indexed data"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:83
msgid "You can do this through portal_catalog tool in ZMI."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:85
#: ../develop/plone/searching_and_indexing/indexing.rst:97
msgid "Click portal_catalog in the portal root"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:87
msgid "Click *Catalog* tab"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:89
msgid "Click any object"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:92
msgid "Indexes and metadata columns"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:94
msgid "Available indexes are stored in the database, not in Python code. To see what indexes your site has"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:99
msgid "Click *Indexes* and *Metadata* tabs"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:103
msgid "Creating an index"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:105
msgid "To perform queries on custom data, you need to add the corresponding index to portal_catalog first."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:107
msgid "E.g. If your :doc:`Archetypes </develop/plone/content/types>` content type has a field::"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:126
msgid "You can add a new index which will *index* the value of this field, so you can make queries based on it later."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:129
msgid "See more information about :doc:`accessor methods </develop/plone/content/archetypes/fields>`."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:133
msgid "If you want to create an index for content type you do not control yourself or if you want to do some custom logic in your indexer, please see *Custom index method* below."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:138
msgid "Creating an index through the web"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:140
msgid "This method is suitable during development time - you can create an index to your Plone database locally."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:143
msgid "Go ZMI"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:145
msgid "Click portal_catalog"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:147
msgid "Click Indexes tab"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:149
msgid "On top right corner, you have a drop down menu to add new indexes. Choose the index type you need to add."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:151
msgid "Type: FieldIndex"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:153
msgid "Id: getMyCustomValue"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:155
msgid "Indexed attributes: getMyCustomValue"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:157
msgid "You can use Archetypes accessors methods directly as an indexed attribute. In example we use ``getMyCustomValue`` for AT field ``customValue``."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:160
msgid "The type of index you need depends on what kind queries you need to do on the data. E.g. direct value matching, ranged date queries, free text search, etc. need different kind of indexes."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:163
msgid "After this you can query portal_catalog::"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:171
msgid "Adding index using add-on product installer"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:173
msgid "You need to have your own add-on product which registers new indexes when the add-on installer is run. This is the recommended method for repeated installations."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:177
msgid "You can create an index"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:179
msgid "Using catalog.xml where XML is written by hand"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:181
msgid "Create the index through the web and export catalog data from a development site using *portal_setup* tool *Export* functionality. The index is created through-the-web as above, XML is generated for you and you can fine tune the resulting XML before dropping it in to your add-on product."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:186
msgid "Create indexes in Python code of add-on custom import step."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:188
msgid "As a prerequisitement, your add-on product must have :doc:`GenericSetup profile support </develop/addons/components/genericsetup>`."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:191
msgid "This way is repeatable: index gets created every time an add-on product is installed. It is more cumbersome, however."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:196
msgid "There is a known issue of indexed data getting pruned when an add-on product is reinstalled. If you want to avoid this then you need to create new indexes in add-on installer custom setup step (Python code)."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:202
msgid "The example below is not safe for data prune on reinstall. This file is ``profiles/default/catalog.xml`` It installs a new index called ``revisit_date`` of DateIndex type."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:218
msgid "http://maurits.vanrees.org/weblog/archive/2009/12/catalog"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:221
msgid "Custom index methods"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:223
msgid "The `plone.indexer <https://pypi.python.org/pypi/plone.indexer>`_ package provides method to create custom indexing functions."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:225
msgid "Sometimes you want to index \"virtual\" attributes of an object computed from existing ones, or just want to customize the way certain attributes are indexed, for example, saving only the 10 first characters of a field instead of its whole content."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:230
msgid "To do so in an elegant and flexible way, Plone>=3.3 includes a new package, `plone.indexer <https://pypi.python.org/pypi/plone.indexer>`_, which provides a series of primitives to delegate indexing operations to adapters."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:235
msgid "Let's say you have a content-type providing the interface ``IMyType``. To define an indexer for your type which takes the first 10 characters from the body text, just type (assuming the attribute's name is 'text'):"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:248
msgid "Finally, register this factory function as a named adapter using ZCML. Assuming you've put the code above into a file named ``indexers.py``:"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:256
msgid "And that's all! Easy, wasn't it?"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:258
msgid "Note you can omit the ``for`` attribute because you passed this to the ``@indexer`` decorator, and you can omit the ``provides`` attribute because the thing returned by the decorator is actually a class providing the required ``IIndexer`` interface."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:263
msgid "To learn more about the *plone.indexer* package, read `its doctest <http://dev.plone.org/plone/browser/plone.indexer/trunk/plone/indexer/README.txt>`_."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:265
msgid "For more info about how to create content-types, refer to the :doc:`developing add-ons section </develop/addons/index>`. For older Archetypes content-types, see the `Plone 4 documentention on Archetypes <http://docs.plone.org/4/en/old-reference-manuals/archetypes/index.html>`_"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:268
msgid "**Important note:** If you want to adapt an Archetypes content-type like Event or News Item, take into account you will have to feed the ``indexer`` decorator with the Zope 3 interfaces defined in ``Products.ATContentTypes.interface.*`` files, not with the deprecated Zope 2 ones into the ``Products.ATContentTypes.interfaces`` file."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:276
msgid "Creating a metadata column"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:278
msgid "The same rules and methods apply for metadata columns as creating index above. The difference with metadata is that"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:281
msgid "It is not used for searching, only displaying the search result"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:283
msgid "You store always a value copy as is"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:285
msgid "To create metadata colums in your ``catalog.xml`` add::"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:297
msgid "When indexing happens and how to reindex manually"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:299
msgid "Content item reindexing is run when"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:301
msgid "Plone calls reindexObject() if"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:303
msgid "The object is modified by the user using the standard edit forms"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:305
msgid "portal_catalog rebuild is run (from *Advanced* tab)"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:307
msgid "If you add a new index you need to run :doc:`Rebuild catalog </develop/plone/searching_and_indexing/catalog>` to get the existing values from content objects to new index."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:311
msgid "You might also want to call :doc:`reindexObject() </develop/plone/searching_and_indexing/catalog>` method  manually in some cases. This method is defined in the `ICatalogAware <http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/interfaces/_content.py?rev=91414&view=auto>`_ interface."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:317
msgid "You must call reindexObject() if you"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:319
msgid "Directly call object field mutators"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:321
msgid "Otherwise directly change object data"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:325
msgid "**Unit test warning:** Usually Plone reindexes modified objects at the end of each request (each transaction). If you modify the object yourself you are responsible to notify related catalogs about the new object data."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:329
msgid "reindexObject() method takes the optional argument *idxs* which will list the changed indexes. If idxs is not given, all related indexes are updated even though they were not changed."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:342
msgid "Also, if you modify security related parameters (permissions), you need to call reindexObjectSecurity()."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:346
msgid "Index types"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:348
msgid "Zope 2 product `PluginIndexes <https://github.com/zopefoundation/Products.ZCatalog/tree/master/src/Products/PluginIndexes>`_ defines various portal_catalog index types used by Plone."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:350
msgid "FieldIndex stores values as is"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:352
msgid "DateIndex and DateRangeIndex store dates (Zope 2 DateTime objects) in searchable format. The latter provides ranged searches."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:355
msgid "KeywordIndex allows keyword-style look-ups (query term is matched against all the values of a stored list)"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:357
msgid "ZCTextIndex is used for full text indexing"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:359
msgid "`ExtendedPathIndex <https://github.com/plone/Products.ExtendedPathIndex>`_ is used for indexing content object locations."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:363
msgid "Default Plone indexes and metadata columns"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:365
msgid "Some interesting indexes"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:367
msgid "start and end: Calendar event timestamps, used to make up calendar portlet"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:369
msgid "sortable_title: Title provided for sorting"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:371
msgid "portal_type: Content type as it appears in portal_types"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:373
msgid "Type: Translated, human readable, type of the content"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:375
msgid "path: Where the object is (getPhysicalPath accessor method)."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:377
msgid "object_provides: What interfaces and marker interfaces object has. KeywordIndex of interface full names."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:380
msgid "is_default_page: is_default_page is method in CMFPlone/CatalogTool.py handled by plone.indexer, so there is nothing like object.is_default_page and this method calls ptool.isDefaultPage(obj)"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:383
msgid "Some interesting columns"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:385
msgid "getRemoteURL: Where to go when the object is clicked"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:387
msgid "getIcon: Which content type icon is used for this object in the navigation"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:389
msgid "exclude_from_nav: If True the object won't appear in sitemap, navigation tree"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:392
msgid "Custom sorting by title"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:394
msgid "sortable_title is type of FieldIndex (raw value) and normal ``Title`` index is type of searchable text."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:396
msgid "``sortable_title`` is generated from ``Title`` in ``Products/CMFPlone/CatalogTool.py``."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:398
msgid "You can override ``sortable_title`` by providing an indexer adapter with a specific interface of your content type."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:400
msgid "Example indexes.py::"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:421
msgid "Related ``configure.zcml``"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:430
msgid "Full-text searching"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:432
msgid "Plone provides special index called ``SearchableText`` which is used on the site full-text search. Your content types can override ``SearchableText`` index with custom method to populate this index with the text they want to go into full-text searching."
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:436
msgid "Below is an example of having ``SearchableText`` on a custom Archetypes content class. This class has some methods which are not part of AT schema and thus must be manually added to ``SearchableText``"
msgstr ""

#: ../develop/plone/searching_and_indexing/indexing.rst:516
msgid "http://toutpt.wordpress.com/2008/12/14/archetype_tool-queuecatalog-becareful-with-indexing-with-plones-portal_catalog/"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:3
msgid "Querying"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:7
msgid "How to programmatically search and query content from a Plone site."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:14
msgid "*Querying* is the action to retrieve data from search indexes.  In Plone's case this usually means querying content items using the ``portal_catalog`` tool.  Plone uses the :doc:`portal_catalog </develop/plone/searching_and_indexing/catalog>` tool to perform most content-related queries. Special catalogs, like ``reference_catalog``, exist, for specialized and optimized queries."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:22
msgid "Accesing the ``portal_catalog`` tool"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:24
msgid "Plone queries are performed using ``portal_catalog`` persistent tool which is available as an persistent object at the site root."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:32
msgid "You can also use :doc:`ITools </develop/plone/misc/context>` tool to get access to ``portal_catalog`` if you do not have Plone site object directly available::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:40
msgid "There is also a third way, using traversing. This is discouraged, as this includes extra processing overhead::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:46
msgid "... and the same in TAL template::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:51
msgid "A safer method is to use the ``getToolByName`` helper function::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:57
msgid "Querying ``portal_catalog``"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:60
msgid "To search for something and get the resulting brains, write::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:64
msgid "The catalog returns \"*brains*\". A brain is a lightweight proxy for a found object, which has attributes corresponding to the metadata defined for the catalog."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:68
msgid "Where ``kwargs`` is a dictionary of index names and their associated query values. Only the indexes that you care about need to be included. This is really useful if you have variable searching criteria, for example, coming from a form where the users can select different fields to search for. For example::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:76
msgid "It is worth pointing out at this point that the indexes that you include are treated as a logical AND, rather than OR. In other words, the query above will find all the items that are both an Event, AND in the review state of pending."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:81
msgid "Additionally, you can call the catalog tool directly, which is equivalent to calling ``catalog.searchResults()``::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:86
msgid "If you call portal_catalog() without arguments it will return all indexed content objects::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:94
msgid "The catalog tool queries return an iterable of catalog brain objects."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:96
msgid "As mentioned previously, brains contain a subset of the actual content object information. The available subset is defined by the metadata columns in portal_catalog. You can see available metadata columns on the portal_catalog \"Metadata\" tab in ZMI. For more information, see :doc:`indexing </develop/plone/searching_and_indexing/indexing>`."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:103
msgid "Available indexes"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:105
msgid "To see the full list of available indexes in your catalog, open the ZMI (which usually means navigating to *http://yoursiteURL/manage*) look for the *portal\\_catalog* object tool in the root of your Plone site and check the *Indexes* tab. Note that there are different types of indexes, and each one admits different types of search parameters, and behaves differently. For example, *FieldIndex* and *KeywordIndex* support sorting, but *ZCTextIndex* doesn't. To learn more about indexes, see `The Zope Book, Searching and Categorizing Content <http://docs.zope.org/zope2/zope2book/SearchingZCatalog.html>`_."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:115
msgid "Some of the most commonly used ones are:"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:118
msgid "The title of the content object."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:120
msgid "The description field of the content."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:125
msgid "Subject"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:122
msgid "The keywords used to categorize the content. Example: ::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:138
msgid "portal\\_type"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:128
msgid "As its name suggests, search for content whose portal type is indicated. For example: ::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:134
msgid "You can also specify several types using a list or tuple format:"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:144
msgid "review\\_state"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:141
msgid "The current workflow review state of the content. For example: ::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:166
msgid "object\\_provides"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:147
msgid "From Plone 3, you can search by the interface provided by the content. Example: ::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:154
msgid "Searching for interfaces can have some benefits. Suppose you have several types, for example, event types like *Birthday*, *Wedding* and *Graduation*, in your portal which implement the same interface (for example, ``IIsCauseForCelebration``). Suppose you want to get items of these types from the catalog by their interface. This is more exact than naming the types explicitly (like portal\\_type=['Birthday','Wedding','Graduation' ]), because you don't really care what the types' names really are: all you really care for is the interface. This has the additional advantage that if products added or modified later add types which implement the interface, these new types will also show up in your query."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:169
msgid "Brain result id"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:171
msgid "Result ID (RID) is given with the brain object and you can use this ID to query further info about the object from the catalog."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:180
msgid "Brain result path"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:182
msgid "Brain result path can be extraced as string using ``getPath()`` method::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:189
msgid "Brain object schema"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:191
msgid "To see what metadata columns a brain object contain, you can access this information from ``__record_schema__`` attribute which is a dict."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:209
msgid "What do those numbers represent?"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:213
msgid "Getting the underlying object, its path, and its URL from a brain"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:215
msgid "As it was said earlier, searching inside the catalog returns catalog brains, not the object themselves. If you want to get the object associated with a brain, do::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:221
msgid "To get the path of the object without fetching it::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:225
msgid "which returns the path as an string, corresponding to ``obj.getPhysicalPath()``"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:227
msgid "And finally, to get the URL of the underlying object, usually to provide a link to it::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:232
msgid "which is equivalent to ``obj.absolute_url()``."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:236
msgid "Calling getObject() has performance implications. Waking up each object needs a separate query to the database."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:241
msgid "getObject() and unrestrictedSearchResults() permission checks"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:243
msgid "You cannot call getObject() for a restricted result, even in trusted code."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:245
msgid "Instead, you need to use::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:251
msgid "How to call ``unrestrictedTraverse``"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:255
msgid "http://www.mail-archive.com/zope-dev@zope.org/msg17514.html"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:259
msgid "Counting value of a specific index"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:261
msgid "The efficient way of counting the number value of an index is to work directly in this index. For example we want to count the number of each portal_type. Quering via search results is a performance bootleneck for that. Iterating on all brains put those in zodb cache. This method is also a memory bottleneck. So a good way to achieve this would be:"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:280
msgid "Sorting and limiting the number of results"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:282
msgid "To sort the results, use the sort\\_on and sort\\_order arguments. The sort\\_on argument accepts any available index, even if you're not searching by it. The sort\\_order can be either 'ascending' or 'descending', where 'ascending' means from A to Z for a text field. 'reverse' is an alias equivalent to 'descending'. For example:"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:293
msgid "The catalog.searchResults() returns a list-like object, so to limit the number of results you can just use Python's slicing. For example, to get only the first 3 items:"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:301
msgid "In addition, ZCatalogs allow a sort\\_limit argument. The sort\\_limit is only a hint for the search algorithms and can potentially return a few more items, so it's preferable to use both ``sort_limit`` and slicing simultaneously:"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:313
msgid "portal_catalog query takes *sort_on* argument which tells the index used for sorting. *sort_order* defines sort direction. It can be string \"reverse\"."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:316
msgid "Sorting is supported only on FieldIndexes. Due to the nature of searchable text indexes (they index split text, not strings) they cannot be used for sorting. For example, to do sorting by title, an index called *sortable_tite* should be used."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:321
msgid "Example of how to sort by id::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:330
msgid "Text format"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:332
msgid "Since most indexes use Archetypes accessors to index the field value, the returned text is UTF-8 encoded. This is a limitation inherited from the early ages of Plone."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:336
msgid "To get unicode value for e.g. title you need to do the following::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:346
msgid "Accessing indexed data"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:348
msgid "Normally you don't get copy of indexed data with brains, only metadata. You can still access the raw indexed data if you know what you are doing by using RID of the brain object."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:390
msgid "You can also directly access a single index::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:404
msgid "Dumping portal catalog content"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:406
msgid "Following is useful in unit test debugging::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:417
msgid "Bypassing query security check"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:421
msgid "Security: All portal_catalog queries are limited to the current user permissions by default."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:423
msgid "If you want to bypass this restriction, use the unrestrictedSearchResults() method."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:431
msgid "With ``unrestrictedSearchResults()`` you need also a special way to get access to the objects without triggering a security exception::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:437
msgid "Bypassing language check"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:441
msgid "All portal_catalog() queries are limited to the selected language of the current user. You need to explicitly bypass the language check if you want to do multilingual queries."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:445
msgid "Example of how to bypass language check::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:449
msgid "Some older LinguaPlone versions, which are still using ``LanguageIndex`` to keep language information in portal_catalog() may require::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:456
msgid "http://plone.293351.n2.nabble.com/Products-LinguaPlone-LanguageIndex-vs-FieldIndex-td5554729.html#a5747819"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:459
msgid "Bypassing Expired content check"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:461
msgid "Plone and portal_catalog have a mechanism to list only active (non-expired) content by default."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:464
msgid "Below is an example of how the expired content check is made::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:471
msgid "See also::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:477
msgid "None as query parameter"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:481
msgid "Usually if you pass in None as the query value, it will match all the objects instead of zero objects."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:485
msgid "Querying for None values is possible with AdvancedQuery_ (see below)."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:489
msgid "Query by path"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:491
msgid "ExtendedPathIndex_ is the index used for content object paths. The *path* index stores the physical path of the objects."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:495
msgid "** Warning: ** If you ever rename your Plone site instance, the path"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:495
msgid "index needs to be completely rebuilt."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:502
msgid "Searching for content within a folder"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:504
msgid "Use the 'path' argument to specify the physical path to the folder you want to search into."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:507
msgid "By default, this will match objects into the specified folder and all existing sub-folders. To change this behaviour, pass a dictionary with the keys 'query' and 'depth' to the 'path' argument, where"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:513
msgid "'query' is the physical path, and"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:514
msgid "'depth' can be either 0, which will return only the brain for the path queried against, or some number greater, which will query all items down to that depth (eg, 1 means searching just inside the specified folder, or 2, which means searching inside the folder, and inside all child folders, etc)."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:520
msgid "The most common use case is listing the contents of an existing folder, which we'll assume to be the ``context`` object in this example:"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:532
msgid "Query multiple values"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:534
msgid "``KeywordIndex`` index type indexes lists of values. It is used e.g. by Plone's categories (subject) feature and ``object_provides`` provided interfaces index."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:538
msgid "You can either query"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:540
msgid "a single value in the list"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:542
msgid "many values in the list (all must present)"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:544
msgid "any value in the list"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:546
msgid "The index of the catalog to query is either the name of the keyword argument, a key in a mapping, or an attribute of a record object."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:550
msgid "Attributes of record objects"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:552
msgid "``query`` -- either a sequence of objects or a single value to be passed as query to the index (mandatory)"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:555
msgid "``operator`` -- specifies the combination of search results when query is a sequence of values. (optional, default: 'or'). Allowed values: 'and', 'or'"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:559
msgid "Below is an example of matching any of multiple values gives as a Python list in KeywordIndex. It queries all event types and recurrence_days KeywordIndex must match any of the given dates::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:576
msgid "Querying by interface"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:578
msgid "Suppose you have several content types (for example, event types like 'Birthday','Wedding','Graduation') in your portal which implement the same interface (for example, ``IIsCauseForCelebration``). Suppose you want to get items of these types from the catalog by their interface. This is more exact than naming the types explicitly (like ``portal_type=['Birthday', 'Wedding', 'Graduation' ]``), because you don't really care what the types' names really are: all you really care for is the interface."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:586
msgid "This has the additional advantage that if products added or modified later add types which implement the interface, these new types will also show up in your query."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:590
msgid "Import the interface::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:595
msgid "In a script, where you can't import the interface due to restricted Python, you might do this::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:600
msgid "The advantage of using ``.__identifier__`` instead instead of a dotted name-string is that you will get errors at startup time if the interface cannot be found. This will catch typos and missing imports."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:605
#: ../develop/plone/security/selinux.rst:152
msgid "Caveats"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:607
msgid "``object_provides`` is a KeywordIndex which indexes absolute Python class names. A string matching is performed for the dotted name. Thus, you will have zero results for this::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:613
msgid "because Products.ATContentTypes.interface imports everything from ``document.py``. But this will work::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:619
msgid "As with all catalog queries, if you pass an empty value for search parameter, it will return all results. so if the interface you defined would yield a none type object, the search would return all values of object_provides."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:623
msgid "(Originally from `this tutorial <https://plone.org/documentation/how-to/query-portal_catalog-for-interfaces>`_.)"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:627
msgid "Looks like query by Products.CMFCore.interfaces._content.IFolderish does not seem to work in Plone 4.1 as this implementation information is not populated in portal_catalog."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:631
msgid "Query by content type"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:633
msgid "To get all catalog brains of certain content type on the whole site::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:637
msgid "To see available type names, visit in portal_types tool in ZMI."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:640
msgid "Query published items"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:642
msgid "By default, the portal_catalog query does not care about the workflow state. You might want to limit the query to published items."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:650
msgid "review_state is a portal_catalog index which reads portal_workflow variable \"review_state\". For more information, see what portal_workflow tool *Content* tab in ZMI contains."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:654
msgid "Getting a random item"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:656
msgid "The following view snippet allows you to get one random item on the site::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:687
msgid "Querying FieldIndexes by Range"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:688
msgid "The following examples demonstrate how to do range based queries. This is useful if you want to find the \"minimum\" or \"maximum\" values of something, the example assumes that there is an index called 'getPrice'."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:692
msgid "Get a value that is greater than or equal to 2::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:696
msgid "Get a value that is less than or equal to 40::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:700
msgid "Get a value that falls between 2 and 1000::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:705
msgid "Querying by date"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:707
msgid "See `DateIndex <http://svn.zope.org/Zope/trunk/src/Products/PluginIndexes/DateIndex/tests/test_DateIndex.py?rev=102443&view=auto>`_."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:723
msgid "Note that ``effectiveRange`` may be a lot more efficient. This will return only objects whose ``effective_date`` is in the past, ie. objects that are not unpublished::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:730
msgid "Example 2 - how to get items one day old of FeedFeederItem content type::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:746
msgid "Example 3: how to get news items for a particular year in the template code"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:777
msgid "Example 4 - how to get upcoming events of next two months::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:803
msgid "http://www.ifpeople.net/fairsource/courses/material/apiPlone_en"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:806
msgid "Query by language"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:808
msgid "You can query by language::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:814
msgid "Products.LinguaPlone must be installed."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:817
msgid "Boolean queries (AdvancedQuery)"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:819
msgid "AdvancedQuery is an add-on product for Zope's ZCatalog providing queries using boolean logic. AdvancedQuery is developer level product, providing Python interface for constructing boolean queries."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:823
msgid "AdvancedQuery monkey-patches ``portal_catalog`` to provide new method ``portal_catalog.evalAdvancedQuery()``."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:861
msgid "Plone 3 ships with AdvancedQuery but it is not part of Plone. Always declare AdvancedQuery dependency in your egg's setup.py install_requires."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:866
msgid "AdvancedQuery does not necessarily apply the same automatic limitations which normal portal_catalog() queries do, like language and expiration date. Always check your query code against these limitations."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:872
msgid "See AdvancedQuery_."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:874
msgid "https://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-3-x-to-4.0/updating-add-on-products-for-plone-4.0/removed-advanced-query"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:878
msgid "Setting Up A New Style Query"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:880
msgid "With Plone 4.2, collections use so-called new-style queries by default. These are, technically speaking, canned queries, and they appear to have the following advantages over old-style collection's criteria:"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:885
msgid "They are not complicated sub-objects of collections, but comparably simple subobjects that can be set using simple Python expressions."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:887
msgid "These queries are apparently much faster to execute, as well as"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:888
msgid "much easier to understand, and"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:889
msgid "content-type agnostic in the sense that they are no longer tied to ArcheTypes."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:892
msgid "The easiest way to get into these queries is to grab a debug shell alongside an instance, then fire up a browser pointing to that instance, then manipulate the queries and watch the changes on the debug shell, if you want to experiment. I've constructed a dummy collection for demonstration purposes, named `testquery`. I've formatted the output a little, for readability."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:899
msgid "Discovering the query:"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:927
msgid "This output should be pretty self-explaining: This query finds objects that were created today, which have \"my querystring\" in their description, are of type \"Document\" (ie, \"Page\"), and have \"some_tag\" in their tag set (you'll find that under \"Classification\"). Also, the results are being sorted in reverse order of the Effective Date (ie, the publishing date). We're getting at most 1000 results, which is the default cut-off."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:935
msgid "You can set the query expression (individual parts are evaluated as logical AND) using"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:939
msgid "The three parts of an individual query term are"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:941
msgid "'i': which index to query"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:942
msgid "'o': which operator to use (see `plone.app.querystring` for a list)"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:943
msgid "'v': the possible value of an argument to said operator - eg. the query string."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:945
msgid "Other parameters can be manipulated the same way:"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:951
msgid "Accessing metadata"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:953
msgid "Metadata is collected from the object during cataloging and is copied to brain object for faster access (no need to wake up the actual object from the database)."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:956
msgid "ZCatalog brain objects use Python dictionary-like API to access metadata. Below is a fail-safe example for a metadata access::"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:998
msgid "This is for example purposes only - the code above is working, but not optimal, and can be written up without waking up the object."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1002
msgid "Fuzzy search"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1004
msgid "https://pypi.python.org/pypi/c2.search.fuzzy/"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1007
msgid "Unique values"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1009
msgid "ZCatalog has *uniqueValuesFor()* method to retrieve all unique values for a certain index. It is intended to work on FieldIndexes only."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1024
msgid "Performance"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1026
msgid "The following community mailing list blog posts is very insightful about the performance characteristics of Plone search and indexing:"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1029
msgid "http://plone.293351.n2.nabble.com/Advice-for-site-with-very-large-number-of-objects-millions-tp5513207p5529103.html"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1032
msgid "Batching"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1034
msgid "Complete writeup"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1040
msgid "orphan - the next page will be combined with the current page if it does not contain more than orphan elements"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1043
msgid "Walking through all content"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1045
msgid "``portal_catalog()`` call without search parameters will return all indexed site objects."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1048
msgid "Here is an example how to crawl through Plone content to search HTML snippets. This can be done by rendering every content object and check whether certain substrings exists the output HTML This snippet can be executed through-the-web in Zope Management Interface."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1053
msgid "This kind of scripting is especially useful if you need to find old links or migrate some text / HTML snippets in the content itself. There might be artifacts which only appear on the resulting pages (portlets, footer texts, etc.) and thus they are invisible to the normal full text search."
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1084
msgid "http://blog.mfabrik.com/2011/02/17/finding-arbitary-html-snippets-on-plone-content-pages/"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1087
msgid "Other notes"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1089
msgid "`Indexing tutorial <https://plone.org/documentation/tutorial/using-portal_catalog/tutorial-all-pages>`_ on plone.org"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1091
msgid "`Manual sorting example <http://www.universalwebservices.net/web-programming-resources/zope-plone/advanced-sorting-of-plone-search-results/>`_"
msgstr ""

#: ../develop/plone/searching_and_indexing/query.rst:1093
msgid "`Getting all unique keywords <http://stackoverflow.com/questions/10497342/python-plone-getting-all-unique-keywords-subject>`_"
msgstr ""

#: ../develop/plone/security/csrf.rst:2
msgid "Cross-Site Request Forgery (CSRF)"
msgstr ""

#: ../develop/plone/security/csrf.rst:5
msgid "Plain usage"
msgstr ""

#: ../develop/plone/security/csrf.rst:7
msgid "Documentation: https://github.com/plone/plone.protect/"
msgstr ""

#: ../develop/plone/security/csrf.rst:10
msgid "z3c.form"
msgstr ""

#: ../develop/plone/security/csrf.rst:12
msgid "z3c.form does not include csrf protection yet: https://bugs.launchpad.net/z3c.form/+bug/805794"
msgstr ""

#: ../develop/plone/security/custom_permissions.rst:3
msgid "Custom permissions"
msgstr ""

#: ../develop/plone/security/custom_permissions.rst:7
msgid "Creating special permissions for your product"
msgstr ""

#: ../develop/plone/security/custom_permissions.rst:10
msgid "If you want to protect certain actions in your product by a special permission, you most likely will want to assign this permission to a role when the product is installed."
msgstr ""

#: ../develop/plone/security/custom_permissions.rst:13
msgid "First the permission is defined in *zcml*. It includes an example how to use the permission in a browser page"
msgstr ""

#: ../develop/plone/security/custom_permissions.rst:36
msgid "Now you can use the permission both as a Zope 2 permission *('MyProduct: MyPermission')* or a Zope 3 permission *('myproduct.mypermission')*. The only disadvantage is that you can't import the permissionstring as a variable from a *permissions.py* like from *Products.CMFCore.permissions*."
msgstr ""

#: ../develop/plone/security/custom_permissions.rst:39
msgid "Use Generic Setup's *rolemap.xml* to assign the new permission to roles. This defines the defaults. With the use of (custom) workflows this mapping may change."
msgstr ""

#: ../develop/plone/security/custom_permissions.rst:58
msgid "A new permission will be added to the whole Zope instance by calling *setDefaultRoles* on it. This step is only *rarely needed*, i.e. if the permission must be available outside of Plone Site."
msgstr ""

#: ../develop/plone/security/custom_permissions.rst:62
msgid "Define the following code in your  __init__.py:"
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:3
msgid "Dynamic roles"
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:10
msgid "Plone core's borg.localrole package allows you to hook into role-resolving code and add roles dynamically. I.e. the role on the user depends on HTTP request / environment conditions and is not something set in the site database."
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:15
msgid "Creating a dynamic role"
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:17
msgid "First :doc:`create an Ploneadd-on for your coding needs </develop/addons/bobtemplates.plone/README>`."
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:19
msgid "getRoles() function is called several times per request so you might want to cache the result."
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:22
msgid "There is a complex example below."
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:24
msgid "getAllRoles() is overridden to return a custom role which is not available through normal security machinery. This is required because Plone/Zope builds look-up tables based on the result of getAllRoles() and all possible roles must appear there"
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:29
msgid "getRoles() is overridden to call custom getDummyRolesOnContext() which has the actual logic to resolve the roles"
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:32
msgid "An example code checks whether the context object implements a marker interface and gives the user a role based on that"
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:35
msgid "Example ``localroles.py``::"
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:90
msgid "Custom local role implementation is made effective using ZCML adapter directive in your add-ons ``configure.zcml``::"
msgstr ""

#: ../develop/plone/security/dynamic_roles.rst:105
msgid "If your dynamic role is not any of Plone's existing roles you need to :doc:`declare it with rolemap.xml </develop/plone/security/local_roles>`."
msgstr ""

#: ../develop/plone/security/index.rst:3
msgid "Security"
msgstr ""

#: ../develop/plone/security/index.rst:5
msgid "Zope provides various built-in security facilities"
msgstr ""

#: ../develop/plone/security/index.rst:7
msgid "User - role - permission three layer security model"
msgstr ""

#: ../develop/plone/security/index.rst:9
msgid "Security declarations in ZCML for views, adapters, etc."
msgstr ""

#: ../develop/plone/security/index.rst:11
msgid "RestrictedPython to evaluate sandboxed code"
msgstr ""

#: ../develop/plone/security/local_roles.rst:3
msgid "Local roles"
msgstr ""

#: ../develop/plone/security/local_roles.rst:7
msgid "Creating and setting local roles of Plone members programmatically."
msgstr ""

#: ../develop/plone/security/local_roles.rst:14
msgid "Local roles allows user accounts to have special privileges for a folder and its children."
msgstr ""

#: ../develop/plone/security/local_roles.rst:17
msgid "By default Plone has roles like ``Contributor``, ``Reader``, ``Editor``, etc. and you can view these on the :guilabel:`Sharing` tab and in :term:`ZMI` :guilabel:`Security` tab."
msgstr ""

#: ../develop/plone/security/local_roles.rst:21
msgid "Good introduction to roles: `Basic Roles and Permissions in Plone <http://www.sixfeetup.com/blog/basic-roles-and-permissions-in-plone>`_"
msgstr ""

#: ../develop/plone/security/local_roles.rst:26
msgid "Creating a new role"
msgstr ""

#: ../develop/plone/security/local_roles.rst:28
msgid "New Plone roles can be created through the :doc:`GenericSetup rolemap.xml </develop/addons/components/genericsetup>` file."
msgstr ""

#: ../develop/plone/security/local_roles.rst:31
msgid "Example ``profiles/default/rolemap.xml``"
msgstr ""

#: ../develop/plone/security/local_roles.rst:47
msgid "Adding a role to the Sharing Tab"
msgstr ""

#: ../develop/plone/security/local_roles.rst:49
msgid "To let the newly created role appear in the @@sharing tab, create a :doc:`GenericSetup sharing.xml </develop/addons/components/genericsetup>` file."
msgstr ""

#: ../develop/plone/security/local_roles.rst:52
msgid "Example ``profiles/default/sharing.xml``"
msgstr ""

#: ../develop/plone/security/local_roles.rst:66
msgid "The title is the name to be shown on the sharing page. The required_permission is optional. If given, the user must have this permission to be allowed to manage the particular role."
msgstr ""

#: ../develop/plone/security/local_roles.rst:72
msgid "For Plone 3, there is the `collective.sharingroles <https://pypi.python.org/pypi/collective.sharingroles>`_ addon. Since Plone 4, this is `merged into plone.app.workflow <https://github.com/plone/plone.app.workflow/commit/f9991ca0cc3dd2b8a2c392c145f44c21996eac67>`_."
msgstr ""

#: ../develop/plone/security/local_roles.rst:77
msgid "Setting local role"
msgstr ""

#: ../develop/plone/security/local_roles.rst:79
msgid "``manage_setLocalRoles`` is defined in `AccessControl.rolemanager.RoleManager <https://github.com/zopefoundation/AccessControl/blob/master/src/AccessControl/rolemanager.py#L339>`_."
msgstr ""

#: ../develop/plone/security/local_roles.rst:87
msgid "Getting local roles"
msgstr ""

#: ../develop/plone/security/local_roles.rst:89
msgid "The ``get_local_roles()`` method returns currently-set local roles. This does not return all the *effective* roles (which may include roles acquired from the parent hierarchy). ``get_local_roles_for_userid()`` returns roles for a particular user as a tuple."
msgstr ""

#: ../develop/plone/security/local_roles.rst:101
msgid "Deleting local roles"
msgstr ""

#: ../develop/plone/security/local_roles.rst:103
msgid "``manage_delLocalRoles(userids)`` takes a *list of usernames* as argument. All local roles for these users will be cleared."
msgstr ""

#: ../develop/plone/security/local_roles.rst:106
msgid "The following example (``membrane``-specific) will reset local roles based on external input ::"
msgstr ""

#: ../develop/plone/security/local_roles.rst:145
msgid "Blocking local roles"
msgstr ""

#: ../develop/plone/security/local_roles.rst:147
msgid "Local roles may need to be blocked on a particular object by default. This can be achieved by add a flag to your content object, like so:"
msgstr ""

#: ../develop/plone/security/local_roles.rst:161
msgid "Local role caching"
msgstr ""

#: ../develop/plone/security/local_roles.rst:163
msgid "Resolving effective local roles is a cumbersome operation, so the result is cached."
msgstr ""

#: ../develop/plone/security/local_roles.rst:166
msgid "**Unit testers**: Local roles are cached per request. You need to clear this cache after modifying an object's local roles or switching user if you want to get proper readings."
msgstr ""

#: ../develop/plone/security/local_roles.rst:170
msgid "Unit test example method::"
msgstr ""

#: ../develop/plone/security/local_roles.rst:185
msgid "Debugging"
msgstr ""

#: ../develop/plone/security/local_roles.rst:187
msgid "Set your breakpoint in ``Products.PlonePAS.plugins.local_role.LocalRolesManager.getRolesInContext()`` and ``Products.PlonePAS.plugins.role.GroupAwareRoleManager.getRolesForPrincipal()``. There you see how roles for a given context are being resolved."
msgstr ""

#: ../develop/plone/security/local_roles.rst:191
msgid "Check the ``acl_users.portal_role_manager`` tool via the :term:`ZMI`."
msgstr ""

#: ../develop/plone/security/local_roles.rst:193
msgid "Please see the `zopyx.plone.cassandra <https://pypi.python.org/pypi/zopyx.plone.cassandra>`_ add-on product."
msgstr ""

#: ../develop/plone/security/local_roles.rst:198
msgid "http://toutpt.wordpress.com/2009/03/14/plone-and-local-roles-too-quiet/"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:3
msgid "Available permissions in Plone"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:7
msgid "What Zope security permissions you have available for your Plone coding"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:12
msgid "Listing different available permissions"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:14
msgid "Each permission name is a string."
msgstr ""

#: ../develop/plone/security/permission_lists.rst:16
msgid "To see available permissions, click Security tab at your site root in Zope Management Interface."
msgstr ""

#: ../develop/plone/security/permission_lists.rst:18
msgid "In programming, use pseudoconstants instead of permission string values:"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:20
msgid "See `CMFCore.permissions <http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/permissions.py?rev=94487&view=markup>`_"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:22
msgid "See `AccessControl.Permissions <http://svn.zope.org/Zope/trunk/src/AccessControl/Permissions.py?rev=96262&view=markup>`_"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:24
msgid "For available ZCML permission mappings see:"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:26
msgid "`Products/Five/permissions.zcml <http://svn.zope.org/Zope/trunk/src/Products/Five/permissions.zcml?rev=99146&view=markup>`_"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:28
msgid "Permissions such as ``cmf.ModifyPortalContent``, ``zope2.View``"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:30
msgid "`zope/security/permissions.zcml <http://svn.zope.org/zope.security/trunk/src/zope/security/permissions.zcml?rev=97988&view=markup>`_"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:32
msgid "``zope.Public``"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:34
msgid "or search for the string ``<permission`` in ``*.zcml`` files in the *eggs* folder of your Plone development deployment."
msgstr ""

#: ../develop/plone/security/permission_lists.rst:37
msgid "Example using UNIX grep tool:"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:44
msgid "Useful permissions"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:46
msgid "Permissions are shown by their verbose name in the :term:`ZMI`."
msgstr ""

#: ../develop/plone/security/permission_lists.rst:48
msgid "``View``"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:49
msgid "This governs whether you are allowed to view some content."
msgstr ""

#: ../develop/plone/security/permission_lists.rst:53
msgid "``Access Contents Information``"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:51
msgid "This permission allows access to an object, without necessarily viewing the object. For example, a user may want to see the object's title in a list of results, even though the user can't view the contents of that file."
msgstr ""

#: ../develop/plone/security/permission_lists.rst:56
msgid "``List folder contents``"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:56
msgid "This governs whether you can get a listing of the contents of a folder; it doesn't check whether you have the right to view the objects listed."
msgstr ""

#: ../develop/plone/security/permission_lists.rst:58
msgid "``Modify Portal Content``"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:59
msgid "This governs whether you are allowed to modify some content."
msgstr ""

#: ../develop/plone/security/permission_lists.rst:63
msgid "``Manage Portal``"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:61
msgid "This permission allows you to manage the portal. A number of views in the plone control panel are protected with this view. If you plan to write a reusable product, be very hesitant to use this permission, check whether a custom permission might make more sense."
msgstr ""

#: ../develop/plone/security/permission_lists.rst:65
msgid "There is no single permission for adding content. Every content type has its own permission. If you create your own content type, create a custom add permission for it."
msgstr ""

#: ../develop/plone/security/permission_lists.rst:71
msgid "Permission name"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:71
msgid "Permission name for ZCML"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:73
msgid "View"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:73
msgid "zope2.View"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:74
msgid "Access contents information"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:74
msgid "zope2.AccessContentsInformation"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:75
msgid "List folder contents"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:75
msgid "cmf.ListFolderContents"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:76
msgid "Modify portal content"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:76
msgid "cmf.ModifyPortalContent"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:77
msgid "Manage portal"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:77
msgid "cmf.ManagePortal"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:80
msgid "To reference a permission in code, you need the name as a string. Using strings is a bad convention, all common permissions have a constant in Products.CMFCore.permissions. So to perform a permission check propery, you do something like this::"
msgstr ""

#: ../develop/plone/security/permission_lists.rst:91
msgid "All standard permissions from above can be referenced by their Permission name without spaces."
msgstr ""

#: ../develop/plone/security/permission_lists.rst:95
msgid "http://markmail.org/thread/3izsoh2ligthfcou"
msgstr ""

#: ../develop/plone/security/permissions.rst:7
msgid "How to deal with permissions making your code permission-aware in Plone"
msgstr ""

#: ../develop/plone/security/permissions.rst:14
msgid "Permissions control whether logged-in or anonymous users can execute code and access content."
msgstr ""

#: ../develop/plone/security/permissions.rst:17
msgid "Permissions in Plone are managed by `Zope's AccessControl module <https://github.com/zopefoundation/AccessControl>`_. Persistent permission setting and getting by role heavy lifting is done by `AccessControl.rolemanager.RoleManager <https://github.com/zopefoundation/AccessControl/blob/master/src/AccessControl/rolemanager.py>`_."
msgstr ""

#: ../develop/plone/security/permissions.rst:22
msgid "Permission checks are done for:"
msgstr ""

#: ../develop/plone/security/permissions.rst:24
msgid "every view/method which is hit by incoming HTTP request (Plone automatically publishes traversable methods over HTTP);"
msgstr ""

#: ../develop/plone/security/permissions.rst:27
msgid "every called method for :doc:`RestrictedPython scripts </develop/plone/security/sandboxing>`."
msgstr ""

#: ../develop/plone/security/permissions.rst:30
msgid "The basic way of dealing with permissions is setting the ``permission`` attribute of view declaration. For more information see :doc:`views </develop/plone/views/browserviews>`."
msgstr ""

#: ../develop/plone/security/permissions.rst:35
msgid "Debugging permission errors: Verbose Security"
msgstr ""

#: ../develop/plone/security/permissions.rst:37
msgid "You can turn on ``verbose-security`` option in buildout to get better traceback info when you encounter a permission problem on the site (you are presented a login dialog)."
msgstr ""

#: ../develop/plone/security/permissions.rst:40
msgid "For the security reasons, this option is disabled by default."
msgstr ""

#: ../develop/plone/security/permissions.rst:42
msgid "Set ``verbose-security = on`` in your buildout.cfg ``instance`` or related section."
msgstr ""

#: ../develop/plone/security/permissions.rst:44
msgid "Rerun buildout"
msgstr ""

#: ../develop/plone/security/permissions.rst:46
msgid "Restart Plone properly after buildout ``bin/plonectl stop && bin/plonectl start``"
msgstr ""

#: ../develop/plone/security/permissions.rst:48
msgid "remove the ``Unauthorized`` exception from the list of ignored exceptions inside the ``error_log`` object within the Plone root folder through the ZMI"
msgstr ""

#: ../develop/plone/security/permissions.rst:53
msgid "https://pypi.python.org/pypi/plone.recipe.zope2instance"
msgstr ""

#: ../develop/plone/security/permissions.rst:56
msgid "Checking if the logged-in user has a permission"
msgstr ""

#: ../develop/plone/security/permissions.rst:58
msgid "The following code checks whether the logged in user has a certain permission for some object."
msgstr ""

#: ../develop/plone/security/permissions.rst:81
msgid "Checking whether a specific role has a permission"
msgstr ""

#: ../develop/plone/security/permissions.rst:83
msgid "The following example uses the ``rolesOfPermission()`` method to check whether the *Authenticated* role has a permission on a certain folder on the site. The weirdness of the method interface is explained by the fact that it was written for use in a :term:`ZMI` template::"
msgstr ""

#: ../develop/plone/security/permissions.rst:108
msgid "Permission Access"
msgstr ""

#: ../develop/plone/security/permissions.rst:110
msgid "Objects that are manageable :term:`TTW` inherit from `RoleManager  <http://api.plone.org/CMF/1.5.4/private/AccessControl.Role.RoleManager-class.html>`_. The API provided by this class permits you to manage permissions."
msgstr ""

#: ../develop/plone/security/permissions.rst:114
msgid "Example: see all possible permissions::"
msgstr ""

#: ../develop/plone/security/permissions.rst:122
msgid "Show the security matrix of permission::"
msgstr ""

#: ../develop/plone/security/permissions.rst:145
msgid "Bypassing permission checks"
msgstr ""

#: ../develop/plone/security/permissions.rst:147
msgid "The current user is defined by active security manager. During both restricted and unrestricted execution certain functions may do their own security checks (``invokeFactory``, workflow, search) to filter out results."
msgstr ""

#: ../develop/plone/security/permissions.rst:153
msgid "If a function does its own security checks, there is usually a code path that will execute without security check. For example the methods below have security-aware and raw versions:"
msgstr ""

#: ../develop/plone/security/permissions.rst:157
msgid "``context.restrictedTraverse()`` vs. ``context.unrestrictedTraverse()``"
msgstr ""

#: ../develop/plone/security/permissions.rst:159
msgid "``portal_catalog.searchResults()`` vs. ``portal_catalog.unrestrictedSearchResults()``"
msgstr ""

#: ../develop/plone/security/permissions.rst:161
msgid "However, in certain situations you have only a security-aware code path which is blocked for the current user. You still want to execute this code path and you are sure that it does not violate your site security principles."
msgstr ""

#: ../develop/plone/security/permissions.rst:166
msgid "Below is an example how you can call any Python function and work around the security checks by establishing a temporary ``AccessControl.SecurityManager`` with a special role."
msgstr ""

#: ../develop/plone/security/permissions.rst:232
msgid "For a more complete implementation of this technique, see:"
msgstr ""

#: ../develop/plone/security/permissions.rst:234
msgid "http://github.com/ned14/Easyshop/blob/master/src/easyshop.order/easyshop/order/adapters/order_management.py"
msgstr ""

#: ../develop/plone/security/permissions.rst:237
msgid "Catching ``Unauthorized``"
msgstr ""

#: ../develop/plone/security/permissions.rst:239
msgid "Gracefully failing when the user does not have a permission. Example::"
msgstr ""

#: ../develop/plone/security/permissions.rst:251
msgid "Creating permissions"
msgstr ""

#: ../develop/plone/security/permissions.rst:253
msgid "Permissions are created declaratively in :term:`ZCML`. Before Zope 2.12 (that is, before Plone 4), the `collective.autopermission`_ package was required to enable this, but now it is standard behaviour."
msgstr ""

#: ../develop/plone/security/permissions.rst:260
msgid "http://n2.nabble.com/creating-and-using-your-own-permissions-in-Plone-3-tp339972p1498626.html"
msgstr ""

#: ../develop/plone/security/permissions.rst:262
msgid "http://blog.fourdigits.nl/adding-zope-2-permissions-using-just-zcml-and-a-generic-setup-profile"
msgstr ""

#: ../develop/plone/security/permissions.rst:288
msgid "Now you can use the permission both as a Zope 2-style permission (``MyProduct: MyPermission``) or a Zope 3-style permission (``myproduct.mypermission``). The only disadvantage is that you can't import the permission string as a variable from a ``permissions.py`` file, as you can with permissions defined programmatically."
msgstr ""

#: ../develop/plone/security/permissions.rst:295
msgid "By convention, the permission id is prefixed with the name of the package it's defined in, and uses lowercase only. You have to take care that the title matches the permission string you used in ``permissions.py`` exactly --- otherwise a different, Zope 3 only, permission is registered."
msgstr ""

#: ../develop/plone/security/permissions.rst:301
msgid "Zope 3 style permissions are necessary when using Zope 3 technologies such as ``BrowserViews/formlib/z3c.form``. For example, from ``configure.zcml``:"
msgstr ""

#: ../develop/plone/security/permissions.rst:325
msgid "Define Zope 2 permissions in Python code (old style)"
msgstr ""

#: ../develop/plone/security/permissions.rst:327
msgid "If you want to protect certain actions in your product by a special permission, you most likely will want to assign this permission to a role when the product is installed. You will want to use Generic Setup's ``rolemap.xml`` to assign these permissions.  A new permission will be added to the Zope instance by calling ``setDefaultRoles`` on it."
msgstr ""

#: ../develop/plone/security/permissions.rst:334
msgid "However, at the time when Generic Setup is run, almost none of your code has actually been run, so the permission doesn't exist yet.  That's why we define the permissions in ``permissions.py``, and call this from ``__init__.py``:"
msgstr ""

#: ../develop/plone/security/permissions.rst:338
msgid "``__init__.py``::"
msgstr ""

#: ../develop/plone/security/permissions.rst:342
msgid "``permissions.py``::"
msgstr ""

#: ../develop/plone/security/permissions.rst:353
msgid "When working with permissions, always use the variable name instead of the string value.  This ensures that you can't make typos with the string value, which are hard to debug.  If you do make a typo in the variable name, you'll get an ``ImportError`` or ``NameError``."
msgstr ""

#: ../develop/plone/security/permissions.rst:360
msgid "Assigning permissions to users (roles)"
msgstr ""

#: ../develop/plone/security/permissions.rst:362
msgid "Permissions are usually assigned to roles, which are assigned to users through the web."
msgstr ""

#: ../develop/plone/security/permissions.rst:365
msgid "To assign a permission to a role, use ``profiles/default/rolemap.xml``:"
msgstr ""

#: ../develop/plone/security/permissions.rst:380
msgid "Manually fix permission problems"
msgstr ""

#: ../develop/plone/security/permissions.rst:382
msgid "In the case you fiddle with permission and manage to lock out even the admin user you can still fix the problem from the :doc:`debug prompt </develop/plone/misc/commandline>`."
msgstr ""

#: ../develop/plone/security/permissions.rst:386
msgid "Example debug session, restoring ``Access Contents Information`` for all users::"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:3
msgid "Sandboxing and RestrictedPython"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:7
msgid "Legacy Plone code uses RestrictedPython sandboxing to secure each module and class functions. This documentation tells how it happens."
msgstr ""

#: ../develop/plone/security/sandboxing.rst:16
msgid "Plone has two sandboxing modes"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:18
msgid "Unrestricted: Python code is executed normally and the code can access the full Zope application server environment. This includes other site instances too. This is generally what happens when you write your own add-on and add views for it."
msgstr ""

#: ../develop/plone/security/sandboxing.rst:23
msgid "Restricted (RestrictedPython): scripts and evalutions are specially compiled, have limited Python language functionality and every function call is checked against the security manager. This is what happens when you try to add Python code or customize page templates through Zope Management Interface."
msgstr ""

#: ../develop/plone/security/sandboxing.rst:28
msgid "Restricted execution is enabled only for **through-the-web** scripts and **legacy code**:"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:30
msgid "Old style TAL page templates: everything you put inside page template tal:content, tal:condition, etc. These templates are .pt templates **without** accomppaning BrowserView"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:34
msgid "Script (Python) code is executed (plone_skins layer Python scripts and old style form management)"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:38
msgid "RestrictedPython was bad idea and mostly causes headache. Avoid through-the-web Zope scripts if possible."
msgstr ""

#: ../develop/plone/security/sandboxing.rst:41
msgid "For further information, read"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:43
msgid "http://plone.293351.n2.nabble.com/Update-was-Plone-4-Chameleon-compatibility-tp5612838p5614466.html"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:46
msgid "Whitelisting modules for RestrictedPython import"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:48
msgid "https://plone.org/documentation/kb/using-unauthorized-modules-in-scripts"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:51
msgid "Traversing special cases"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:53
msgid "Old style Zope object traversing mechanism does not expose"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:55
msgid "Functions without docstring (the \"\"\" comment at the beginning of the function)"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:57
msgid "Functions whose name begins with underscore (\"_\"-character)"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:60
msgid "Unit testing RestrictedPython code"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:62
msgid "RestrictedPython_ code is problematic, because RestrictedPython hardening is done on Abstract Syntax Tree level and effectively means all evaluated code must be available in the source code form. This makes testing RestrictedPython code little difficult."
msgstr ""

#: ../develop/plone/security/sandboxing.rst:66
msgid "Below are few useful unit test functions::"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:153
msgid "Other references"
msgstr ""

#: ../develop/plone/security/sandboxing.rst:155
msgid "`zope.security <https://pypi.python.org/pypi/zope.security>`_"
msgstr ""

#: ../develop/plone/security/selinux.rst:3
msgid "Using SELinux with Plone"
msgstr ""

#: ../develop/plone/security/selinux.rst:7
msgid "Tutorial on using SELinux with Plone, using Plone 4.3 and RedHat Linux 6.3."
msgstr ""

#: ../develop/plone/security/selinux.rst:14
msgid "This document is a tutorial on using SELinux with Plone, using RedHat Linux 6.3 and Plone 4.3. It is applicable to any Linux distribution with small changes."
msgstr ""

#: ../develop/plone/security/selinux.rst:17
msgid "About SELinux"
msgstr ""

#: ../develop/plone/security/selinux.rst:19
msgid "SELinux is a mandatory access control system, meaning that SELinux assigns security *contexts* (presented by *labels*) to system resources, and allows access only to the processes that have defined required levels of authorization to the contexts. In other words, SELinux maintains that certain *target* executables (having security contexts) can access (level of access being defined explicitly) only certain files (having again security context labels). In essence the contexts are roles, which makes SELinux a Role Based Access Control system. It should be noted that even root is usually just an ordinary user for RBAC systems, and will be contained like any other user."
msgstr ""

#: ../develop/plone/security/selinux.rst:21
msgid "The concept of contexts and labels can be slightly confusing at first. It stems from the idea of chain of trust. A system that upholds that proper authorization checks are being done is worthless if the system allows moving the protected data to a place that does not have similar authorization checks. Context labels are file system attributes, and when the file is moved around the label (representing context) moves with the file. The system is supposed to limit where the information can be moved, and the contexts can be extended beyond file system (ie. labels on rows in database systems), building complete information systems that will never hand over data to a party that is unable (or unwilling) to take care of it."
msgstr ""

#: ../develop/plone/security/selinux.rst:23
msgid "Most SELinux policies *target* an executable, and define the contexts (usually applied with labels to files) it can access by using *type enforcement rules*. However there are also *capabilities* that control more advanced features such as the ability to execute heap or stack, setuid, fork process, bind into ports, or open TCP sockets. Most of the capabilities and macros come from reference policy, which offers policy developers ready solutions to most common problems. The reference policy shipped by Linux distributions contains ready rules for some 350 targets, including applications like most common daemons (sshd), and system services (init/systemd)."
msgstr ""

#: ../develop/plone/security/selinux.rst:25
msgid "The value of SELinux is in giving administrators fine granularity of access control far beyond the usual capabilities of \\*NIX systems. This is useful especially in mitigating the impact of security vulnerabilities. The most apparent downside to SELinux is the high skill requirements. To understand most of SELinux - and to be able to maintain it effectively with 3rd party applications - requires good abstraction skills, and especially the official documentation is somewhat hard to digest. SELinux was never engineered to be easy for administrators. It was engineered to be able to implement complex security models like Bell-LaPadula and MLS."
msgstr ""

#: ../develop/plone/security/selinux.rst:27
msgid "There have been several myths about SELinux being heavy (in reality it comes with ~3% overhead), or that it breaks all applications. There used to be time (years ago) when SELinux applied itself by default on everything, and if the application was not included in the shipped policies it probably failed miserably. Most of the application developers and companies got frustrated to the situation, and started recommending that SELinux should always be disabled. Things have luckily changed drastically since then. Today most SELinux implementations use what is called *targeted policy*, which means that SELinux affects only applications that have explicit policies. As a result SELinux does generally nothing to your 3rd party applications - good or bad - until you enable it. This tutorial is meant to give readers pointers on how to accomplish exactly that."
msgstr ""

#: ../develop/plone/security/selinux.rst:30
msgid "Creating new SELinux policy"
msgstr ""

#: ../develop/plone/security/selinux.rst:33
msgid "Prerequisities"
msgstr ""

#: ../develop/plone/security/selinux.rst:35
msgid "root access"
msgstr ""

#: ../develop/plone/security/selinux.rst:36
msgid "Working SELinux (*sudo sestatus* reports **ENABLED**, and **enforcing**)"
msgstr ""

#: ../develop/plone/security/selinux.rst:37
msgid "Preferably a system that uses *targeted policy* (see the output of previous command)"
msgstr ""

#: ../develop/plone/security/selinux.rst:38
msgid "SELinux policy utilities installed (policycoreutils-python policycoreutils-gui)"
msgstr ""

#: ../develop/plone/security/selinux.rst:39
msgid "The application (in this case Plone) already installed"
msgstr ""

#: ../develop/plone/security/selinux.rst:42
msgid "Creating new policy"
msgstr ""

#: ../develop/plone/security/selinux.rst:44
msgid "Development starts usually by generating a policy skeleton with the *sepolgen* (or sepolicy-generate) utility. It can generate several types of templates, which come with a set of basic access rights. There are several sepolgen versions out there, depending on the Linux distribution. The most important differences between them are in the included templates. Creating new policy is done with the following command: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:48
msgid "Where the parameters are:"
msgstr ""

#: ../develop/plone/security/selinux.rst:50
msgid "**-n plone** gives the new policy name. Default is to use the name of the executable, but we want to give a more generic name in this case."
msgstr ""

#: ../develop/plone/security/selinux.rst:51
msgid "**-t 3** elects a template (\"*normal application*\") that gives some commonly required access rights as a starting point"
msgstr ""

#: ../develop/plone/security/selinux.rst:52
msgid "**/usr/local/Plone/zinstance/bin/plonectl** is the application that will get a new context (*plonectl_exec_t*), which will get most of the type enforcement rules."
msgstr ""

#: ../develop/plone/security/selinux.rst:54
msgid "The outcoming result will be four files:"
msgstr ""

#: ../develop/plone/security/selinux.rst:56
msgid "**plone.te** Type enforcement file defining the access rules. **This file contains most of the policy, and most of the rules go there.**"
msgstr ""

#: ../develop/plone/security/selinux.rst:57
msgid "**plone.if** Interface file defining what *other* policies can import from your policy."
msgstr ""

#: ../develop/plone/security/selinux.rst:58
msgid "**plone.fc** File contexts file defining what context labels will be applied to files and directories."
msgstr ""

#: ../develop/plone/security/selinux.rst:59
msgid "**plone.sh** Setup script that will compile and install the policy to the system configuration (both running and persistent)."
msgstr ""

#: ../develop/plone/security/selinux.rst:62
msgid "Labeling files"
msgstr ""

#: ../develop/plone/security/selinux.rst:64
msgid "Before the actual development will start file context labeling rules should be defined in **plone.fc**. You probably need some context (*plone_t*) for all files related to Plone, context (*plone_rw_t*) with write rights to *var* and the plonectl will need a context (*plonectl_exec_t*) that comes with special rights. ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:70
msgid "The generated **plone.te** already tells SELinux what *plone_t* and *plone_exec_t* are - valid file context types. The tools labeling files will know what to do about them. However the *plone_rw_t* is must be introduced before continuing, and the plone_t should be renamed to *plonectl_t* (to describe the target better - important for managing more complex rules): ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:77
msgid "It is also a good idea to edit the restorecon commands at the end of **plone.sh** to point to /usr/local/Plone and relabel all the files when the policy is recompiled and installed: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:82
msgid "Development process"
msgstr ""

#: ../develop/plone/security/selinux.rst:84
msgid "The basic policy development process for SELinux policies follows the following pattern:"
msgstr ""

#: ../develop/plone/security/selinux.rst:86
msgid "Add permissive rules"
msgstr ""

#: ../develop/plone/security/selinux.rst:87
msgid "Compile & install your policy"
msgstr ""

#: ../develop/plone/security/selinux.rst:88
msgid "Clear the audit logs"
msgstr ""

#: ../develop/plone/security/selinux.rst:89
msgid "Run the application until it fails"
msgstr ""

#: ../develop/plone/security/selinux.rst:90
msgid "Run audit2allow"
msgstr ""

#: ../develop/plone/security/selinux.rst:91
msgid "Study the output of audit2allow, and add more access rules to satisfy the application"
msgstr ""

#: ../develop/plone/security/selinux.rst:92
msgid "Repeat from step 2 until everything works"
msgstr ""

#: ../develop/plone/security/selinux.rst:93
msgid "Remove permissive rules"
msgstr ""

#: ../develop/plone/security/selinux.rst:96
msgid "Permissive rules"
msgstr ""

#: ../develop/plone/security/selinux.rst:98
msgid "Most applications require largish amount of rules just to start properly. To reach a working set of rules faster you can switch your contexts to permissive mode by editing the *PlonePython.te*: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:108
msgid "Permissive in SELinux means that all actions by mentioned contexts will be allowed to process, and the incidents (*access vector denials*) will be only logged. This will allows to gather rules faster than going through the complete development cycle."
msgstr ""

#: ../develop/plone/security/selinux.rst:111
msgid "Please note that permissive rules have to be removed at some point, or the policy will **not** protect the application as expected."
msgstr ""

#: ../develop/plone/security/selinux.rst:114
msgid "Using audit2allow"
msgstr ""

#: ../develop/plone/security/selinux.rst:116
msgid "Audit2allow can search both dmesg and the system audit logs for access vector cache denials, and build suggestions based on them. Because the output will be more understandable without extra noise, it is recommendable to clear audit log between development cycles. Since it is probably not a good idea to clear dmesg, it is suggested that you clear the system audit logs, and instruct audit2allow to use them as source, for example: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:122
msgid "There are couple useful parameters for running audit2allow:"
msgstr ""

#: ../develop/plone/security/selinux.rst:124
msgid "*-r* adds requires (\"imports\" from other policies) to the output"
msgstr ""

#: ../develop/plone/security/selinux.rst:125
msgid "*-R* makes audit2allow suggest compatible macros from other available policies. Macros contain often more lenient access rules, but they also reduce the amount of required rules. Using them will make the policy slightly more platform dependent, but easier to maintain."
msgstr ""

#: ../develop/plone/security/selinux.rst:126
msgid "*-i /var/log/audit/audit.log* makes only to audit logs to be evaluated for rules"
msgstr ""

#: ../develop/plone/security/selinux.rst:129
msgid "Always when in trouble, and you suspect access vector cache denial, use audit2allow. If you can't figure out what is going on, also check out the output of *audit2why*, similar tool that produces more human readable reasons why access was denied. Beware though, audit2why is somewhat heavy."
msgstr ""

#: ../develop/plone/security/selinux.rst:132
msgid "Example type enforcement rules"
msgstr ""

#: ../develop/plone/security/selinux.rst:134
msgid "SELinux rules are actually quite simple. For instance the following rule tells to *allow* the process that has context *plonectl_exec_t* access to most common temporary files (*tmp_t*, defined in the reference policy), and the level of access will allow it most of the things that are usually done to files (but not all, for instance *setattr* is missing): ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:138
msgid "For the previous to be usable the *tmp_t* and *file* have to be introduced to the compiler, that will search for them from the other available policies. Type is a grouping item that will usually point to a security context (labeled files), while classes define what access types (ie. getattr) can are available for the type. The term *type enforcement rule* comes from the fact that SELinux rules define who can do what to the objects that are linked to types. ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:145
msgid "There are also macros that will help in accomplishing more complex tasks. The following macro will give the executable right to bind to 8080/TCP: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:149
msgid "To get an idea about what items are available the `Reference policy API documentation <http://oss.tresys.com/docs/refpolicy/api/>`_ is the place go to."
msgstr ""

#: ../develop/plone/security/selinux.rst:154
msgid "First of all, audit2allow is not a silver bullet. There are cases where your application accesses something that it does not really require for operation, for instance to scan your system for automatic configuration of services. There are also cases where it prints nothing yet the application clearly is denied access to something. That can be caused by *dontaudit* rules, which silence logging of events that could generate too much noise. In any case a healthy amount of criticism should be applied to everything audit2allow output, especially when the suggested rules would give access rights to outside application directories."
msgstr ""

#: ../develop/plone/security/selinux.rst:156
msgid "Misconfiguration can cause either file labeling to fail, or the application process not to get transitioned to proper executing context. If it seems that the policy is doing nothing, check that the files are labeled correctly (`ls -lFZ`), and the process is running in the correct context (`ps -efZ`)."
msgstr ""

#: ../develop/plone/security/selinux.rst:158
msgid "Evaluating the file context rules (fules and their labels) is managed by a heurestic algorithm, which gives precedence to more specific rules by evaluating the length and precision of the path patterns. The patterns are easy for beginner to misconfigure. When suspecting that the file context rules are not getting applied correctly, always investigate `semanage fcontext -l` to see what rules match your files."
msgstr ""

#: ../develop/plone/security/selinux.rst:161
msgid "Policies for Plone"
msgstr ""

#: ../develop/plone/security/selinux.rst:163
msgid "The following contains results of ordinary \"install, test & break, add rules, repeat from beginning\" development cycle for a basic Plone SELinux policy."
msgstr ""

#: ../develop/plone/security/selinux.rst:166
msgid "Relabeling rights"
msgstr ""

#: ../develop/plone/security/selinux.rst:168
msgid "By default you might not have the right to give any of new security labels to files, and *restorecon* may throw permission denied errors. To give the SELinux utilities (using the context *setfiles_t*) the right to change the security context based on the new types add the following rules: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:191
msgid "If the transition is not done, the application will keep running in the starting user's original context. Most likely that will be unconfined_t, which means no SELinux restrictions will be applied to the process."
msgstr ""

#: ../develop/plone/security/selinux.rst:194
msgid "Transition to context"
msgstr ""

#: ../develop/plone/security/selinux.rst:196
msgid "When you first run Plone (ie. \"plonectl fg\"), you will notice that it doesn't run, complaining about bad interpreter. Audit2allow will instruct to give rights to your uncontained_t context to run the python interpreter. This is however wrong. You wish to first instruct SELinux to change the process always to the new context (*plonectl_exec_t*) when the application is run. You also wish to have the necessary rights to execute the application so that the context transition can start: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:214
msgid "Later when enough rules are in place for the application to run take a look at the process context to see that the transitioning to *plonectl_exec_t* works: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:221
msgid "Common process requirements"
msgstr ""

#: ../develop/plone/security/selinux.rst:223
msgid "In order for any \\*NIX process to work some basic requirements must be met. Applications require for instance access to /dev/null, and PTYs: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:234
msgid "Zope/PLONE"
msgstr ""

#: ../develop/plone/security/selinux.rst:236
msgid "After running the plonectl commands (fg, start, stop) several times, and adding the required rules you should end up with something like following. First you will have a large amount of require stanzas for the rule compiler, and then an intermediate amount of rules: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:278
msgid "Gathering the previous audit2allow failed completely to report tcp_socket read and write. Some system policy had probably introduced a *dontaudit* rule, which quiesced the logging for that access vector denial. Luckily Plone threw out very distinct Exception, which made resolving the issue easy."
msgstr ""

#: ../develop/plone/security/selinux.rst:281
msgid "ZEO"
msgstr ""

#: ../develop/plone/security/selinux.rst:283
msgid "There are couple differences between standalone and ZEO installations. To support both a boolean is probably good way to go. Booleans can be managed like: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:290
msgid "Installing Plone in ZEO mode will change the directory *zinstance* to *zeocluster*. It is alright to either have both defined in **plone.fc**, or to use regexp: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:296
msgid "The differences to type enforcement policy consist mostly of more networking abilities (which one probably should not allow unless really required), and the ability to run shells (ie. bash): ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:316
msgid "Maintenance utilities"
msgstr ""

#: ../develop/plone/security/selinux.rst:318
msgid "The procedure for allowing maintenance utilities like *buildout* to work is quite straight forward. First introduce a new context: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:323
msgid "Then label the maintenance utilities using the context: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:327
msgid "Last, provide the necessary rules for relabeling, context transition, and for the process to run without any restrictions: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:338
msgid "After running maintenance tasks you should make sure the files have still correct labels by running something like: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:343
msgid "See also \"setenforce Permissive\", which will disable enforcing SELinux rules temporarily system wide."
msgstr ""

#: ../develop/plone/security/selinux.rst:346
msgid "Testing the policy"
msgstr ""

#: ../develop/plone/security/selinux.rst:348
msgid "Easiest way to test the policy is to label for instance the Python executable as plone_exec_t by using *chcon*, and to test the policy using Python scripts. For example: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:369
msgid "This can easily be refined into automated testing. Other forms such as Portlet inside running Plone process can also be used for testing."
msgstr ""

#: ../develop/plone/security/selinux.rst:372
msgid "Deploying the policy"
msgstr ""

#: ../develop/plone/security/selinux.rst:374
msgid "SELinux policies can be installed simply by running *semodule -n -i <compiled_policy.pp>*. In case packaging is required (for rolling out Plone instances automatically, or for use with centralized management tools like Satellite) it is easy to accomplish with rpm. In order to do that first install the rpm building tools: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:378
msgid "Then modify the following RPM spec file to suit your needs: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:438
msgid "The rpm packages will be built by running the rpmbuild: ::"
msgstr ""

#: ../develop/plone/security/selinux.rst:445
msgid "External resources"
msgstr ""

#: ../develop/plone/security/selinux.rst:447
msgid "The following external resources are sorted by probable usefulness to someone who is beginning working with SELinux:"
msgstr ""

#: ../develop/plone/security/selinux.rst:449
msgid "`Fedora SELinux FAQ <https://docs.fedoraproject.org/en-US/Fedora/13/html/SELinux_FAQ/index.html>`_"
msgstr ""

#: ../develop/plone/security/selinux.rst:450
msgid "`Reference policy API <http://oss.tresys.com/docs/refpolicy/api/>`_"
msgstr ""

#: ../develop/plone/security/selinux.rst:451
msgid "`NSA - SELinux FAQ <http://www.nsa.gov/research/selinux/faqs.shtml>`_"
msgstr ""

#: ../develop/plone/security/selinux.rst:452
msgid "`NSA - SELinux main website <http://www.nsa.gov/research/selinux/index.shtml>`_"
msgstr ""

#: ../develop/plone/security/selinux.rst:453
msgid "`Official SELinux project wiki <http://selinuxproject.org/>`_"
msgstr ""

#: ../develop/plone/security/selinux.rst:454
msgid "`Red Hat Enterprise SELinux Policy Administration (RHS429) classroom course <https://www.redhat.com/training/courses/rhs429/>`_"
msgstr ""

#: ../develop/plone/security/selinux.rst:455
msgid "`Tresys Open Source projects <http://www.tresys.com/open-source.php>`_ (IDE, documentation about the reference policy, and several management tools)"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:3
msgid "Standard permissions and roles"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:7
msgid "Technical overview of Plones standard permissions and roles."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:12
msgid "Standard permissions"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:14
msgid "The standard permissions can be found in ``AccessControl``s and ``Product.CMFCore``\\’s ``permissions.zcml``. Here, you will find a short ``id`` (also known as the *Zope 3 permission id*) and a longer ``title`` (also known as the *Zope 2 permission title*). For historical reasons, some areas in Plone use the id, whilst others use the title. As a rule of thumb:"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:19
msgid "Browser views defined in ZCML directive use the Zope 3 permission id;"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:20
msgid "Security checks using ``zope.security.checkPermission()`` use the Zope 3 permission id;"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:21
msgid "Dexterity’s ``add_permission`` FTI variable uses the Zope 3 permission id;"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:22
msgid "The ``rolemap.xml`` GenericSetup handler and workflows use the Zope 2 permission title;"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:23
msgid "Security checks using ``AccessControl``’s ``getSecurityManager().checkPermission()``, including the methods on the ``portal_membership`` tool, use the Zope 2 permission title."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:27
msgid "The most commonly used permission are shown below. The Zope 2 permission title is shown in parentheses."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:31
msgid "``zope2.View`` (:guilabel:`View`)"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:31
msgid "used to control access to the standard view of a content item;"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:34
msgid "``zope2.DeleteObjects`` (:guilabel:`Delete objects`)"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:34
msgid "used to control the ability to delete child objects in a container;"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:37
msgid "``cmf.ModifyPortalContent`` (:guilabel:`Modify portal content`)"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:37
msgid "used to control write access to content items;"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:40
msgid "``cmf.ManagePortal`` (:guilabel:`Manage portal`)"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:40
msgid "used to control access to management screens;"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:43
msgid "``cmf.AddPortalContent`` (:guilabel:`Add portal content`)"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:43
msgid "the standard add permission required to add content to a folder;"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:46
msgid "``cmf.SetOwnProperties`` (:guilabel:`Set own properties`)"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:46
msgid "used to allow users to set their own member properties'"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:49
msgid "``cmf.RequestReview`` (:guilabel:`Request review`)"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:49
msgid "typically used as a workflow transition guard to allow users to submit content for review;"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:53
msgid "``cmf.ReviewPortalContent`` (:guilabel:`Review portal content`)"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:52
msgid "usually granted to the ``Reviewer`` role, controlling the ability to publish or reject content."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:56
msgid "Standard roles"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:58
msgid "As with permissions, it is easy to create custom roles (use the ``rolemap.xml`` GenericSetup import step – see ``CMFPlone``\\’s version of this file for an example), although you should use the standard roles where possible."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:61
msgid "The standard roles in Plone are:"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:64
msgid ":guilabel:`Anonymous`"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:64
msgid "a pseudo-role that represents non-logged in users."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:68
msgid "if a permission is granted to :guilabel:`Anonymous`, it is effectively granted to everyone. It is not possible to grant permissions to non-logged in users without also granting them to logged in ones."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:73
msgid ":guilabel:`Authenticated`"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:73
msgid "a pseudo-role that represents logged-in users."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:76
msgid ":guilabel:`Owner`"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:76
msgid "automatically granted to the creator of an object."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:81
msgid ":guilabel:`Manager`"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:79
msgid "which represents super-users/administrators. Almost all permissions that are not granted to ``Anonymous`` are granted to ``Manager``."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:85
msgid ":guilabel:`Site Manager`"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:84
msgid "which represents site/administrators. Has permissions needed to fully manage a single Plone site."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:90
msgid ":guilabel:`Reviewer`"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:88
msgid "which represents content reviewers separately from site administrators. It is possible to grant the :guilabel:`Reviewer` role locally on the :guilabel:`Sharing`` tab, where it is shown as :guilabel:`Can review`."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:93
msgid ":guilabel:`Member`"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:93
msgid "representing “standard” Plone users."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:95
msgid "In addition, there are three roles that are intended to be used as *local roles* only. These are granted to specific users or groups via the :guilabel:`Sharing` tab, where they appear under more user friendly pseudonyms."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:102
msgid ":guilabel:`Reader`, aka :guilabel:`Can view`,"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:100
msgid "confers the right to view content. As a role of thumb, the :guilabel:`Reader` role should have the :guilabel:`View` and :guilabel:`Access contents information` permissions if the :guilabel:`Owner` roles does."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:107
msgid ":guilabel:`Editor`, aka :guilabel:`Can edit`,"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:105
msgid "confers the right to edit content. As a role of thumb, the :guilabel:`Editor` role should have the :guilabel:`Modify portal content` permission if the :guilabel:`Owner` roles does."
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:114
msgid ":guilabel:`Contributor`, aka :guilabel:`Can add`,"
msgstr ""

#: ../develop/plone/security/standard_permissions.rst:110
msgid "confers the right to add new content. As a role of thumb, the:guilabel: `Contributor` role should have the `Add:guilabel: portal content` permission and any type-specific add permissions globally (i.e. granted in ``rolemap.xml``), although these permissions are sometimes managed in workflow as well."
msgstr ""

#: ../develop/plone/serving/ftp.rst:3
msgid "FTP"
msgstr ""

#: ../develop/plone/serving/ftp.rst:5
msgid "Plone/Zope supports FTP in the default configuration."
msgstr ""

#: ../develop/plone/serving/ftp.rst:7
msgid "FTP support is not very well maintained. WebDAV protocol is recommended over FTP."
msgstr ""

#: ../develop/plone/serving/ftp.rst:10
msgid "Enabling FTP"
msgstr ""

#: ../develop/plone/serving/ftp.rst:12
msgid "`See zope2instance recipe <https://pypi.python.org/pypi/plone.recipe.zope2instance>`_."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:3
msgid "HTTP request and response"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:7
msgid "Accessing and manipulating Zope's HTTP request and response objects programmatically."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:14
msgid "This chapter explains the basics of Zope HTTP requests and responses:"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:16
msgid "request and response objects lifecycle;"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:17
msgid "data which can be extracted from the request;"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:18
msgid "data which can be placed on the response."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:21
msgid "Lifecycle"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:23
msgid "Unlike some other web frameworks, in Plone you do not explicitly create or return HTTP response objects.  A HTTP request object always has a HTTP response object associated with it, and the response object is created as soon as the request hits the webserver."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:28
msgid "The response is available for the whole lifetime of request processing.  This effectively allows you to set and modify response headers at any point in the code."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:33
msgid "Webservers"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:35
msgid "Usually Plone runs on Zope's ZServer_ (based on Sam Rushing's Medusa_). Other alternatives are WSGI_ compatible web servers like Repoze_."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:38
msgid "The web server will affect how your HTTP objects are constructed."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:42
msgid "HTTP Request"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:44
msgid "All incoming HTTP requests are wrapped in Zope's ZPublisher_ HTTPRequest_ objects. This is a multi-mapping: it contains mappings for environment variables, other variables, form data, and cookies, but the keys of all these mappings can also be looked up directly on the request object (i.e. ``request['some_form_id']`` and ``request.form['some_form_id']`` are equivalent)."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:51
msgid "Usually your view function or instance will receive an HTTP request object, along with a traversed context, as its construction parameter."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:54
msgid "You can access the request in your view::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:71
msgid "Request method"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:73
msgid "The request method (GET or POST) can be read::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:79
msgid "Request URL"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:81
msgid "To get the requested URL::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:86
msgid "To get the URL of the served object use the following (this might be different from the requested URL, since Plone does all kinds of default page and default view magic)::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:95
msgid "URLs, as accessed above, do not contain query string."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:98
#: ../develop/plone/serving/http_request_and_response.rst:244
msgid "Query string"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:100
msgid "The unparsed query string can be accessed."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:102
msgid "E.g. if you go to ``http://localhost:8080/site?something=foobar``::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:107
msgid "If the query string is not present in the HTTP request, it is an empty string."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:111
msgid "You can also use the ``request.form`` dictionary to access parsed query string content."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:115
msgid "Request path"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:117
msgid "The request URI path can be read from ``request.path``, which returns a list of path components.  ``request.path`` is a virtual path, and has the site id component removed from it."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:125
msgid "Other possible headers::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:130
msgid "What's the difference?"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:133
msgid "``REQUEST_URI``"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:135
msgid "To get the variable which corresponds to ``REQUEST_URI`` in e.g. PHP the following helps::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:150
msgid "http://www.teamrubber.com/blog/_serverrequest_uri-in-zope/"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:152
msgid "http://www.doughellmann.com/PyMOTW/urlparse/index.html"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:155
msgid "Request client IP"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:176
msgid "For functional tests based on ``zope.testbrowser`` use the ``addHeader`` method to add custom headers to a browser."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:180
msgid "``GET`` variables"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:182
msgid "HTTP ``GET`` variables are available in ``request.form`` if the ``REQUEST_METHOD`` was ``GET``."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:191
msgid "``POST`` variables"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:193
msgid "HTTP ``POST`` varibles are available in ``request.form``::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:197
msgid "There is no difference in accessing ``GET`` and ``POST`` variables."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:200
msgid "Request body"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:201
msgid "The request body can be retrieved from the HTTPRequest_ object by using the get method with the key ``BODY``::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:207
msgid "HTTP headers"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:209
msgid "HTTP headers are available through ``request.get_header()`` and the ``request.environ`` dictionary."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:219
msgid "Dumping all headers::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:224
msgid "A simple ZMI Python script to dump all HTTP request headers::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:246
msgid "To access the raw HTTP ``GET`` query string::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:252
msgid "Web environment"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:254
msgid "The web server exposes its own environment variables in ``request.other`` (ZServer_) or ``request.environ`` (Repoze_ and other WSGI_-based web servers)::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:264
msgid "Hostname"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:266
msgid "Below is an example to get the HTTP server name in a safe manner, taking virtual hosting into account::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:295
msgid "http://httpd.apache.org/docs/2.1/mod/mod_proxy.html#x-headers"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:297
msgid "http://zotonic.googlecode.com/hg/doc/varnish.zotonic.vcl (X-Forwarded-Host)"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:302
msgid "Request port"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:304
msgid "It is possible to extract the Zope instance port from the request.  This is useful e.g. for debugging purposes if you have multiple ZEO front ends running, and you want to identify them easily::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:312
msgid "The ``SERVER_PORT`` variable returns the port number as a string, not an integer."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:316
msgid "This port number is not the one visible to the external traffic (port 80, HTTP)"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:319
msgid "Published object"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:321
msgid "``request[\"PUBLISHED\"]`` points to a view, method or template which was the last item in the traversing chain to be called to render the actual page."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:324
msgid "To extract the relevant content item from this information you can do e.g. in the after publication hook::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:337
msgid "You might also want to filter out CSS etc. requests"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:339
msgid "Please note that ``request[PUBLISHED]`` is set after language negotiation and authentication"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:341
msgid "`More complete example <https://github.com/miohtama/silvuple/blob/master/silvuple/negotiator.py>`_"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:344
msgid "Flat access"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:346
msgid "``GET``, ``POST`` and web environment variables are flat mapped to the request object as a dictionary look up::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:356
msgid "Request mutability"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:358
msgid "Even if you can write and add your own attributes to HTTP request objects, this behavior is discouraged. If you need to create cache variables for request lifecycle use annotations_."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:362
msgid "Add link to internal annotations examples when written."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:366
msgid "Accessing HTTP request outside context"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:368
msgid "There are often cases where you would like to get hold of the HTTP request object, but the underlying framework does not pass it to you.  In these cases you have two ways to access the request object:"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:372
msgid "Use *acquisition* to get the request object from the site root. When Plone site traversal starts, the HTTP request is assigned to current site object as the ``site.REQUEST`` attribute."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:376
msgid "Use https://pypi.python.org/pypi/five.globalrequest."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:378
msgid "Example of getting the request using acquisition::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:395
msgid "zope.globalrequest.getRequest"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:399
msgid "https://pypi.python.org/pypi/five.globalrequest"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:403
msgid "HTTP response"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:405
msgid "Usually you do not return HTTP responses directly from your views. Instead, you modify the existing HTTP response object (associated with the request) and return the object which will be HTTP response payload."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:409
msgid "The returned payload object can be:"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:411
msgid "a string (str) 8-bit raw data; or"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:412
msgid "an iterable: the response is streamed, instead of memory-buffered."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:415
msgid "Accessing response"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:417
msgid "You can access the HTTP response if you know the request::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:433
msgid "Response headers"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:435
msgid "Use HTTPResponse_ ``setHeader()`` to set headers::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:442
msgid "Content disposition"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:444
msgid "The ``Content-Disposition`` header is used to set the filename of a download. It is also used by Flash 10 to check whether Flash download is valid."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:447
msgid "Example of setting the download and downloadable filename::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:458
msgid "http://www.littled.net/new/2008/10/17/plone-and-flash-player-10/"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:459
msgid "http://support.microsoft.com/kb/260519"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:462
msgid "Return code"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:464
msgid "Use ``HTTPResponse.setStatus(self, status, reason=None, lock=None)`` to set HTTP return status (\"404 Not Found\", \"500 Internal Error\", etc.)."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:467
msgid "If ``lock=True``, no further modification of the HTTPResponse status are allowed, and will fail silently."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:471
msgid "Response body"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:473
msgid "You might want to read or manipulate the response body in the post-publication hook."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:476
msgid "The response body is not always a string or basestring: it can be a generator or iterable for blob data."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:479
msgid "The body is available as the ``response.body`` attribute."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:481
msgid "You can change the body using setBody and locking it::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:486
msgid "If ``lock=True``, no further modification of the HTTPResponse body are allowed, and will fail silently."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:490
msgid "Redirects"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:492
msgid "**Real redirects**"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:494
msgid "Use the ``response.redirect()`` method::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:502
msgid "You can lock the status to not let other change the status later in the process ::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:507
msgid "**Javascript redirects**"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:509
msgid "You can invoke this Javascript redirect trick from a page template head slot in a hacky way"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:521
#: ../develop/plone/sessions/cookies.rst:3
msgid "Cookies"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:523
msgid "See :doc:`cookies documentation </develop/plone/sessions/cookies>`."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:526
msgid "Middleware-like hooks"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:528
msgid "Plone does not have a middleware concept, as everything happens through traversal. Middleware behavior can be emulated with the *before traverse* hook. This hook can be installed on any persistent object in the traversing graph. The hook is persistent, so it is a database change and must be installed using custom GenericSetup Python code."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:536
msgid "Before traverse hooks cannot create new HTTP responses, or return alternative HTTP responses.  Only exception-like HTTP response modification is supported, e.g. HTTP redirects. If you need to rewrite the whole response, the post-publication hook must be used."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:543
msgid "http://blog.fourdigits.nl/changing-your-plone-theme-skin-based-on-the-objects-portal_type"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:545
msgid "http://zebert.blogspot.com/2008_01_01_archive.html"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:547
msgid "http://svn.repoze.org/thirdparty/zopelib/branches/2.9.8/ZPublisher/tests/testBeforeTraverse.py"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:551
msgid "Redirector: https://plonegomobile.googlecode.com/svn/trunk/gomobile/gomobile.mobile/gomobile/mobile/postpublication.py"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:554
msgid "Transform chain"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:556
msgid "Transform chain is a hook into repoze.zope2 that allows third party packages to register a sequence of hooks that will be allowed to modify the response before it is returned to the browser."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:559
msgid "It is used e.g. by ``plone.app.caching``."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:563
msgid "https://pypi.python.org/pypi/plone.transformchain"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:566
msgid "Post-publication hook"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:568
msgid "The post-publication hook is run when:"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:570
msgid "the context object has been traversed;"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:571
msgid "after the view has been called and the view has rendered the response;"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:572
msgid "before the response is sent to the browser;"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:573
msgid "before the transaction is committed."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:575
msgid "This is practical for caching purposes: it is the ideal place to determine and insert caching headers into the response."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:578
msgid "Read more at the `plone.postpublicationhook package page <https://pypi.python.org/pypi/plone.postpublicationhook/>`_."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:582
msgid "Custom redirect mappings"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:584
msgid "Below is an example how to install an event handler which checks in the site root for a TTW Python script and if such exist it asks it to provide a HTTP redirect."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:588
msgid "This behavior allows you to write site-wide redirects easily"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:590
msgid "In Python (thank god no Apache regular expressions)"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:592
msgid "Redirects can access Plone content items"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:594
msgid "You can easily have some redirects migrated from the old (non-Plone) sites"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:596
msgid "Add the event subscriber to ``configure.zcml``:"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:616
msgid "Create a file ``redirect.py`` and add the code below. Remember to add ``url`` to *Parameter list* of the script on the script edit view::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:678
msgid "Then an example ``redirect_handler`` script added through ZMI. Remember to add ``url`` to the *Parameter List* field of TTW interface::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:684
msgid "Or more complex example::"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:709
msgid "Extracting useful information in the post-publication hook"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:748
msgid "Cross-origin resource sharing (CORS)"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:750
msgid "Complete."
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:752
msgid "http://enable-cors.org/"
msgstr ""

#: ../develop/plone/serving/http_request_and_response.rst:754
msgid "https://developer.mozilla.org/En/HTTP_access_control"
msgstr ""

#: ../develop/plone/serving/index.rst:3
msgid "HTTP serving and traversing site data"
msgstr ""

#: ../develop/plone/serving/index.rst:5
msgid "Serving content from your site to your users is effectively a mechanism to generate HTTP responses to HTTP requests."
msgstr ""

#: ../develop/plone/serving/index.rst:8
msgid "In Plone, answering to HTTP requests can be divided to three subproblems:"
msgstr ""

#: ../develop/plone/serving/index.rst:10
msgid "managing the lifecycle of the HTTP request and response pair;"
msgstr ""

#: ../develop/plone/serving/index.rst:11
msgid "publishing, by traversing the request to the target object by its URI;"
msgstr ""

#: ../develop/plone/serving/index.rst:12
msgid "choosing different parts of the code depending on active layers."
msgstr ""

#: ../develop/plone/serving/index.rst:14
msgid "Plone and Zope 2 application servers support FTP, WebDAV and XML-RPC protocols besides plain HTTP."
msgstr ""

#: ../develop/plone/serving/publishing.rst:3
msgid "Publishing"
msgstr ""

#: ../develop/plone/serving/publishing.rst:5
msgid "To *publish* an object means to make it available in the Zope traversal graph and URLS."
msgstr ""

#: ../develop/plone/serving/publishing.rst:8
msgid "A published object may have a reverse-mapping of object to path via ``getPhysicalPath()`` and ``absolute_url()`` but this is not always the requirement."
msgstr ""

#: ../develop/plone/serving/publishing.rst:12
msgid "You can publish objects by providing a ``browser:page`` view which implements the ``zope.publisher.interfaces.IPublishTraverse`` interface."
msgstr ""

#: ../develop/plone/serving/publishing.rst:16
msgid "Example publishers"
msgstr ""

#: ../develop/plone/serving/publishing.rst:18
msgid "A widget to make specified files downloadable: `plone.formwidgets.namedfile.widget <https://github.com/plone/plone.formwidget.namedfile/blob/master/plone/formwidget/namedfile/widget.py>`_."
msgstr ""

#: ../develop/plone/serving/traversing.rst:3
msgid "Traversing"
msgstr ""

#: ../develop/plone/serving/traversing.rst:7
msgid "Plone content is organized to a tree. Traversing means looking up content from this tree by path. When HTTP request hits a Plone server, Plone will traverse the corresponding content item and its view function by URI."
msgstr ""

#: ../develop/plone/serving/traversing.rst:17
msgid "In Plone, all content is mapped to a single tree: content objects, user objects, templates, etc.  Even most object methods are directly mapped to HTTP-accessible URIs."
msgstr ""

#: ../develop/plone/serving/traversing.rst:21
msgid "Each object has a path depending on its location. :term:`Traversal` is a method of getting a handle on a persistent object in the ZODB object graph from its path."
msgstr ""

#: ../develop/plone/serving/traversing.rst:25
msgid "Traversal can happen in two places:"
msgstr ""

#: ../develop/plone/serving/traversing.rst:27
msgid "When an HTTP request hits the server, the method on the object which will generate the HTTP response is looked up using traversal."
msgstr ""

#: ../develop/plone/serving/traversing.rst:30
msgid "You can manually traverse the ZODB tree in your code to locate objects by their path."
msgstr ""

#: ../develop/plone/serving/traversing.rst:33
msgid "When an HTTP request is being published the traversing happens in ``ZPublisher.BaseRequest.traverse``"
msgstr ""

#: ../develop/plone/serving/traversing.rst:36
msgid "http://svn.zope.org/Zope/trunk/src/ZPublisher/BaseRequest.py?rev=122282&view=auto"
msgstr ""

#: ../develop/plone/serving/traversing.rst:38
msgid "... but Zope includes other traversers, like ``unrestrictedTraverse()`` in the OFS module.  Different traversing methods behave differently and may fire different events."
msgstr ""

#: ../develop/plone/serving/traversing.rst:43
msgid "Object ids"
msgstr ""

#: ../develop/plone/serving/traversing.rst:45
msgid "Each content object has an id string which identifies the object in the parent container.  The id string is visible in the browser address bar when you view the object.  Ids are also visible in the Zope Management interface."
msgstr ""

#: ../develop/plone/serving/traversing.rst:49
msgid "Besides id strings, the content objects have Unique Identifiers, or UID_, which do not change even if the object is moved or renamed."
msgstr ""

#: ../develop/plone/serving/traversing.rst:52
msgid "Though it's technically possible for ids to contain spaces or slashes, this is seldom a good idea, as it complicates working with ids in various situations."
msgstr ""

#: ../develop/plone/serving/traversing.rst:57
msgid "Path"
msgstr ""

#: ../develop/plone/serving/traversing.rst:59
msgid "The Zope *path* is the location of the object in the object graph. It is a sequence of id components from the parent node(s) to the child separated by slashes."
msgstr ""

#: ../develop/plone/serving/traversing.rst:63
msgid "A path need not always be a sequence of object ids. During traversal, an object may consume subsequent path elements, interpreting them however it likes."
msgstr ""

#: ../develop/plone/serving/traversing.rst:72
msgid "Exploring Zope application server"
msgstr ""

#: ../develop/plone/serving/traversing.rst:74
msgid "You can use the Zope Management interface to explore the content of your Zope application server:"
msgstr ""

#: ../develop/plone/serving/traversing.rst:77
msgid "Sites"
msgstr ""

#: ../develop/plone/serving/traversing.rst:79
msgid "Folders within the sites"
msgstr ""

#: ../develop/plone/serving/traversing.rst:83
msgid "The ZMI does not expose individual attributes. It only exposes traversable content objects."
msgstr ""

#: ../develop/plone/serving/traversing.rst:87
msgid "Attribute traversing"
msgstr ""

#: ../develop/plone/serving/traversing.rst:89
msgid "Zope exposes child objects as attributes."
msgstr ""

#: ../develop/plone/serving/traversing.rst:101
msgid "Container traversing"
msgstr ""

#: ../develop/plone/serving/traversing.rst:103
msgid "Zope exposes child objects as container accessor."
msgstr ""

#: ../develop/plone/serving/traversing.rst:116
msgid "Traversing by full path"
msgstr ""

#: ../develop/plone/serving/traversing.rst:118
msgid "Any content object provides the methods ``restrictedTraverse()`` and ``unrestrictedTraverse()``.  See Traversable_."
msgstr ""

#: ../develop/plone/serving/traversing.rst:121
msgid "**Security warning**: ``restrictedTraverse()`` executes with the privileges of the currently logged-in user.  An Unauthorized_ exception is raised if the code tries to access an object for which the user lacks the *Access contents information* and *View* permissions."
msgstr ""

#: ../develop/plone/serving/traversing.rst:135
msgid "``restrictedTraverse()``/``unrestrictedTraverse()`` does not honor ``IPublishTraverse`` adapters. `Read more about the issue in this discussion <http://mail.zope.org/pipermail/zope-dev/2009-May/036665.html>`_."
msgstr ""

#: ../develop/plone/serving/traversing.rst:141
msgid "Getting the object path"
msgstr ""

#: ../develop/plone/serving/traversing.rst:143
msgid "An object has two paths:"
msgstr ""

#: ../develop/plone/serving/traversing.rst:145
msgid "The *physical path* is the absolute location in the current ZODB object graph. This includes the site instance name as part of it."
msgstr ""

#: ../develop/plone/serving/traversing.rst:148
msgid "The *virtual path* is the object location relative to the Plone site root."
msgstr ""

#: ../develop/plone/serving/traversing.rst:150
msgid "**Path mangling warning**: Always store paths as virtual paths, or persistently stored paths will corrupt if you rename your site instance."
msgstr ""

#: ../develop/plone/serving/traversing.rst:153
msgid "See Traversable_."
msgstr ""

#: ../develop/plone/serving/traversing.rst:156
msgid "Getting physical path"
msgstr ""

#: ../develop/plone/serving/traversing.rst:158
msgid "Use ``getPhysicalPath()``. Example::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:163
msgid "Getting virtual path"
msgstr ""

#: ../develop/plone/serving/traversing.rst:165
msgid "For content items you can use ``absolute_url_path()`` from `OFS.Traversable <http://svn.zope.org/Zope/trunk/src/OFS/Traversable.py?rev=122638&view=auto>`_::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:170
msgid "Map physical path to virtual path using HTTP request object ``physicalPathToVirtualPath()``. Example::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:181
msgid "The virtual path is not necessarily the path relative to the site root, depending on the virtual host configuration."
msgstr ""

#: ../develop/plone/serving/traversing.rst:185
msgid "Getting item path relative to the site root"
msgstr ""

#: ../develop/plone/serving/traversing.rst:187
msgid "There is no a direct, easy way to accomplish this."
msgstr ""

#: ../develop/plone/serving/traversing.rst:216
msgid "Getting canonical object (breadcrumbs, visual path)"
msgstr ""

#: ../develop/plone/serving/traversing.rst:218
msgid "The visual path is presented in the breadcrumbs. It is how the site visitor sees the object path."
msgstr ""

#: ../develop/plone/serving/traversing.rst:221
msgid "It may differ from the physical path:"
msgstr ""

#: ../develop/plone/serving/traversing.rst:223
msgid "The *default content item* is not shown in the visual path."
msgstr ""

#: ../develop/plone/serving/traversing.rst:224
msgid "The *default view* is not shown in the visual path."
msgstr ""

#: ../develop/plone/serving/traversing.rst:226
msgid "The canonical object is the context object which the user sees from the request URL:"
msgstr ""

#: ../develop/plone/serving/traversing.rst:236
msgid "Getting object URL"
msgstr ""

#: ../develop/plone/serving/traversing.rst:238
msgid "Use ``absolute_url()``. See Traversable_."
msgstr ""

#: ../develop/plone/serving/traversing.rst:240
msgid "**URL mangling warning**: ``absolute_url()`` is sensitive to virtual host URL mappings. ``absolute_url()`` will return different results depending on if you access your site from URLs http://yourhost/ or http://yourhost:8080/Plone.  Do not persistently store the result of ``absolute_url()``."
msgstr ""

#: ../develop/plone/serving/traversing.rst:251
msgid "Getting the parent"
msgstr ""

#: ../develop/plone/serving/traversing.rst:253
msgid "The object *parent* is accessible is acquisition_ chain for the object is set."
msgstr ""

#: ../develop/plone/serving/traversing.rst:256
msgid "Use ``aq_parent``::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:260
msgid "The parent is defined as ``__parent__`` attribute of the object instance::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:264
msgid "``__parent__`` is set when object's ``__of__()`` method is called::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:270
msgid "Getting all parents"
msgstr ""

#: ../develop/plone/serving/traversing.rst:307
msgid "Getting the site root"
msgstr ""

#: ../develop/plone/serving/traversing.rst:309
msgid "You can resolve the site root if you have the handle to any context object."
msgstr ""

#: ../develop/plone/serving/traversing.rst:312
msgid "Using portal_url tool"
msgstr ""

#: ../develop/plone/serving/traversing.rst:322
msgid "You can also do shortcut using acquisition::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:326
msgid "Application code should use the ``getToolByName`` method, rather than simply acquiring the tool by name, to ease forward migration (e.g., to Zope3)."
msgstr ""

#: ../develop/plone/serving/traversing.rst:331
msgid "Using ``getSite()``"
msgstr ""

#: ../develop/plone/serving/traversing.rst:333
msgid "Site is also stored as a thread-local variable. In Zope each request is processed in its own thread. Site thread local is set when the request processing starts."
msgstr ""

#: ../develop/plone/serving/traversing.rst:337
msgid "You can use this method even if you do not have the context object available, assuming that your code is called after Zope has traversed the context object once."
msgstr ""

#: ../develop/plone/serving/traversing.rst:347
msgid "Before Plone 4.3 getSite resided in zope.app.component.hooks. See https://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-4.2-to-4.3/referencemanual-all-pages"
msgstr ""

#: ../develop/plone/serving/traversing.rst:350
msgid "Due to the fact that Plone does not show the default content item as a separate object, the page you are viewing in the browser from the site root URL is not necessary the root item itself. For example, in the default Plone installation this URL internally maps to Page whose id is ``front-page`` and you can still query the actual parent object which is the site root."
msgstr ""

#: ../develop/plone/serving/traversing.rst:357
msgid "If you need to traverse using user visible breadcrumbs, see how breadcrumbs viewlet code does it."
msgstr ""

#: ../develop/plone/serving/traversing.rst:361
msgid "Traversing back to the site root"
msgstr ""

#: ../develop/plone/serving/traversing.rst:363
msgid "Sometimes ``getSite()`` or ``portal_url`` are not available, but you still have the acquisition chain intact. In these cases you can simply traverse parent objects back to the site root by iterating over the aquisition-chain or using the ``aq_parent`` accessor::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:379
msgid "Checking for the site root"
msgstr ""

#: ../develop/plone/serving/traversing.rst:381
msgid "You can check if the current context object is Plone the site root::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:391
msgid "Navigation root"
msgstr ""

#: ../develop/plone/serving/traversing.rst:393
msgid "In Plone, the Plone site root is not necessarily the navigation root (one site can contain many navigation trees for example for the nested subsites)."
msgstr ""

#: ../develop/plone/serving/traversing.rst:396
msgid "The navigation root check has the same mechanism as the site root check::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:407
msgid "https://plone.org/products/plone/roadmap/234"
msgstr ""

#: ../develop/plone/serving/traversing.rst:410
msgid "Getting Zope application server handle"
msgstr ""

#: ../develop/plone/serving/traversing.rst:412
msgid "You can also access other sites within the same application server from your code."
msgstr ""

#: ../develop/plone/serving/traversing.rst:422
msgid "Acquisition effect"
msgstr ""

#: ../develop/plone/serving/traversing.rst:424
msgid "Sometimes traversal can give you attributes which actually do not exist on the object, but are inherited from the parent objects in the persistent object graph. See :term:`acquisition`."
msgstr ""

#: ../develop/plone/serving/traversing.rst:429
msgid "Default content item"
msgstr ""

#: ../develop/plone/serving/traversing.rst:431
msgid "Default content item or view sets some challenges for the traversing, as the object published path and internal path differ."
msgstr ""

#: ../develop/plone/serving/traversing.rst:434
msgid "Below is an example to get the folder of the published object (parent folder for the default item) in page templates:"
msgstr ""

#: ../develop/plone/serving/traversing.rst:446
msgid "See :doc:`plone_context_state helper </develop/addons/helloworld/extend/content>`"
msgstr ""

#: ../develop/plone/serving/traversing.rst:449
msgid "Checking if an item is the site front page"
msgstr ""

#: ../develop/plone/serving/traversing.rst:451
msgid "Example code below::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:471
msgid "Custom traversal"
msgstr ""

#: ../develop/plone/serving/traversing.rst:473
msgid "There exist many ways to make your objects traversable:"
msgstr ""

#: ../develop/plone/serving/traversing.rst:475
msgid "``__getitem__()`` which makes your objects act like Python dictionary. This is the simplest method and recommended."
msgstr ""

#: ../develop/plone/serving/traversing.rst:478
msgid "``IPublishTraverse`` interface. There is an example below and works for making nice urls and path munging."
msgstr ""

#: ../develop/plone/serving/traversing.rst:481
msgid "``ITraversable`` interface. You can create your own traversing hooks. ``zope.traversing.interfaces.ITraversable`` provides an interface traversable objects must provider. You need to register ``ITraversable`` as adapter for your content types.  This is only for publishing methods for HTTP requests."
msgstr ""

#: ../develop/plone/serving/traversing.rst:487
msgid "``__bobo_traverse__()`` which is an archaic method from the early 2000s."
msgstr ""

#: ../develop/plone/serving/traversing.rst:489
msgid "Zope traversal is a minefield. There are different traversers. One is the *ZPublisher traverser* which does HTTP request looks.  One is ``OFS.Traversable.unrestrictedTraverse()`` which is used when you call traverse from Python code. Then another case is ``zope.tales.expression.PathExpr`` which uses a really simple traverser."
msgstr ""

#: ../develop/plone/serving/traversing.rst:495
msgid "If an ``AttributeError`` is risen inside a ``traverse()`` function bad things happen, as Zope publisher specially handles this and raises a ``NotFound`` exception which will mask the actual problem."
msgstr ""

#: ../develop/plone/serving/traversing.rst:499
msgid "Example using ``__getitem__()``::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:535
msgid "Example using ``IPublishTraverse``::"
msgstr ""

#: ../develop/plone/serving/traversing.rst:596
msgid "More information:"
msgstr ""

#: ../develop/plone/serving/traversing.rst:598
msgid "http://play.pixelblaster.ro/blog/archive/2006/10/21/custom-traversing-with-five-and-itraversable"
msgstr ""

#: ../develop/plone/serving/traversing.rst:601
msgid "Traverse events"
msgstr ""

#: ../develop/plone/serving/traversing.rst:603
msgid "Use ``zope.traversing.interfaces.IBeforeTraverseEvent`` for register a traversing hook for Plone site object or such."
msgstr ""

#: ../develop/plone/serving/traversing.rst:620
msgid "Use ``ZPublisher.BeforeTraverse`` to register traverse hooks for any objects."
msgstr ""

#: ../develop/plone/serving/traversing.rst:623
msgid "Example - not sure if before travese hooks are persistent or not"
msgstr ""

#: ../develop/plone/serving/traversing.rst:626
msgid "Advanced traversing with search conditions"
msgstr ""

#: ../develop/plone/serving/traversing.rst:628
msgid "All Plone content should exist in the :doc:`portal_catalog </develop/plone/searching_and_indexing/query>`.  Catalog provides fast query access with various indexes to the Plone content."
msgstr ""

#: ../develop/plone/serving/traversing.rst:635
msgid "See object publishing_."
msgstr ""

#: ../develop/plone/serving/webdav.rst:3
msgid "WebDAV"
msgstr ""

#: ../develop/plone/serving/webdav.rst:7
msgid "WebDAV is a protocol to manage your site directly from MS Windows Explorer, Mac OS, Linux and so on. Plone supports WebDAV without add-ons, and Plone responds to WebDAV requests out of the box."
msgstr ""

#: ../develop/plone/serving/webdav.rst:15
msgid "WebDAV is enabled by default in Plone. A Plone server listening on port 8080 will also accept WebDAV traffic on that port."
msgstr ""

#: ../develop/plone/serving/webdav.rst:20
msgid "WebDAV historically was used  mainly for uploading files in bulk to Plone. In Plone 5, this functionality comes standard. For earlier versions, he add-on `collective.wildcardfoldercontents <https://pypi.python.org/pypi/wildcard.foldercontents>`_ provides this."
msgstr ""

#: ../develop/plone/serving/webdav.rst:24
msgid "Connecting to Plone via WebDAV"
msgstr ""

#: ../develop/plone/serving/webdav.rst:26
msgid "For common cases, client-side tools should work reasonably well."
msgstr ""

#: ../develop/plone/serving/webdav.rst:28
msgid "`\"OS X Mavericks: Connect to a WebDAV server\": <https://support.apple.com/kb/PH13859>`_"
msgstr ""

#: ../develop/plone/serving/webdav.rst:33
msgid "The \"WebDAV access\" permission is required for any user to be able to connect to WebDAV."
msgstr ""

#: ../develop/plone/serving/webdav.rst:35
msgid "To allow Plone users (ie. users created within a Plone site, as opposed to users created in Zope) to connect using WebDAV, go to the Security tab of the Zope (e.g. http://yoursite:8080/manage_access), find the permission \"WebDAV access\", check the box for it under the Anonymous column, and press the Save Changes button. This generally grants WebDAV connection access. Normal Plone permissions will take care of who can view or change actual content."
msgstr ""

#: ../develop/plone/serving/webdav.rst:40
msgid "Enabling WebDAV on an extra port in Zope"
msgstr ""

#: ../develop/plone/serving/webdav.rst:42
msgid "You can have Plone listen for WebDAV requests on additional ports by modifying your buildout configuration's client setup to add a WebDAV address:"
msgstr ""

#: ../develop/plone/serving/webdav.rst:44
msgid "Here is a short ``buildout.cfg`` example::"
msgstr ""

#: ../develop/plone/serving/webdav.rst:56
msgid "Here is an alternative ``buildout.cfg`` configuration snippet which might be needed for some WebDAV clients::"
msgstr ""

#: ../develop/plone/serving/webdav.rst:69
msgid "These snippets will be in the **generated** ``parts/instance/etc/zope.conf`` after buildout has been re-run."
msgstr ""

#: ../develop/plone/serving/webdav.rst:72
msgid "This will enable the WebDAV server on http://www.mydomain.com:1980/."
msgstr ""

#: ../develop/plone/serving/webdav.rst:74
msgid "You cannot use this URL in your web browser, just in WebDAV clients."
msgstr ""

#: ../develop/plone/serving/webdav.rst:76
msgid "Using the web browser will give you an error message ``AttributeError: manage_FTPget``. You could also just run the WebDAV server on ``localhost`` with address 1980, forcing you to either use a WebDAV client locally or proxy WebDAV through Apache."
msgstr ""

#: ../develop/plone/serving/webdav.rst:82
msgid "Disabling WebDAV"
msgstr ""

#: ../develop/plone/serving/webdav.rst:84
msgid "You can't disable WebDAV in Plone itself; it's tightly integrated in Zope. You could take away the \"WebDAV access\" permission from everyone, but the Zope server will still answer each request."
msgstr ""

#: ../develop/plone/serving/webdav.rst:88
msgid "What you can do is make your web server filter out the WebDAV commands; this will stop WebDAV requests before they reach your Zope server."
msgstr ""

#: ../develop/plone/serving/webdav.rst:92
msgid "Nginx"
msgstr ""

#: ../develop/plone/serving/webdav.rst:94
msgid "For nginx, this is done by adding::"
msgstr ""

#: ../develop/plone/serving/webdav.rst:99
msgid "to the server block in your nginx.conf. (http://wiki.nginx.org/HttpDavModule)"
msgstr ""

#: ../develop/plone/serving/webdav.rst:101
msgid "If you do not use the HttpDavModule, you can add::"
msgstr ""

#: ../develop/plone/serving/webdav.rst:108
msgid "to the location block."
msgstr ""

#: ../develop/plone/serving/webdav.rst:111
msgid "Apache"
msgstr ""

#: ../develop/plone/serving/webdav.rst:113
msgid "For Apache, you can use the ``limit`` statement, see http://httpd.apache.org/docs/current/mod/core.html#limit"
msgstr ""

#: ../develop/plone/serving/webdav.rst:116
msgid "`\"How can I stop people accessing a Plone server via WebDAV?\" <http://stackoverflow.com/questions/9127269/how-can-i-stop-people-accessing-a-plone-server-via-webdav>`_"
msgstr ""

#: ../develop/plone/serving/webdav.rst:120
msgid "Supporting WebDAV in your custom content"
msgstr ""

#: ../develop/plone/serving/webdav.rst:122
msgid "Please read more about it in the `Dexterity WebDAV manual <https://github.com/plone/plone.dexterity/blob/master/docs/WebDAV.txt>`_."
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:3
msgid "XML-RPC"
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:9
msgid "Using XML-RPC remote call protocol to manipulate Plone site."
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:14
msgid "Zope provides transparent XML-RPC support for any traversable object."
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:26
#: ../develop/plone/serving/xmlrpc.rst:61
msgid "Zope object handles are not transferable across function call boundaries. Thus, you can only call functions with primitive arguments. If you need to call function with object arguments you need to create server side helper code first."
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:33
msgid "transmogrifier.ploneremote"
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:36
msgid "Authentication"
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:38
msgid "The simplest way to authenticate the user for XML-RPC calls is to embed HTTP Basic Auth data to URL::"
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:49
msgid "ZPublisher client"
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:51
msgid "XML-RPC does not marshal objects reliable between remote calls. Getting the real remote object can be done with ZPublisher.Client.Object."
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:56
msgid "This approach works only for Python clients and needs Zope libraries available at the client side."
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:66
msgid "http://svn.zope.org/Zope/tags/ajung-final-zpt-integration-before-merge-savepoint/utilities/load_site.py?rev=67269&view=auto"
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:68
msgid "http://maurits.vanrees.org/weblog/archive/2009/10/lighting-talks-friday#id2"
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:72
msgid "Web Services API for Plone (wsapi4plone)"
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:74
msgid "This is an add-on product exposes more methods available through Zope's XML-RPC api."
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:77
msgid "https://plone.org/products/wsapi4plone.core"
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:80
msgid "Importing an Image Using WSAPI"
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:82
msgid "In the following example we retrieve, from the 'Pictures' folder, an image called 'red-wine-glass.jpg', post it to a folder called 'ministries' and give it the name 'theimage'."
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:100
msgid "For more information see `wsapi4plone.core <https://plone.org/products/wsapi4plone.core/>`_ add-on product adds XML-RPC operations support for Plone."
msgstr ""

#: ../develop/plone/serving/xmlrpc.rst:109
msgid "http://www.zope.org/Members/Amos/XML-RPC"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:7
msgid "Handling session and other cookies in Plone"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:14
msgid "Setting and getting cookies"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:16
msgid "http://www.dieter.handshake.de/pyprojects/zope/book/chap3.html"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:18
msgid "http://stackoverflow.com/questions/1034252/how-do-you-get-and-set-cookies-in-zope-and-plone"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:21
msgid "Reading cookies"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:23
msgid "Usually you want to read incoming cookies sent by the browser."
msgstr ""

#: ../develop/plone/sessions/cookies.rst:30
msgid "Setting cookies"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:32
msgid "See `HTTPResponse.setCookie() <https://github.com/zopefoundation/Zope/blob/master/src/ZPublisher/HTTPResponse.py#L241>`_."
msgstr ""

#: ../develop/plone/sessions/cookies.rst:35
msgid "Modifying HTTP response cookies"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:37
msgid "You might want to tune up or clean cookies after some other part of Plone code has set them. You can do this in :doc:`post-publication event handler </develop/plone/serving/http_request_and_response>`."
msgstr ""

#: ../develop/plone/sessions/cookies.rst:40
msgid "Example ``cleancookies.py`` (needs ZCML subscriber registration too)::"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:74
msgid "Default Plone cookies"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:76
msgid "Typical Plone cookies::"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:97
msgid "Zope session cookie"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:99
msgid "This cookie looks like::"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:103
msgid "It is set first time when session data is written."
msgstr ""

#: ../develop/plone/sessions/cookies.rst:106
msgid "Language cookie"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:108
msgid "``I18N_LANGUAGE`` is set by ``portal_languages`` tool. Disable it by *Use cookie for manual override* setting in ``portal_languages``."
msgstr ""

#: ../develop/plone/sessions/cookies.rst:112
msgid "Also, language cookie has a special lifecycle when LinguaPlone is installed. This may affect your front-end web server caching. If configured improperly, the language cookie gets set on images and static assets like CSS HTTP responses."
msgstr ""

#: ../develop/plone/sessions/cookies.rst:116
msgid "http://stackoverflow.com/questions/5715216/why-plone-3-sets-language-cookie-to-css-js-registry-files-and-how-to-get-rid-o"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:119
msgid "Session cookie lifetime"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:121
msgid "Setting session cookie lifetime"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:123
msgid "https://plone.org/documentation/kb/cookie-duration"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:126
msgid "Sanitizing cookies for the cache"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:128
msgid "You don't want to store HTTP responses with cookies in a front end cache server, because this would be a leak of other users' information."
msgstr ""

#: ../develop/plone/sessions/cookies.rst:131
msgid "Don't cache pages with cookies set. Also with multilingual sites it makes sense to have unique URLs for different translations as this greatly simplifies caching (you can ignore language cookie)."
msgstr ""

#: ../develop/plone/sessions/cookies.rst:135
msgid "Note that cookies can be set:"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:137
msgid "by the server (Plone itself)"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:139
msgid "on the client side, by Javascript (Google Analytics)"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:141
msgid "... so you might need to clean cookies for both incoming HTTP requests and HTTP responses."
msgstr ""

#: ../develop/plone/sessions/cookies.rst:147
msgid "Signing cookies"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:149
msgid "Kind of... crude example"
msgstr ""

#: ../develop/plone/sessions/cookies.rst:151
msgid "https://gist.github.com/3951630"
msgstr ""

#: ../develop/plone/sessions/index.rst:3
msgid "Sessions and cookies"
msgstr ""

#: ../develop/plone/sessions/login.rst:3
msgid "Login and logout"
msgstr ""

#: ../develop/plone/sessions/login.rst:7
msgid "Login and logout related programming activities in Plone"
msgstr ""

#: ../develop/plone/sessions/login.rst:14
msgid "This chapter contains login and logout related code snippets."
msgstr ""

#: ../develop/plone/sessions/login.rst:17
msgid "Login entry points"
msgstr ""

#: ../develop/plone/sessions/login.rst:19
msgid "There are two login points in Plone"
msgstr ""

#: ../develop/plone/sessions/login.rst:21
msgid "``/login`` view (appended to any content URL) directs you to the page where you came from after the login."
msgstr ""

#: ../develop/plone/sessions/login.rst:23
msgid "``/login_form`` view does login without the redirect back to the original page."
msgstr ""

#: ../develop/plone/sessions/login.rst:25
msgid "In addition, the ``/logout`` action logs the user out."
msgstr ""

#: ../develop/plone/sessions/login.rst:27
msgid "The logic that drives the login process is implemented using the CMF form controller framework (legacy). To customize it, you need to override one or more of the ``login_*`` scripts. This can be accomplished in two ways: register your own skin directory or use `z3c.jbot <https://pypi.python.org/pypi/z3c.jbot>`_. Note that in both cases, you need to copy the ``.metadata`` file as well."
msgstr ""

#: ../develop/plone/sessions/login.rst:31
msgid "Extracting credentials"
msgstr ""

#: ../develop/plone/sessions/login.rst:33
msgid "Extracting credentials try to extract log-in (username, password) from HTTP request."
msgstr ""

#: ../develop/plone/sessions/login.rst:35
msgid "Below is an example how to extract and authenticate the user manually. It is mostly suitable for unit testing. Note that given login field isn't necessarily the username. For example, `betahaus.emaillogin <https://pypi.python.org/pypi/betahaus.emaillogin>`_ add-on authenticates users by their email addresses."
msgstr ""

#: ../develop/plone/sessions/login.rst:40
msgid "Credential extraction will go through all plug-ins registered for `PlonePAS <https://github.com/plone/Products.PlonePAS/blob/master/README.txt>`_ system."
msgstr ""

#: ../develop/plone/sessions/login.rst:43
msgid "The first found login/password pair attempt will be used for user authentication."
msgstr ""

#: ../develop/plone/sessions/login.rst:45
#: ../develop/plone/sessions/login.rst:99
msgid "Unit test example::"
msgstr ""

#: ../develop/plone/sessions/login.rst:85
msgid "Authenticating the user"
msgstr ""

#: ../develop/plone/sessions/login.rst:88
msgid "Using username and password"
msgstr ""

#: ../develop/plone/sessions/login.rst:90
msgid "Authenticating the user will check that username and password are correct."
msgstr ""

#: ../develop/plone/sessions/login.rst:92
msgid "Pluggable Authentication Service (acl_users under site root) will go through all authentication plug-ins and return the first successful authenticated users."
msgstr ""

#: ../develop/plone/sessions/login.rst:96
msgid "Read more in `PlonePAS <https://github.com/plone/Products.PlonePAS/blob/master/README.txt>`_."
msgstr ""

#: ../develop/plone/sessions/login.rst:111
msgid "Using username only"
msgstr ""

#: ../develop/plone/sessions/login.rst:113
msgid "Useful for sudo style logins."
msgstr ""

#: ../develop/plone/sessions/login.rst:126
msgid "https://github.com/miohtama/niteoweb.loginas/blob/master/niteoweb/loginas/browser/login_as.py"
msgstr ""

#: ../develop/plone/sessions/login.rst:129
msgid "Post-login actions"
msgstr ""

#: ../develop/plone/sessions/login.rst:131
msgid "Post-login actions are executed after a successful login. Post-login actions which you could want to change are"
msgstr ""

#: ../develop/plone/sessions/login.rst:133
msgid "Where to redirect the user after login"
msgstr ""

#: ../develop/plone/sessions/login.rst:135
msgid "Setting the status message after login"
msgstr ""

#: ../develop/plone/sessions/login.rst:137
msgid "You can use the `collective.onlogin <https://pypi.python.org/pypi/collective.onlogin>`_ package to set up many actions for you."
msgstr ""

#: ../develop/plone/sessions/login.rst:139
msgid "If you need more control, post-login code can be executed with :doc:`events </develop/addons/components/events>` defined in PluggableAuthService service."
msgstr ""

#: ../develop/plone/sessions/login.rst:142
msgid "``IUserLoggedInEvent``"
msgstr ""

#: ../develop/plone/sessions/login.rst:144
msgid "``IUserInitialLoginInEvent`` (logs for the first time)"
msgstr ""

#: ../develop/plone/sessions/login.rst:146
msgid "``IUserLoggedOutEvent``"
msgstr ""

#: ../develop/plone/sessions/login.rst:148
msgid "Here is an example how to redirect a user to a custom folder after he/she logs in (overrides standard Plone login behavior)"
msgstr ""

#: ../develop/plone/sessions/login.rst:151
msgid "``configure.zcml``::"
msgstr ""

#: ../develop/plone/sessions/login.rst:164
msgid "``postlogin.py``::"
msgstr ""

#: ../develop/plone/sessions/login.rst:260
msgid "Post-logout actions"
msgstr ""

#: ../develop/plone/sessions/login.rst:262
msgid "Products.PlonePAS.tools.membership fires ``Products.PlonePAS.events.UserLoggedOutEvent`` when the user logs out via *Log out* menu item."
msgstr ""

#: ../develop/plone/sessions/login.rst:267
msgid "You cannot catch session timeout events this way... only explicit logout action."
msgstr ""

#: ../develop/plone/sessions/login.rst:270
msgid "Example ZCML"
msgstr ""

#: ../develop/plone/sessions/login.rst:278
msgid "Example Python::"
msgstr ""

#: ../develop/plone/sessions/login.rst:301
msgid "https://github.com/plone/Products.PlonePAS/blob/master/Products/PlonePAS/tools/membership.py#L645"
msgstr ""

#: ../develop/plone/sessions/login.rst:304
msgid "Entry points to logged in member handling"
msgstr ""

#: ../develop/plone/sessions/login.rst:306
msgid "See ``Products.PluggableAuthService.PluggableAuthService._extractUserIds()``. It will try to extract credentials from incoming HTTP request, using different \"extract\" plug-ins of PAS framework."
msgstr ""

#: ../develop/plone/sessions/login.rst:310
msgid "``PluggableAuthService`` is also known as ``acl_users`` persistent object in the site root."
msgstr ""

#: ../develop/plone/sessions/login.rst:313
msgid "For each set of extracted credentials, try to authenticate a user;  accumulate a list of the IDs of such users over all our authentication and extraction plugins."
msgstr ""

#: ../develop/plone/sessions/login.rst:317
msgid "``PluggableAuthService`` may use :doc:`ZCacheable </manage/deploying/testing_tuning/performance/ramcache>` pattern to see if the user data exists already in the cache, based on any extracted credentials, instead of actually checking whether the credentials are valid or not. PluggableAuthService must be set to have cache end. By default it is not set, but installing LDAP sets it to RAM cache."
msgstr ""

#: ../develop/plone/sessions/login.rst:326
msgid "https://github.com/plone/plone.app.ldap/blob/master/plone/app/ldap/ploneldap/util.py"
msgstr ""

#: ../develop/plone/sessions/login.rst:329
msgid "PAS cache settings"
msgstr ""

#: ../develop/plone/sessions/login.rst:331
msgid "Here is a short view snippet to set PAS cache state::"
msgstr ""

#: ../develop/plone/sessions/login.rst:398
msgid "... and related ZCML"
msgstr ""

#: ../develop/plone/sessions/login.rst:411
msgid "Login as another user (\"sudo\")"
msgstr ""

#: ../develop/plone/sessions/login.rst:413
msgid "If you need to login to production system another user and you do not know the password, there is an add-on product for it"
msgstr ""

#: ../develop/plone/sessions/login.rst:416
msgid "https://pypi.python.org/pypi/niteoweb.loginas"
msgstr ""

#: ../develop/plone/sessions/login.rst:418
msgid "Another option"
msgstr ""

#: ../develop/plone/sessions/login.rst:420
msgid "https://pypi.python.org/pypi/Products.OneTimeTokenPAS"
msgstr ""

#: ../develop/plone/sessions/login.rst:423
msgid "Getting logged in users"
msgstr ""

#: ../develop/plone/sessions/login.rst:425
msgid "Was somewhere, but can't find where."
msgstr ""

#: ../develop/plone/sessions/login.rst:428
msgid "Locking user account after too many retries"
msgstr ""

#: ../develop/plone/sessions/login.rst:430
msgid "For security reasons, you might want to locking users after too many tries of logins. This protects user accounts against brute force attacks."
msgstr ""

#: ../develop/plone/sessions/login.rst:433
msgid "https://github.com/collective/Products.LoginLockout/tree/master/Products/LoginLockout"
msgstr ""

#: ../develop/plone/sessions/login.rst:436
msgid "Hyperlinks to authenticated Plone content in Microsoft Office"
msgstr ""

#: ../develop/plone/sessions/login.rst:438
msgid "Microsoft Office applications (in the first instance Word and Excel), have been observed to attempt to resolve hyperlinks once clicked, prior to sending the hyperlink to the user's browser.  So, if such a link points to some Plone content that requires authentication, the Office application will request the URL first, and receive a 302 Redirect to the ``require_login`` Python script on the relevant Plone instance.  So, if your original hyperlink was like so::"
msgstr ""

#: ../develop/plone/sessions/login.rst:448
msgid "and this URL requires authentication, then the Office application will send your browser to this URL::"
msgstr ""

#: ../develop/plone/sessions/login.rst:453
msgid "Normally, this isn't a problem if a user is logged out at the time. They will be presented with the relevant login form and upon login, they will be redirected accordingly to the ``came_from=`` URL."
msgstr ""

#: ../develop/plone/sessions/login.rst:457
msgid "However, if the user is *already* logged in on the site, visiting this URL will result in an ``Insufficient Privileges`` page being displayed.  This is to be expected of Plone (as this URL is normally only reached if the given user has no access), but because of Microsoft Office's mangling of the URL, may not necessarily be correct as the user may indeed have access."
msgstr ""

#: ../develop/plone/sessions/login.rst:463
msgid "The following drop-in replacement for the ``require_login`` script has been tested in Plone 4.1.3 (YMMV).  Upon a request coming into this script, it attempts (a hack) to traverse to the given path. If permission is actually allowed, Plone redirects the user back to the content. Otherwise, things proceed normally and the user has no access (and is shown the appropriate message)::"
msgstr ""

#: ../develop/plone/sessions/login.rst:499
msgid "For further reading see:"
msgstr ""

#: ../develop/plone/sessions/login.rst:501
msgid "http://plone.293351.n2.nabble.com/Linking-to-private-page-from-MS-Word-redirect-to-login-form-td5495131.html"
msgstr ""

#: ../develop/plone/sessions/login.rst:502
msgid "http://plone.293351.n2.nabble.com/Problem-with-links-to-files-stored-in-Plone-td3055014.html"
msgstr ""

#: ../develop/plone/sessions/login.rst:503
msgid "http://bytes.com/topic/asp-classic/answers/596062-hyperlinks-microsoft-applications-access-word-excel-etc"
msgstr ""

#: ../develop/plone/sessions/login.rst:504
msgid "https://community.jivesoftware.com/docs/DOC-32157"
msgstr ""

#: ../develop/plone/sessions/login.rst:507
msgid "Single Sign-On and Active Directory"
msgstr ""

#: ../develop/plone/sessions/login.rst:509
msgid "Plone can be used in a Microsoft Active Directory environment (or standard Kerberos environment) such that users are automatically and transparently authenticated to Plone without requesting credentials from the user."
msgstr ""

#: ../develop/plone/sessions/login.rst:512
msgid "This is quite an advanced topic and requires some set up on the server, but can be achieved with Plone running on either Unix/Linux or Windows environments."
msgstr ""

#: ../develop/plone/sessions/login.rst:515
msgid "More details can be found in this presentation from Plone Open Garden 2013:"
msgstr ""

#: ../develop/plone/sessions/login.rst:517
msgid "http://www.slideshare.net/hammertoe/plone-and-singlesign-on-active-directory-and-the-holy-grail"
msgstr ""

#: ../develop/plone/sessions/login.rst:518
msgid "http://www.youtube.com/watch?v=-FLQxeD5_1M"
msgstr ""

#: ../develop/plone/sessions/login.rst:521
msgid "Preventing duplicate logins from different browsers"
msgstr ""

#: ../develop/plone/sessions/login.rst:523
msgid "http://stackoverflow.com/questions/2562385/limit-concurrent-user-logins-in-plone-zope"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:3
msgid "Sessions"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:7
msgid "How Plone handles anonymous and logged-in user sessions. How to store and retrieve session data variables programmatically."
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:15
msgid "Sessions are visitor sessions at the site."
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:17
msgid "Sessions have features like:"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:19
msgid "Login and logout, but also identified by a cookie"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:21
msgid "Timeout"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:23
msgid "Hold arbitrary per-user data on server side"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:25
msgid "Identified by cookies"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:27
msgid "In Plone, sessions are managed by Zope's session_data_manager tool. The source code is in `Products.Sessions <https://github.com/zopefoundation/Zope/blob/master/src/Products/Sessions/>`_."
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:32
msgid "Setting a session parameter"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:34
msgid "Plone has a tool called ``session_data_manager``."
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:44
msgid "Getting a session"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:46
msgid "Plone has a convenience method to get the session of the current user::"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:52
msgid "Getting session id"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:54
msgid "Each session has a unique id associated with it, for both both anonymous and logged-in users."
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:57
msgid "Session data is stored in browser cookies, so sessions are browser-specific. If the same user has multiple browsers open on your site, each browser will have its own session."
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:61
msgid "If you need to refer to the session id, you can query for it::"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:69
msgid "Initial construction of session data"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:71
msgid "The example below creates a session data variable when it is accessed for the first time. For the subsequent accesses, the same object is returned. The object changes are automatically persisted if it inherits from the ``persistent.Persistent`` class."
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:78
msgid "Session data stored this way does not survive Plone restart."
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:114
msgid "Deleting session data"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:134
msgid "Session data and unit testing"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:136
msgid "Please see http://article.gmane.org/gmane.comp.web.zope.plone.user/104243"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:139
msgid "Using Plone authentication cookie in other systems"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:141
msgid "http://stackoverflow.com/questions/12167202/how-to-wrap-plone-authentication-around-a-third-party-servlet/12171528#comment16307483_12171528"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:144
msgid "Exploring Plone session configuration"
msgstr ""

#: ../develop/plone/sessions/session_variables.rst:146
msgid "http://stackoverflow.com/questions/12211682/how-to-export-plone-session-configuration"
msgstr ""

#: ../develop/plone/sessions/statusmessages.rst:3
msgid "Status messages"
msgstr ""

#: ../develop/plone/sessions/statusmessages.rst:5
msgid "Status messages are session-bound information which allow the user to see notifications when the page is rendered next time."
msgstr ""

#: ../develop/plone/sessions/statusmessages.rst:8
msgid "Status messages are stored session in safely manner which prevents Cross-Site Scripting attacks which might occur due to delivering message information as HTTP GET query parameters."
msgstr ""

#: ../develop/plone/sessions/statusmessages.rst:15
msgid "Setting a status message"
msgstr ""

#: ../develop/plone/sessions/statusmessages.rst:17
msgid "Status messages have text (unicode) and type (str). All pending status messages are shown to the user when the next page is rendered."
msgstr ""

#: ../develop/plone/sessions/statusmessages.rst:28
msgid "Example which you can use in Python scripts::"
msgstr ""

#: ../develop/plone/sessions/statusmessages.rst:34
msgid "Rendering status message style by hand-crafted HTML"
msgstr ""

#: ../develop/plone/sessions/statusmessages.rst:36
msgid "If you want to insert elements looking status messages on your page use the following mark-up"
msgstr ""

#: ../develop/plone/syndication.rst:3
msgid "Syndication"
msgstr ""

#: ../develop/plone/syndication.rst:10
msgid "In Plone 4.3, there is a new syndication framework that allows you to customize how content in your site is syndicated."
msgstr ""

#: ../develop/plone/syndication.rst:15
msgid "Customize how a content type is syndicated"
msgstr ""

#: ../develop/plone/syndication.rst:17
msgid "In this example, we'll show how to customize how News items are syndicated on your site."
msgstr ""

#: ../develop/plone/syndication.rst:22
msgid "Create adapter"
msgstr ""

#: ../develop/plone/syndication.rst:24
msgid "We'll create an adapter that overrides the body text::"
msgstr ""

#: ../develop/plone/syndication.rst:40
msgid "Register Adapter"
msgstr ""

#: ../develop/plone/syndication.rst:53
msgid "Dexterity type"
msgstr ""

#: ../develop/plone/syndication.rst:55
msgid "If the type you're customizing is a dexterity type then Plone will use the Products.CMFPlone.browser.syndication.DexterityItem adapter by default for adopting Dexterity content to syndication.IFeedItem. You can override the default adapter by registering your own adapter this way:"
msgstr ""

#: ../develop/plone/syndication.rst:88
msgid "Register your Folderish type as syndicatable"
msgstr ""

#: ../develop/plone/syndication.rst:90
msgid "Just make sure it implements the ISyndicatable interface::"
msgstr ""

#: ../develop/plone/syndication.rst:101
msgid "Create your own feed type"
msgstr ""

#: ../develop/plone/syndication.rst:103
msgid "Example of creating your own simple feed type and registering it."
msgstr ""

#: ../develop/plone/syndication.rst:105
msgid "Create your feed template:"
msgstr ""

#: ../develop/plone/syndication.rst:136
msgid "Register the view in ZCML:"
msgstr ""

#: ../develop/plone/syndication.rst:149
#: ../develop/plone/syndication.rst:195
msgid "Finally, register the feed view in the control panel `syndication-settings` in the `Allowed Feed Types` setting. You should be able to append a new feed type like this::"
msgstr ""

#: ../develop/plone/syndication.rst:156
msgid "Now, if the `My Feed Type` is enabled on a syndicatable item(you'll probably also need to allow editing syndication settings), you'll be able to append `myfeed.xml` onto the url to use the new syndication."
msgstr ""

#: ../develop/plone/syndication.rst:162
msgid "Creating a json feed type"
msgstr ""

#: ../develop/plone/syndication.rst:164
msgid "First, we'll create the json feed view class::"
msgstr ""

#: ../develop/plone/syndication.rst:183
msgid "Then register the adapter with ZCML:"
msgstr ""

#: ../develop/plone/syndication.rst:202
msgid "Now, if the `JSON` is enabled on a syndicatable item(you'll probably also need to allow editing syndication settings), you'll be able to append `json` onto the url to use the new syndication."
msgstr ""

#: ../develop/plone/syndication.rst:208
msgid "Available FeedItem properties to override"
msgstr ""

#: ../develop/plone/syndication.rst:210
msgid "If you're inheriting Products.CMFPlone.browser.syndication.adapters.BaseItem or Products.CMFPlone.browser.syndication.adapters.DexterityItem in an attempt to override the default feed item behavior, these are the properties available to you to override:"
msgstr ""

#: ../develop/plone/syndication.rst:215
#: ../develop/plone/syndication.rst:243
msgid "link"
msgstr ""

#: ../develop/plone/syndication.rst:216
#: ../develop/plone/syndication.rst:244
msgid "title"
msgstr ""

#: ../develop/plone/syndication.rst:217
#: ../develop/plone/syndication.rst:245
msgid "description"
msgstr ""

#: ../develop/plone/syndication.rst:218
#: ../develop/plone/syndication.rst:246
msgid "categories"
msgstr ""

#: ../develop/plone/syndication.rst:219
#: ../develop/plone/syndication.rst:247
msgid "published"
msgstr ""

#: ../develop/plone/syndication.rst:220
#: ../develop/plone/syndication.rst:248
msgid "modified"
msgstr ""

#: ../develop/plone/syndication.rst:221
#: ../develop/plone/syndication.rst:249
msgid "uid"
msgstr ""

#: ../develop/plone/syndication.rst:222
#: ../develop/plone/syndication.rst:250
msgid "rights"
msgstr ""

#: ../develop/plone/syndication.rst:223
#: ../develop/plone/syndication.rst:251
msgid "publisher"
msgstr ""

#: ../develop/plone/syndication.rst:224
msgid "author"
msgstr ""

#: ../develop/plone/syndication.rst:225
msgid "author_name"
msgstr ""

#: ../develop/plone/syndication.rst:226
msgid "author_email"
msgstr ""

#: ../develop/plone/syndication.rst:227
msgid "body"
msgstr ""

#: ../develop/plone/syndication.rst:228
msgid "guid"
msgstr ""

#: ../develop/plone/syndication.rst:229
msgid "has_enclosure"
msgstr ""

#: ../develop/plone/syndication.rst:230
msgid "file"
msgstr ""

#: ../develop/plone/syndication.rst:231
msgid "file_url"
msgstr ""

#: ../develop/plone/syndication.rst:232
msgid "file_length"
msgstr ""

#: ../develop/plone/syndication.rst:233
msgid "file_type"
msgstr ""

#: ../develop/plone/syndication.rst:237
msgid "Available feed properties to override"
msgstr ""

#: ../develop/plone/syndication.rst:239
msgid "If you're inheriting from Products.CMFPlone.browser.syndiction.adapters.FolderFeed in an attempt to override the functionality of a feed folder or collection, these are the available properties to override:"
msgstr ""

#: ../develop/plone/syndication.rst:252
msgid "logo"
msgstr ""

#: ../develop/plone/syndication.rst:253
msgid "icon"
msgstr ""

#: ../develop/plone/syndication.rst:254
msgid "items"
msgstr ""

#: ../develop/plone/syndication.rst:255
msgid "limit"
msgstr ""

#: ../develop/plone/syndication.rst:256
msgid "language"
msgstr ""

#: ../develop/plone/views/browserviews.rst:3
msgid "Views"
msgstr ""

#: ../develop/plone/views/browserviews.rst:7
msgid "Rendering HTML pages in Plone using the Zope 3 *view* pattern."
msgstr ""

#: ../develop/plone/views/browserviews.rst:14
msgid "Plone/Zope uses a *view* pattern to output dynamically generated HTML pages."
msgstr ""

#: ../develop/plone/views/browserviews.rst:16
msgid "*Views* are the basic elements of modern Python web frameworks. A view runs code to setup Python variables for a rendering template. Output is not limited to HTML pages and snippets, but may contain :term:`JSON`, file download payloads, or other data formats."
msgstr ""

#: ../develop/plone/views/browserviews.rst:21
msgid "Views are usually a combination of:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:23
msgid "a Python class, which performs the user interface logic setup, and a"
msgstr ""

#: ../develop/plone/views/browserviews.rst:24
msgid "corresponding :term:`ZPT` page template, or direct Python string output."
msgstr ""

#: ../develop/plone/views/browserviews.rst:26
msgid "By keeping as much of the view logic in a separate Python class as we can and making the page template as simple as possible, better component readability and reuse is achieved. You can override the Python logic or the template file, or both."
msgstr ""

#: ../develop/plone/views/browserviews.rst:31
msgid "When you are working with Plone, the most usual view type is ``BrowserView`` from the `Products.Five`_ package, but there are others."
msgstr ""

#: ../develop/plone/views/browserviews.rst:34
msgid "Each ``BrowserView`` class is a Python callable. The ``BrowserView.__call__()`` method acts as an entry point to executing the view code. From Zope's point of view, even a function would be sufficient, as it is a callable."
msgstr ""

#: ../develop/plone/views/browserviews.rst:42
msgid "`Mastering Plone Training <http://training.plone.org/5/>`_ has several chapters on views."
msgstr ""

#: ../develop/plone/views/browserviews.rst:43
msgid "The :doc:`Tutorial app </external/tutorial.todoapp/docs/chapter_3>` has a chapter on views as well."
msgstr ""

#: ../develop/plone/views/browserviews.rst:47
msgid "View components"
msgstr ""

#: ../develop/plone/views/browserviews.rst:49
msgid "Views are Zope Component Architecture (:term:`ZCA`) *multi-adapter registrations*."
msgstr ""

#: ../develop/plone/views/browserviews.rst:52
msgid "Views are looked up by name. The Zope publisher always does a view lookup, instead of traversing, if the name to be traversed is prefixed with ``@@``."
msgstr ""

#: ../develop/plone/views/browserviews.rst:55
msgid "Views are resolved with three inputs:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:60
msgid "*context*"
msgstr ""

#: ../develop/plone/views/browserviews.rst:58
msgid "Any class/interface for which the view applies. If not given, ``zope.interface.Interface`` is used (corresponds to a registration ``for=\"*\"``). Usually this is a content item instance."
msgstr ""

#: ../develop/plone/views/browserviews.rst:64
msgid "*request*"
msgstr ""

#: ../develop/plone/views/browserviews.rst:63
msgid "The current HTTP request. Interface ``zope.publisher.interfaces.browser.IBrowserRequest`` is used."
msgstr ""

#: ../develop/plone/views/browserviews.rst:68
msgid "*layer*"
msgstr ""

#: ../develop/plone/views/browserviews.rst:67
msgid "Theme layer and addon layer interface. If not given, ``zope.publisher.interfaces.browser.IDefaultBrowserLayer`` is used."
msgstr ""

#: ../develop/plone/views/browserviews.rst:70
msgid "Views return HTTP request payload as the output. Returned strings are turned to HTML page responses."
msgstr ""

#: ../develop/plone/views/browserviews.rst:73
msgid "Views can be any Python class taking in (context, request) construction parameters. Minimal view would be::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:84
msgid "However, in the most of cases"
msgstr ""

#: ../develop/plone/views/browserviews.rst:86
msgid "Full Plone page views are subclass of `Products.Five.browser.BrowserView <https://github.com/zopefoundation/Zope/blob/master/src/Products/Five/browser/__init__.py#L23>`_ which is a wrapper class. It wraps `zope.publisher.browser.BrowserView <https://github.com/zopefoundation/zope.publisher/blob/master/src/zope/publisher/browser.py#L896>`_ and adds an acquisition (parent traversal) support for it."
msgstr ""

#: ../develop/plone/views/browserviews.rst:90
msgid "Views have ``index`` attribute which points to :doc:`TAL page template </adapt-and-extend/theming/templates_css/template_basics>` responsible rendering the HTML code. You get the HTML output by doing self.index() and page template gets a context argument ``view`` pointing to the view class instance. ``index`` value is usually instance of `Products.Five.browser.pagetemplate.ViewPageTemplateFile <https://github.com/zopefoundation/Zope/blob/master/src/Products/Five/browser/pagetemplatefile.py#L33>`_ (full Plone pages) or `zope.pagetemplate.pagetemplatefile.PageTemplateFile <https://github.com/zopefoundation/zope.pagetemplate/blob/master/src/zope/pagetemplate/pagetemplatefile.py#L40>`_ (HTML snippets, no acquisition)"
msgstr ""

#: ../develop/plone/views/browserviews.rst:97
msgid "View classes should implement :doc:`interface </develop/addons/components/interfaces>` `zope.browser.interfaces.IBrowserView <https://github.com/zopefoundation/zope.browser/blob/master/src/zope/browser/interfaces.py#L27>`_"
msgstr ""

#: ../develop/plone/views/browserviews.rst:100
msgid "Views rendering page snippets and parts can be subclasses of zope.publisher.browser.BrowserView directly as snippets might not need acquisition support which adds some overhead to the rendering process."
msgstr ""

#: ../develop/plone/views/browserviews.rst:104
msgid "Customizing views"
msgstr ""

#: ../develop/plone/views/browserviews.rst:106
msgid "To customize existing Plone core or add-on views you have different options."
msgstr ""

#: ../develop/plone/views/browserviews.rst:108
msgid "Usually you can simply override the related page template file (``.pt``)."
msgstr ""

#: ../develop/plone/views/browserviews.rst:110
msgid "Sometimes you need to change the related Python view class code also. In this case, you override the Python class by using your own add-on which installs a view class replacement using add-on layer."
msgstr ""

#: ../develop/plone/views/browserviews.rst:115
msgid "Overriding view template"
msgstr ""

#: ../develop/plone/views/browserviews.rst:117
msgid "Follow instructions how to :doc:`use z3c.jbot </adapt-and-extend/theming/templates_css/template_basics>` to override templates."
msgstr ""

#: ../develop/plone/views/browserviews.rst:121
msgid "Overriding view class"
msgstr ""

#: ../develop/plone/views/browserviews.rst:123
msgid "Here is a short introduction on finding how existing views are defined."
msgstr ""

#: ../develop/plone/views/browserviews.rst:125
msgid "First, you go to ``portal_types`` to see what views have been registered for a particular content type."
msgstr ""

#: ../develop/plone/views/browserviews.rst:128
msgid "For example, if you want to override the *Tabular* view of a *Folder*, you find out that it is registered as the handler for ``/folder_tabular_view``."
msgstr ""

#: ../develop/plone/views/browserviews.rst:132
msgid "So you look for both ``folder_tabular_view`` old-style page templates and ``@@folder_tabular_view`` BrowserView ZCML registrations in the Plone source tree |---| it can be either."
msgstr ""

#: ../develop/plone/views/browserviews.rst:136
msgid "Example of how to search for this using UNIX tools (assuming that `collective.recipe.omelette`_ is in use, to keep included code together):"
msgstr ""

#: ../develop/plone/views/browserviews.rst:146
msgid "The ``folder_tabular_view`` is found in the :doc:`skin layer </adapt-and-extend/theming/templates_css/skin_layers>` called ``plone_content`` in the CMFPlone product."
msgstr ""

#: ../develop/plone/views/browserviews.rst:152
msgid ":doc:`How to override old style page templates </adapt-and-extend/theming/templates_css/skin_layers>`"
msgstr ""

#: ../develop/plone/views/browserviews.rst:155
msgid "Creating and registering a view"
msgstr ""

#: ../develop/plone/views/browserviews.rst:157
msgid "This shows how to create and register view in a Zope 3 manner."
msgstr ""

#: ../develop/plone/views/browserviews.rst:161
msgid "Creating a view"
msgstr ""

#: ../develop/plone/views/browserviews.rst:163
msgid "First, create your add-on product using :doc:`Dexterity project template </develop/addons/bobtemplates.plone/README>`."
msgstr ""

#: ../develop/plone/views/browserviews.rst:167
msgid "Python logic code"
msgstr ""

#: ../develop/plone/views/browserviews.rst:169
msgid "Add the file ``yourcompany.app/yourcompany/app/browser/views.py``::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:187
msgid "Do not attempt to run any code in the ``__init__()`` method of a view.  If this code fails and an exception is raised, the ``zope.component`` machinery remaps this to a \"View not found\" exception or traversal error."
msgstr ""

#: ../develop/plone/views/browserviews.rst:192
msgid "Additionally, view class may be instantiated in other places than where you intended to render the view. For example, plone.app.contentmenu does this when creating the menu to select a view layout. This will result in the ``__init__()`` being called on unexpected contexts, probably wasting a lot of time."
msgstr ""

#: ../develop/plone/views/browserviews.rst:199
msgid "Instead, use a pattern where you have a ``setup()`` or similar method which ``__call__()`` or view users can explicitly call."
msgstr ""

#: ../develop/plone/views/browserviews.rst:204
msgid "Registering a view"
msgstr ""

#: ../develop/plone/views/browserviews.rst:206
msgid "Zope 3 views are registered in :term:`ZCML`, an XML-based configuration language.  Usually, the configuration file, where the registration done, is called ``yourapp.package/yourapp/package/browser/configure.zcml``."
msgstr ""

#: ../develop/plone/views/browserviews.rst:210
msgid "The following example registers a new view (see below for comments):"
msgstr ""

#: ../develop/plone/views/browserviews.rst:232
msgid "``for``"
msgstr ""

#: ../develop/plone/views/browserviews.rst:229
msgid "specifies which content types receive this view. ``for=\"*\"`` means that this view can be used for any content type. This is the same as registering views to the ``zope.interface.Interface`` base class."
msgstr ""

#: ../develop/plone/views/browserviews.rst:238
msgid "``name``"
msgstr ""

#: ../develop/plone/views/browserviews.rst:235
msgid "is the name by which the view is exposed to traversal and ``getMultiAdapter()`` look-ups. If your view's name is ``test``, then you can render it in the browser by calling http://yourhost/site/page/@@test"
msgstr ""

#: ../develop/plone/views/browserviews.rst:247
msgid "``permission``"
msgstr ""

#: ../develop/plone/views/browserviews.rst:241
msgid "is the permission needed to access the view. When an HTTP request comes in, the currently logged in user's access rights in the current context are checked against this permission. See :doc:`Security chapter </develop/plone/security/permission_lists>` for Plone's out-of-the-box permissions. Usually you want have ``zope2.View``, ``cmf.ModifyPortalContent``, ``cmf.ManagePortal`` or ``zope2.Public`` here."
msgstr ""

#: ../develop/plone/views/browserviews.rst:252
msgid "``class``"
msgstr ""

#: ../develop/plone/views/browserviews.rst:250
msgid "is a Python dotted name for a class based on ``BrowserView``, which is responsible for managing the view. The Class's ``__call__()`` method is the entry point for view processing and rendering."
msgstr ""

#: ../develop/plone/views/browserviews.rst:254
msgid "You need to declare the ``browser`` namespace in your ``configure.zcml`` to use ``browser`` configuration directives."
msgstr ""

#: ../develop/plone/views/browserviews.rst:258
msgid "The view in question is not registered against any :doc:`layer </develop/plone/views/layers>`, so it is immediately available after restart without need to run :doc:`Add/remove in Site setup </develop/addons/components/genericsetup>`."
msgstr ""

#: ../develop/plone/views/browserviews.rst:263
msgid "Page template"
msgstr ""

#: ../develop/plone/views/browserviews.rst:265
msgid "Then create a :doc:`page template for your view. </adapt-and-extend/theming/templates_css/template_basics>`. Create a file ``myview.pt`` file in ``yourcompany.app/yourcompany/app/browser/templates`` and add the template:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:283
msgid "Now when you restart to Plone (or use :doc:`auto-restart add-on </develop/plone/getstarted/index>`) the view should be available through your browser."
msgstr ""

#: ../develop/plone/views/browserviews.rst:287
msgid "Accessing your newly created view"
msgstr ""

#: ../develop/plone/views/browserviews.rst:289
msgid "Now you can access your view within the news folder::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:293
msgid "... or on a site root::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:297
msgid "... or on any other content item."
msgstr ""

#: ../develop/plone/views/browserviews.rst:299
msgid "You can also use the ``@@`` notation at the front of the view name to make sure that you are looking up a *view*, and not a content item that happens to have the same id as a view::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:307
msgid "https://plone.org/products/dexterity/documentation/manual/five.grok/browser-components/views"
msgstr ""

#: ../develop/plone/views/browserviews.rst:310
msgid "Content slots"
msgstr ""

#: ../develop/plone/views/browserviews.rst:312
msgid "Available :doc:`slot </adapt-and-extend/theming/templates_css/template_basics>` options you can use for ``<metal fill-slot=\"\">`` in your template which inherits from ``<html metal:use-macro=\"context/main_template/macros/master\">``:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:317
msgid "``content``"
msgstr ""

#: ../develop/plone/views/browserviews.rst:317
msgid "render edit border yourself"
msgstr ""

#: ../develop/plone/views/browserviews.rst:320
msgid "``main``"
msgstr ""

#: ../develop/plone/views/browserviews.rst:320
msgid "overrides main slot in main template; you must render title and description yourself"
msgstr ""

#: ../develop/plone/views/browserviews.rst:323
msgid "``content-title``"
msgstr ""

#: ../develop/plone/views/browserviews.rst:323
msgid "title and description prerendered, Plone version > 4.x"
msgstr ""

#: ../develop/plone/views/browserviews.rst:326
msgid "``content-core``"
msgstr ""

#: ../develop/plone/views/browserviews.rst:326
msgid "content body specific to your view, Plone version > 4.x"
msgstr ""

#: ../develop/plone/views/browserviews.rst:331
msgid "``header``"
msgstr ""

#: ../develop/plone/views/browserviews.rst:329
msgid "A slot for inserting content above the title; may be useful in conjunction with content-core slot if you wish to use the stock content-title provided by the main template."
msgstr ""

#: ../develop/plone/views/browserviews.rst:334
msgid "Relationship between views and templates"
msgstr ""

#: ../develop/plone/views/browserviews.rst:336
msgid "The ZCML ``<browser:view template=\"\">`` directive will set the ``index`` class attribute."
msgstr ""

#: ../develop/plone/views/browserviews.rst:339
msgid "The default view's ``__call__()`` method will return the value returned by a call to ``self.index()``."
msgstr ""

#: ../develop/plone/views/browserviews.rst:342
msgid "Example: this ZCML configuration:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:353
#: ../develop/plone/views/browserviews.rst:372
msgid "and this Python code::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:362
msgid "is equal to this ZCML configuration::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:377
msgid "Rendering of the view is done as follows::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:394
msgid "Overriding a view template at run-time"
msgstr ""

#: ../develop/plone/views/browserviews.rst:396
msgid "Below is a sample code snippet which allows you to override an already constructed ``ViewPageTemplateFile`` with a chosen file at run-time::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:415
msgid "Several templates per view"
msgstr ""

#: ../develop/plone/views/browserviews.rst:417
msgid "You can bind several templates to one view and render them individually. This is very useful for reusable templating, or when you subclass your functional views."
msgstr ""

#: ../develop/plone/views/browserviews.rst:421
msgid "Example using `five.grok`_::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:431
msgid "And then call in the template:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:440
msgid "View ``__init__()`` method special cases"
msgstr ""

#: ../develop/plone/views/browserviews.rst:442
msgid "The Python constructor method of the view, ``__init__()``, is special. You should never try to put your code there. Instead, use helper method or lazy construction design pattern if you need to set-up view variables."
msgstr ""

#: ../develop/plone/views/browserviews.rst:446
msgid "The ``__init__()`` method of the view might not have an :doc:`acquisition chain </develop/plone/serving/traversing>` available, meaning that it does not know the parent or hierarchy where the view is. This information is set after the constructor have been run. All Plone code which relies on acquisition chain, which means almost all Plone helper code, does not work in ``__init__()``. Thus, the called Plone API methods return ``None`` or tend to throw exceptions."
msgstr ""

#: ../develop/plone/views/browserviews.rst:456
#: ../develop/plone/views/layers.rst:3
msgid "Layers"
msgstr ""

#: ../develop/plone/views/browserviews.rst:458
msgid "Views can be registered against a specific *layer* interface. This means that views are only looked up if the specified layer is in use. Since one Zope application server can contain multiple Plone sites, layers are used to determine which Python code is in effect for a given Plone site."
msgstr ""

#: ../develop/plone/views/browserviews.rst:463
msgid "A layer is in use when:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:465
msgid "a theme which defines that layer is active, or"
msgstr ""

#: ../develop/plone/views/browserviews.rst:466
msgid "if a specific add-on product which defines that layer is installed."
msgstr ""

#: ../develop/plone/views/browserviews.rst:468
msgid "You should normally register your views against a certain layer in your own code."
msgstr ""

#: ../develop/plone/views/browserviews.rst:473
msgid ":doc:`browser layers </develop/plone/views/layers>`"
msgstr ""

#: ../develop/plone/views/browserviews.rst:476
msgid "Register and unregister view directly using zope.component architecture"
msgstr ""

#: ../develop/plone/views/browserviews.rst:478
msgid "Example how to register::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:495
msgid "Example how to unregister::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:506
msgid "Content type, mimetype and Template start tag"
msgstr ""

#: ../develop/plone/views/browserviews.rst:508
msgid "If you need to produce non-(X)HTML output, here are some resources:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:510
msgid "http://plone.293351.n2.nabble.com/Setting-a-mime-type-on-a-Zope-3-browser-view-td4442770.html"
msgstr ""

#: ../develop/plone/views/browserviews.rst:513
msgid "Zope ViewPageTemplateFile vs. Five ViewPageTemplateFile"
msgstr ""

#: ../develop/plone/views/browserviews.rst:515
msgid "There are two different classes that share the same ``ViewPageTemplateFile`` name."
msgstr ""

#: ../develop/plone/views/browserviews.rst:518
msgid "Zope  `BrowserView source code <http://svn.zope.org/zope.publisher/trunk/src/zope/publisher/browser.py?rev=101538&view=auto>`_."
msgstr ""

#: ../develop/plone/views/browserviews.rst:520
msgid "`Five version  <http://svn.zope.org/Zope/trunk/src/Products/Five/browser/__init__.py?rev=96262&view=markup>`_. `Products.Five`_ is a way to access some Zope 3 technologies from the Zope 2 codebase, which is used by Plone."
msgstr ""

#: ../develop/plone/views/browserviews.rst:524
msgid "Difference in code::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:528
msgid "vs.::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:533
msgid "The difference is that the *Five* version supports:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:535
msgid "Acquisition."
msgstr ""

#: ../develop/plone/views/browserviews.rst:536
msgid "The ``provider:`` TAL expression."
msgstr ""

#: ../develop/plone/views/browserviews.rst:537
msgid "Other Plone-specific TAL expression functions like ``test()``."
msgstr ""

#: ../develop/plone/views/browserviews.rst:538
msgid "Usually, Plone code needs the Five version of ``ViewPageTemplateFile``."
msgstr ""

#: ../develop/plone/views/browserviews.rst:539
msgid "Some subsystems, notably the ``z3c.form`` package, expect the Zope 3 version of ``ViewPageTemplateFile`` instances."
msgstr ""

#: ../develop/plone/views/browserviews.rst:544
msgid "Overriding a view class in a product"
msgstr ""

#: ../develop/plone/views/browserviews.rst:546
msgid "Most of the code in this section is copied from a `tutorial by Martin Aspeli (on slideshare.net) <http://www.slideshare.net/wooda/martin-aspeli-extending-and-customising-plone-3>`_. The main change is that, at least for Plone 4, the interface should subclass ``plone.theme.interfaces.IDefaultPloneLayer`` instead of ``zope.interface.Interface``."
msgstr ""

#: ../develop/plone/views/browserviews.rst:553
msgid "In this example we override the ``@@register`` form from the ``plone.app.users`` package, creating a custom form which subclasses the original."
msgstr ""

#: ../develop/plone/views/browserviews.rst:557
msgid "Create an interface in ``interfaces.py``::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:565
msgid "Then create ``profiles/default/browserlayer.xml``:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:576
msgid "Create ``browser/configure.zcml``:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:592
msgid "Create ``browser/customregistration.py``::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:601
msgid "Helper views"
msgstr ""

#: ../develop/plone/views/browserviews.rst:603
msgid "Not all views need to return HTML output, or output at all. Views can be used as helpers in the code to provide APIs to objects. Since views can be overridden using layers, a view is a natural plug-in point which an add-on product can customize or override in a conflict-free manner."
msgstr ""

#: ../develop/plone/views/browserviews.rst:608
msgid "View methods are exposed to page templates and such, so you can also call view methods directly from a page template, not only from Python code."
msgstr ""

#: ../develop/plone/views/browserviews.rst:614
msgid ":doc:`Context helpers </develop/plone/misc/context>`"
msgstr ""

#: ../develop/plone/views/browserviews.rst:616
msgid ":doc:`Expressions </develop/plone/functionality/expressions>`"
msgstr ""

#: ../develop/plone/views/browserviews.rst:619
msgid "Historical perspective"
msgstr ""

#: ../develop/plone/views/browserviews.rst:621
msgid "Often, the point of using helper views is that you can have reusable functionality which can be plugged in as one-line code around the system. Helper views also get around the following limitations:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:625
msgid "TAL security."
msgstr ""

#: ../develop/plone/views/browserviews.rst:626
msgid "Limiting Python expression to one line."
msgstr ""

#: ../develop/plone/views/browserviews.rst:627
msgid "Not being able to import Python modules."
msgstr ""

#: ../develop/plone/views/browserviews.rst:631
msgid "Using ``RestrictedPython`` scripts (creating Python through the :term:`ZMI`) and Zope 2 Extension modules is discouraged. The same functionality can be achieved with helper views, with less potential pitfalls."
msgstr ""

#: ../develop/plone/views/browserviews.rst:637
msgid "Reusing view template snippets or embedding another view"
msgstr ""

#: ../develop/plone/views/browserviews.rst:639
msgid "To use the same template code several times you can either:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:641
msgid "create a separate ``BrowserView`` for it and then call this view (see `Accessing a view instance in code`_ below);"
msgstr ""

#: ../develop/plone/views/browserviews.rst:644
msgid "share a ``ViewPageTemplate`` instance between views and using it several times."
msgstr ""

#: ../develop/plone/views/browserviews.rst:649
msgid "The Plone 2.x way of doing this with TAL template language macros is discouraged as a way to provide reusable functionality in your add-on product. This is because macros are hardwired to the TAL template language, and referring to them outside templates is difficult."
msgstr ""

#: ../develop/plone/views/browserviews.rst:655
msgid "Also, if you ever need to change the template language, or mix in other template languages, you can do it much more easily when templates are a feature of a pure Python based view, and not vice versa."
msgstr ""

#: ../develop/plone/views/browserviews.rst:659
msgid "Here is an example of how to have a view snippet which can be used by subclasses of a base view class. Subclasses can refer to this template at any point of the view rendering, making it possible for subclasses to have fine-tuned control over how the template snippet is represented."
msgstr ""

#: ../develop/plone/views/browserviews.rst:665
msgid "Related Python code::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:687
msgid "Then you can render the summary template in the main template associated with ``ProductCardView`` by calling the ``renderSummary()`` method and TAL non-escaping HTML embedding."
msgstr ""

#: ../develop/plone/views/browserviews.rst:701
msgid "The ``summarybox.pt`` itself is just a piece of HTML code without the Plone decoration frame (``main_template/master`` etc. macros).  Make sure that you declare the ``i18n:domain`` again, or the strings in this template will not be translated."
msgstr ""

#: ../develop/plone/views/browserviews.rst:713
msgid "Accessing a view instance in code"
msgstr ""

#: ../develop/plone/views/browserviews.rst:715
msgid "You need to get access to the view in your code if you are:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:717
msgid "calling a view from inside another view, or"
msgstr ""

#: ../develop/plone/views/browserviews.rst:718
msgid "calling a view from your unit test code."
msgstr ""

#: ../develop/plone/views/browserviews.rst:720
msgid "Below are two different approaches for that."
msgstr ""

#: ../develop/plone/views/browserviews.rst:724
msgid "By using ``getMultiAdapter()``"
msgstr ""

#: ../develop/plone/views/browserviews.rst:726
msgid "This is the most efficient way in Python."
msgstr ""

#: ../develop/plone/views/browserviews.rst:744
msgid "By using traversal"
msgstr ""

#: ../develop/plone/views/browserviews.rst:746
msgid "Traversal is slower than directly calling ``getMultiAdapter()``.  However, traversal is readily available in templates and ``RestrictedPython`` modules."
msgstr ""

#: ../develop/plone/views/browserviews.rst:768
msgid "You can also do direct view look-ups and method calls in your template by using the ``@@``-notation in traversing."
msgstr ""

#: ../develop/plone/views/browserviews.rst:779
msgid "Use a skin-based template in a Five view"
msgstr ""

#: ../develop/plone/views/browserviews.rst:781
msgid "Use ``aq_acquire(object, template_name)``."
msgstr ""

#: ../develop/plone/views/browserviews.rst:783
msgid "Example: Get an object by its path and render it using its default template in the current context."
msgstr ""

#: ../develop/plone/views/browserviews.rst:807
msgid "Listing available views"
msgstr ""

#: ../develop/plone/views/browserviews.rst:809
msgid "This is useful for debugging purposes::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:818
msgid "Listing all views of certain type"
msgstr ""

#: ../develop/plone/views/browserviews.rst:820
msgid "How to filter out views which provide a certain interface::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:833
msgid "Default view of a content item"
msgstr ""

#: ../develop/plone/views/browserviews.rst:835
msgid "Objects have views for default, view, edit, and so on."
msgstr ""

#: ../develop/plone/views/browserviews.rst:837
msgid "The distinction between the *default* and *view* views are that for files, the default can be *download*."
msgstr ""

#: ../develop/plone/views/browserviews.rst:840
msgid "The default view ..."
msgstr ""

#: ../develop/plone/views/browserviews.rst:842
msgid "This view is configured in :doc:`portal_types </develop/plone/content/types>`."
msgstr ""

#: ../develop/plone/views/browserviews.rst:844
msgid "This view is rendered when a content item is called |---| even though they are objects, they have the ``__call__()`` Python method defined."
msgstr ""

#: ../develop/plone/views/browserviews.rst:848
msgid "If you need to get a content item's view for page rendering explicitly, you can do it as follows::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:858
msgid ":doc:`Context helpers and utilities </develop/plone/misc/context>`"
msgstr ""

#: ../develop/plone/views/browserviews.rst:860
msgid "http://plone.293351.n2.nabble.com/URL-to-content-view-tp6028204p6028204.html"
msgstr ""

#: ../develop/plone/views/browserviews.rst:864
msgid "Allowing the contentmenu on non-default views"
msgstr ""

#: ../develop/plone/views/browserviews.rst:866
msgid "In general, the contentmenu (where the actions, display views, factory types, workflow, and other dropdowns are) is not shown on non-default views. There are some exceptions, though."
msgstr ""

#: ../develop/plone/views/browserviews.rst:870
msgid "If you want to display the contentmenu in such non-default views, you have to mark them with the IViewView interface from plone.app.layout either by letting the class provide IViewView by declaring it with zope.component.implements or by configuring it via ZCML like so::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:881
msgid "Views and automatic member variable acquisition wrapping"
msgstr ""

#: ../develop/plone/views/browserviews.rst:883
msgid "View class instances will automatically assign themselves as a parent for all member variables. This is because ``five`` package based views inherit from ``Acquisition.Implicit`` base class."
msgstr ""

#: ../develop/plone/views/browserviews.rst:886
msgid "E.g. you have a ``Basket`` content item with ``absolute_url()`` of::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:890
msgid "Then if you use this object in a view code's member variable assignment in e.g. ``Viewlet.update() method``::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:894
msgid "... this will mess up the Basket content item's acquisition chain::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:898
msgid "This concerns views, viewlets and portlet renderers. It will, for example, make the following code to fail::"
msgstr ""

#: ../develop/plone/views/browserviews.rst:903
msgid "One workaround to avoid this mess is to use aq_inner when accessing self.obj values:"
msgstr ""

#: ../develop/plone/views/browserviews.rst:905
msgid "http://stackoverflow.com/a/11755348/315168"
msgstr ""

#: ../develop/plone/views/index.rst:3
msgid "Views, viewlets and layers"
msgstr ""

#: ../develop/plone/views/index.rst:5
msgid "View and viewlet patterns used to create dynamic pages in plone."
msgstr ""

#: ../develop/plone/views/layers.rst:7
msgid "Layers allow you to easily enable and disable views and other site functionality based on installed add-ons and themes."
msgstr ""

#: ../develop/plone/views/layers.rst:15
msgid "Layers allow you to activate different code paths and modules depending on the external configuration."
msgstr ""

#: ../develop/plone/views/layers.rst:20
msgid "Code belonging to a theme is only active when that theme has been selected."
msgstr ""

#: ../develop/plone/views/layers.rst:22
msgid "Mobile browsing code is only active when the site is being browsed on a mobile phone."
msgstr ""

#: ../develop/plone/views/layers.rst:25
msgid "Layers are marker interfaces applied to the HTTPRequest_ object. They are usually used in conjunction with :term:`ZCML` directives to dynamically activate various parts of the configuration (theme files, add-on product functionality)."
msgstr ""

#: ../develop/plone/views/layers.rst:30
msgid "Layers ensure that only one add-on product can override the specific Plone instance functionality in your site at a time, while still allowing you to have possibly conflicting add-on products in your buildout and ZCML. Remember that multiple Plone site instances can share the same ZCML and code files."
msgstr ""

#: ../develop/plone/views/layers.rst:36
msgid "Many ZCML directives take the optional ``layer`` parameter. See example, resourceDirectory_"
msgstr ""

#: ../develop/plone/views/layers.rst:39
msgid "Layers can be activated when an add-on product is installed or a certain theme is picked."
msgstr ""

#: ../develop/plone/views/layers.rst:42
msgid "For more information, read"
msgstr ""

#: ../develop/plone/views/layers.rst:44
msgid "`Making components theme specific <https://plone.org/documentation/manual/theme-reference/buildingblocks/components/themespecific>`_"
msgstr ""

#: ../develop/plone/views/layers.rst:46
msgid "`Browser Layer tutorial <https://plone.org/documentation/tutorial/customization-for-developers/browser-layers>`_."
msgstr ""

#: ../develop/plone/views/layers.rst:48
msgid "`Zope 3 Developer Handbook, Skinning <http://zope3.xmu.me/skinning.html>`_"
msgstr ""

#: ../develop/plone/views/layers.rst:51
msgid "Using layers"
msgstr ""

#: ../develop/plone/views/layers.rst:53
msgid "Some ZCML directives (for example: `browser:page <http://apidoc.zope.org/++apidoc++/ZCML/http_co__sl__sl_namespaces.zope.org_sl_browser/page/index.html>`_) take a ``layer`` attribute."
msgstr ""

#: ../develop/plone/views/layers.rst:57
msgid "If you have:"
msgstr ""

#: ../develop/plone/views/layers.rst:60
msgid "# ``plonetheme.yourthemename.interfaces.IThemeSpecific`` layer defined in"
msgstr ""

#: ../develop/plone/views/layers.rst:63
msgid "# ``YourTheme`` product installed through add-on product installer on your"
msgstr ""

#: ../develop/plone/views/layers.rst:63
msgid "site instance"
msgstr ""

#: ../develop/plone/views/layers.rst:65
msgid "then views and viewlets from your product can be enabled on the site instance using the following ZCML::"
msgstr ""

#: ../develop/plone/views/layers.rst:78
msgid "Unconditional overrides"
msgstr ""

#: ../develop/plone/views/layers.rst:80
msgid "If you want to override a view or a viewlet unconditionally for all sites without the add-on product installer support you need to use ``overrides.zcml``."
msgstr ""

#: ../develop/plone/views/layers.rst:85
msgid "Creating a layer"
msgstr ""

#: ../develop/plone/views/layers.rst:88
msgid "Theme layer"
msgstr ""

#: ../develop/plone/views/layers.rst:90
msgid "Theme layers can be created via the following steps:"
msgstr ""

#: ../develop/plone/views/layers.rst:92
msgid "Subclass an interface from ``IDefaultPloneLayer``::"
msgstr ""

#: ../develop/plone/views/layers.rst:104
msgid "Register it in ZCML. The name must match the theme name."
msgstr ""

#: ../develop/plone/views/layers.rst:114
msgid "Register and set your theme as the default theme in ``profiles/default/skins.xml``. Theme layers require that they are set as the default theme and not just activated on your Plone site. Example:"
msgstr ""

#: ../develop/plone/views/layers.rst:131
msgid "Add-on layer for clean extensions"
msgstr ""

#: ../develop/plone/views/layers.rst:133
msgid "An add-on product layer is enabled when an add-on product is installed. Since one Zope application server may contain several Plone sites, you need to keep enabled code paths separate by using add-on layers - otherwise all views and viewlets apply to all sites in one Zope application server."
msgstr ""

#: ../develop/plone/views/layers.rst:138
msgid "You can enable views and viewlets specific to functional add-ons."
msgstr ""

#: ../develop/plone/views/layers.rst:140
msgid "Unlike theme layers, add-on layers depend on the activated add-on products, not on the selected theme."
msgstr ""

#: ../develop/plone/views/layers.rst:143
msgid "An add-on layer is a marker interface which is applied on the :doc:`HTTP request object </develop/plone/serving/http_request_and_response>` by Plone core logic."
msgstr ""

#: ../develop/plone/views/layers.rst:147
msgid "First create an :doc:`interface </develop/addons/components/interfaces>` for your layer in ``your.product.interfaces.py``::"
msgstr ""

#: ../develop/plone/views/layers.rst:164
msgid "You then need to refer to this in the ``profile/default/browserlayer.xml`` file of your add-on installer :doc:`setup profile </develop/addons/components/genericsetup>`:"
msgstr ""

#: ../develop/plone/views/layers.rst:179
msgid "The add-on layer registry is persistent and stored in the database. The changes to add-on layers are applied only when add-ons are installed or uninstalled."
msgstr ""

#: ../develop/plone/views/layers.rst:185
msgid "https://pypi.python.org/pypi/plone.browserlayer"
msgstr ""

#: ../develop/plone/views/layers.rst:187
msgid "See example in `LinguaPlone <https://github.com/plone/Products.LinguaPlone/blob/master/Products/LinguaPlone/profiles/default/browserlayer.xml>`_."
msgstr ""

#: ../develop/plone/views/layers.rst:190
msgid "Add-on layer for changing existing behavior"
msgstr ""

#: ../develop/plone/views/layers.rst:192
msgid "You can also use layers to modify the behavior of plone or another Add-on."
msgstr ""

#: ../develop/plone/views/layers.rst:194
msgid "To make sure that your own view is used, your Layer must be mor specific than the layer where original view is registered."
msgstr ""

#: ../develop/plone/views/layers.rst:196
msgid "For example, some z3cform things register their views on the ``IPloneFormLayer`` from plone.app.z3cform.interfaces."
msgstr ""

#: ../develop/plone/views/layers.rst:198
msgid "If you want to override the ploneform-macros view that is registered on the ``IPloneFormLayer``, your own Layer must be a subclass of IPloneFormLayer."
msgstr ""

#: ../develop/plone/views/layers.rst:200
msgid "If a view does not declare a specific Layer,  it becomes registered on the ``IDefaultBrowserLayer`` from zope.publisher.interfaces.browser.IDefaultBrowserLayer."
msgstr ""

#: ../develop/plone/views/layers.rst:203
msgid "Manual layers"
msgstr ""

#: ../develop/plone/views/layers.rst:205
msgid "Apply your layer to the HTTPRequest_ in the ``before_traverse`` hook or before you call the code which looks up the interfaces."
msgstr ""

#: ../develop/plone/views/layers.rst:208
msgid "Choosing skin layer dynamically 1: http://blog.fourdigits.nl/changing-your-plone-theme-skin-based-on-the-objects-portal_type"
msgstr ""

#: ../develop/plone/views/layers.rst:210
msgid "Choosing skin layer dynamically 2: http://code.google.com/p/plonegomobile/source/browse/trunk/gomobile/gomobile.mobile/gomobile/mobile/monkeypatch.py"
msgstr ""

#: ../develop/plone/views/layers.rst:212
msgid "See the `plone.app.z3cform.z2 <http://svn.zope.org/plone.z3cform/trunk/plone/z3cform/z2.py?rev=88331&view=markup>`_ module."
msgstr ""

#: ../develop/plone/views/layers.rst:214
msgid "In the example below we turn on a layer for the request which is later checked by the rendering code. This way some pages can ask for special View/Viewlet rendering."
msgstr ""

#: ../develop/plone/views/layers.rst:250
msgid "Troubleshooting instructions for layers"
msgstr ""

#: ../develop/plone/views/layers.rst:252
msgid "Check that your view or whatever is working without a layer assigned (globally);"
msgstr ""

#: ../develop/plone/views/layers.rst:255
msgid "Check that ``configure.zcml`` has a layer entry. Put some garbage to trigger a syntax error in ``configure.zcml`` to make sure that it is being loaded;"
msgstr ""

#: ../develop/plone/views/layers.rst:259
msgid "Add-on layer: check that ``profiles/default/browserlayer.xml`` has a matching entry with a matching name;"
msgstr ""

#: ../develop/plone/views/layers.rst:262
msgid "Theme layer: if it's a theme layer, check that there is a matching ``skins.xml`` entry"
msgstr ""

#: ../develop/plone/views/layers.rst:265
msgid "Check that layer name is correctly spelt in the view declaration."
msgstr ""

#: ../develop/plone/views/layers.rst:268
msgid "Checking active layers"
msgstr ""

#: ../develop/plone/views/layers.rst:271
msgid "Layers are activated on the current request object"
msgstr ""

#: ../develop/plone/views/layers.rst:280
msgid "Active themes and add-on products"
msgstr ""

#: ../develop/plone/views/layers.rst:282
msgid "The ``registered_layers()`` method returns a list of all layers active on the site. Note that this is different to the list of layers which are applied on the current HTTP request object: the request object may contain manually activated layers."
msgstr ""

#: ../develop/plone/views/layers.rst:301
msgid "Getting active theme layer"
msgstr ""

#: ../develop/plone/views/layers.rst:303
msgid "Only one theme layer can be active at once."
msgstr ""

#: ../develop/plone/views/layers.rst:305
msgid "The active theme name is defined in ``portal_skins`` properties. This name can be resolved to a theme layer."
msgstr ""

#: ../develop/plone/views/layers.rst:309
msgid "Debugging active layers"
msgstr ""

#: ../develop/plone/views/layers.rst:311
msgid "You can check the activated layers from HTTP request object by looking at ``self.request.__provides__.__iro__``. Layers are evaluated from zero index (highest priority) the last index (lowest priority)."
msgstr ""

#: ../develop/plone/views/layers.rst:322
msgid "Testing Layers"
msgstr ""

#: ../develop/plone/views/layers.rst:324
msgid "Plone testing tool kits won't register layers for you, you have to do it yourself somewhere in the boilerplate code::"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:3
msgid "Tutorial: Overriding Viewlets"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:5
msgid "This tutorial [1]_ describes two simple examples of overriding viewlets. To learn more about views and viewlets, see the Developer Manual section on `Views and Viewlets`_"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:9
msgid "Overriding the Logo"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:11
msgid "In this example, we override the logo for the site. I assume you have a theme product named my.theme with an IThemeSpecific interface."
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:13
msgid "Create an entry in browser/configure.zcml of your theme to override the viewlet.::"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:24
msgid "Create a template file named logo.pt inside the browser directory that displays your logo image. It could contain something as simple as this.::"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:34
msgid "Add your logo image to the browser/images directory of your theme. In this example, ++resource++my.theme.images/my_logo.png points to a file named my_logo.png inside the theme's browser/images resource directory."
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:38
msgid "Overriding the Title"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:40
msgid "In this example we override the view class associated with the title viewlet. I assume you have a theme product with an IThemeSpecific interface."
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:42
msgid "Create an entry in browser/configure.zcml of your theme to override the view class.::"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:52
msgid "Create a class named TitleViewlet inside browser/common.py of your theme containing code to return the appropriate title.::"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:65
msgid "Discussion"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:68
msgid "Overriding the logo"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:70
msgid "To override a viewlet in Plone, you need to know which viewlet to override. Using @@manage-viewlets is helpful here. It shows you all the viewlet managers on a page and the viewlets they contain."
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:72
msgid "You can add /@@manage-viewlets to any url in your site and see the active viewlets there. Something like::"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:76
msgid "Using this shows us that the logo is in the plone.logo Viewlet within the plone.portalheader ViewletManager"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:80
msgid "Viewlets are defined in the plone/app/layout/viewlets/configure.zcml file within the eggs area of your buildout. Looking inside that configure.zcml file we see::"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:90
msgid "Here's our overriding entry from above to compare::"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:101
msgid "The name is the same as the item we are overriding. Notice that we give the full path to the manager, and that we are reusing the class. We also declare the name and location of our overriding template file, use our theme's interface, and set a permission."
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:105
msgid "Overriding the title"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:107
msgid "Here is TitleViewlet from plone.app.layout. It has the page title on the left and the portal title on the right, with an emdash in between.::"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:124
msgid "Here is an example for comparison that switches page title and portal title, and separates them with a pipe. The only differences are on the last line.::"
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:141
msgid "More information about the title tag can be found at the `HTML Head Title`_ page which is part of the `Plone Theme Reference`_."
msgstr ""

#: ../develop/plone/views/more_view_examples.rst:144
msgid "https://plone.org/author/spanky"
msgstr ""

#: ../develop/plone/views/viewlets.rst:3
msgid "Viewlets"
msgstr ""

#: ../develop/plone/views/viewlets.rst:7
msgid "Viewlets are parts of the page in Plone page rendering process. You can create, hide and shuffle them freely."
msgstr ""

#: ../develop/plone/views/viewlets.rst:15
msgid "Viewlets are view snippets which will render a part of the HTML page. Viewlets provide conflict-free way to contribute new user-interface actions and HTML snippets to Plone pages."
msgstr ""

#: ../develop/plone/views/viewlets.rst:19
msgid "Each viewlet is associated with a viewlet manager. To add viewlets to your HTML code you first need to add them to a viewlet manager, which allows you to shuffle viewlets around through-the-web."
msgstr ""

#: ../develop/plone/views/viewlets.rst:23
msgid "What viewlets do"
msgstr ""

#: ../develop/plone/views/viewlets.rst:25
msgid "Viewlets are managed using /@@manage-viewlets page"
msgstr ""

#: ../develop/plone/views/viewlets.rst:27
msgid "Viewlets can shown and hidden through-the-web"
msgstr ""

#: ../develop/plone/views/viewlets.rst:29
msgid "Viewlets can be reordered (limited to reordering within container in Plone 3.x)"
msgstr ""

#: ../develop/plone/views/viewlets.rst:31
msgid "Viewlets can be registered and overridden in a theme specific manner :doc:`using layers </develop/plone/views/layers>`"
msgstr ""

#: ../develop/plone/views/viewlets.rst:33
msgid "Viewlets have ``update()`` and ``render()`` methods"
msgstr ""

#: ../develop/plone/views/viewlets.rst:35
msgid "Viewlets should honour `zope.contentprovider.interfaces.IContentProvider call contract <https://github.com/zopefoundation/zope.contentprovider/blob/3.7.2/src/zope/contentprovider/interfaces.py>`_."
msgstr ""

#: ../develop/plone/views/viewlets.rst:37
msgid "A viewlet can be configured so that it is only available for:"
msgstr ""

#: ../develop/plone/views/viewlets.rst:39
msgid "a certain interface, typically a content type (``for=`` in ZCML)"
msgstr ""

#: ../develop/plone/views/viewlets.rst:41
msgid "a certain view (``view=`` in ZCML)"
msgstr ""

#: ../develop/plone/views/viewlets.rst:45
msgid "`Plone 4 Viewlet and viewlet manager reference <https://plone.org/documentation/manual/theme-reference/elements/elementsindexsunburst4>`_"
msgstr ""

#: ../develop/plone/views/viewlets.rst:47
msgid "`ZCML viewlet definition <http://apidoc.zope.org/++apidoc++/ZCML/http_co__sl__sl_namespaces.zope.org_sl_browser/viewlet/index.html>`_."
msgstr ""

#: ../develop/plone/views/viewlets.rst:49
msgid "https://pypi.python.org/pypi/zope.viewlet/"
msgstr ""

#: ../develop/plone/views/viewlets.rst:52
msgid "Finding viewlets"
msgstr ""

#: ../develop/plone/views/viewlets.rst:54
msgid "There are two through-the-web tools to start looking what viewlets are available on your installation. The available viewlets may depend on installed Plone version and installed add-ons."
msgstr ""

#: ../develop/plone/views/viewlets.rst:57
msgid "The ``portal_view_customizations`` tool in ZMI will show you viewlet registrations (and the viewlet managers they are registered for). As with views, you can hover over the viewlet name to see where it is registered in a tool tip."
msgstr ""

#: ../develop/plone/views/viewlets.rst:59
msgid "To discover the name of a particular viewlet, you can use the ``@@manage-viewlets`` view, e.g. http://localhost:8080/plone/@@manage-viewlets."
msgstr ""

#: ../develop/plone/views/viewlets.rst:62
msgid "Creating a viewlet"
msgstr ""

#: ../develop/plone/views/viewlets.rst:64
msgid "A viewlet consists of"
msgstr ""

#: ../develop/plone/views/viewlets.rst:66
msgid "Python class"
msgstr ""

#: ../develop/plone/views/viewlets.rst:68
msgid "Page template (.pt) file"
msgstr ""

#: ../develop/plone/views/viewlets.rst:70
msgid "A :doc:`browser layer </develop/plone/views/layers>` defining which add-on product must be installed, so that the viewlet is rendered"
msgstr ""

#: ../develop/plone/views/viewlets.rst:72
msgid "A ZCML directive to register the viewlet to a correct viewlet manager with a correct layer"
msgstr ""

#: ../develop/plone/views/viewlets.rst:76
msgid "Re-using code from a View"
msgstr ""

#: ../develop/plone/views/viewlets.rst:78
msgid "In the case where you might want a Viewlet and View to share the same code, remember that the View instance is available in the Viewlet under the ``view`` attribute."
msgstr ""

#: ../develop/plone/views/viewlets.rst:82
msgid "Thus, you can use ``self.view`` to get the view, and then use its methods."
msgstr ""

#: ../develop/plone/views/viewlets.rst:86
msgid "Stock viewlets"
msgstr ""

#: ../develop/plone/views/viewlets.rst:88
msgid "These can be found in `plone.app.layout.viewlet module <https://github.com/plone/plone.app.layout/blob/master/plone/app/layout/viewlets/configure.zcml>`_."
msgstr ""

#: ../develop/plone/views/viewlets.rst:90
msgid "The language selector lives in `plone.app.i18n.locales.browser <https://github.com/plone/plone.app.i18n/blob/master/plone/app/i18n/locales/browser/configure.zcml>`_, but it is a *view*. Don't know why."
msgstr ""

#: ../develop/plone/views/viewlets.rst:95
#: ../develop/plone/views/viewlets.rst:131
msgid "Creating a viewlet manager"
msgstr ""

#: ../develop/plone/views/viewlets.rst:97
msgid "Viewlet managers contain viewlets. A viewlet manager is itself a Zope 3 interface which contains an OrdereredViewletManager implementation. OrderedViewletManagers store the order of the viewlets in the site database and provide the fancy /@@manage-viewlets output."
msgstr ""

#: ../develop/plone/views/viewlets.rst:102
msgid "A viewlet manager can be rendered in a page template code using the following expression::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:106
msgid "Each viewlet manager allows you to shuffle viewlets inside a viewlet manager. This is done by using ``/@@manage-viewlets`` view. These settings are stored in the site database, so a good practice is to export ``viewlets.xml`` using ``portal_setup`` and then include the necessary bits of this ``viewlets.xml`` with your add-on installer so that when your add-on is installed, the viewlet configuration is changed accordingly."
msgstr ""

#: ../develop/plone/views/viewlets.rst:115
msgid "You cannot move viewlets between viewlet managers. I know it sucks, but life is hard and Plone is harder. Hide viewlets in one manager using /@@manage-viewlets and viewlets.xml export, then re-register the same viewlet to a new manager."
msgstr ""

#: ../develop/plone/views/viewlets.rst:120
msgid "Viewlet managers are based on `zope.viewlet.manager.ViewletManager <https://github.com/zopefoundation/zope.viewlet/blob/3.7.2/src/zope/viewlet/manager.py>`_ and `plone.app.viewletmanager.manager.OrderedViewletManager <https://github.com/plone/plone.app.viewletmanager/blob/master/plone/app/viewletmanager/manager.py>`_."
msgstr ""

#: ../develop/plone/views/viewlets.rst:125
msgid "https://github.com/zopefoundation/zope.viewlet/blob/3.7.2/src/zope/viewlet/viewlet.py"
msgstr ""

#: ../develop/plone/views/viewlets.rst:127
msgid "http://docs.plone.org/old-reference-manuals/plone_3_theming/elements/viewletmanager/anatomy.html"
msgstr ""

#: ../develop/plone/views/viewlets.rst:133
msgid "Usually viewlet managers are dummy interfaces and the actual implementation comes from ``plone.app.viewletmanager.manager.OrderedViewletManager``."
msgstr ""

#: ../develop/plone/views/viewlets.rst:136
msgid "In this example we put two viewlets in a new viewlet manager so that we can properly CSS float then and close this float."
msgstr ""

#: ../develop/plone/views/viewlets.rst:141
msgid "This example uses extensive Python module nesting: plonetheme.yourtheme.browser.viewlets is just too deep. You really don't need to do some many levels, but the orignal plone3_theme paster templates do it in bad way. One of Python golden rules is that flat is better than nested. You can just dump everything to the root of your plonetheme.yourtheme package."
msgstr ""

#: ../develop/plone/views/viewlets.rst:147
msgid "In your ``browser/viewlets/manager.py`` or similar file add::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:158
msgid "Then in ``browser/viewlets/configure.zcml``::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:168
msgid "Optionally you can include a template which renders some wrapping HTML around viewlets. *browser/viewlets/headerbottomviewletmanager.pt*::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:185
msgid "And then re-register some stock viewlets against your new viewlet manager in *browser/viewlets/configure.zcml*::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:209
msgid "Now, we need to render our viewlet manager somehow. One place to do it is in a ``main_template.pt``, but because we need to add this HTML output to a header section which is produced by *another* viewlet manager, we need to create a new viewlet just for rendering our viewlet manager. Yo dawg - we put viewlets in your viewlets so you can render viewlets!"
msgstr ""

#: ../develop/plone/views/viewlets.rst:214
msgid "``browser/viewlets/headerbottom.pt``::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:221
msgid "Only six files needed to change a bit of HTML code - welcome to the land of productivity! On the top of this you also need to create a new ``viewlets.xml`` export for your theme."
msgstr ""

#: ../develop/plone/views/viewlets.rst:226
msgid "https://plone.org/documentation/manual/theme-reference/elements/viewletmanager/override"
msgstr ""

#: ../develop/plone/views/viewlets.rst:229
msgid "Viewlet behavior"
msgstr ""

#: ../develop/plone/views/viewlets.rst:231
msgid "Viewlets have two important methods"
msgstr ""

#: ../develop/plone/views/viewlets.rst:233
msgid "``update()`` - set up all variables"
msgstr ""

#: ../develop/plone/views/viewlets.rst:235
msgid "``render()`` - generate the resulting HTML code by evaluating the template with context variables set up in update()"
msgstr ""

#: ../develop/plone/views/viewlets.rst:241
msgid "https://github.com/zopefoundation/zope.contentprovider/blob/3.7.2/src/zope/contentprovider/interfaces.py"
msgstr ""

#: ../develop/plone/views/viewlets.rst:243
msgid "https://github.com/plone/plone.app.layout/blob/master/plone/app/layout/viewlets/common.py"
msgstr ""

#: ../develop/plone/views/viewlets.rst:247
msgid "Creating a viewlet using Python code and ZCML"
msgstr ""

#: ../develop/plone/views/viewlets.rst:249
msgid "Here is an example code which extends an existing Plone base viewlet (found from plone.app.layout.viewlets.base package) and then puts this viewlet to a one of viewlet managers using :doc:`ZCML </develop/addons/components/zcml>`."
msgstr ""

#: ../develop/plone/views/viewlets.rst:252
msgid "Example Python code for viewlets.py::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:314
msgid "Then a sample page template (like.pt). You can use TAL template variable *view* to refer to your viewlet class instance::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:324
msgid "Registering a viewlet using ZCML"
msgstr ""

#: ../develop/plone/views/viewlets.rst:326
msgid "Example configuration ZCML snippets below. You usually <viewlet> to *browser/configure.zcml* folder."
msgstr ""

#: ../develop/plone/views/viewlets.rst:348
msgid "Conditionally rendering viewlets"
msgstr ""

#: ../develop/plone/views/viewlets.rst:350
msgid "There are two primary methods to render viewlets only on some pages"
msgstr ""

#: ../develop/plone/views/viewlets.rst:352
msgid "Register viewlet against some marker interface or content type class - the viewlet is rendered on this content type only. You can use :doc:`dynamic marker interfaces </develop/addons/components/interfaces>` to toggle interface on some individual pages through ZMI"
msgstr ""

#: ../develop/plone/views/viewlets.rst:357
msgid "Hard-code a condition to your viewlet in Python code."
msgstr ""

#: ../develop/plone/views/viewlets.rst:359
msgid "Below is an example of overriding a render() method to conditionally render your viewlet::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:410
msgid "Rendering viewlet by name"
msgstr ""

#: ../develop/plone/views/viewlets.rst:412
msgid "Below is a complex example how to expose viewlets without going through a viewlet manager."
msgstr ""

#: ../develop/plone/views/viewlets.rst:511
msgid "Rendering viewlets with accurate layout"
msgstr ""

#: ../develop/plone/views/viewlets.rst:513
msgid "Default viewlet managers render viewlets as HTML code string concatenation, in the order of appearance. This is unsuitable to build complex layouts."
msgstr ""

#: ../develop/plone/views/viewlets.rst:516
msgid "Below is an example which defines master viewlet *HeaderViewlet* which will place other viewlets into the manually tuned HTML markup below."
msgstr ""

#: ../develop/plone/views/viewlets.rst:519
msgid "theme/browser/header.py::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:591
msgid "theme/browser/header_items.pt"
msgstr ""

#: ../develop/plone/views/viewlets.rst:612
msgid "theme/browser/configure.zcml"
msgstr ""

#: ../develop/plone/views/viewlets.rst:686
msgid "theme/browser/templates/portal_header.pt"
msgstr ""

#: ../develop/plone/views/viewlets.rst:694
msgid "theme/browser/interfaces.py code::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:711
msgid "We need to create this common.py file so we can tell Plone to render our custom templates for these viewlets. Without this piece in place, our viewlets will render with Plone defaults."
msgstr ""

#: ../develop/plone/views/viewlets.rst:714
msgid "theme/browser/common.py code::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:733
msgid "Viewlets for one page only"
msgstr ""

#: ../develop/plone/views/viewlets.rst:735
msgid "Viewlets can be registered to one special page only using a marker interface. This allow loading a page specific CSS files."
msgstr ""

#: ../develop/plone/views/viewlets.rst:739
msgid "`How to get a different look for some pages of a plone-site <http://www.starzel.de/blog/how-to-get-a-different-look-for-some-pages-of-a-plone-site>`_"
msgstr ""

#: ../develop/plone/views/viewlets.rst:743
msgid "<head> viewlets"
msgstr ""

#: ../develop/plone/views/viewlets.rst:745
msgid "You can register custom Javascript or CSS files to HTML <head> section using viewlets."
msgstr ""

#: ../develop/plone/views/viewlets.rst:747
msgid "Below is an head.pt which will be injected in <head>. This examples shows how to dynamically generate ``<script>`` elements."
msgstr ""

#: ../develop/plone/views/viewlets.rst:755
msgid "Then you register it against viewlet manager ``plone.app.layout.viewlets.interfaces.IHtmlHead``  in ``configure.zcml``"
msgstr ""

#: ../develop/plone/views/viewlets.rst:768
msgid "viewlet.py code::"
msgstr ""

#: ../develop/plone/views/viewlets.rst:808
msgid "Finding viewlets programmatically"
msgstr ""

#: ../develop/plone/views/viewlets.rst:810
msgid "Occasionaly, you may need to get hold of your viewlets in python code, perhaps in tests.  Since the availability of a viewlet is ultimately controlled by the viewlet manager to which it has been registered, using that manager is a good way to go"
msgstr ""

#: ../develop/plone/views/viewlets.rst:852
msgid "Since it is possible to register a viewlet for a specific content type and for a browser layer, you may also need to use these elements in looking up your viewlet"
msgstr ""

#: ../develop/plone/views/viewlets.rst:892
msgid "Poking viewlet registrations programmatically"
msgstr ""

#: ../develop/plone/views/viewlets.rst:894
msgid "Below is an example how one can poke viewlets registration for a Plone site."
msgstr ""

