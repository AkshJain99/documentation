# SOME DESCRIPTIVE TITLE.
# Copyright (C) The Plone Foundation
# This file is distributed under the same license as the Plone Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Documentation ['5', '4', '3']\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-09-05 16:00+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../external/Products.TinyMCE/README.rst:1
msgid "Documentation at https://productstinymce.readthedocs.org/en/latest/"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:4
msgid "Developing TinyMCE"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:7
#: ../external/plone.api/docs/contribute/develop.rst:32
#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:2
#: ../external/plone.app.dexterity/docs/prerequisite.rst:2
#: ../external/tutorial.todoapp/docs/chapter_0.rst:13
msgid "Prerequisites"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:9
msgid "If you are on a Mac, install `apache-ant` from macports. Otherwise:"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:11
msgid "Install the Java JDK or JRE packages"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:12
msgid "Install Apache Ant"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:13
msgid "Add Apache Ant to your systems path environment variable. This is not required but makes it easier to issue commands to Ant without having to type the full path for it."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:19
msgid "First start"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:21
msgid "TinyMCE integration in Plone has two core packages:"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:23
msgid "`Products.TinyMCE`: Plone integration"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:24
msgid "`tinymce`: raw tinymce source files"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:26
msgid "Fork both packages: `https://github.com/plone/Products.TinyMCE <https://github.com/plone/Products.TinyMCE>`_ and `https://github.com/collective/tinymce <https://github.com/collective/tinymce>`_. Continue with cloning your fork of ``Products.TinyMCE`` to your local machine::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:35
msgid "Now you need to tell buildout to use your fork of ``tinymce``. Do that by opening up ``buildout.cfg`` with your favorite editor and changing the ``tinymce = ...`` line in ``[sources]`` section so it points to your fork::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:43
msgid "Cool, you are now ready to build your development environment::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:50
msgid "What follows is going into src/tinymce, running a script to build TinyMCE and copy them in `skisn` directory where Plone can use them. To do so run::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:57
msgid "Ok, ready to start Zope and apply upgrade steps to your site. Once started go to `http://localhost:8080/Plone/portal_setup/manage_upgrades` and choose ``Products.TinyMCE:TinyMCE`` as a profile. If upgrades are available, run them. If you see ``No upgrade avaiable`` you don't need to run anything."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:62
msgid "# TODO: difference using development version and developing tinymce"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:65
#: ../external/plone.app.dexterity/README.rst:95
msgid "Upgrading"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:67
msgid "When you upgrade Products.TinyMCE you need to run the upgrade steps in portal_setup in ZMI."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:70
msgid "Go to /Plone/portal_setup/manage_upgrades"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:71
msgid "Run upgrade steps for Products.TinyMCE"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:75
msgid "After each change"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:77
msgid "If you change something in *src/tinymce* you need to rerun the tinymce builder script and restart Plone"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:88
msgid "Never change files directly in skins, but rather in src/tinymce/"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:91
msgid "Debugging tinymce javascript"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:93
msgid "You can have unobfuscated TinyMCE available for your Plone for debugging in two ways"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:95
msgid "Separate files: TinyMCE uses internal script loader"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:97
msgid "Merged as tiny_mce_full.js"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:99
msgid "The former is recommended."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:102
msgid "Development build"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:104
msgid "All TinyMCE source code modules are separate in the orignal tree and must be copied for to *skins* structure::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:111
msgid "In *portal_javascripts* change *tiny_mce.js* -> *tiny_mce_dev.js*."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:113
msgid "Fix definitionlist: in *skins/tinymce/plugins/definitionlist* copy *editor_plug.js* as *editor_plugin_src.js*. Don't know why this thing is broken or what's the proper fix or why Sky is blue."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:116
msgid "Uncompressed jQuery adapter must be manually installed too. From *skins/classes/adapter/jquery* copy *adapter.js* as *skins/jquery.tinymce.js*."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:120
msgid "Full concatenated build"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:122
msgid "Edit ``upgrade_tinymce.sh`` to do a full build::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:128
msgid "This will create *skins/tinymce/tiny_mce_full.js*."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:130
msgid "Copy in jquery.tinymce.js (where?)"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:132
msgid "More info about TinyMCE build process:"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:134
msgid "`https://github.com/tinymce/tinymce <https://github.com/tinymce/tinymce>`_"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:137
msgid "Updating translations"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:139
msgid "We use two domains of translations:"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:141
msgid "tinymce.po files which contain TinyMCE core translations and which are only updated when we upgrade to a new version of TinyMCE (see below) - no touchy!"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:143
msgid "plone.tinymce.po files which contain translations for our custom code."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:145
msgid "Before editing translations"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:147
msgid "install ``i18ndude`` by running buildout using instructions above."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:149
msgid "make sure your OS has ``msgfmt`` command installed"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:151
msgid "If you change some of our templates or control panels, make sure you rebuild our plone.tinymce.pot file and re-sync all language files"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:167
msgid "Update language files for TinyMCE core"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:169
msgid "Whenever we upgrade to a new version of TinyMCE, we also need to fetch the latest language files for TinyMCE core and convert them to .po files, that Plone can use. You do that by using the scripts in ``Products/TinyMCE/utils``::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:188
msgid "Compile translation files"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:190
msgid "A one-liner to compile all translation files goes a little something like this::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:198
msgid "Translating style names"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:200
msgid "TODO: How????"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:203
msgid "Common pitfalls"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:205
msgid "If your TinyMCE is not working as excpected or is not displayed at all, first check you haven't fallen in one of the following pits."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:209
msgid "Building TinyMCE failed"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:211
msgid "Maybe the ``upgrade_tinymce.sh`` script failed halfway through its process. Stop Zope and rerun the script until you see an output like this::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:226
msgid "Use correct tinymce branch"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:228
msgid "Go to ``src/tinymce/`` and make sure you are using the latest plone branch of TinyMCE. The output should look something like this, with ``*`` indicating which branch you are on::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:238
msgid "Getting a new upstream version"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:240
msgid "Let's say current version in Products.TinyMCE is 3.4.3 and upstream is 3.4.7::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:247
msgid "Ignore whitespace makes sure different lineendings are not an issue while merging."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:249
msgid "PS: It is highly recommended to use meld for merging::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:255
msgid "Releasing TinyMCE"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:257
msgid "run ./upgrade_tinymce.sh"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:258
msgid "rebuild pot and sync (look above)"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:259
msgid "compile translation files (look above)"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:260
msgid "commit all changes in skins directory with message like \"sync with tinymce at revision x\""
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:261
msgid "increment version in setup.py"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:262
msgid "run python setup.py sdist"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:266
msgid "Javascript coding standards"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/develop.rst:268
msgid "use jslint, if you don't have it integrated with editor yet, use `http://www.jslint.com/ <http://www.jslint.com/>`_"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/index.rst:7
msgid "TinyMCE visual editor for Plone"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/index.rst:9
#: ../external/diazo/docs/index.rst:23
#: ../external/plone.app.contenttypes/docs/source/index.rst:9
msgid "Contents:"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/install.rst:2
#: ../external/collective.transmogrifier/docs/source/INSTALL.rst:2
#: ../external/diazo/docs/installation.rst:2
#: ../external/plone.app.contenttypes/README.rst:51
#: ../external/plone.app.contenttypes/docs/README.rst:51
msgid "Installation"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/install.rst:5
msgid "Latest version"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/install.rst:7
msgid "Add Products.TinyMCE in your buildout.cfg to the eggs attributes"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/install.rst:8
msgid "Run buildout and (re)start Zope"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/install.rst:9
msgid "Use the quick installer to (re)install the product"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/install.rst:11
msgid "For basic installation use the following section in your buildout::"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/install.rst:20
msgid "Development version"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/install.rst:22
msgid "Please refer to :ref:`developer-manual`, it is really important to read and understand the whole section."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/intro.rst:2
msgid "Overview"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/intro.rst:4
msgid "Adds support for TinyMCE, a platform independent web based Javascript HTML WYSIWYG editor, to Plone."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/intro.rst:8
msgid "Feedback"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/intro.rst:10
msgid "Please send any changes, improvements, or suggestions regarding this Plone product to `Four Digits <mailto:info@fourdigits.nl>`_"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/intro.rst:14
#: ../external/plone.app.contenttypes/README.rst:41
#: ../external/plone.app.contenttypes/docs/README.rst:41
#: ../external/plone.app.testing/README.rst:26
#: ../external/plone.app.testing/docs/source/README.rst:26
msgid "Compatibility"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/intro.rst:16
msgid "TinyMCE is tested on Plone 4 and 3, please submit any compatibility issues you may encounter."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:2
#: ../external/plone.app.multilingual/README.rst:58
msgid "Usage"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:5
msgid "Enable After the Deadline spelling and grammar checker"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:7
msgid "Go to the Plone control panel and click on \"TinyMCE Visual Editor\""
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:8
msgid "Click on 'Toolbar' (middle left)"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:9
msgid "Make sure that 'spellchecker' is checked."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:10
msgid "Click on 'Libraries' (top right)"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:11
msgid "Under \"Spellchecker plugin to use\", choose 'After the deadline'"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:12
msgid "Under AtD Service URL, choose your ATD server's URL. (The default is their public service)"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:14
msgid "It's however recommended that you install your own ATD spellchecker service See here for more details: `http://open.afterthedeadline.com/how-to/get-started/ <http://open.afterthedeadline.com/how-to/get-started/>`_"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:17
msgid "You should now have AtD enabled and have a spellcheck button in TinyMCE."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:20
msgid "Widget configuration"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:22
msgid "You can configure TinyMCE per-widget level for different fields."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:24
msgid "TinyMCE's `utility.getConfiguration() looks for a widget specific configuration <https://github.com/plone/Products.TinyMCE/blob/master/Products/TinyMCE/utility.py#L719>`_. The options below are provided. Please check the source code of ``getConfiguration()`` above for the full list."
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:29
msgid "filter_buttons"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:30
msgid "allow_buttons"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:31
msgid "redefine_parastyles"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:32
msgid "parastyles"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:33
msgid "rooted"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:34
msgid "toolbar_width"
msgstr ""

#: ../external/Products.TinyMCE/docs/source/usage.rst:36
msgid "Here is an example how to configure field specific TinyMCE button list with reduced formatting options::"
msgstr ""

#: ../external/ansible-playbook/README.rst:3
msgid "Plone Ansible playbook"
msgstr ""

#: ../external/ansible-playbook/README.rst:5
#: ../external/ansible-playbook/docs/index.rst:5
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:23
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:91
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:134
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:152
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:165
#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:45
#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:131
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:359
#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:11
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:14
#: ../external/plone.app.dexterity/docs/reference/fields.rst:23
#: ../external/plone.app.dexterity/docs/reference/fields.rst:91
#: ../external/plone.app.dexterity/docs/reference/fields.rst:134
#: ../external/plone.app.dexterity/docs/reference/fields.rst:152
#: ../external/plone.app.dexterity/docs/reference/fields.rst:165
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:43
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:135
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:363
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:11
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:14
msgid "Description"
msgstr ""

#: ../external/ansible-playbook/README.rst:7
#: ../external/ansible-playbook/docs/index.rst:7
msgid "Use Ansible to provision a full-stack Plone server"
msgstr ""

#: ../external/ansible-playbook/README.rst:11
#: ../external/ansible-playbook/docs/intro.rst:2
#: ../external/diazo/docs/introduction.rst:2
#: ../external/plone.api/docs/contribute/conventions.rst:16
#: ../external/plone.app.contenttypes/README.rst:20
#: ../external/plone.app.contenttypes/docs/README.rst:20
#: ../external/plone.app.dexterity/README.rst:7
#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:2
#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:2
#: ../external/plone.app.dexterity/docs/grok/intro.rst:2
#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:7
#: ../external/plone.app.dexterity/docs/intro.rst:2
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:7
#: ../external/plone.app.multilingual/README.rst:11
#: ../external/plone.app.testing/README.rst:2
#: ../external/plone.app.testing/docs/source/README.rst:2
#: ../external/plone.app.theming/docs/index.rst:10
msgid "Introduction"
msgstr ""

#: ../external/ansible-playbook/README.rst:13
msgid "Plone's Ansible Playbook can completely provision a remote server to run the full stack of Plone, including:"
msgstr ""

#: ../external/ansible-playbook/README.rst:15
#: ../external/ansible-playbook/docs/intro.rst:6
msgid "Plone in a cluster configuration;"
msgstr ""

#: ../external/ansible-playbook/README.rst:17
#: ../external/ansible-playbook/docs/intro.rst:8
msgid "Automatic starting and process control of the Plone cluster with `supervisor <http://supervisord.org>`_;"
msgstr ""

#: ../external/ansible-playbook/README.rst:19
#: ../external/ansible-playbook/docs/intro.rst:10
msgid "Load balancing of the cluster with `HAProxy <http://www.haproxy.org/>`_;"
msgstr ""

#: ../external/ansible-playbook/README.rst:21
#: ../external/ansible-playbook/docs/intro.rst:12
msgid "Caching with `Varnish <https://www.varnish-cache.org/>`_;"
msgstr ""

#: ../external/ansible-playbook/README.rst:23
msgid "`Nginx <http://wiki.nginx.org/Main>`_ as a world-facing remote proxy and URL rewrite engine;"
msgstr ""

#: ../external/ansible-playbook/README.rst:25
#: ../external/ansible-playbook/docs/intro.rst:16
msgid "An outgoing-mail-only mail server using `Postfix <http://www.postfix.org/>`_;"
msgstr ""

#: ../external/ansible-playbook/README.rst:27
msgid "Monitoring and log analysis with `munin-node <http://munin-monitoring.org/>`_ and `logwatch <http://linuxcommand.org/man_pages/logwatch8.html>`_ and `fail2ban <http://www.fail2ban.org/wiki/index.php/Main_Page>`_."
msgstr ""

#: ../external/ansible-playbook/README.rst:29
msgid "Use of a local `VirtualBox <https://www.virtualbox.org/>`_ provisioned via `vagrant <https://www.vagrantup.com/>`_ to test and model your remote server."
msgstr ""

#: ../external/ansible-playbook/README.rst:31
msgid "An ansible playbook and roles describe the desired condition of the server. The playbook is used both for initial provisioning and for updating."
msgstr ""

#: ../external/ansible-playbook/README.rst:33
msgid "See the ``docs`` subdirectory or `readthedocs <http://plone-ansible-playbook.readthedocs.org/en/latest/>`_ for complete documentation."
msgstr ""

#: ../external/ansible-playbook/README.rst:36
#: ../external/ansible-playbook/docs/intro.rst:29
msgid "TL;DR"
msgstr ""

#: ../external/ansible-playbook/README.rst:38
#: ../external/ansible-playbook/docs/intro.rst:31
msgid "Install a current version of Ansible;"
msgstr ""

#: ../external/ansible-playbook/README.rst:40
#: ../external/ansible-playbook/docs/intro.rst:33
msgid "If you wish to test locally, install Vagrant and VirtualBox;"
msgstr ""

#: ../external/ansible-playbook/README.rst:42
#: ../external/ansible-playbook/docs/intro.rst:35
msgid "Check out or download a copy of this package;"
msgstr ""

#: ../external/ansible-playbook/README.rst:44
#: ../external/ansible-playbook/docs/intro.rst:37
msgid "Run ``ansible-galaxy -p roles -r requirements.txt install`` to install required roles;"
msgstr ""

#: ../external/ansible-playbook/README.rst:46
#: ../external/ansible-playbook/docs/intro.rst:39
msgid "Copy one of the ``sample*.yml`` files to ``local-configure.yml`` and edit as needed."
msgstr ""

#: ../external/ansible-playbook/README.rst:48
#: ../external/ansible-playbook/docs/intro.rst:41
msgid "To test in a local virtual machine, run ``vagrant up`` or ``vagrant provision``;"
msgstr ""

#: ../external/ansible-playbook/README.rst:50
#: ../external/ansible-playbook/docs/intro.rst:43
msgid "To deploy, create an Ansible inventory file for the remote host (look at vbox_host.cfg for an example) and run ``ansible-playbook --ask-sudo-pass -i myhost.cfg playbook.yml``;"
msgstr ""

#: ../external/ansible-playbook/README.rst:52
#: ../external/ansible-playbook/docs/intro.rst:45
msgid "Set a real password for your Plone instance on the target server;"
msgstr ""

#: ../external/ansible-playbook/README.rst:54
#: ../external/ansible-playbook/docs/intro.rst:47
msgid "Set up appropriate firewalls."
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:2
msgid "Provisioning a Plone server"
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:5
msgid "The stack"
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:7
msgid "It's easy to `install Plone on a laptop or desktop <http://docs.plone.org/manage/installing/index.html>`_ for testing, development, theming and evaluation. Installing Plone for production, particularly for a busy or complex site is harder, and requires you learn about a variety of moving parts:"
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:9
msgid "ZEO server"
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:10
msgid "ZEO clients"
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:11
msgid "Process-control"
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:12
msgid "Load balancing"
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:13
msgid "Reverse-proxy caching"
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:14
msgid "URL rewriting and HTTPS support including certificate management"
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:16
msgid "If any of this is new to you, spend some time with the `Guide to deploying and installing Plone in production <http://docs.plone.org/manage/deploying/index.html>`_ before continuing."
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:19
msgid "What about other apps?"
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:21
msgid "This playbook assumes that your target server will be pretty much devoted to Plone's stack. If that doesn't match your plans, then feel free to pick and choose among the roles that have been created and gathered to make up this playbook. Then use them and others to create your own."
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:24
msgid "Major choices"
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:26
msgid "Your production-server requirements may vary widely. Perhaps the biggest variable is the number of logged-in users you wish to support. You may serve thousands of complex pages per second -- if they are not customized per user -- on the lightest of servers. On the other hand, if you expect to serve 100 pages per second of content that is customized per user, you'll need one or more powerful servers, and will spend serious analysis time optimizing them."
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:28
msgid "This playbook is trying to help you out at both extremes -- and in-between. To meet these varied needs requires that you make some important configuration choices. Fortunately, you're not stuck with them! If a server configuration doesn't meet your needs, scale up your server power and edit your playbook configuration."
msgstr ""

#: ../external/ansible-playbook/docs/choices.rst:30
msgid "Take a look at the ``sample*.yml`` files for configuration examples. These present the most commonly changed configuration options."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:2
msgid "Setting up the Playbook"
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:5
msgid "Clone or branch-and-clone"
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:7
msgid "Take a few moments to think about how you're going to customize the Plone Playbook. Are you likely to make substantial changes? Or simply change the option settings?"
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:9
msgid "If you expect to make substantial changes, you'll want to create your own git branch of the Plone Playbook. Then, clone your branch. That way you'll be able to push changes back to your branch. We assume that you either know how to use git, or will learn, so we won't try to document this usage."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:11
msgid "If you expect to change only option settings, then just clone the Plone Playbook to your local computer (not the target server)::"
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:16
msgid "Picking up required roles"
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:18
msgid "*Roles* are packages of Ansible settings and tasks. The Plone Playbook has separate roles for each of the major components it works with. These roles are not included with the playbook itself, but they are easy to install."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:20
msgid "To install the required roles, issue the command ``ansible-galaxy -p roles -r requirements.txt install`` from the playbook directory. This will create a roles subdirectory and fill it with the required roles."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:22
msgid "If you want to store your roles elsewhere, edit the ``ansible.cfg`` file in the playbook directory."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:26
msgid "Customizing the deployment"
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:28
msgid "There are two major strategies for customization."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:30
msgid "**If you are working on your own branch**, it's yours. You may edit ``configure.yml`` to set options."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:32
msgid "**If you cloned or downloaded the master distribution**, you will probably want to avoid changing the files from the distribution. That would make it hard to update. Instead, create a new file ``local-configure.yml`` and put your custom option specifications in it. This file will not be overridden when you pull an update from the master."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:34
msgid "For a quick start, copy one of the ``sample*.yml`` files to ``local-configure.yml``, then customize."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:36
msgid "Using the local configuration strategy, copy from ``configure.yml`` only the options you wish to change to ``local-configure.yml``. Edit them there."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:39
msgid "Customizing buildout configuration"
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:40
msgid "Plone is typically installed using `buildout <http://www.buildout.org/en/latest/>`_ to manage Python dependencies. Plone's Ansible Playbook uses operating-system package managers to manage system-level dependencies and uses buildout to manage Python-package dependencies."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:42
msgid "Buildout cofiguration files are nearly always customized to meet the need of the particular Plone installation. At a minimum, the buildout configuration details Plone add ons for the install. It is nearly always additionally customized to meet performance and integration requirements."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:44
msgid "You have two available mechanisms for doing this customization in conjunction with Ansible:"
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:46
msgid "You may rely on the buildout skeleton supplied by this playbook. It will allow you to set values for commonly changed options like the egg (Python package) list, ports and cluster client count."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:48
msgid "You may supply a git repository specification, including branch or tag, for a buildout directory skeleton. The Plone Ansible Playbook will clone this or pull updates as necessary."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:50
msgid "If you choose the git repository strategy, your buildout skeleton must, at a minimum, include ``bootstrap.py`` and ``buildout.cfg`` files. It will also commonly contain a ``src/`` subdirectory and extra configuration files. It will probably **not** contain ``bin/``, ``var/`` or ``parts/`` directories. Those will typically be excluded in your ``.gitignore`` file."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:52
msgid "If you use a buildout directory checkout, you must still specify in your Playbook variables the names and listening port numbers of any client parts you wish included in the load balancer configuration. Also specify the name of your ZEO server part if it is not ``zeoserver``."
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:55
msgid "The Configuration File"
msgstr ""

#: ../external/ansible-playbook/docs/custom_playbook.rst:57
msgid "The configuration file format is YAML with Jinja2 templating. It's well-documented at `docs.ansible.com <http://docs.ansible.com/YAMLSyntax.html>`_."
msgstr ""

#: ../external/ansible-playbook/docs/index.rst:3
msgid "Full-stack deployment with Ansible"
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:4
msgid "Plone's Ansible Playbook can completely provision a remote server to run a full-stack, production-ready Plone server, including:"
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:14
msgid "`Nginx <http://wiki.nginx.org/Main>`_ as a world-facing reverse proxy and URL rewrite engine;"
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:18
msgid "Monitoring and log analysis with `munin-node <http://munin-monitoring.org/>`_, `logwatch <http://linuxcommand.org/man_pages/logwatch8.html>`_ and `fail2ban <http://www.fail2ban.org/wiki/index.php/Main_Page>`_."
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:20
msgid "Use of a local `VirtualBox <https://www.virtualbox.org/>`_ provisioned via `Vagrant <https://www.vagrantup.com/>`_ to test and model your remote server."
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:22
msgid "An Ansible playbook and roles describe the desired condition of the server. The playbook is used both for initial provisioning and for updating."
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:26
msgid "If you want to take more control of your playbook, the `Plone server role <https://github.com/plone/ansible.plone_server>`_ is available by itself, and is listed on `Ansible Galaxy <https://galaxy.ansible.com/list#/roles/2212>`_."
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:51
msgid "Automated-server provisioning"
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:53
msgid "The goal of an automated-server provisioning system like Ansible is a completely reproducible server configuration. If you wish to achieve this goal, discipline yourself to never changing configuration on your target machines via login."
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:55
msgid "That doesn't mean you never log in to your provisioned server. It just means that when you do, you resist changing configuration options directly. Instead, change your playbook, test your changes against a test server, then use your playbook to update the target server."
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:57
msgid "We chose Ansible for our provisioning tool because:"
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:59
msgid "It requires no client component on the remote machine. Everything is done via ssh."
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:61
msgid "It's YAML configuration files use structure and syntax that will be familiar to Python programmers. YAML basically represents a Python data structure in an outline. Conditional and loop expressions are in Python. Templating via Jinja2 is simple and clean."
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:63
msgid "`Ansible's documentation <http://docs.ansible.com>`_ is excellent and complete."
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:65
msgid "Ansible is easily extended by roles. Many basic roles are available on `Ansible Galaxy <http://galaxy.ansible.com>`_."
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:69
msgid "If you need to log in"
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:71
msgid "You should not need to. But if you do, you should know:"
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:73
msgid "The Plone zeoserver and zeoclient processes should be run under the plone_daemon login; they will normally be controlled via supervisor;"
msgstr ""

#: ../external/ansible-playbook/docs/intro.rst:75
msgid "Run buildout as plone_buildout."
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:2
msgid "Live host deployment"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:5
msgid "Creating a host file"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:7
msgid "You'll need to tell Ansible how to connect to your host. There are multiple ways to do this. The easiest for our purposes is to create a *manifest* file."
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:9
msgid "Create a file with a name like ``myhost.cfg`` that follows the pattern:"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:15
msgid "You may leave off the ``ansible_ssh_host`` setting if the hostname is real. However, when doing early provisioning, it's often not available. ``ansible_ssh_port`` is only required if you want to use a non-standard ssh port. ``ansible_ssh_user`` should be the login id on the remote machine. That user must have sudo rights."
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:18
msgid "Running your playbook"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:24
msgid "The ``--ask-sudo-pass`` option instructs Ansible to ask for your user password when it uses sudo for provisioning. It's not required if the remote user has password-less sudo rights."
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:27
msgid "Updating"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:29
msgid "Using tags for quick, partial updates."
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:31
msgid "The following tags are set up in playbook.yml."
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:33
msgid "plone"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:34
msgid "haproxy"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:35
msgid "varnish"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:36
msgid "postfix"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:37
msgid "logwatch"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:38
msgid "munin"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:39
#: ../external/ansible-playbook/docs/system.rst:21
msgid "motd"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:40
msgid "nginx"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:42
msgid "When you use one of these tags while running your playbook, only the bare minimum setup and the module named will be updated."
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:44
msgid "Apply a tag using the `--tags` option. Example: `--tags=\"nginx\"`"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:48
msgid "Firewall"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:50
msgid "The main playbook, ``playbook.yml``, does **not** configure your firewall."
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:52
msgid "A separate playbook, ``firewall.yml`` sets up a basic firewall that closes all ports except ssh, http and https. The munin-node port is also opened to your monitoring server(s)."
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:56
msgid "To reach other ports, use SSH tunnelling. In the default setup, you will have to use a tunnel and connect to the load-balancer port in order to get access to the Zope root. (The default proxy-cache setup blocks http basic authentication.)"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:60
msgid "Passwords"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:62
msgid "You must set the ``plone_initial_password`` variable to the desired password for the Zope ``admin`` user. Use this id only for initial Plone login, then create users within Plone."
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:65
msgid "Hotfixes, Updates, Upgrades"
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:69
msgid "If you are administering an Internet-accessible Plone install, you **must** subscribe to the `Plone-Announce mailing list <https://lists.sourceforge.net/lists/listinfo/plone-announce>`_ to receive vital security and version update announcements. Expect to apply periodic hotfixes to maintain your site."
msgstr ""

#: ../external/ansible-playbook/docs/live.rst:71
msgid "This is the **minimum** responsibility of a site administrator. Ideally you should also participate in the Plone community and read other Plone news."
msgstr ""

#: ../external/ansible-playbook/docs/load_balancer.rst:2
msgid "Load-balancer options"
msgstr ""

#: ../external/ansible-playbook/docs/load_balancer.rst:6
msgid "install_loadbalancer"
msgstr ""

#: ../external/ansible-playbook/docs/load_balancer.rst:12
msgid "Do you want to use a load balancer? Defaults to ``yes``."
msgstr ""

#: ../external/ansible-playbook/docs/load_balancer.rst:16
msgid "If you decide not to use a load balancer, you will need to make sure that the ``loadbalancer_port`` setting points to your main ZEO client if you are using a proxy cache. If you are not using a proxy_cache, you must make sure that ``proxycache_port`` points to the main ZEO client."
msgstr ""

#: ../external/ansible-playbook/docs/load_balancer.rst:18
msgid "Defaults to ``yes``."
msgstr ""

#: ../external/ansible-playbook/docs/load_balancer.rst:22
msgid "loadbalancer_port"
msgstr ""

#: ../external/ansible-playbook/docs/load_balancer.rst:28
msgid "The front-end port for the load balancer. Defaults to ``8080``."
msgstr ""

#: ../external/ansible-playbook/docs/load_balancer.rst:32
msgid "The haproxy stats page will be at ``http://localhost:1080/admin``. The administrative password is disabled on the assumption that the port will be firewalled and you will use an ssh tunnel to connect."
msgstr ""

#: ../external/ansible-playbook/docs/mailserver.rst:2
msgid "Mail-server options"
msgstr ""

#: ../external/ansible-playbook/docs/mailserver.rst:5
msgid "install_mailserver"
msgstr ""

#: ../external/ansible-playbook/docs/mailserver.rst:11
msgid "Do you want to install the Postfix mail server in a send-only configuration. Default is ``yes``."
msgstr ""

#: ../external/ansible-playbook/docs/mailserver.rst:15
msgid "If you choose not to install a mail server via this playbook, this becomes your responsibility."
msgstr ""

#: ../external/ansible-playbook/docs/mailserver.rst:18
msgid "Relaying"
msgstr ""

#: ../external/ansible-playbook/docs/mailserver.rst:27
msgid "Sets up a mail relay. This may be required if you're using a service like Google Compute Engine that doesn't allow outgoing connections to external mailservers. Defaults to none."
msgstr ""

#: ../external/ansible-playbook/docs/monitoring.rst:2
msgid "Monitoring options"
msgstr ""

#: ../external/ansible-playbook/docs/monitoring.rst:5
msgid "install_muninnode"
msgstr ""

#: ../external/ansible-playbook/docs/monitoring.rst:11
msgid "Do you want to install munin-node? Defaults to `yes`."
msgstr ""

#: ../external/ansible-playbook/docs/monitoring.rst:19
msgid "What IP address are allowed to query your munin node? Specify a list of regular expressions."
msgstr ""

#: ../external/ansible-playbook/docs/monitoring.rst:21
msgid "Defaults to ``^127\\.0\\.0\\.1$``"
msgstr ""

#: ../external/ansible-playbook/docs/monitoring.rst:25
msgid "For this to be useful, you must set up a munin monitor machine and cause it to query your node."
msgstr ""

#: ../external/ansible-playbook/docs/monitoring.rst:29
msgid "install_logwatch"
msgstr ""

#: ../external/ansible-playbook/docs/monitoring.rst:35
msgid "If turned on, this will cause a daily summary of log file information to be sent to the admin email address. Defaults to `yes`"
msgstr ""

#: ../external/ansible-playbook/docs/monitoring.rst:39
msgid "install_fail2ban"
msgstr ""

#: ../external/ansible-playbook/docs/monitoring.rst:45
msgid "Fail2ban scans log files and bans IPs that show malicious signs -- too many password failures, seeking for exploits, etc. Defaults to ``yes``."
msgstr ""

#: ../external/ansible-playbook/docs/monitoring.rst:49
msgid "fail2ban is only useful with an iptables-style firewall."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:2
msgid "Plone options"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:5
msgid "plone_initial_password"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:11
msgid "Initial password of the Zope ``admin`` user. The initial password is used when the database is first created."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:13
msgid "Defaults to ``\"\"`` -- which will fail."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:17
msgid "plone_target_path"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:23
#: ../external/ansible-playbook/docs/plone.rst:35
msgid "Sets the Plone installation directory."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:25
msgid "Defaults to ``/usr/local/plone-{{ plone_major_version }}``"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:29
msgid "plone_var_path"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:37
msgid "Defaults to ``/var/local/plone-{{ plone_major_version }}``"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:41
msgid "plone_buildout_git_repo"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:48
msgid "``buildout_git_repo`` defaults to none (uses built-in buildout)."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:50
msgid "``buildout_git_version`` is the tag or branch. Defaults to ``master``."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:54
msgid "If you use your own buildout from a repository, you still need to specify your client count so that the playbook can 1) set up the supervisor specifications to start/stop and monitor clients, and 2) set up the load balancer."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:56
msgid "Client part names must follow the pattern `client#` where # is a number (1,2,3 ...). Client ports must be numbered sequentially beginning with 8081 or the value you set for plone_client_base_port. The zeoserver part must be named `zeoserver` and be at 8100 or the value you set for plone_zeo_port."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:58
msgid "If you use your own buildout, all Plone settings except ``plone_client_count``, ``plone_client_base_port``, and ``plone_client_max_memory`` are ignored."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:61
msgid "plone_major_version"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:68
msgid "plone_version"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:74
msgid "Which Plone version do you wish to install? This defaults to the current stable version at the time you copy or clone the playbook."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:77
msgid "plone_client_count"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:83
msgid "How many ZEO clients do you want to run?"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:85
msgid "Defaults to ``2``"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:89
msgid "The provided buildout always creates an extra client ``client_reserve`` that is not hooked into supervisor or the load balancer. Use it for debugging, running scripts and quick testing. If you need to remotely connect to the reserve client, you'll typically do that via an ssh tunnel."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:95
msgid "plone_zodb_cache_size"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:101
msgid "How many objects do you wish to keep in the ZODB cache."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:103
msgid "Defaults to ``30000``"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:107
msgid "The default configuration is *very* conservative to allow Plone to run in a minimal memory server. You will want to increase this if you have more than minimal memory."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:111
msgid "plone_zserver_threads"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:117
msgid "How many threads should run per server?"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:119
msgid "Defaults to ``1``"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:123
msgid "plone_client_max_memory"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:129
msgid "A size (suffix-multiplied using “KB”, “MB” or “GB”) that should be considered “too much”. If any Zope/Plone process exceeds this maximum, it will be restarted. Set to ``0`` for no memory monitoring."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:131
msgid "Defaults to ``0`` (turned off)"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:135
msgid "This setting is used in configuration of the ``memmon`` monitor in supervisor: `superlance <http://superlance.readthedocs.org/en/latest>`_ plugin."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:139
msgid "plone_additional_eggs"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:148
msgid "List additional Python packages (beyond Plone and the Python Imaging Library) that you want available in the Python package environment."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:150
msgid "The default list is empty."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:154
msgid "Plone hotfixes are typically added as additional eggs."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:158
msgid "plone_sources"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:166
msgid "Source specifications, a list of strings in [mr.developer](https://pypi.python.org/pypi/mr.developer) format. If you specify plone_sources, the mr.developer extension will be used with auto-checkout set to \"*\"."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:170
msgid "plone_zcml_slugs"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:177
msgid "List additional ZCML slugs that may be required by older packages that don't implement auto-discovery. The default list is empty. This is rarely needed."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:181
msgid "plone_additional_versions"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:190
msgid "The version pins you specify here will be added to the ``[versions]`` section of your buildout. The default list is empty."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:194
msgid "plone_zeo_port"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:200
msgid "The port number for the Zope database server. Defaults to ``8100``."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:204
msgid "plone_client_base_port"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:210
msgid "The port number for your first Zope client. Subsequent client ports will be added in increments of 1. Defaults to ``8081``."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:213
msgid "plone_environment_vars"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:221
msgid "A list of environment variables you wish to set for running Plone instances."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:223
#: ../external/ansible-playbook/docs/system.rst:31
msgid "Defaults to:"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:231
msgid "plone_client_extras"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:238
msgid "Extra text to add to all the client buildout parts. Defaults to \"\"."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:242
msgid "plone_client1_extras"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:250
msgid "Extra text to add to only the first client buildout part. Defaults to \"\"."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:254
msgid "plone_autorun_buildout"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:260
msgid "Do you wish to automatically run buildout if any of the Plone settings change? Defaults to ``yes``."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:264
msgid "plone_buildout_cache_url"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:270
msgid "The URL of a buildout egg cache. Defaults to the one for the current stable version of Plone."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:274
msgid "plone_buildout_cache_file"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:280
msgid "The full local (host) filepath of a buildout egg cache. Defaults to none. Should not be used at the same time as plone_buildout_cache_url."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:284
msgid "Cron jobs"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:287
msgid "plone_pack_at"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:296
msgid "When do you wish to run the ZEO pack operation? Specify minute, hour and weekday specifications for a valid *cron* time. See ``CRONTAB(5)``. Defaults to 1:30 Sunday morning. Set to ``no`` to avoid creation of a cron job."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:300
msgid "plone_keep_days"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:306
msgid "How many days of undo information do you wish to keep when you pack the database. Defaults to ``3``."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:310
msgid "plone_backup_at"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:319
msgid "When do you wish to run the backup operation?  Specify minute, hour and weekday specifications for a valid *cron* time. See ``CRONTAB(5)``. Defaults to 2:30 every morning.  Set to ``no`` to avoid creation of a cron job."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:323
msgid "plone_keep_backups"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:329
msgid "How many generations of full backups do you wish to keep? Defaults to ``2``."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:333
msgid "Daily backups are typically partial: they cover the differences between the current state and the state at the last full backup. However, backups after a pack operation are complete (full) backups -- not incremental ones. Thus, keeping two full backups means that you have backups for ``plone_keep_backups * days_between_packs`` days. See the `collective.recipe.backup documentation <https://pypi.python.org/pypi/collective.recipe.backup>`_."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:337
msgid "plone_keep_blob_days"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:343
msgid "How many days of blob backups do you wish to keep? This is typically set to `keep_backups * days_between_packs`` days. Default is ``14``."
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:346
msgid "plone_backup_path"
msgstr ""

#: ../external/ansible-playbook/docs/plone.rst:352
msgid "Where do you want to put your backups? The destination must be writable by the ``plone_daemon`` user. Defaults to ``./var`` inside your buildout directory. Subdirectories are created for blob and filestorage backups."
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:2
msgid "Requirements"
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:5
msgid "Target server"
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:8
msgid "Supported platforms"
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:10
msgid "At the moment, we're only supporting Debian/Ubuntu environments for the target server. This is simply because the expertise of the initial authors is with the .deb world. Adding RPM environments should not be difficult, but we need help. Your pull requests are welcome."
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:12
msgid "At the moment, we are testing with Ubuntu 14 (Trusty) LTS and with Debian wheezy."
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:15
msgid "SSH access; sudo"
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:17
msgid "Beyond the basic platform, the only requirements are that you have ``ssh`` access to the remote server with full ``sudo`` rights."
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:19
msgid "For local testing via virtual machine, any machine that supports VirtualBox/Vagrant should be adequate."
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:22
msgid "Local setup"
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:24
msgid "On your local machine (the one from which you're controlling the remote server), you will need a recent copy of Ansible. `docs.ansible.com <http://docs.ansible.com/intro_installation.html>`_ has thorough installation instructions. We will be testing with release versions of Ansible, so don't feel a need to track Ansible development."
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:26
msgid "Ansible's only dependency is a recent version of Python 2.6 or later."
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:28
msgid "You will also nearly certainly want git, both for cloning the playbook and for version-controlling your own work."
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:30
msgid "To clone the master branch of the playbook, use the command:"
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:32
msgid "git clone https://github.com/plone/ansible-playbook.git"
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:35
msgid "Ansible role requirements"
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:37
msgid "We have a few Ansible role dependencies which you may fulfill via Ansible Galaxy with the command:"
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:39
msgid "ansible-galaxy -r requirements.txt -p roles install"
msgstr ""

#: ../external/ansible-playbook/docs/preparing.rst:41
msgid "This should be executed in your playbook directory. Downloaded requirements will be dropped into the ``roles`` directory there."
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:2
msgid "Caching proxy options"
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:6
msgid "install_proxycache"
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:12
msgid "Do you want to install the Varnish reverse-proxy cache? Default is ``yes``."
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:16
msgid "If you decide not to use a proxy cache, you will need to make sure that the ``proxycache_port`` setting points to your load balancer front end. If you are not using a load balancer, you must make sure that ``proxycache_port`` points to the main ZEO client."
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:20
msgid "proxycache_port"
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:26
msgid "The front-end address for the proxy cache. Defaults to ``6081``."
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:30
msgid "We assume the varnish cache and admin ports are firewalled and that you will administer the cache via ssh."
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:34
msgid "proxycache_size"
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:40
msgid "Sets the Varnish cache size. Default is ``256m`` -- 256 megabytes."
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:44
msgid "proxycache_method"
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:50
msgid "Use this to specify Varnish's cache mechanism. Default is ``malloc``."
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:53
msgid "Cache controls"
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:55
msgid "These settings fine-tune the cache rules."
msgstr ""

#: ../external/ansible-playbook/docs/proxy_cache.rst:72
msgid "Defaults are as indicated in the example. Don't change these without giving it some thought."
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:2
msgid "Configuration options"
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:6
msgid "System options"
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:9
msgid "admin_email"
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:15
msgid "It is important that you update this setting. The admin_email address will receive system mail, some of which is vitally important."
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:17
msgid "If you don't set this variable, the playbook won't run."
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:29
msgid "Sets the server's message of the day, which is displayed on login."
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:41
msgid "auto_upgrades"
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:47
msgid "Should the operating system's auto-update feature be turned on. You will still need to monitor for updates that cannot be automatically applied and for cases where a system restart is required after an update."
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:49
msgid "Defaults to `yes`"
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:53
msgid "Turning on automatic updates does not relieve you of the duty of actively administering the server. Many updates, including vital security updates, will not happen or take effect without direct action."
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:57
msgid "additional_packages"
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:64
msgid "List any additional operating system packages you wish to install. Default is empty."
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:68
msgid "The operating system packages necessary for the components in this kit are automatically handled when a part is installed."
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:72
msgid "timezone"
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:78
msgid "Specify the timezone that should be set on the server.  Default is \"UTC\\n\"."
msgstr ""

#: ../external/ansible-playbook/docs/system.rst:82
msgid "The timezone string must be terminated with a newline character (\\n)."
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:2
msgid "Testing with Vagrant"
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:4
msgid "This is really easy. Vagrant includes an Ansible provisioner and will run the playbook when you first run ``vagrant up`` and again when you run ``vagrant provision``."
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:6
msgid "While Vagrant knows about Ansible, and the playbook specification is in your VagrantFile, you still must have Ansible itself available."
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:8
msgid "If you've installed Ansible globally, no other steps are necessary. If you wish to use a virtualenv to contain your Ansible installation, it's a little more work to get going:"
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:21
msgid "Common errors"
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:23
msgid "ssh stores host keys and checks them every time you try to reconnect to the same address. Since your Vagrant installs are always at the same host and port (127.0.0.1:2222), you will receive `SSH Error: Host key verification failed while connecting to 127.0.0.1:2222` error messages each time you install and connect with a new virtual box."
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:26
msgid "To resolve these errors, use the command::"
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:30
msgid "ssh-keygen -f \"~/.ssh/known_hosts\" -R [127.0.0.1]:2222"
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:32
msgid "to remove the old host key, then try again."
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:35
msgid "Testing"
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:37
msgid "Vagrant maps host ports into the guest VirtualBox OS. The standard mapping takes host port 2222 to the guest's SSH port, 22."
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:39
msgid "The Vagrantfile included with this kit maps several more ports. The general rule is to map each guest port to a host port 1000 higher::"
msgstr ""

#: ../external/ansible-playbook/docs/vagrant.rst:47
msgid "Note that when you use host port 1080 to connect to guest host 80, the virtual hosting will not work correctly. You'll get the homepage, but links -- including those to stylesheets and JS resources, will be wrong. So, you can't really test virtual host rewriting via Vagrant."
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:2
msgid "Web-server options"
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:5
msgid "install_webserver"
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:11
msgid "Do you want to install Nginx? Defaults to ``yes``."
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:15
msgid "If you decide not to install the webserver -- which acts as a reverse proxy -- you are on your own for making sure that Plone is accessible at a well-known port."
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:18
msgid "Virtual hosting setup"
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:37
msgid "Connects host names to paths in the ZODB. The ``address`` and ``port`` are used to construct the ``listen`` directive. If no address is specified, ``*`` will be used. If no port is specified, 80 will be used for http or 443 for https. If no protocol is specified, ``http`` will be used."
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:39
msgid "Default value:"
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:50
msgid "If you are setting up an https server, you must supply certificate and key files. The files will be copied from your local machine (the one containing the playbook) to the target server. Your key file must not be encrypted or you will not be able to start the web server automatically."
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:54
msgid "Make sure that your source key file is not placed in a public location."
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:58
msgid "Redirections, etc."
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:60
msgid "If you do not specify a zodb_path, the webserver role will not automatically create a location stanza with a rewrite and proxy_pass directives."
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:62
msgid "If you specify ``extra``, the value will be copied into the server stanza."
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:64
msgid "Let's take a look at a common use for these options:"
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:72
msgid "This is a *redirect to https* setting."
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:76
msgid "Status and monitoring"
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:78
msgid "If you want to monitor your web server, make sure you have a \"localhost\" hostname or \"default\" alias with \"http\" protocol. This virtual server will have the status check set up on localhost."
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:82
msgid "You should know"
msgstr ""

#: ../external/ansible-playbook/docs/webserver.rst:84
msgid "When you do specify a zodb_path, so that the webserver role knows that you're working with Plone, it will block URLs containing \"/manage\\_\" and will block http basic authentication. This means that it will be difficult to use the Zope Management Interface via the web server reverse proxy. Instead, use an SSH tunnel to the load balancer. Remember, this is a production installation. It *should* be hard to use the ZMI via the public interface."
msgstr ""

#: ../external/collective.transmogrifier/README.rst:2
#: ../external/collective.transmogrifier/docs/README.rst:2
#: ../external/collective.transmogrifier/docs/README.rst:2
msgid "Transmogrifier"
msgstr ""

#: ../external/collective.transmogrifier/README.rst:4
#: ../external/collective.transmogrifier/docs/README.rst:4
#: ../external/collective.transmogrifier/docs/README.rst:4
msgid "Transmogrifier provides support for building pipelines that turn one thing into another. Specifically, transmogrifier pipelines are used to convert and import legacy content into a Plone site. It provides the tools to construct pipelines from multiple sections, where each section processes the data flowing through the pipe."
msgstr ""

#: ../external/collective.transmogrifier/README.rst:10
#: ../external/collective.transmogrifier/docs/README.rst:10
#: ../external/collective.transmogrifier/docs/README.rst:10
msgid "A \"transmogrifier pipeline\" refers to a description of a set of pipe sections, slotted together in a set order. The stated goal is for these sections to transform data and ultimately add content to a Plone site based on this data. Sections deal with tasks such as sourcing the data (from textfiles, databases, etc.) and characterset conversion, through to determining portal type, location and workflow state."
msgstr ""

#: ../external/collective.transmogrifier/README.rst:17
#: ../external/collective.transmogrifier/docs/README.rst:17
#: ../external/collective.transmogrifier/docs/README.rst:17
msgid "Note that a transmogrifier pipeline can be used to process any number of things, and is not specific to Plone content import. However, it's original intent is to provide a pluggable way to import legacy content."
msgstr ""

#: ../external/collective.transmogrifier/README.rst:22
#: ../external/collective.transmogrifier/docs/README.rst:22
#: ../external/collective.transmogrifier/docs/README.rst:22
msgid "Credits"
msgstr ""

#: ../external/collective.transmogrifier/README.rst:25
#: ../external/collective.transmogrifier/docs/README.rst:25
#: ../external/collective.transmogrifier/docs/README.rst:25
msgid "Development sponsored by"
msgstr ""

#: ../external/collective.transmogrifier/README.rst:25
#: ../external/collective.transmogrifier/docs/README.rst:25
#: ../external/collective.transmogrifier/docs/README.rst:25
msgid "Elkjøp Nordic AS"
msgstr ""

#: ../external/collective.transmogrifier/README.rst:28
#: ../external/collective.transmogrifier/docs/README.rst:28
#: ../external/collective.transmogrifier/docs/README.rst:28
msgid "Design and development"
msgstr ""

#: ../external/collective.transmogrifier/README.rst:28
#: ../external/collective.transmogrifier/docs/README.rst:28
#: ../external/collective.transmogrifier/docs/README.rst:28
msgid "`Martijn Pieters`_ at Jarn_"
msgstr ""

#: ../external/collective.transmogrifier/README.rst:33
#: ../external/collective.transmogrifier/docs/README.rst:33
#: ../external/collective.transmogrifier/docs/README.rst:33
msgid "Project name"
msgstr ""

#: ../external/collective.transmogrifier/README.rst:31
#: ../external/collective.transmogrifier/docs/README.rst:31
#: ../external/collective.transmogrifier/docs/README.rst:31
msgid "A transmogrifier_ is fictional device used for transforming one object into another object. The term was coined by Bill Waterson of Calvin and Hobbes fame."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/INSTALL.rst:4
msgid "When you're reading this you have probably already run ``easy_install collective.transmogrifier``. Find out how to install setuptools (and EasyInstall) here: http://peak.telecommunity.com/DevCenter/EasyInstall"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/INSTALL.rst:9
msgid "Create a file called ``collective.transmogrifier-configure.zcml`` in the ``/path/to/instance/etc/package-includes`` directory.  The file should only contain this::"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/INSTALL.rst:16
msgid "Alternatively, if you are using zc.buildout and the plone.recipe.zope2instance recipe to manage your project, you can do this:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/INSTALL.rst:19
msgid "Add ``collective.transmogrifier`` to the list of eggs to install, e.g.::"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/INSTALL.rst:27
msgid "Tell the plone.recipe.zope2instance recipe to install a ZCML slug::"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/INSTALL.rst:35
msgid "Re-run buildout, e.g. with::"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/INSTALL.rst:39
msgid "You can skip the ZCML slug if you are going to explicitly include the package from another package's configure.zcml file."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/genericsetup.rst:2
msgid "GenericSetup import integration"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/genericsetup.rst:4
msgid "To ease running a transmogrifier pipeline during site configuration, a generic import step for GenericSetup is included."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/genericsetup.rst:7
msgid "The import step looks for a file named ``transmogrifier.txt`` and reads pipeline configuration names from this file, one name per line. Empty lines and lines starting with a # (hash mark) are skipped. These pipelines are then executed in the same order as they are found in the file."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/genericsetup.rst:12
msgid "This means that if you want to run one or more pipelines as part of a GenericSetup profile, all you have to do is name these pipelines in a file named ``transmogrifier.txt`` in your profile directory."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/genericsetup.rst:16
msgid "The GenericSetup import context is stored on the transmogrifier as an annotation::"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/genericsetup.rst:25
msgid "This will of course prevent your code from running outside the generic setup import context."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/index.rst:7
msgid "collective.transmogrifier documentation"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/index.rst:12
#: ../external/diazo/docs/recipes/adding-an-attribute/index.rst:23
#: ../external/diazo/docs/recipes/create-list-from-anchors/index.rst:20
#: ../external/diazo/docs/recipes/drop-empty-tags/index.rst:20
#: ../external/diazo/docs/recipes/insert-wrapping-element/index.rst:20
#: ../external/diazo/docs/recipes/modifying-an-attribute/index.rst:19
#: ../external/diazo/docs/recipes/modifying-text/index.rst:19
#: ../external/plone.api/docs/content.rst:13
msgid "Content"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/index.rst:24
#: ../external/plone.api/docs/index.rst:72
#: ../external/plone.app.contenttypes/docs/source/index.rst:17
#: ../external/plone.app.testing/docs/source/index.rst:19
#: ../external/tutorial.todoapp/docs/index.rst:43
msgid "Indices and tables"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/index.rst:26
#: ../external/plone.api/docs/index.rst:74
#: ../external/plone.app.contenttypes/docs/source/index.rst:19
#: ../external/plone.app.testing/docs/source/index.rst:21
#: ../external/tutorial.todoapp/docs/index.rst:45
msgid ":ref:`genindex`"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/index.rst:27
#: ../external/plone.api/docs/index.rst:75
#: ../external/plone.app.contenttypes/docs/source/index.rst:20
#: ../external/plone.app.testing/docs/source/index.rst:22
#: ../external/tutorial.todoapp/docs/index.rst:46
msgid ":ref:`modindex`"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/index.rst:28
#: ../external/plone.api/docs/index.rst:76
#: ../external/plone.app.contenttypes/docs/source/index.rst:21
#: ../external/plone.app.testing/docs/source/index.rst:23
#: ../external/tutorial.todoapp/docs/index.rst:47
msgid ":ref:`search`"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections.rst:2
msgid "Default section blueprints"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/breakpoint.rst:2
msgid "Breakpoint section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/breakpoint.rst:4
msgid "A breakpoint section will stop and enter pdb when a specific condition is met. This is useful for debugging, as you can add a brekpoint section just before a section that gets an error on a specific item."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/breakpoint.rst:8
msgid "The alternative is to add a conditional breakpoint in the section that fails, but that can require findning the code in some egg somewhere, adding the breakpoint and restarting the server. This speeds up the process."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/breakpoint.rst:35
msgid "Since pdb requires input, for this test we replace stdin with something giving some input (just a continue cammand)."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/breakpoint.rst:52
msgid "And finally we reset the stdin:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:2
msgid "Codec section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:4
msgid "A codec pipeline section lets you alter the character encoding of item values, allowing you to recode text from and to unicode and any of the codecs supported by python. The codec section blueprint name is ``collective.transmogrifier.sections.codec``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:9
msgid "What values to recode is determined by the ``keys`` option, which takes a set of newline-separated key names. If a key name starts with ``re:`` or ``regexp:`` it is treated as a regular expression instead."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:13
msgid "The optional ``from`` and ``to`` options determine what codecs values are recoded from and to. Both these values default to ``unicode``, meaning no translation. If either option is set to ``default``, the current default encoding of the Plone site is used."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:18
msgid "To deal with possible encoding errors, you can set the error handler of both the ``from`` and ``to`` codecs separately with the ``from-error-handler`` and ``to-error-handler`` options, respectively. These default to ``strict``, but can be set to any error handler supported by python, including ``replace`` and ``ignore``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:24
msgid "Also optional is the ``condition`` option, which lets you specify a TALES expression that when evaluating to False will prevent any en- or decoding from happening. The condition is evaluated for every matched key."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:74
#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:41
#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:126
msgid "The ``condition`` expression has access to the following:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:77
#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:44
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:249
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:72
#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:129
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:85
#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:106
#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:15
msgid "``item``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:77
#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:44
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:72
#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:129
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:85
#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:106
msgid "the current pipeline item"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:78
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:239
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:255
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:77
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:86
msgid "``key``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:78
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:86
msgid "the name of the matched key"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:79
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:87
msgid "``match``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:79
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:87
msgid "if the key was matched by a regular expression, the match object, otherwise boolean True"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:81
#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:45
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:240
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:251
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:73
#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:130
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:89
#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:107
#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:18
msgid "``transmogrifier``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:81
#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:45
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:240
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:251
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:73
#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:130
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:89
#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:107
#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:18
msgid "the transmogrifier"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:82
#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:46
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:241
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:252
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:74
#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:131
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:90
#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:108
#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:19
msgid "``name``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:82
#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:46
#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:131
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:90
#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:108
msgid "the name of the splitter section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:83
#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:47
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:242
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:253
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:75
#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:132
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:91
#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:111
#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:20
msgid "``options``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:83
#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:47
#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:132
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:91
#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:111
msgid "the splitter options"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:84
#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:48
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:243
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:254
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:76
#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:133
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:92
#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:112
#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:21
msgid "``modules``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/codec.rst:84
#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:48
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:243
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:254
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:76
#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:133
#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:92
#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:112
#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:21
msgid "sys.modules"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:2
msgid "Condition section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:4
msgid "A condition pipeline section lets you selectively discard items from the pipeline. The condition section blueprint name is ``collective.transmogrifier.sections.condition``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:8
msgid "A condition section takes a ``condition`` TALES expression. When this expression when matched against the current item is True, the item is yielded to the next pipe section, otherwise it is not:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/condition.rst:51
msgid "As condition sections skip items in the pipeline, they should not be used inside a splitter section!"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/constructor.rst:2
msgid "Constructor section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/constructor.rst:4
msgid "A constructor pipeline section is the heart of a transmogrifier content import pipeline. It constructs Plone content based on the items it processes. The constructor section blueprint name is ``collective.transmogrifier.sections.constructor``. Constructor sections do only one thing, they construct *new* content. No schema changes are made. Also, constructors create content without restrictions, no security checks or containment constraints are checked."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/constructor.rst:12
msgid "Construction needs 2 pieces of information: the path to the item (including the id for the new item itself) and it's portal type. To determine both of these, the constructor section inspects each item and looks for 2 keys, as described below. Any item missing any of these 2 pieces will be skipped. Similarly, items with a path for a container or type that doesn't exist will be skipped as well; make sure that these containers are constructed beforehand. Because a constructor section will only construct new objects, if an object with the same path already exists, the item will also be skipped."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/constructor.rst:21
msgid "For the object path, it'll look (in order) for ``_collective.transmogrifier.sections.constructor_[sectionname]_path``, ``_collective.transmogrifier.sections.constructor_path``, ``_[sectionname]_path``, and ``_path``, where ``[sectionname]`` is replaced with the name given to the current section. This allows you to target the right section precisely if needed. Alternatively, you can specify what key to use for the path by specifying the ``path-key`` option, which should be a list of keys to try (one key per line, use a ``re:`` or ``regexp:`` prefix to specify regular expressions)."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/constructor.rst:31
msgid "For the portal type, use the ``type-key`` option to specify a set of keys just like ``path-key``. If omitted, the constructor will look for ``_collective.transmogrifier.sections.constructor_[sectionname]_type``, ``_collective.transmogrifier.sections.constructor_type``, ``_[sectionname]_type``, ``_type``, ``portal_type`` and ``Type`` (in that order, with ``[sectionname]`` replaced)."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/constructor.rst:38
msgid "Unicode paths will be encoded to ASCII. Using the path and type, a new object will be constructed using invokeFactory; nothing else is done. Paths are always interpreted as relative to the context object, with the last path segment being the id of the object to create."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/constructor.rst:43
msgid "By default the constructor section will log a warning if the container for the item is missing and the item can't be constructed. However if you add a required = True key to the constructor section it will instead raise a KeyError."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:2
msgid "CSV source section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:4
msgid "A CSV source pipeline section lets you create pipeline items from CSV files. The CSV source section blueprint name is ``collective.transmogrifier.sections.csvsource``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:8
msgid "A CSV source section will load the CSV file named in the ``filename`` option or the CSV file named in an item key using the ``key`` option, and will yield an item for each line in the CSV file. It'll use the first line of the CSV file to determine what keys to use, or you can specify a ``fieldnames`` option to specify the key names."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:14
msgid "The ``filename`` option may be an absolute path, or a package reference, e.g. ``my.package:foo/bar.csv``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:17
msgid "By default the CSV file is assumed to use the Excel CSV dialect, but you can specify any dialect supported by the python csv module if you specify it with the ``dialect`` option.  You can also specify `fmtparams`_ using options that start with ``fmtparam-``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:49
msgid "The CSV file column field names can also be specified."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:62
msgid "Here is the same example, loading a file from a package instead:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:92
msgid "We can also load a file from a GS import context:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:142
msgid "Import contexts can be chunked, and that's okay:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:166
msgid "Attempting to load a nonexistant file won't do anything:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:179
msgid "Not having an import context around will also find nothing:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:186
msgid "The file can also be taken from a source item's key. A key can also be specified for rows that have more values than the fieldnames."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:236
msgid "The ``fmtparam-`` expressions have access to the following:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:239
msgid "the `fmtparam`_ attribute"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:241
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:252
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:74
#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:19
msgid "the name of the inserter section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:242
#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:253
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:75
#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:20
msgid "the inserter options"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:246
msgid "The ``row-key`` and ``row-value`` expressions have access to the following:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:249
msgid "the pipeline item to be yielded from this CSV row"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:250
#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:16
msgid "``source_item``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:250
msgid "the pipeline item the CSV filename was taken from"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/csvsource.rst:255
#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:77
msgid "(only for the value and condition expressions) the key being inserted"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/dirwalker.rst:2
msgid "Directory Walker section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/dirwalker.rst:4
msgid "An directory walker source section yields a hierarchy of items with paths from a filesystem using `os.walk()`_."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:2
msgid "Folders section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:4
msgid "The ``collective.transmogrifier.sections.constructor`` blueprint can construct new content, based on a type (``_type`` key) and a path (``_path`` key). However, it will bail if it is asked to create an item for which the parent folder does not exist."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:9
msgid "One way to work around this is to ensure that the folders already exist, for example by sending the instruction to construct them through the pipeline before any contents of that folder. This requires sorted input, of course."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:13
msgid "Alternatively, you can use the ``collective.transmogrifier.sections.folders`` blueprint. This will look at the path of each incoming item and construct parent folders if needed. This implies that all folders (that do not yet exist), are of the same type. That type defaults to ``Folder``, although you can supply an alternative type. The folder will be created without an id only, but a subsequent schema updated section for a subsequent item may have the opportunity to update it (but not change its type.)"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:21
msgid "This blueprint can take the following options, all of the optional:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:25
msgid "``path-key``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:24
msgid "The name of the key holding the path. This defaults to the same semantics as those used for the constructor section. Just use ``_path`` and you'll be OK."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:29
msgid "``new-type-key``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:28
msgid "The type key to use when inserting a new item in the pipeline to create folders. The default is ``_type``. Change it if you need to target a specific constructor section."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:33
msgid "``new-path-key``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:32
msgid "The path key to use when inserting a new item in the pipeline to create folders. The default is to use the same as the incoming path key. Change it if you need to target a specific constructor section."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:36
msgid "``folder-type``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:36
msgid "The name of the portal type to use for new folders. Defaults to ``Folder``, which is the default folder type in CMF and Plone."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:44
msgid "``cache``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:39
msgid "By default, the section will keep a cache in memory of each folder it has checked (and possibly created) to know whether it already exists. This saves a lot of traversal, especially if you have many items under a particular folder. This will use a small amount of memory. If you have millions of objects, you can trade memory for speed by setting this option to false."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:46
msgid "Here is how it might look by default:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/folders.rst:92
msgid "To specify alternate types and keys, we can do something like this:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:2
msgid "Inserter section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:4
msgid "An inserter pipeline section lets you define a key and value to insert into pipeline items. The inserter section blueprint name is ``collective.transmogrifier.sections.inserter``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:8
msgid "A inserter section takes a ``key`` and a ``value`` TALES expression. These expressions are evaluated to generate the actual key-value pair that gets inserted. You can also specify an optional ``condition`` option; if given, the key only gets inserted when the condition, which is also a TALES is true."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:13
msgid "Because the inserter ``value`` expression has access to the original item, it could even be used to change existing item values. Just target an existing key, pull out the original value in the value expression and return a modified version."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/inserter.rst:68
msgid "The ``key``, ``value`` and ``condition`` expressions have access to the following:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:3
msgid "collective.blueprint.listsource"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:5
msgid "The collective.blueprint.listsource transmogrifier blueprint can be used to add recursion or looping to a pipeline.  Specifically, sections down stream from the list source section can access the list source section and inject items."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:10
msgid "If items from sources before the listsource section are appended, then a loop is formed.  If items from sources after the listsource section are appended, then a form of recursion is added to the pipeline.  If the ``keys`` or ``copy-keys`` options are used, then certain item keys may be postponed while other items complete such as to defer processing keys until other items are constructed."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:17
msgid "Items from previous sections are yielded first until items are appended to the listsource.  Then the listsource items are yielded until the listsource is empty at which point it continues yielding from previous sections.  This is to avoid keeping item references in the listsource as much as possible, but care should still be taken not to fill the list with too many items and that those items do not contain memory or other resource intensive references."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:25
msgid "Assemble and register a transmogrifier with a list source section."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:62
msgid "Run the transmogrifier.  An item with contents corresponding the section config is injected.  All values are stripped of whitespace.  A variable whose name is listed in the listsource-lists variable will be broken up on newlines into a list."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/listsource.rst:78
msgid "Instead of diverting the whole item, the appender section can move or copy keys from the original item into a new item which will be appended to the list source."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/logger.rst:2
msgid "Logger section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/logger.rst:4
msgid "First we need to set up a logger for testing:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/logger.rst:12
msgid "A logger section lets you log a piece of data from the item together with a name. You can set any logging level in the logger. The logger blueprint name is ``collective.transmogrifier.sections.logger``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/logger.rst:40
msgid "We can also have numerical levels, and if the key is missing, it will print out a message to that effect.  A condition may also be used to restrict the items logged."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/logger.rst:67
msgid "If no ``key`` option is given, the logger will render the whole item in a readable format using Python's ``pprint`` module.  The ``delete`` option can be used to omit certain keys from the output, such as body text fields which may be too large and make the output too noisy."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:2
msgid "Manipulator section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:4
msgid "A manipulator pipeline section lets you copy, move or discard keys from the pipeline. The manipulator section blueprint name is ``collective.transmogrifier.sections.manipulator``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:8
msgid "A manipulator section will copy keys when you specify a set of keys to copy, and an expression to determine what to copy these to. These are the ``keys`` and ``destination`` options."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:12
msgid "The ``keys`` option is a set of key names, one on each line; keynames starting with ``re:`` or ``regexp:`` are treated as regular expresions. The ``destination`` expression is a TALES expression that can access not only the item, but also the matched key and, if a regular expression was used, the match object."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:18
msgid "If a ``delete`` option is specified, it is also interpreted as a set of keys, like the ``keys`` option. These keys will be deleted from the item; if used together with the ``keys`` and ``destination`` options, keys will be renamed instead of copied."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:23
msgid "Also optional is the ``condition`` option, which lets you specify a TALES expression that when evaluating to False will prevent any manipulation from happening. The condition is evaluated for every matched key."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/manipulator.rst:82
msgid "The ``destination`` expression has access to the following:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/savepoint.rst:2
msgid "Savepoint section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/savepoint.rst:4
msgid "A savepoint pipeline section commits a savepoint every so often, which has a side-effect of freeing up memory. The savepoint section blueprint name is ``collective.transmogrifier.sections.savepoint``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/savepoint.rst:8
msgid "A savepoint section takes an optional ``every`` option, which defaults to 1000; a savepoint is committed every ``every`` items passing through the pipe. A savepoint section doesn't alter the items in any way:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/savepoint.rst:29
msgid "We'll show savepoints being committed by overriding transaction.savepoint:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:2
msgid "Splitter section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:4
msgid "A splitter pipeline section lets you branch a pipeline into 2 or more sub-pipelines. The splitter section blueprint name is ``collective.transmogrifier.sections.splitter``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:8
msgid "A splitter section takes 2 or more pipeline definitions, and sends the items from the previous section through each of these sub-pipelines, each with it's own copy [*]_ of the items:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:50
msgid "Although the pipeline definitions in the splitter are empty, we end up with 2 copies of every item in the pipeline as both splitter pipelines get to process a copy. Splitter pipelines are defined by options starting with ``pipeline-``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:54
msgid "Normally you'll use conditions to identify items for each sub-pipe, making the splitter the pipeline equivalent of an if/elif statement. Conditions are optional and use the pipeline option name plus ``-condition``:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:103
msgid "Conditions are expressed as TALES statements, and have access to:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:109
msgid "``pipeline``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:109
msgid "the name of the splitter pipeline this condition belongs to (including the ``pipeline-`` prefix)"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:117
msgid "Although the splitter section employs some techniques to avoid memory bloat, if any contained section swallows items (so taking them from the previous section without passing them on), runs the risk of pulling all remaining items into the splitter buffer as a next match for the contained pipeline is being sought."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:123
msgid "You can avoid this by not using sections that discard items within a splitter; place these before or after a splitter section. Better still, use a correct condition in the splitter configuration that won't include the items to discard in the first place."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/splitter.rst:128
msgid "Note that copy.deepcopy is used on all items. This will fail on items containing file handles, modules or other non-copyable values. See the copy module documentation."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/urlopener.rst:2
msgid "URL Opener section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/urlopener.rst:4
msgid "An URL opener source section requests a URL and inserts keys for the response and header optionally also using a local cache."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/urlopener.rst:64
msgid "The cache directory has had response bodies written as files and headers as RFC822 messages."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:2
msgid "XML Walker section"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:4
msgid "An XML walker source section yields a hierarchy of items by iterating over an `lxml.etree`_ tree of XML elements that match an `XPath`_. This can be used to build content structure based on the sitemap or navigation of a HTML web site."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:9
msgid "Options starting with ``element-`` may contain expressions whose value will be inserted into the element items.  The expressions have access to the following:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:14
msgid "``element``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:14
msgid "the current walked element"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:15
msgid "the current walked element item to be yielded"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:16
msgid "the original item containing the walked tree"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:17
#: ../external/diazo/docs/deployment.rst:53
msgid "``tree``"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:17
msgid "the original walked tree"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/sections/xmlwalker.rst:24
msgid "Start with an HTML file containing a heirarchical navbar."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:2
msgid "Pipelines"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:4
msgid "To transmogrify, or import and convert non-plone content, you simply define a pipeline. Pipe sections, the equivalent of parts in a buildout_, are slotted together into a processing pipe. To slot sections together, you define a configuration file, define named sections, and a main pipeline definition that names the sections in order (one section per line):"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:28
msgid "As you can see this is also very similar to how you construct WSGI pipelines using paster. The format of the configuration files is defined by the Python ConfigParser module, with extensions that we'll describe later. At minimum, at least the transmogrifier section with an empty pipeline is required:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:38
msgid "Transmogrifier can load these configuration files either by looking them up in a registry or by loading them from a python package."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:41
msgid "You register transmogrifier configurations using the ``registerConfig`` directive in the http://namespaces.plone.org/transmogrifier namespace, together with a name, and optionally a title and description::"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:59
msgid "You can then tell transmogrifier to load the 'exampleconfig' configuration. To load configuration files directly from a python package, name the package and the configuration file separated by a colon, such as 'collective.transmogrifier.tests:exampleconfig.cfg'."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:64
msgid "Registering files with the transmogrifier registry allows other uses, such as listing available configurations in a user interface, together with the registered description. Loading files directly let's you build reusable libraries of configuration files more quickly though."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:69
msgid "In this document we'll use the shorthand *registerConfig* to register example configurations:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:76
msgid "Pipeline sections"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:78
msgid "Each section in the pipeline is created by a blueprint. Blueprints are looked up as named utilities implementing the ISectionBlueprint interface. In the transmogrifier configuration file, you refer to blueprints by the name under which they are registered. Blueprints are factories; when called they produce an ISection pipe section. ISections in turn, are iterators implementing the `iterator protocol`_."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:85
msgid "Here is a simple blueprint, in the form of a class definition:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:105
msgid "Note that we register this class as a named utility, and that instances of this class can be used as an iterator. When slotted together, items 'flow' through the pipeline by iterating over the last section, which in turn iterates over it's preceding section (``self.previous`` in the example), and so on."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:111
msgid "By iterating over the source, then yielding the items again, each section passes items on to the next section. During the iteration loop, sections can manipulate the items. Note that items are python dictionaries; sections simply operate on the keys they care about. In our example we add a new key, ``exampletransformname``, which we set to the name of the section."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:118
msgid "Sources"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:120
msgid "The items that flow through the pipe have to originate from somewhere though. This is where special sections, sources, come in. A source is simply a pipe section that inserts extra items into the pipeline. This is best illustrated with another example:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:143
msgid "In this example we use the ``options`` dictionary to read options from the section configuration, which in the example configuration we gave earlier has the option ``size`` defined as 5. Note that the configuration values are always strings, so we need to convert the size option to an integer here."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:148
msgid "The source first iterates over the previous section and yields all items unchanged. Only when that loop is done, does the source produce new items and puts those into the pipeline. This order is important: when you slot multiple source sections together, you want items produced by earlier sections to be processed first too."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:154
msgid "There is always a previous section, even for the first section defined in the pipeline. Transmogrifier passes in a empty iterator when it instantiates this first section, expecting such a first section to be a source that'll produce items for the pipeline to process."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:160
msgid "Constructors"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:162
msgid "As stated before, transmogrifier is intended for importing content into a Plone site. However, transmogrifier itself only drives the pipeline, inserting an empty iterator and discarding whatever it pulls out of the last section."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:166
msgid "In order to create content then, a constructor section is required. Like source sections, you should be able to use multiple constructors, so constructors should always start with yielding the items passed in from the previous section on to a possible next section."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:171
msgid "So, a constructor section is an ISection that consumes items from the previous section, and affects the plone site based on items, usually by creating content objects based on these items, then yield the item for a next section. For example purposes, we simply pretty print the items instead:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:193
msgid "With this last section blueprint example completed, we can load the example configuration we created earlier, and run our transmogrification:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:206
msgid "Developing blueprints"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:208
msgid "As we could see from the ISectionBlueprint examples above, a blueprint gets called with several arguments: ``transmogrifier``, ``name``, ``options`` and ``previous``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:212
msgid "We discussed ``previous`` before, it is a reference to the previous pipe section and must be looped over when the section itself is iterated. The ``name`` argument is simply the name of the section as given in the configuration file."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:217
msgid "The ``transmogrifier`` argument is a reference to the transmogrifier itself, and it can be used to reach the context we are importing to through it's ``context`` attribute. The transmogrifier also acts as a dictionary, mapping from section names to a mapping of the options in each section."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:222
msgid "Finally, as seen before, the ``options`` argument is a mapping of the current section options. It is the same mapping as can be had through ``transmogrifier[name]``."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:226
msgid "A short example shows each of these arguments in action:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:291
msgid "Configuration file syntax"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:293
msgid "As mentioned earlier, the configuration files use the format defined by the Python ConfigParser module with extensions. The extensions are based on the zc.buildout extensions and are:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:297
msgid "option names are case sensitive"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:299
msgid "option values can use a substitution syntax, described below, to refer to option values in specific sections."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:302
msgid "you can include other configuration files, see `Including other configurations`_."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:305
msgid "The ConfigParser syntax is very flexible. Section names can contain any characters other than newlines and right square braces (\"]\"). Option names can contain any characters (within the ASCII character set) other than newlines, colons, and equal signs, can not start with a space, and don't include trailing spaces."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:311
msgid "It is a good idea to keep section and option names simple, sticking to alphanumeric characters, hyphens, and periods."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:315
msgid "Variable substitution"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:317
msgid "Transmogrifier supports a string.Template-like syntax for variable substitution, using both the section and the option name joined by a colon:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:343
msgid "Here we created an extra section called definitions, and refer to the item_count option defined in that section to set the size of the section1 pipeline section, so we only get 3 items when we execute this pipeline:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:354
msgid "Including other configurations"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:356
msgid "You can include other transmogrifier configurations with the ``include`` option in the transmogrifier section. This option takes a list of configuration ids, separated by whitespace. All sections and options from those configuration files will be included provided the options weren't already present. This works recursively; inclusions in the included configuration files are honoured too:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:406
msgid "Like zc.buildout configurations, we can also add or remove lines from included configuration options, by using the += and -= syntax:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:437
msgid "When calling transmogrifier, you can provide your own sections too: any extra keyword is interpreted as a section dictionary. Do make sure you use string values though:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:446
#: ../external/plone.api/docs/contribute/conventions.rst:11
#: ../external/plone.api/docs/contribute/index.rst:13
msgid "Conventions"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:448
msgid "At its most basic level, transmogrifier pipelines are just iterators passing 'things' around. Transmogrifier doesn't expect anything more than being able to iterate over the pipeline and doesn't dictate what happens within that pipeline, what defines a 'thing' or what ultimately gets accomplished."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:453
msgid "But as has been stated repeatedly, transmogrifier has been developed to facilitate importing legacy content, processing data in incremental steps until a final section constructs new content."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:457
msgid "To reach this end, several conventions have been established that help the various pipeline sections work together."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:461
msgid "Items are mappings"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:463
msgid "The first one is that the 'things' passed from section to section are mappings; i.e. they are or behave just like python dictionaries. Again, transmogrifier doesn't produce these by itself, source sections (see Sources_) produce them by injecting them into the stream."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:469
msgid "Keys are fields"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:471
msgid "Secondly, *all* keys in such mappings that do not start with an underscore will be used by constructor sections (see Constructors_) to construct Plone content. So keys that do not start with an underscore are expected to map to Archetypes fields or Zope3 schema fields or whatever the constructor expects."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:477
msgid "Paths are to the target object"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:479
msgid "Many sections either create objects (constructors) or operate on already-constructed or pre-existing objecs. Such sections should interpret paths as the complete path for the object. For constructors this means they'll need to split the path into a container path and an id in order for them to find the correct context for constructing the object."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:486
msgid "Keys with a leading underscore are controllers"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:488
msgid "This leaves the keys that do start with a leading underscore to have special meaning to specific sections, allowing earlier pipeline sections to inject 'control statements' for later sections in the item mapping. To avoid name clashes, sections that do expect such controller keys should use prefixes based on the name under which their blueprint was registered, plus optionally the name of the pipe section. This allows for precise targeting of pipe sections when inserting such keys."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:496
msgid "We'll illustrate this with an example. Let's say a source section loads news items from a database, but the database tables for such items hold filenames to point to binary image data. Rather than have this section load those filenames directly and add them to the item for image creation, a generic 'file loader' section is used to do this. Let's suppose that this file loader is registered as ``acme.transmogrifier.fileloader``. This section then could be instructed to load files and store them in a named key by using 2 'controller' keys named ``_acme.transmogrifier.fileloader_filename`` and ``_acme.transmogrifier.fileloader_targetkey``. If the source section were to create pipeline items with those keys, this later fileloader section would then automatically load the filenames and inject them into the items in the right location."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:509
msgid "If you need 2 such loaders, you can target them each individually by including their section names; so to target just the ``imageloader1`` section you'd use the keys ``_acme.transmogrifier.fileloader_imageloader1_filename`` and ``_acme.transmogrifier.fileloader_imageloader1_targetkey``. Sections that support such targeting should prefer such section specific keys over those only using the blueprint name."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:516
msgid "The collective.transmogrifier.utils module has a handy utility method called ``defaultKeys`` that'll generate these keys for you for easy matching:"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:532
msgid "Keep memory use to a minimum"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:534
msgid "The above example is a little contrived of course; you'd generally configure a file loader section with a key name to grab the filename from, and perhaps put the loader *after* the constructor section and load the image data straight into the already constructed content item instead. This lowers memory requirements as image data can go directly into the ZODB this way, and the content object can be deactivated after the binary data has been stored."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:541
msgid "By operating on one item at a time, a transmogrifier pipeline can handle huge numbers of content without breaking memory limits; individual sections should also avoid using memory unnecessarily."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:546
msgid "Previous sections go first"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:548
msgid "As mentioned in the Sources_ section, when inserting new items into the stream, generally previous pipe sections come first. This way someone constructing a pipeline knows what source section will be processed earlier (those slotted earlier in the pipeline) and can adjust expectations accordingly. This makes content construction more predictable when dealing with multiple sources."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:555
msgid "An exception would be a Folder Source, which inserts additional Folder items into the pipeline to ensure that the required container for any given content item exists at construction time. Such a source would inject extra items as needed, not before or after the previous source section."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:561
msgid "Iterators have 3 stages"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:563
msgid "Some tasks have to happen before the pipeline runs, or after all content has been created. In such cases it is handy to realise that iteration within a section consists of three stages: before iteration, iteration itself, and after iteration."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:568
msgid "For example, a section creating references may have to wait for all content to be created before it can insert the references. In this case it could build a queue during iteration, and only when the previous pipe section has been exhausted and the last item has been yielded would the section reach into the portal and create all the references."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:574
msgid "Sources following the `Previous sections go first`_ convention basically inject the new items in the after iteration stage."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:577
msgid "Here's a piece of psuedo code to illustrate these 3 stages::"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:595
msgid "You can get quite creative with this. For example, the reference creator could get quite creative and defer creation of references until it knew the referenced object has been created too and periodically create these references. This would keep memory requirements smaller as not *all* references to create have to be remembered."
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:602
msgid "Store pipeline-wide information in annotations"
msgstr ""

#: ../external/collective.transmogrifier/docs/source/transmogrifier.rst:604
msgid "If, for some reason or other, you need to remember state across section instances that is pipeline-wide (such as database connections, or data counters), such information should be stored as annotations on the transmogrifier object::"
msgstr ""

#: ../external/diazo/README.rst:6
msgid "Diazo - We Write XSLT, So You Don't Have To"
msgstr ""

#: ../external/diazo/README.rst:8
#: ../external/diazo/docs/index.rst:11
msgid "Diazo allows you to apply a theme contained in a static HTML web page to a dynamic website created using any server-side technology. With Diazo, you can take an HTML wireframe created by a web designer and turn it into a theme for your favourite CMS, redesign the user interface of a legacy web application without even having access to the original source code, or build a unified user experience across multiple disparate systems, all in a matter of hours, not weeks."
msgstr ""

#: ../external/diazo/README.rst:16
#: ../external/diazo/docs/index.rst:19
msgid "When using Diazo, you will work with syntax and concepts familiar from working with HTML and CSS. And by allowing you seamlessly integrate XSLT into your rule files, Diazo makes common cases simple and complex requirements possible."
msgstr ""

#: ../external/diazo/README.rst:20
msgid "For detailed documentation, please see diazo.org_."
msgstr ""

#: ../external/diazo/docs/advanced.rst:2
msgid "Advanced usage"
msgstr ""

#: ../external/diazo/docs/advanced.rst:4
msgid "For most themes, the basic rules will suffice. There are times when you need a little more power, however, for example when working with a complex design or a content source that does not have well-defined, semantic markup."
msgstr ""

#: ../external/diazo/docs/advanced.rst:9
msgid "Conditional rules"
msgstr ""

#: ../external/diazo/docs/advanced.rst:11
msgid "Sometimes, it is useful to apply a rule only if a given element appears or does not appear in the markup. The ``if``, ``if-content`` and ``if-path`` attributes can be used with any rule, as well as the <theme /> and <notheme /> directives."
msgstr ""

#: ../external/diazo/docs/advanced.rst:17
msgid "Conditions based on content nodes"
msgstr ""

#: ../external/diazo/docs/advanced.rst:19
msgid "``if-content`` should be set to an XPath expression. You can also use ``css:if-content`` with a CSS3 expression. If the expression matches a node in the content, the rule will be applied::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:26
msgid "This will copy all elements with class ``portlet`` into the ``portlets`` element. If there are no matching elements in the content we drop the ``portlet-wrapper`` element, which is presumably superfluous."
msgstr ""

#: ../external/diazo/docs/advanced.rst:30
msgid "Here is another example using CSS selectors::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:35
msgid "This will copy the children of the element with id ``header-box`` in the content into the element with id ``header`` in the theme, so long as an element with id ``personal-bar`` also appears somewhere in the content."
msgstr ""

#: ../external/diazo/docs/advanced.rst:39
msgid "An empty ``if-content`` (or ``css:if-content``) is a shortcut meaning \"use the expression in the ``content`` or ``css:content``` attribute as the condition\". Hence the following two rules are equivalent::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:48
msgid "If multiple rules of the same type match the same theme node but have different ``if-content`` expressions, they will be combined as an if..else if...else block::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:58
msgid "These rules all attempt to fill the text in the ``<h1 />`` inside the body. The first rule looks for a similar ``<h1 />`` tag and uses its text. If that doesn't match, the second rule looks for any ``<h1 />`` with id ``first-heading``, and uses its text. If that doesn't match either, the final rule will be used as a fallback (since it has no ``if-content``), taking the contents of the ``<title />`` tag in the head of the content document."
msgstr ""

#: ../external/diazo/docs/advanced.rst:66
msgid "A content condition may be negated with ``if-not-content`` or ``css:if-not-content``, for example::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:72
msgid "Conditions based on paths"
msgstr ""

#: ../external/diazo/docs/advanced.rst:74
msgid "Provided the live transform is correctly configured to pass the relevant parameter (the ``$path`` parameter), it is possible to create conditions based on URL path segments in the incoming request. This uses the ``if-path`` attribute."
msgstr ""

#: ../external/diazo/docs/advanced.rst:79
msgid "A leading ``/`` indicates that a path should be matched at the start of the url::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:84
msgid "matches pages with urls ``/news``, ``/news/`` and ``/news/page1.html`` but not ``/newspapers`` - only complete path segments are matched."
msgstr ""

#: ../external/diazo/docs/advanced.rst:87
msgid "A trailing ``/`` indicates that a path should be matched at the end of the url::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:92
msgid "matches ``/mysite/news`` and ``/mysite/news/``."
msgstr ""

#: ../external/diazo/docs/advanced.rst:94
msgid "To match an exact url, use both leading and trailing ``/``::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:98
msgid "matches ``/news`` and ``/news/``."
msgstr ""

#: ../external/diazo/docs/advanced.rst:100
msgid "Without a leading or trailing ``/`` the path segment(s) may match anywhere in the url::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:105
msgid "matches ``/mysite/news/space/page1.html``."
msgstr ""

#: ../external/diazo/docs/advanced.rst:107
msgid "Multiple alternative path conditions may be included in the ``if-path`` attribute as whitespace separated list::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:112
msgid "matches ``/`` and ``/index.html``. ``if-path=\"/\"`` is considered an exact match condition"
msgstr ""

#: ../external/diazo/docs/advanced.rst:115
msgid "A path condition may be negated with ``if-not-path``, for example::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:120
msgid "Conditions based on arbitrary parameters"
msgstr ""

#: ../external/diazo/docs/advanced.rst:122
msgid "The ``if`` attribute can be used to make a rule or theme conditional on any valid XPath expression."
msgstr ""

#: ../external/diazo/docs/advanced.rst:125
msgid "For example, if the transform is set up to receive a string parameter ``$mode``, you could write::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:130
msgid "Use the ``if-not`` attribute to negate the conditon, for example::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:135
msgid "Condition grouping and nesting"
msgstr ""

#: ../external/diazo/docs/advanced.rst:137
msgid "A condition may be applied to multiple rules by placing it on a ``<rules>`` tag::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:154
msgid "Conditions may also be nested, so::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:162
msgid "Is equivalent to::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:167
msgid "Multiple, conditional themes"
msgstr ""

#: ../external/diazo/docs/advanced.rst:169
msgid "It's possible to specify multiple themes using conditions. For instance::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:175
msgid "Potential themes are tested in the order specified. The first one to match is used."
msgstr ""

#: ../external/diazo/docs/advanced.rst:178
msgid "The unconditional theme is used as a fallback when no other theme's condition is satisfied. If no unconditional theme is specified, the document is passed through without theming."
msgstr ""

#: ../external/diazo/docs/advanced.rst:182
msgid "It is also possible to conditionally disable theming, using ``<notheme />``::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:187
msgid "The theme is disabled if there is a matching ``<notheme />``, regardless of any conditional ``<theme />`` directives."
msgstr ""

#: ../external/diazo/docs/advanced.rst:190
msgid "All rules are applied to all themes. To have a rule apply to only a single theme, use the condition grouping syntax::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:201
msgid "Modifying the theme on the fly"
msgstr ""

#: ../external/diazo/docs/advanced.rst:203
msgid "Sometimes, the theme is almost perfect, but cannot be modified, for example because it is being served from a remote location that you do not have access to, or because it is shared with other applications."
msgstr ""

#: ../external/diazo/docs/advanced.rst:207
msgid "Diazo allows you to modify the theme using \"inline\" markup in the rules file. You can think of this as a rule where the matched ``content`` is explicitly stated in the rules file, rather than pulled from the response being styled."
msgstr ""

#: ../external/diazo/docs/advanced.rst:211
#: ../external/diazo/docs/advanced.rst:257
#: ../external/plone.app.testing/README.rst:379
#: ../external/plone.app.testing/README.rst:403
#: ../external/plone.app.testing/README.rst:425
#: ../external/plone.app.testing/README.rst:451
#: ../external/plone.app.testing/README.rst:481
#: ../external/plone.app.testing/README.rst:520
#: ../external/plone.app.testing/README.rst:547
#: ../external/plone.app.testing/README.rst:565
#: ../external/plone.app.testing/docs/source/README.rst:379
#: ../external/plone.app.testing/docs/source/README.rst:403
#: ../external/plone.app.testing/docs/source/README.rst:425
#: ../external/plone.app.testing/docs/source/README.rst:451
#: ../external/plone.app.testing/docs/source/README.rst:481
#: ../external/plone.app.testing/docs/source/README.rst:520
#: ../external/plone.app.testing/docs/source/README.rst:547
#: ../external/plone.app.testing/docs/source/README.rst:565
msgid "For example::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:220
msgid "In the example above, the ``<after />`` rule will copy the ``<style />`` attribute and its contents into the ``<head />`` of the theme. Similar rules can be constructed for ``<before />`` and ``<replace />``."
msgstr ""

#: ../external/diazo/docs/advanced.rst:224
msgid "It is even possible to insert XSLT instructions into the compiled theme in this manner::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:236
msgid "Here, the XSL context is the root node of the content."
msgstr ""

#: ../external/diazo/docs/advanced.rst:238
msgid "Notice how we used ``css:select`` to select a node to operate on in the ``<xsl:for-each />`` directive. In fact, you can use the ``css:`` namespace for anything that specifies an XPath expression, and the Diazo pre-processor will turn it into the equivalent XPath for you."
msgstr ""

#: ../external/diazo/docs/advanced.rst:243
msgid "Inline markup and XSLT may be combined with conditions::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:252
msgid "Modifying the content on the fly"
msgstr ""

#: ../external/diazo/docs/advanced.rst:254
msgid "It is possible to modify the included content using ``<replace />``, ``<before />``, or ``<after />``."
msgstr ""

#: ../external/diazo/docs/advanced.rst:269
msgid "This may be combined with conditions and inline XSLT."
msgstr ""

#: ../external/diazo/docs/advanced.rst:271
msgid "Warning: it is not possible to both modify the content children and put them in the theme, for instance::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:283
msgid "would not work. But::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:294
msgid "would work (because the theme rule targets the `#one` content, not its children)."
msgstr ""

#: ../external/diazo/docs/advanced.rst:298
msgid "Inline XSL directives"
msgstr ""

#: ../external/diazo/docs/advanced.rst:300
msgid "You may supply inline XSL directives in the rules to tweak the final output. For instance to strip space from the output document use::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:305
msgid "(Note: this may effect the rendering of the page on the browser.)"
msgstr ""

#: ../external/diazo/docs/advanced.rst:307
msgid "Inline XSL directives must be placed directly inside the root ``<rules>`` tag and are applied unconditionally."
msgstr ""

#: ../external/diazo/docs/advanced.rst:311
msgid "Doctypes"
msgstr ""

#: ../external/diazo/docs/advanced.rst:313
msgid "By default, Diazo transforms output pages with the XHTML 1.0 Transitional doctype. To use a strict doctype include this inline XSL::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:320
msgid "It's important to note that only the XHTML 1.0 Strict and XHTML 1.0 Transitional doctypes trigger the special XHTML compatibility mode of libxml2's XML serializer. This ensures ``<br/>`` is rendered as ``<br />`` and ``<div/>`` as ``<div></div>``, which is necessary for browsers to correctly parse the document as HTML."
msgstr ""

#: ../external/diazo/docs/advanced.rst:326
msgid "It's not possible to set the HTML5 doctype from XSLT, so plone.app.theming and the included WSGI middleware include a ``doctype`` option which may be set to \"<!DOCTYPE html>\"."
msgstr ""

#: ../external/diazo/docs/advanced.rst:331
msgid "XInclude"
msgstr ""

#: ../external/diazo/docs/advanced.rst:333
msgid "You may wish to re-use elements of your rules file across multiple themes. This is particularly useful if you have multiple variations on the same theme used to style different pages on a particular website."
msgstr ""

#: ../external/diazo/docs/advanced.rst:337
msgid "Rules files may be included using the XInclude protocol."
msgstr ""

#: ../external/diazo/docs/advanced.rst:339
msgid "Inclusions use standard XInclude syntax. For example::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:352
msgid "Including external content"
msgstr ""

#: ../external/diazo/docs/advanced.rst:354
msgid "Normally, the ``content`` attribute of any rule selects nodes from the response being returned by the underlying dynamic web server. However, it is possible to include content from a different URL using the ``href`` attribute on any rule (other than ``<drop />``). For example::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:361
msgid "This will resolve the URL ``/extra.html``, look for an element with id ``portlet`` and then append to to the element with id ``left-column`` in the theme."
msgstr ""

#: ../external/diazo/docs/advanced.rst:365
msgid "The inclusion can happen in one of three ways:"
msgstr ""

#: ../external/diazo/docs/advanced.rst:368
msgid "Using the XSLT ``document()`` function."
msgstr ""

#: ../external/diazo/docs/advanced.rst:370
msgid "This is the default, but it can be explicitly specified by adding an attribute ``method=\"document\"`` to the rule element. Whether this is able to resolve the URL depends on how and where the compiled XSLT is being executed::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:378
msgid "Using a Server Side Include directive"
msgstr ""

#: ../external/diazo/docs/advanced.rst:380
msgid "This can be specified by setting the ``method`` attribute to ``ssi``::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:385
msgid "The output will render like this::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:389
msgid "This SSI instruction would need to be processed by a fronting web server such as Apache or Nginx. Also note the ``;filter_xpath`` query string parameter. Since we are deferring resolution of the referenced document until SSI processing takes place (i.e. after the compiled Diazo XSLT transform has executed), we need to ask the SSI processor to filter out elements in the included file that we are not interested in. This requires specific configuration. An example for Nginx is included below."
msgstr ""

#: ../external/diazo/docs/advanced.rst:397
msgid "For simple SSI includes of a whole document, you may omit the ``content`` selector from the rule::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:402
#: ../external/diazo/docs/advanced.rst:435
msgid "The output then renders like this::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:406
msgid "Some versions of Nginx have required the ``wait=\"yes\"`` ssi option to be stable. This can be specified by setting the ``method`` attribute to ``ssiwait``."
msgstr ""

#: ../external/diazo/docs/advanced.rst:411
msgid "Using an Edge Side Includes directive"
msgstr ""

#: ../external/diazo/docs/advanced.rst:413
msgid "This can be specified by setting the ``method`` attribute to ``esi``::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:418
msgid "The output is similar to that for the SSI mode::"
msgstr ""

#: ../external/diazo/docs/advanced.rst:422
msgid "Again, the directive would need to be processed by a fronting server, such as Varnish. Chances are an ESI-aware cache server would not support arbitrary XPath filtering. If the referenced file is served by a dynamic web server, it may be able to inspect the ``;filter_xpath`` parameter and return a tailored response. Otherwise, if a server that can be made aware of this is placed in-between the cache server and the underlying web server, that server can perform the necessary filtering."
msgstr ""

#: ../external/diazo/docs/advanced.rst:430
msgid "For simple ESI includes of a whole document, you may omit the ``content`` selector from the rule::"
msgstr ""

#: ../external/diazo/docs/basic.rst:2
msgid "Basic syntax"
msgstr ""

#: ../external/diazo/docs/basic.rst:4
msgid "A Diazo theme consists of a static HTML page (referred to as the \"theme\") and a rules file, conventionally called ``rules.xml``."
msgstr ""

#: ../external/diazo/docs/basic.rst:7
msgid "The rules file contains an XML document that is is rooted in a tag called ``<rules />``::"
msgstr ""

#: ../external/diazo/docs/basic.rst:19
msgid "Here we have defined three namespaces: the default namespace is used for rules and XPath selectors. The ``css`` namespace is used for CSS3 selectors. These are functionally equivalent to the XPath selectors. In fact, CSS selectors are replaced by the equivalent XPath selector during the pre-processing step of the compiler. Thus, they have no performance impact. The ``xsl`` namespace is used if you want to add inline XSLT directives for fine-grained control. We will come to that later in this guide."
msgstr ""

#: ../external/diazo/docs/basic.rst:27
msgid "Diazo supports complex CSS3 and XPath selectors, including things like the ``nth-child`` pseudo-selector. You are advised to consult a good reference if you are new to XPath and/or CSS3."
msgstr ""

#: ../external/diazo/docs/basic.rst:32
msgid "Rule directives"
msgstr ""

#: ../external/diazo/docs/basic.rst:34
msgid "The following directives are allowed inside the ``<rules />`` element in the rules file:"
msgstr ""

#: ../external/diazo/docs/basic.rst:38
msgid "``<theme />``"
msgstr ""

#: ../external/diazo/docs/basic.rst:40
msgid "Used to specify the theme file. For example::"
msgstr ""

#: ../external/diazo/docs/basic.rst:44
msgid "Relative paths are resolved relative to the rules.xml file. For http/https urls, the ``--network`` switch must be supplied to the ``diazocompiler`` or ``diazorun`` program."
msgstr ""

#: ../external/diazo/docs/basic.rst:48
#: ../external/diazo/docs/basic.rst:107
#: ../external/diazo/docs/basic.rst:207
#: ../external/diazo/docs/basic.rst:287
#: ../external/diazo/docs/basic.rst:320
msgid "The following attributes are allowed:"
msgstr ""

#: ../external/diazo/docs/basic.rst:51
msgid "``href`` (required)"
msgstr ""

#: ../external/diazo/docs/basic.rst:51
msgid "A reference to the theme HTML file, as either a relative or absolute URL."
msgstr ""

#: ../external/diazo/docs/basic.rst:55
#: ../external/diazo/docs/basic.rst:80
#: ../external/diazo/docs/basic.rst:149
#: ../external/diazo/docs/basic.rst:235
#: ../external/diazo/docs/basic.rst:301
#: ../external/diazo/docs/basic.rst:335
msgid "``if``"
msgstr ""

#: ../external/diazo/docs/basic.rst:54
msgid "Used to specify an arbitrary condition that must be true for this theme reference to be used. More on this in the section on using multiple themes later in this guide."
msgstr ""

#: ../external/diazo/docs/basic.rst:59
#: ../external/diazo/docs/basic.rst:83
#: ../external/diazo/docs/basic.rst:152
#: ../external/diazo/docs/basic.rst:238
#: ../external/diazo/docs/basic.rst:304
#: ../external/diazo/docs/basic.rst:338
msgid "``if-path``"
msgstr ""

#: ../external/diazo/docs/basic.rst:58
msgid "Used to specify a URL path segment that must be matched by the current request for this theme reference to be used. More on this in the section on using multiple themes later in this guide."
msgstr ""

#: ../external/diazo/docs/basic.rst:64
#: ../external/diazo/docs/basic.rst:87
#: ../external/diazo/docs/basic.rst:156
#: ../external/diazo/docs/basic.rst:242
#: ../external/diazo/docs/basic.rst:308
#: ../external/diazo/docs/basic.rst:342
msgid "``if-content`` or ``css:if-content``"
msgstr ""

#: ../external/diazo/docs/basic.rst:62
msgid "Used to specify an element that must be present in the content for this theme reference to be used. More on this in the section on using multiple themes later in this guide."
msgstr ""

#: ../external/diazo/docs/basic.rst:67
msgid "``<notheme />``"
msgstr ""

#: ../external/diazo/docs/basic.rst:69
msgid "Used to turn off all theming in certain conditions. For example::"
msgstr ""

#: ../external/diazo/docs/basic.rst:74
msgid "Multiple ``<notheme />`` elements may be used. If the condition on any of them is true, the theme will be omitted. That is, they are logically or'd together."
msgstr ""

#: ../external/diazo/docs/basic.rst:78
msgid "One or more of the following attributes are required:"
msgstr ""

#: ../external/diazo/docs/basic.rst:81
msgid "Used to specify an arbitrary condition for when to omit the theme."
msgstr ""

#: ../external/diazo/docs/basic.rst:83
msgid "Used to specify a URL path segment that must be matched by the current request for the theme to be omitted."
msgstr ""

#: ../external/diazo/docs/basic.rst:86
msgid "Used to specify an element that must be present in the content for the theme to be omitted."
msgstr ""

#: ../external/diazo/docs/basic.rst:89
msgid "If more than one attribute is used, the condition of all must be true for the directive to take effect. That is, they are logically and'ed together."
msgstr ""

#: ../external/diazo/docs/basic.rst:93
msgid "``<replace />``"
msgstr ""

#: ../external/diazo/docs/basic.rst:95
msgid "Used to replace an element in the theme entirely with an element in the content. For example::"
msgstr ""

#: ../external/diazo/docs/basic.rst:100
msgid "The (near-)equivalent using CSS selectors would be::"
msgstr ""

#: ../external/diazo/docs/basic.rst:104
msgid "The result of either is that the ``<title />`` element in the theme is replaced with the ``<title />`` element in the (dynamic) content."
msgstr ""

#: ../external/diazo/docs/basic.rst:112
msgid "``theme`` or ``theme-children`` or ``css:theme`` or ``css:theme-children`` (required)"
msgstr ""

#: ../external/diazo/docs/basic.rst:110
msgid "Used to specify the node(s) in the theme that is to be replaced. When using ``theme-children``, all elements inside the tag that matches the XPath or CSS expression will be replaced, but the matched tag itself will remain intact."
msgstr ""

#: ../external/diazo/docs/basic.rst:117
msgid "``content`` or ``content-children`` or ``css:content`` or ``css:content-children`` (required)"
msgstr ""

#: ../external/diazo/docs/basic.rst:115
msgid "Used to specify the node in the content that is to replace the matched node(s) in the theme. When using ``content-children``, all elements inside the tag that matches the XPath or CSS expression will be used, but the matched tag itself will be left out."
msgstr ""

#: ../external/diazo/docs/basic.rst:141
#: ../external/diazo/docs/basic.rst:232
msgid "``attributes``"
msgstr ""

#: ../external/diazo/docs/basic.rst:120
msgid "If you want to replace attributes instead of tags, you can use the ``attributes`` attribute to provide a space-separated list of attributes that should be replaced on the matched theme node(s). For example, with ``attributes=\"class\"`` the ``class`` attribute on the matched theme node(s) will be replaced by the ``class`` attribute of the matched content node(s)."
msgstr ""

#: ../external/diazo/docs/basic.rst:127
msgid "**Note:** As with ``<replace />`` rules working on tags, if the named attribute(s) do not exist on the both the theme and content nodes, nothing will happen. If you want to copy attributes regardless of whether they exist on the theme node(s) or not, you can use ``<copy />`` instead."
msgstr ""

#: ../external/diazo/docs/basic.rst:132
msgid "Using ``attributes=\"class id\"``, the ``class`` and ``id`` attributes will be replaced."
msgstr ""

#: ../external/diazo/docs/basic.rst:135
#: ../external/diazo/docs/basic.rst:331
msgid "As a special case, you can write ``attributes=\"*\"`` to drop all attributes on the matched theme node and copy over all attributes from the matched content node."
msgstr ""

#: ../external/diazo/docs/basic.rst:139
#: ../external/diazo/docs/basic.rst:230
msgid "**Note:** You should not use ``theme-children`` or ``content-children`` or their CSS equivalents when using ``attributes``."
msgstr ""

#: ../external/diazo/docs/basic.rst:142
msgid "See also ``<merge />``, ``<copy />`` and ``<drop />``"
msgstr ""

#: ../external/diazo/docs/basic.rst:146
msgid "``method``"
msgstr ""

#: ../external/diazo/docs/basic.rst:144
msgid "If you have any ``<drop />`` or other rules that manipulate the *content*, and you do not want that manipulation to be taken into account when performing this replacement, you can add ``method=\"raw\"`` to the ``<replace />`` rule."
msgstr ""

#: ../external/diazo/docs/basic.rst:149
msgid "Used to specify an arbitrary condition for when to perform the replacement."
msgstr ""

#: ../external/diazo/docs/basic.rst:152
msgid "Used to specify a URL path segment that must be matched by the current request for the replacement to be performed"
msgstr ""

#: ../external/diazo/docs/basic.rst:155
msgid "Used to specify an element that must be present in the content for the replacement to be performed."
msgstr ""

#: ../external/diazo/docs/basic.rst:158
msgid "For more advanced usage of ``<replace>``, see :ref:`modifying-the-theme-on-the-fly` and :ref:`modifying-the-content-on-the-fly`."
msgstr ""

#: ../external/diazo/docs/basic.rst:163
msgid "``<before />`` and ``<after />``"
msgstr ""

#: ../external/diazo/docs/basic.rst:165
msgid "These are equivalent to ``<replace />`` except that the node(s) matched in the content are inserted before or after the node(s) matched in the theme, respectively. For example::"
msgstr ""

#: ../external/diazo/docs/basic.rst:171
msgid "This would place the element with id ``info-box`` from the content immediately before the element with id ``content`` in the theme. If we wanted the box below the content instead, we could do::"
msgstr ""

#: ../external/diazo/docs/basic.rst:177
msgid "To insert the box immediately inside the ``#content`` node, before any of its existing children, we could do::"
msgstr ""

#: ../external/diazo/docs/basic.rst:182
msgid "``<before />`` and ``<after />`` have the same required and optional attributes as ``<replace />``, except for ``attributes``, which is not supported."
msgstr ""

#: ../external/diazo/docs/basic.rst:187
msgid "``<drop />``"
msgstr ""

#: ../external/diazo/docs/basic.rst:189
msgid "Used to drop elements from the theme or the content. This is the only element that accepts either ``theme`` or ``content`` attributes (or their ``css:`` and ``-children`` equivalents), but not both::"
msgstr ""

#: ../external/diazo/docs/basic.rst:196
msgid "This would copy all children of the element with id ``portal-content`` in the theme  into the element with id ``content`` in the theme, but only after removing any element with class ``about-box`` inside the content element first."
msgstr ""

#: ../external/diazo/docs/basic.rst:201
#: ../external/diazo/docs/basic.rst:256
msgid "Similarly::"
msgstr ""

#: ../external/diazo/docs/basic.rst:205
msgid "Would drop the ``<base />`` tag from the head of the theme."
msgstr ""

#: ../external/diazo/docs/basic.rst:212
msgid "``theme`` or ``theme-children`` or ``css:theme`` or ``css:theme-children``"
msgstr ""

#: ../external/diazo/docs/basic.rst:210
msgid "Used to specify the node(s) in the theme that is to be dropped. When using ``theme-children``, all elements inside the tag that matches the XPath or CSS expression will be dropped, but the matched tag itself will remain intact."
msgstr ""

#: ../external/diazo/docs/basic.rst:217
msgid "``content`` or ``content-children`` or ``css:content`` or ``css:content-children``"
msgstr ""

#: ../external/diazo/docs/basic.rst:215
msgid "Used to specify the node(s) in the content that is to be dropped. When using ``content-children``, all elements inside the tag that matches the XPath or CSS expression will be dropped, but the matched tag itself will remain intact."
msgstr ""

#: ../external/diazo/docs/basic.rst:220
msgid "If you want to drop attributes instead of whole tags, you can use the ``attributes`` attribute to provide a space-separated list of attributes that should be dropped on the matched theme node(s). For example, with ``attributes=\"class\"`` the ``class`` attribute will be dropped from the matched node(s). Using ``attributes=\"class id\"``, the ``class`` and ``id`` attributes will both be dropped."
msgstr ""

#: ../external/diazo/docs/basic.rst:227
msgid "As a special case, you can write ``attributes=\"*\"`` to drop all attributes on the matched theme node."
msgstr ""

#: ../external/diazo/docs/basic.rst:233
msgid "See also ``<merge />`` and ``<replace />``"
msgstr ""

#: ../external/diazo/docs/basic.rst:235
msgid "Used to specify an arbitrary condition for when to perform the drop."
msgstr ""

#: ../external/diazo/docs/basic.rst:238
msgid "Used to specify a URL path segment that must be matched by the current request for the drop to be performed"
msgstr ""

#: ../external/diazo/docs/basic.rst:241
msgid "Used to specify an element that must be present in the content for the drop to be performed."
msgstr ""

#: ../external/diazo/docs/basic.rst:245
msgid "``<strip />``"
msgstr ""

#: ../external/diazo/docs/basic.rst:247
msgid "Used to strip a tag from the theme or content, leaving its children intact. You can think of this as the inverse of ``<drop />`` with ``theme-children`` or ``content-children``. For example::"
msgstr ""

#: ../external/diazo/docs/basic.rst:253
msgid "This will remove the element with id ``content``, leaving in place all its children."
msgstr ""

#: ../external/diazo/docs/basic.rst:261
msgid "This will replace the theme's element with the id ``content-area`` with the element in the content that has the id ``main-area``, but will strip out any nested tags with the CSS class ``wrapper`` found inside ``#main-area``."
msgstr ""

#: ../external/diazo/docs/basic.rst:265
msgid "``<strip />`` uses the same attributes and semantics as ``<drop />``."
msgstr ""

#: ../external/diazo/docs/basic.rst:268
msgid "``<merge />``"
msgstr ""

#: ../external/diazo/docs/basic.rst:270
msgid "Used to merge the values of attributes in the content with attributes with the same name in the theme. This is mainly useful for merging CSS classes::"
msgstr ""

#: ../external/diazo/docs/basic.rst:275
msgid "If the theme has the following body tag::"
msgstr ""

#: ../external/diazo/docs/basic.rst:279
msgid "and the content has::"
msgstr ""

#: ../external/diazo/docs/basic.rst:283
msgid "then the result will be::"
msgstr ""

#: ../external/diazo/docs/basic.rst:291
#: ../external/diazo/docs/basic.rst:332
msgid "``attributes`` (required)"
msgstr ""

#: ../external/diazo/docs/basic.rst:290
msgid "A space-separated list of attributes to merge. A given attribute must exist on both the theme and the content nodes for the rule to have any effect."
msgstr ""

#: ../external/diazo/docs/basic.rst:293
#: ../external/diazo/docs/basic.rst:323
msgid "``theme`` or ``css:theme`` (required)"
msgstr ""

#: ../external/diazo/docs/basic.rst:294
msgid "The theme node(s) to merge the attribute value(s) with."
msgstr ""

#: ../external/diazo/docs/basic.rst:295
msgid "``content`` (required)"
msgstr ""

#: ../external/diazo/docs/basic.rst:296
msgid "The content node(s) to merge the attribute value(s) from."
msgstr ""

#: ../external/diazo/docs/basic.rst:298
msgid "``separator``"
msgstr ""

#: ../external/diazo/docs/basic.rst:298
msgid "The separator to use when merging attributes. The default is to use a space. Use ``separator=\"\"`` to merge with no separator."
msgstr ""

#: ../external/diazo/docs/basic.rst:301
msgid "Used to specify an arbitrary condition for when to perform the merge."
msgstr ""

#: ../external/diazo/docs/basic.rst:304
msgid "Used to specify a URL path segment that must be matched by the current request for the merge to be performed"
msgstr ""

#: ../external/diazo/docs/basic.rst:307
msgid "Used to specify an element that must be present in the content for the merge to be performed."
msgstr ""

#: ../external/diazo/docs/basic.rst:311
msgid "``<copy />``"
msgstr ""

#: ../external/diazo/docs/basic.rst:313
msgid "Used to copy an attribute from a node in the content to a node in the theme. Unlike ``<replace />``, ``<copy />`` will work even if the attribute does not exist on the target theme node. If it *does* exist, it will be replaced. For example::"
msgstr ""

#: ../external/diazo/docs/basic.rst:323
msgid "Used to specify the node(s) in the theme where the attribute should be copied."
msgstr ""

#: ../external/diazo/docs/basic.rst:326
msgid "``content`` or ``css:content`` (required)"
msgstr ""

#: ../external/diazo/docs/basic.rst:326
msgid "Used to specify the node(s) in the content from which the attribute should be copied."
msgstr ""

#: ../external/diazo/docs/basic.rst:329
msgid "A space-separated list of attributes that should be copied to the theme."
msgstr ""

#: ../external/diazo/docs/basic.rst:335
msgid "Used to specify an arbitrary condition for when to perform the copy."
msgstr ""

#: ../external/diazo/docs/basic.rst:338
msgid "Used to specify a URL path segment that must be matched by the current request for the copy to be performed"
msgstr ""

#: ../external/diazo/docs/basic.rst:341
msgid "Used to specify an element that must be present in the content for the copy to be performed."
msgstr ""

#: ../external/diazo/docs/basic.rst:345
msgid "Order of rule execution"
msgstr ""

#: ../external/diazo/docs/basic.rst:347
msgid "In most cases, you should not care too much about the inner workings of the Diazo compiler. However, it can sometimes be useful to understand the order in which rules are applied."
msgstr ""

#: ../external/diazo/docs/basic.rst:351
msgid "``<before />`` rules using ``theme`` (but not ``theme-children``) are always executed first."
msgstr ""

#: ../external/diazo/docs/basic.rst:353
msgid "``<drop />`` rules are executed next."
msgstr ""

#: ../external/diazo/docs/basic.rst:354
msgid "``<replace />`` rules using ``theme`` (but not ``theme-children``) are executed next, provided no ``<drop />`` rule was applied to the same theme node or ``method=\"raw\"`` was used."
msgstr ""

#: ../external/diazo/docs/basic.rst:357
msgid "``<strip />`` rules are executed next. Note that ``<strip />`` rules do not prevent other rules from firing, even if the content or theme node is going to be stripped."
msgstr ""

#: ../external/diazo/docs/basic.rst:360
msgid "Rules that operate on attributes."
msgstr ""

#: ../external/diazo/docs/basic.rst:361
msgid "``<before />`` and ``<replace />`` and ``<after />`` rules using ``theme-children`` execute next, provided no ``<replace />`` rule using ``theme`` was applied to the same theme node previously."
msgstr ""

#: ../external/diazo/docs/basic.rst:364
msgid "``<after />`` rules using ``theme`` (but not ``theme-children``) are executed last."
msgstr ""

#: ../external/diazo/docs/basic.rst:368
msgid "Behaviour if theme or content is not matched"
msgstr ""

#: ../external/diazo/docs/basic.rst:370
msgid "If a rule does not match the theme (whether or not it matches the content), it is silently ignored."
msgstr ""

#: ../external/diazo/docs/basic.rst:373
msgid "If a ``<replace />`` rule matches the theme, but not the content, the matched element will be dropped in the theme::"
msgstr ""

#: ../external/diazo/docs/basic.rst:378
msgid "Here, if the element with id ``header-element`` is not found in the content, the placeholder with id ``header`` in the theme is removed."
msgstr ""

#: ../external/diazo/docs/basic.rst:381
msgid "Similarly, the contents of a theme node matched with a ``<copy />`` rule will be dropped if there is no matching content. Another way to think of this is that if no content node is matched, Diazo uses an empty nodeset when copying or replacing."
msgstr ""

#: ../external/diazo/docs/basic.rst:386
msgid "If you want the placeholder to stay put in the case of a missing content node, you can make this a conditional rule::"
msgstr ""

#: ../external/diazo/docs/basic.rst:391
msgid "See the next section for more details on conditional rules."
msgstr ""

#: ../external/diazo/docs/compiler.rst:2
msgid "Compilation"
msgstr ""

#: ../external/diazo/docs/compiler.rst:4
msgid "Once you have written your rules file, you need to compile it to an XSLT for deployment. In some cases, you may have an application server that does this on the fly, e.g. if you are using the ``plone.app.theming`` package with Plone. For deployment to a web server like Apache or Nginx, however, you will need to perform this step manually."
msgstr ""

#: ../external/diazo/docs/compiler.rst:10
msgid "The easiest way to invoke the Diazo compiler is via the ``diazocompiler`` command line script which is installed with the ``diazo`` egg. To see its help output, do::"
msgstr ""

#: ../external/diazo/docs/compiler.rst:16
msgid "To run the compiler with ``rules.xml``::"
msgstr ""

#: ../external/diazo/docs/compiler.rst:20
msgid "This will print the compiled XSLT file to the standard output. You can save it to a file instead using::"
msgstr ""

#: ../external/diazo/docs/compiler.rst:25
msgid "The following command line options are available:"
msgstr ""

#: ../external/diazo/docs/compiler.rst:27
msgid "Use ``-t theme.html`` to supply a theme if none is specified in the rules."
msgstr ""

#: ../external/diazo/docs/compiler.rst:28
msgid "Use ``-p`` to pretty-print the output for improved readability. There is a risk that this could alter rendering in the browser, though, as browsers are sensitive to some kinds of whitespace."
msgstr ""

#: ../external/diazo/docs/compiler.rst:31
msgid "Use ``-a`` to set an absolute prefix - see below."
msgstr ""

#: ../external/diazo/docs/compiler.rst:32
msgid "Use ``-i`` to set the default external file inclusion mode to one of ``document``, ``ssi`` or ``esi``."
msgstr ""

#: ../external/diazo/docs/compiler.rst:34
msgid "Use ``-n`` to permit fetching resources over a network."
msgstr ""

#: ../external/diazo/docs/compiler.rst:35
msgid "Use ``--trace`` to output trace logging during the compilation step. This can be helpful in debugging rules."
msgstr ""

#: ../external/diazo/docs/compiler.rst:38
msgid "Check the output of the ``--help`` option for more details."
msgstr ""

#: ../external/diazo/docs/compiler.rst:41
msgid "Absolute prefix"
msgstr ""

#: ../external/diazo/docs/compiler.rst:43
msgid "The compiler can be passed an \"absolute prefix\". This is a string that will be prefixed to any *relative* URL referenced an image, link or stylesheet in the theme HTML file, before the theme is passed to the compiler. This allows a theme to be written so that it can be opened and views standalone on the filesystem, even if at runtime its static resources are going to be served from some other location."
msgstr ""

#: ../external/diazo/docs/compiler.rst:50
msgid "For example, say the theme is written with relative URLs for images and external resources, such as ``<img src=\"images/foo.jpg\" />``. When the compiled theme is applied to a live site, this is unlikely to work for any URL other than a sibling of the ``images`` folder."
msgstr ""

#: ../external/diazo/docs/compiler.rst:55
msgid "Let's say the theme's static resources are served from a simple web server and made available under the directory ``/static``. In this case, we can set an absolute prefix of ``/static``. This will modify the ``<img />`` tag in the compiled theme so that it becomes an absolute path that will work for any URL: ``<img src=\"/static/images/foo.jpg\"`` />"
msgstr ""

#: ../external/diazo/docs/compiler.rst:62
msgid "Custom parameters"
msgstr ""

#: ../external/diazo/docs/compiler.rst:64
msgid "Custom parameters may be passed in at runtime to enable advanced ``if`` conditions for rules and theme selection. For this to work, however, the compiled theme needs to be aware of the possible parameters."
msgstr ""

#: ../external/diazo/docs/compiler.rst:68
msgid "Use the ``-c`` / ``--custom-parameters`` option to ``diazocompiler`` and ``diazorun`` to list the parameter names that should be known to the theme. Multiple names should be separated by spaces. For example::"
msgstr ""

#: ../external/diazo/docs/compiler.rst:74
msgid "Here, the compiled theme will be aware of the parameters ``$mode`` and ``$test``. The default for ``mode`` will be the string value ``test``."
msgstr ""

#: ../external/diazo/docs/compiler.rst:77
msgid "Using this ``theme.xsl``, it is now possible to pass these parameters. See the section on Nginx deployment for more details about how to do this with Nginx, or the next section for how to test it with ``diazorun``."
msgstr ""

#: ../external/diazo/docs/compiler.rst:82
msgid "Testing the compiled theme"
msgstr ""

#: ../external/diazo/docs/compiler.rst:84
msgid "To test the compiled theme, you can apply it to a static file representing the content. The easiest way to do this is via the ``diazorun`` script::"
msgstr ""

#: ../external/diazo/docs/compiler.rst:89
msgid "This will print the output to the standard output. You can save it to a file instead with::"
msgstr ""

#: ../external/diazo/docs/compiler.rst:94
msgid "For testing, you can also compile and run the theme in one go, by supplying the ``-r`` (rules) argument to ``diazorun``::"
msgstr ""

#: ../external/diazo/docs/compiler.rst:99
msgid "If you are using any custom parameters, you can specify string values for them on the command line:"
msgstr ""

#: ../external/diazo/docs/compiler.rst:104
msgid "$ bin/diazorun -o output.html -r rules.xml \\"
msgstr ""

#: ../external/diazo/docs/compiler.rst:103
msgid "-c mode=test,preview --parameters mode=live,preview=off \\ content.html"
msgstr ""

#: ../external/diazo/docs/compiler.rst:106
msgid "To see the built-in help for this command, run::"
msgstr ""

#: ../external/diazo/docs/compiler.rst:111
msgid "Compiling the theme in Python code"
msgstr ""

#: ../external/diazo/docs/compiler.rst:113
msgid "You can run the Diazo compiler from Python code using the following helper function::"
msgstr ""

#: ../external/diazo/docs/compiler.rst:118
msgid "Please see the docstring for this function for more details about the parameters it takes."
msgstr ""

#: ../external/diazo/docs/compiler.rst:121
msgid "``compile_theme()`` returns an XSLT document in ``lxml``'s ``ElementTree`` format. To set up a transform representing the theme and rules, you can do::"
msgstr ""

#: ../external/diazo/docs/compiler.rst:137
msgid "You can now use this transformation::"
msgstr ""

#: ../external/diazo/docs/compiler.rst:144
msgid "Please see the ``lxml`` documentation for more details."
msgstr ""

#: ../external/diazo/docs/contributing.rst:4
msgid "Contributing to this documentation"
msgstr ""

#: ../external/diazo/docs/contributing.rst:6
msgid "Contributing to this documentation is easy, just follow these steps*:"
msgstr ""

#: ../external/diazo/docs/contributing.rst:8
msgid "Install Sphinx_."
msgstr ""

#: ../external/diazo/docs/contributing.rst:12
msgid "Fork the github repository at https://github.com/plone/diazo."
msgstr ""

#: ../external/diazo/docs/contributing.rst:14
msgid "If you don't know how to do it, check `Fork a Repo <http://help.github.com/fork-a-repo/>`_ at GitHub Help."
msgstr ""

#: ../external/diazo/docs/contributing.rst:17
msgid "Check out the repository you just forked::"
msgstr ""

#: ../external/diazo/docs/contributing.rst:21
msgid "Change directories to the documentation directory::"
msgstr ""

#: ../external/diazo/docs/contributing.rst:25
msgid "Make your changes. If you don't know Sphinx or reStructuredText, you can read about them respectively here_, `and here`_."
msgstr ""

#: ../external/diazo/docs/contributing.rst:28
msgid "To see the final result you can run::"
msgstr ""

#: ../external/diazo/docs/contributing.rst:35
msgid "Commit your changes and push them back to your github fork::"
msgstr ""

#: ../external/diazo/docs/contributing.rst:40
msgid "Send a `pull request <http://help.github.com/send-pull-requests/>`_ with your changes."
msgstr ""

#: ../external/diazo/docs/contributing.rst:43
msgid "See how in `Send Pull Requests <http://help.github.com/send-pull-requests/>`_ at GitHub Help."
msgstr ""

#: ../external/diazo/docs/contributing.rst:48
msgid "Contributing to Diazo"
msgstr ""

#: ../external/diazo/docs/contributing.rst:50
msgid "Diazo is maintained by the Plone project. The canonical source code repository can be found at::"
msgstr ""

#: ../external/diazo/docs/contributing.rst:55
msgid "You can follow the same :ref:`fork & pull request <contributing-to-this-documentation>` procedure described above to contribute to the source."
msgstr ""

#: ../external/diazo/docs/contributing.rst:59
msgid "Discussion about the development of Diazo happens mainly on the ``plone-developers`` mailing list."
msgstr ""

#: ../external/diazo/docs/contributing.rst:62
msgid "If you have questions as a user of Diazo, please see http://plone.org/support."
msgstr ""

#: ../external/diazo/docs/contributing.rst:64
msgid "Some important ground rules:"
msgstr ""

#: ../external/diazo/docs/contributing.rst:66
msgid "Please do each new features on a separate branch. Bugfixes can be done in the *master* branch."
msgstr ""

#: ../external/diazo/docs/contributing.rst:69
msgid "Keep the tests passing and write new tests (simply create a new directory in the ``tests/`` directory following the convention of the existing tests)."
msgstr ""

#: ../external/diazo/docs/deployment.rst:2
msgid "Deployment"
msgstr ""

#: ../external/diazo/docs/deployment.rst:4
msgid "Before it can be used, the deployed theme needs to be deployed to a proxying web server which can apply the XSLT to the response coming back from another web application."
msgstr ""

#: ../external/diazo/docs/deployment.rst:8
msgid "In theory, any XSLT processor will do. In practice, however, most websites do not produce 100% well-formed XML (i.e. they do not conform to the XHTML \"strict\" doctype). For this reason, it is normally necessary to use an XSLT processor that will parse the content using a more lenient parser with some knowledge of HTML. libxml2, the most popular XML processing library on Linux and similar operating systems, contains such a parser."
msgstr ""

#: ../external/diazo/docs/deployment.rst:16
msgid "Plone"
msgstr ""

#: ../external/diazo/docs/deployment.rst:18
msgid "If you are working with Plone, the easiest way to use Diazo is via the plone.app.theming_ add-on. This provides a control panel for configuring the Diazo rules file, theme and other options, and hooks into a transformation chain that executes after Plone has rendered the final page to apply the Diazo transform."
msgstr ""

#: ../external/diazo/docs/deployment.rst:24
msgid "Even if you intend to deploy the compiled theme to another web server, ``plone.app.theming`` is a useful development tool: so long as Zope is in \"development mode\", it will re-compile the theme on the fly, allowing you to make changes to theme and rules on the fly. It also provides some tools for packaging up your theme and deploying it to different sites."
msgstr ""

#: ../external/diazo/docs/deployment.rst:31
msgid "WSGI"
msgstr ""

#: ../external/diazo/docs/deployment.rst:33
msgid "Diazo ships with two WSGI middleware filters that can be used to apply the theme:"
msgstr ""

#: ../external/diazo/docs/deployment.rst:36
msgid "``XSLTMiddleware``, which can apply a compiled theme created with ``diazocompiler``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:38
msgid "``DiazoMiddleware``, which can be used to compile a theme on the fly and apply it."
msgstr ""

#: ../external/diazo/docs/deployment.rst:41
msgid "In most cases, you will want to use ``DiazoMiddleware``, since it will cache the compiled theme. In fact, it uses the ``XSLTMiddleware`` internally."
msgstr ""

#: ../external/diazo/docs/deployment.rst:44
msgid "See :doc:`quickstart` for an example of how to set up a WSGI pipeline using the ``DiazoMiddleware`` filter, which is exposed to Paste Deploy as ``egg:diazo``. You can use ``egg:diazo#xslt`` for the XSLT filter."
msgstr ""

#: ../external/diazo/docs/deployment.rst:48
msgid "The following options can be passed to ``XSLTMiddleware``:"
msgstr ""

#: ../external/diazo/docs/deployment.rst:50
msgid "``filename``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:51
msgid "A filename from which to read the XSLT file"
msgstr ""

#: ../external/diazo/docs/deployment.rst:53
msgid "A pre-parsed lxml tree representing the XSLT file"
msgstr ""

#: ../external/diazo/docs/deployment.rst:55
msgid "``filename`` and ``tree`` are mutually exclusive. One is required."
msgstr ""

#: ../external/diazo/docs/deployment.rst:58
#: ../external/diazo/docs/deployment.rst:101
msgid "``read_network``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:58
#: ../external/diazo/docs/deployment.rst:101
msgid "Set this to True to allow resolving resources from the network. Defaults to False."
msgstr ""

#: ../external/diazo/docs/deployment.rst:63
#: ../external/diazo/docs/deployment.rst:106
msgid "``update_content_length``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:61
#: ../external/diazo/docs/deployment.rst:104
msgid "Can be set to False to avoid calculating an updated ``Content-Length`` header when applying the transformation. This is only a good idea if some middleware higher up the chain is going to set the content length instead. Defaults to True."
msgstr ""

#: ../external/diazo/docs/deployment.rst:67
#: ../external/diazo/docs/deployment.rst:110
msgid "``ignored_extensions``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:66
#: ../external/diazo/docs/deployment.rst:109
msgid "Can be set to a list of filename extensions for which the transformation should never be applied. Defaults to a list of common file extensions for images and binary files."
msgstr ""

#: ../external/diazo/docs/deployment.rst:72
#: ../external/diazo/docs/deployment.rst:115
msgid "``environ_param_map``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:70
#: ../external/diazo/docs/deployment.rst:113
msgid "Can be set to a dict of ``environ`` keys to parameter names. The corresponding values in the WSGI ``environ`` will then be sent to the transformation as parameters with the given names."
msgstr ""

#: ../external/diazo/docs/deployment.rst:74
msgid "Additional arguments will be passed to the transformation as parameters. When using Paste Deploy, they will always be passed as strings."
msgstr ""

#: ../external/diazo/docs/deployment.rst:77
msgid "The following options can be passed to ``DiazoMiddleware``:"
msgstr ""

#: ../external/diazo/docs/deployment.rst:79
#: ../external/plone.app.theming/docs/index.rst:539
msgid "``rules``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:80
msgid "Path to the rules file"
msgstr ""

#: ../external/diazo/docs/deployment.rst:82
msgid "``theme``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:82
msgid "Path to the theme, if not specified using a ``<theme />`` directive in the rules file. May also be a URL to a theme served over the network."
msgstr ""

#: ../external/diazo/docs/deployment.rst:85
msgid "``debug``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:85
msgid "If set to True, the theme will be recompiled on every request, allowing changes to the rules to be made on the fly. Defaults to False."
msgstr ""

#: ../external/diazo/docs/deployment.rst:95
msgid "``prefix``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:88
msgid "Can be set to a string that will be prefixed to any *relative* URL referenced in an image, link or stylesheet in the theme HTML file before the theme is passed to the compiler."
msgstr ""

#: ../external/diazo/docs/deployment.rst:92
msgid "This allows a theme to be written so that it can be opened and views standalone on the filesystem, even if at runtime its static resources are going to be served from some other location. For example, an ``<img src=\"images/foo.jpg\" />`` can be turned into ``<img src=\"/static/images/foo.jpg\" />`` with a ``prefix`` of \"/static\"."
msgstr ""

#: ../external/diazo/docs/deployment.rst:98
msgid "``includemode``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:98
msgid "Can be set to 'document', 'esi' or 'ssi' to change the way in which includes are processed"
msgstr ""

#: ../external/diazo/docs/deployment.rst:117
msgid "When using ``DiazoMiddleware``, the following keys will be added to the WSGI ``environ``:"
msgstr ""

#: ../external/diazo/docs/deployment.rst:120
msgid "``diazo.rules``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:121
msgid "The path to the rules file."
msgstr ""

#: ../external/diazo/docs/deployment.rst:122
msgid "``diazo.absolute_prefix``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:123
msgid "The absolute prefix as set with the ``prefix`` argument"
msgstr ""

#: ../external/diazo/docs/deployment.rst:125
msgid "``diazo.path``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:125
msgid "The path portion of the inbound request, which will be mapped to the ``$path`` rules variable and so enables ``if-path`` expressions."
msgstr ""

#: ../external/diazo/docs/deployment.rst:128
msgid "``diazo.query_string``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:128
msgid "The query string of the inbound request, which will be available in the rules file as the variable ``$query_string``."
msgstr ""

#: ../external/diazo/docs/deployment.rst:131
msgid "``diazo.host``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:131
msgid "The inbound hostname, which will be available in the rules file as the variable ``$host``."
msgstr ""

#: ../external/diazo/docs/deployment.rst:135
msgid "``diazo.scheme``"
msgstr ""

#: ../external/diazo/docs/deployment.rst:134
msgid "The request scheme (usually ``http`` or ``https``), which will be available in the rules file as the variable ``$scheme``."
msgstr ""

#: ../external/diazo/docs/deployment.rst:138
msgid "Nginx"
msgstr ""

#: ../external/diazo/docs/deployment.rst:140
msgid "To deploy an Diazo theme to the Nginx_ web server, you will need to compile Nginx with a special version of the XSLT module that can (optionally) use the HTML parser from libxml2."
msgstr ""

#: ../external/diazo/docs/deployment.rst:144
msgid "If you expect the source content to be xhtml well-formed and valid, then you should be able to avoid the ``xslt_html_parser on;`` directive. You can achieve this if you generate the source content."
msgstr ""

#: ../external/diazo/docs/deployment.rst:148
msgid "Otherwise, if you expect non-xhtml compliant html, you need to compile Nginx from source. At the time of this writing, the html-xslt_ project proposes full Nginx sources for Nginx 0.7 and 0.8, whereas Nginx is now 1.6 and 1.7. Here is an alternative `patch <https://github.com/jcu-eresearch/nginx-custom-build/blob/master/nginx-xslt-html-parser.patch>`_ you should be able to apply to any Nginx source code with the command-line ``patch src/http/modules/ngx_http_xslt_filter_module.c nginx-xslt-html-parser.patch``."
msgstr ""

#: ../external/diazo/docs/deployment.rst:156
msgid "In the future, the necessary patches to enable HTML mode parsing will hopefully be part of the standard Nginx distribution. There also is a `Nginx ticket <http://trac.nginx.org/nginx/ticket/609>`_ asking for the xslt_html_parser in the http_xslt_module."
msgstr ""

#: ../external/diazo/docs/deployment.rst:161
msgid "Using a properly patched Nginx, you can configure it with XSLT support like so::"
msgstr ""

#: ../external/diazo/docs/deployment.rst:166
msgid "If you are using zc.buildout and would like to build Nginx, you can start with the following example::"
msgstr ""

#: ../external/diazo/docs/deployment.rst:189
msgid "If libxml2 or libxslt are installed in a non-standard location you may need to supply the ``--with-libxml2=<path>`` and ``--with-libxslt=<path>`` options. This requires that you set an appropriate ``LD_LIBRARY_PATH`` (Linux / BSD) or ``DYLD_LIBRARY_PATH`` (Mac OS X) environment variable when running Nginx."
msgstr ""

#: ../external/diazo/docs/deployment.rst:194
msgid "For theming a static site, enable the XSLT transform in the Nginx configuration as follows::"
msgstr ""

#: ../external/diazo/docs/deployment.rst:205
msgid "Notice how we pass the ``path`` parameter, which will enable ``if-path`` expressions to work. It is possible to pass additional parameters to use in an ``if`` condition, provided the compiled theme is aware of these. See the previous section about the compiler for more details."
msgstr ""

#: ../external/diazo/docs/deployment.rst:210
msgid "Nginx may also be configured as a transforming proxy server::"
msgstr ""

#: ../external/diazo/docs/deployment.rst:226
msgid "Removing the Accept-Encoding header is sometimes necessary to prevent the backend server compressing the response (and preventing transformation). The response may be compressed in Nginx by setting ``gzip on;`` - see the `gzip module documentation <http://wiki.Nginx.org/NginxHttpGzipModule>`_ for details."
msgstr ""

#: ../external/diazo/docs/deployment.rst:232
msgid "In this example an X-Diazo header was set so the backend server may choose to serve different different CSS resources."
msgstr ""

#: ../external/diazo/docs/deployment.rst:236
msgid "Including external content with SSI"
msgstr ""

#: ../external/diazo/docs/deployment.rst:238
msgid "As an event based server, it is not practical to add ``document()`` support to the Nginx XSLT module for in-transform inclusion. Instead, external content is included through SSI in a sub-request. The SSI sub-request includes a query string parameter to indicate which parts of the resultant document to include, called ``;filter_xpath`` - see above for a full example. The configuration below uses this parameter to apply a filter::"
msgstr ""

#: ../external/diazo/docs/deployment.rst:303
msgid "In this example the sub-request is set to loop back on itself, so the include is taken from a themed page. ``filter.xsl`` (in the lib/diazo directory) and ``theme.xsl`` should both be placed in the same directory as ``Nginx.conf``."
msgstr ""

#: ../external/diazo/docs/deployment.rst:307
msgid "An example buildout is available in ``Nginx.cfg`` in this package."
msgstr ""

#: ../external/diazo/docs/deployment.rst:310
msgid "Varnish"
msgstr ""

#: ../external/diazo/docs/deployment.rst:312
msgid "To enable ESI in Varnish simply add the following to your VCL file::"
msgstr ""

#: ../external/diazo/docs/deployment.rst:320
msgid "An example buildout is available in ``varnish.cfg`` in the Diazo distribution."
msgstr ""

#: ../external/diazo/docs/deployment.rst:323
msgid "Apache"
msgstr ""

#: ../external/diazo/docs/deployment.rst:325
msgid "Diazo requires a version of ``mod_transform`` with html parsing support. The latest compatible version may be downloaded from the html-xslt_ project page."
msgstr ""

#: ../external/diazo/docs/deployment.rst:329
msgid "As well as the libxml2 and libxslt development packages, you will require the appropriate Apache development package::"
msgstr ""

#: ../external/diazo/docs/deployment.rst:334
msgid "(or ``apache2-prefork-dev`` when using PHP.)"
msgstr ""

#: ../external/diazo/docs/deployment.rst:336
msgid "Install mod_transform using the standard procedure::"
msgstr ""

#: ../external/diazo/docs/deployment.rst:342
msgid "An example virtual host configuration is shown below::"
msgstr ""

#: ../external/diazo/docs/deployment.rst:361
msgid "The ``ApacheFS`` directive enables XSLT ``document()`` inclusion, though beware that the includes documents are currently parsed using the XML rather than HTML parser."
msgstr ""

#: ../external/diazo/docs/deployment.rst:365
msgid "Unfortunately it is not possible to theme error responses (such as a 404 Not Found page) with Apache as these do not pass through the filter chain."
msgstr ""

#: ../external/diazo/docs/deployment.rst:368
msgid "As parameters are not currently supported, path expression are unavailable."
msgstr ""

#: ../external/diazo/docs/index.rst:2
msgid "Diazo theme engine guide"
msgstr ""

#: ../external/diazo/docs/index.rst:7
msgid "*di-az-o (also di-az-o-type)*"
msgstr ""

#: ../external/diazo/docs/index.rst:8
msgid "*noun*"
msgstr ""

#: ../external/diazo/docs/index.rst:9
msgid "*a copying or coloring process using a diazo compound decomposed by ultraviolet light*"
msgstr ""

#: ../external/diazo/docs/installation.rst:4
msgid "To install Diazo, you should install the ``diazo`` Python distribution."
msgstr ""

#: ../external/diazo/docs/installation.rst:6
msgid "**Note:** The Diazo package is only required to get the Diazo compiler and development tools. If you deploy your Diazo theme into a web server, you do not need the ``diazo`` distribution on that server."
msgstr ""

#: ../external/diazo/docs/installation.rst:10
msgid "You can install the ``diazo`` distribution using ``easy_install``, ``pip`` or ``zc.buildout``. For example, using ``easy_install`` (ideally in a ``virtualenv``)::"
msgstr ""

#: ../external/diazo/docs/installation.rst:16
msgid "If using ``zc.buildout``, you can use the following ``buildout.cfg`` as a starting point. This will ensure that the console scripts are installed, which is important if you need to execute the Diazo compiler manually::"
msgstr ""

#: ../external/diazo/docs/installation.rst:28
msgid "Note that ``lxml`` is a dependency of ``diazo``, so you may need to install the libxml2 and libxslt development packages in order for it to build. On Debian/Ubuntu you can run::"
msgstr ""

#: ../external/diazo/docs/installation.rst:34
msgid "On some operating systems, notably Mac OS X, CentOS and other RedHat-based Linux distributions, installing a \"good\" ``lxml`` egg can be problematic, due to a mismatch in the operating system versions of the ``libxml2`` and ``libxslt`` libraries that ``lxml`` uses. To get around that, you can compile a static ``lxml`` egg using the following buildout recipe::"
msgstr ""

#: ../external/diazo/docs/installation.rst:54
msgid "Once installed, you should find ``diazocompiler`` and ``diazorun`` in your ``bin`` directory."
msgstr ""

#: ../external/diazo/docs/installation.rst:57
msgid "If you want to use the WSGI middleware filter, you should use the ``[wsgi]`` extra when installing the Diazo egg. See :doc:`quickstart` for an example."
msgstr ""

#: ../external/diazo/docs/introduction.rst:4
msgid "Consider a scenario where you have a dynamic website, to which you want to apply a theme built by a web designer. The web designer is not familiar with the technology behind the dynamic website, and so has supplied a static HTML wireframe of the site. This consists of an HTML file with more-or-less semantic markup, one or more style sheets, and perhaps some other resources like images or JavaScript files."
msgstr ""

#: ../external/diazo/docs/introduction.rst:11
msgid "Using Diazo, you could apply this theme to your dynamic website as follows:"
msgstr ""

#: ../external/diazo/docs/introduction.rst:13
msgid "Identify the placeholders in the theme file that need to be replaced with dynamic elements. Ideally, these should be clearly identifiable, for example with a unique HTML ``id`` attribute."
msgstr ""

#: ../external/diazo/docs/introduction.rst:16
msgid "Identify the corresponding markup in the dynamic website. Then write a \"replace\" or \"copy\" rule using Diazo's rules syntax that replaces the theme's static placeholder with the dynamic content."
msgstr ""

#: ../external/diazo/docs/introduction.rst:19
msgid "Identify markup in the dynamic website that should be copied wholesale into the theme. CSS and JavaScript links in the ``<head />`` are often treated this way. Write an Diazo \"append\" or \"prepend\" rule to copy these elements over."
msgstr ""

#: ../external/diazo/docs/introduction.rst:23
msgid "Identify parts of the theme and/or dynamic website that are superfluous. Write an Diazo \"drop\" rule to remove these elements."
msgstr ""

#: ../external/diazo/docs/introduction.rst:26
msgid "The rules file is written using a simple XML syntax. Elements in the theme and \"content\" (the dynamic website) can be identified using CSS3 or XPath selectors."
msgstr ""

#: ../external/diazo/docs/introduction.rst:30
msgid "Once you have a theme HTML file and a rules XML file, you compile these using the Diazo compiler into a single XSLT file. You can then deploy this XSLT file with your application. An XSLT processor (such as mod_transform in Apache) will then transform the dynamic content from your website into the themed content your end users see. The transformation takes place on-the-fly for each request."
msgstr ""

#: ../external/diazo/docs/introduction.rst:37
msgid "Bear in mind that:"
msgstr ""

#: ../external/diazo/docs/introduction.rst:39
msgid "You never have to write, or even read, a line of XSLT (unless you want to)."
msgstr ""

#: ../external/diazo/docs/introduction.rst:40
msgid "The XSLT transformation that takes place for each request is very fast."
msgstr ""

#: ../external/diazo/docs/introduction.rst:41
msgid "Static theme resources (like images, stylesheets or JavaScript files) can be served from a static webserver, which is normally much faster than serving them from a dynamic application."
msgstr ""

#: ../external/diazo/docs/introduction.rst:44
msgid "You can leave the original theme HTML untouched, which makes it easier to re-use for other scenarios. For example, you can stitch two unrelated applications together by using a single theme file with separate rules files. This would result in two compiled XSLT files. You could use location match rules or similar techniques to choose which one to invoke for a given request."
msgstr ""

#: ../external/diazo/docs/introduction.rst:51
msgid "We will illustrate how to set up Diazo for deployment later in this guide."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:2
msgid "Quickstart"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:4
msgid "There are several ways to use Diazo:"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:6
msgid "If you want to theme `Plone`_, you should use `plone.app.theming`_"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:7
msgid "If you want to theme a Python WSGI application, you can use the WSGI middleware component described here and in more detail in :doc:`deployment`."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:9
msgid "If you want to theme just about anything, you can deploy a compiled theme to `nginx`_ or another web server"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:12
msgid "To test Diazo, however, the easiest way is to set up a simple proxy. The idea is to run a local webserver that applies the Diazo theme to a response coming from an existing website, either locally or somewhere on the internet."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:16
msgid "To set up the proxy, we will use `Buildout`_."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:18
msgid "Create a directory for the buildout::"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:22
msgid "Download the latest Buildout `bootstrap.py`_ and put it in this directory::"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:27
msgid "Create a ``buildout.cfg`` in this directory with the following contents. Please read the inline comments and adjust your copy as necessary::"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:76
msgid "Bootstrap the buildout (this is only required once)::"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:80
msgid "Note: You should use a Python binary version 2.6 or above. Python 3 is currently untested and may not work."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:83
msgid "Run the buildout (this is required each time you change ``buildout.cfg``)::"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:87
msgid "You should now have the binaries ``bin/paster``, ``bin/diazocompiler``, ``bin/diazorun`` and maybe a few others."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:90
msgid "Place the theme in a directory. The theme is a static HTML design, usually with placeholder content and images, stylesheets and JavaScript resources included via relative links. You would normally be able to test the theme by opening it from the filesystem."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:95
msgid "For the purposes of this quick-start guide, we'll create a very simple theme::"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:100
msgid "In the ``theme`` directory, we place a ``theme.html``::"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:116
msgid "We also create ``theme.css``::"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:136
msgid "Create the rules file. The rules file contains the Diazo directives that merge the content (the thing we are applying the theme to) into the theme, replacing placeholders with real content."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:140
msgid "For this example, we'll theme diazo.org, copying in the ``.content`` area and dropping the indices and tables."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:143
msgid "We create ``rules.xml`` at the top level (next to ``buildout.cfg``)::"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:157
msgid "See :doc:`basic` for details about the rules syntax."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:159
msgid "**Hint:** Use tools like Firefox's Firebug or Chrome's Developer Tools to inspect the theme and content pages, looking for suitable ids and classes to build the rules from."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:163
msgid "Create the configuration file for the proxy server. This uses the Paste Deploy toolset to set up a WSGI application."
msgstr ""

#: ../external/diazo/docs/quickstart.rst:166
msgid "At the top level (next to ``buildout.cfg``), we create ``proxy.ini``::"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:205
msgid "Run the proxy::"
msgstr ""

#: ../external/diazo/docs/quickstart.rst:209
msgid "Test, by opening up ``http://localhost:5000/`` in your favourite web browser."
msgstr ""

#: ../external/diazo/docs/recipes/adding-an-attribute/index.rst:2
msgid "Adding an attribute to elements"
msgstr ""

#: ../external/diazo/docs/recipes/adding-an-attribute/index.rst:4
msgid "This recipe demonstrates adding a ``target`` attribute to any ``a`` (link) tags on a page. This recipe will also ensure that any children elements of the given ``a`` tag will be maintained (such as ``img`` tags, as shown) and that if said attribute is already set, its value will be maintained. Note that due to processing, the attribute's ordering on the tag may change."
msgstr ""

#: ../external/diazo/docs/recipes/adding-an-attribute/index.rst:11
#: ../external/diazo/docs/recipes/create-list-from-anchors/index.rst:8
#: ../external/diazo/docs/recipes/drop-empty-tags/index.rst:8
#: ../external/diazo/docs/recipes/insert-wrapping-element/index.rst:8
#: ../external/diazo/docs/recipes/modifying-an-attribute/index.rst:7
#: ../external/diazo/docs/recipes/modifying-text/index.rst:7
msgid "Rules"
msgstr ""

#: ../external/diazo/docs/recipes/adding-an-attribute/index.rst:17
#: ../external/diazo/docs/recipes/create-list-from-anchors/index.rst:14
#: ../external/diazo/docs/recipes/drop-empty-tags/index.rst:14
#: ../external/diazo/docs/recipes/insert-wrapping-element/index.rst:14
#: ../external/diazo/docs/recipes/modifying-an-attribute/index.rst:13
#: ../external/diazo/docs/recipes/modifying-text/index.rst:13
msgid "Theme"
msgstr ""

#: ../external/diazo/docs/recipes/adding-an-attribute/index.rst:29
#: ../external/diazo/docs/recipes/create-list-from-anchors/index.rst:26
#: ../external/diazo/docs/recipes/drop-empty-tags/index.rst:26
#: ../external/diazo/docs/recipes/insert-wrapping-element/index.rst:26
#: ../external/diazo/docs/recipes/modifying-an-attribute/index.rst:25
#: ../external/diazo/docs/recipes/modifying-text/index.rst:25
msgid "Output"
msgstr ""

#: ../external/diazo/docs/recipes/create-list-from-anchors/index.rst:2
msgid "Create an unordered list from a series of elements"
msgstr ""

#: ../external/diazo/docs/recipes/create-list-from-anchors/index.rst:4
msgid "This recipe demonstrates how you can create an unordered list from a series of elements."
msgstr ""

#: ../external/diazo/docs/recipes/drop-empty-tags/index.rst:2
msgid "Drop empty tags"
msgstr ""

#: ../external/diazo/docs/recipes/drop-empty-tags/index.rst:4
msgid "This recipe demonstrates dropping of empty paragraph tags, including those that contain only whitespace or a single non-breaking space."
msgstr ""

#: ../external/diazo/docs/recipes/index.rst:2
msgid "Recipes"
msgstr ""

#: ../external/diazo/docs/recipes/index.rst:15
msgid "Contributing a recipe"
msgstr ""

#: ../external/diazo/docs/recipes/index.rst:17
msgid "Each recipe lives in a folder under ``docs/recipes`` and follows a standard format that facilitates automated testing, ensuring each recipe works as advertised."
msgstr ""

#: ../external/diazo/docs/recipes/insert-wrapping-element/index.rst:2
msgid "Insert wrapping element"
msgstr ""

#: ../external/diazo/docs/recipes/insert-wrapping-element/index.rst:4
msgid "This recipe demonstrates the insertion of a wrapping element around multiple tags."
msgstr ""

#: ../external/diazo/docs/recipes/modifying-an-attribute/index.rst:2
msgid "Modifying an attribute"
msgstr ""

#: ../external/diazo/docs/recipes/modifying-an-attribute/index.rst:4
msgid "This recipe demonstrates modifying an img href to use a thumbnail."
msgstr ""

#: ../external/diazo/docs/recipes/modifying-text/index.rst:2
msgid "Modifying text"
msgstr ""

#: ../external/diazo/docs/recipes/modifying-text/index.rst:4
msgid "This recipe demonstrates the modification of some text."
msgstr ""

#: ../external/diazo/lib/diazo/tests/allow-curly-brackets/README.rst:2
msgid "Allow curly brackets inside attributes"
msgstr ""

#: ../external/diazo/lib/diazo/tests/allow-curly-brackets/README.rst:4
msgid "Use <copy> to copy the content while preserving the attribute of a node in the HTML making sure that curly braces are accepted."
msgstr ""

#: ../external/diazo/lib/diazo/tests/copy/README.rst:2
msgid "Copy and preserve attributes"
msgstr ""

#: ../external/diazo/lib/diazo/tests/copy/README.rst:4
msgid "Use <copy> to copy the content while preserving the attribute of a node in the HTML."
msgstr ""

#: ../external/diazo/lib/diazo/tests/replace/README.rst:2
msgid "Basic replace"
msgstr ""

#: ../external/diazo/lib/diazo/tests/replace/README.rst:4
msgid "Use <replace> to replace a theme node with a content node.  Put an attribute on the theme node to ensure that the result doesn't have the attribute."
msgstr ""

#: ../external/plone.api/README.rst:2
msgid "plone.api"
msgstr ""

#: ../external/plone.api/README.rst:12
msgid "A simple API, built for humans wishing to develop with Plone."
msgstr ""

#: ../external/plone.api/README.rst:14
msgid "The intention is"
msgstr ""

#: ../external/plone.api/README.rst:16
msgid "to cover 20% of the tasks any Plone developer does 80% of the time,"
msgstr ""

#: ../external/plone.api/README.rst:17
msgid "to provide clear API methods for Plone functionality which may be confusing or difficult to access,"
msgstr ""

#: ../external/plone.api/README.rst:18
msgid "keeping everything in one place,"
msgstr ""

#: ../external/plone.api/README.rst:19
msgid "staying introspectable and discoverable, important aspects of being Pythonic."
msgstr ""

#: ../external/plone.api/README.rst:23
#: ../external/plone.app.dexterity/README.rst:106
msgid "Documentation"
msgstr ""

#: ../external/plone.api/README.rst:25
msgid "`plone.api documentation <http://docs.plone.org/external/plone.api/docs/contribute/index.html>`_ is part of the official plone documentation."
msgstr ""

#: ../external/plone.api/README.rst:27
msgid "``plone.api`` comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone. Recipes try to assume the user does not have extensive knowledge about Plone internals."
msgstr ""

#: ../external/plone.api/README.rst:32
msgid "Source Code and Contribution"
msgstr ""

#: ../external/plone.api/README.rst:43
#: ../external/plone.app.contenttypes/README.rst:477
#: ../external/plone.app.contenttypes/docs/README.rst:477
msgid "Contributors"
msgstr ""

#: ../external/plone.api/README.rst:42
msgid "please read the document `Process for Plone core's development <http://docs.plone.org/develop/plone-coredev/index.html>`_. Also consult the section about contribution in the `plone.api contributors documentation <http://docs.plone.org/external/plone.api/docs/contribute/index.html>`_."
msgstr ""

#: ../external/plone.api/README.rst:46
msgid "Source-Code"
msgstr ""

#: ../external/plone.api/README.rst:46
msgid "at the `Plone code repository hosted at Github <https://github.com/plone/plone.api>`_."
msgstr ""

#: ../external/plone.api/README.rst:49
msgid "Issues"
msgstr ""

#: ../external/plone.api/README.rst:49
msgid "Please use the `Issue-Tracker <http://github.com/plone/plone.api/issues>`_"
msgstr ""

#: ../external/plone.api/README.rst:52
msgid "Continuous Integration"
msgstr ""

#: ../external/plone.api/README.rst:52
msgid "runs on `Travis CI <http://travis-ci.org/plone/plone.api>`_."
msgstr ""

#: ../external/plone.api/README.rst:55
msgid "Code Coverage"
msgstr ""

#: ../external/plone.api/README.rst:55
msgid "is measured at `Coveralls.io <http://coveralls.io/r/plone/plone.api>`_."
msgstr ""

#: ../external/plone.api/docs/about.rst:1
#: ../external/plone.api/docs/api/content.rst:1
#: ../external/plone.api/docs/api/env.rst:1
#: ../external/plone.api/docs/api/exceptions.rst:1
#: ../external/plone.api/docs/api/group.rst:1
#: ../external/plone.api/docs/api/index.rst:1
#: ../external/plone.api/docs/api/portal.rst:1
#: ../external/plone.api/docs/api/user.rst:1
#: ../external/plone.api/docs/content.rst:1
#: ../external/plone.api/docs/contribute/conventions.rst:1
#: ../external/plone.api/docs/contribute/develop.rst:1
#: ../external/plone.api/docs/contribute/index.rst:1
#: ../external/plone.api/docs/contribute/release.rst:1
#: ../external/plone.api/docs/env.rst:1
#: ../external/plone.api/docs/group.rst:1
#: ../external/plone.api/docs/index.rst:1
#: ../external/plone.api/docs/portal.rst:1
#: ../external/plone.api/docs/user.rst:1
msgid "GitHub-only"
msgstr ""

#: ../external/plone.api/docs/about.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/about.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/about.rst:10
msgid "About"
msgstr ""

#: ../external/plone.api/docs/about.rst:16
msgid "Inspiration"
msgstr ""

#: ../external/plone.api/docs/about.rst:18
msgid "We want `plone.api` to be developed with `PEP 20 <http://www.python.org/dev/peps/pep-0020/>`_ idioms in mind, in particular:"
msgstr ""

#: ../external/plone.api/docs/about.rst:0
msgid "Explicit is better than implicit."
msgstr ""

#: ../external/plone.api/docs/about.rst:0
msgid "Readability counts."
msgstr ""

#: ../external/plone.api/docs/about.rst:0
msgid "There should be one-- and preferably only one --obvious way to do it."
msgstr ""

#: ../external/plone.api/docs/about.rst:0
msgid "Now is better than never."
msgstr ""

#: ../external/plone.api/docs/about.rst:0
msgid "If the implementation is hard to explain, it's a bad idea."
msgstr ""

#: ../external/plone.api/docs/about.rst:0
msgid "If the implementation is easy to explain, it may be a good idea."
msgstr ""

#: ../external/plone.api/docs/about.rst:27
msgid "All contributions to `plone.api` should keep these rules in mind."
msgstr ""

#: ../external/plone.api/docs/about.rst:29
msgid "Two libraries are especially inspiring:"
msgstr ""

#: ../external/plone.api/docs/about.rst:32
msgid "`SQLAlchemy <http://www.sqlalchemy.org/>`_"
msgstr ""

#: ../external/plone.api/docs/about.rst:32
msgid "Arguably, the reason for SQLAlchemy's success in the developer community lies as much in its feature set as in the fact that its API is very well   designed, is consistent, explicit, and easy to learn."
msgstr ""

#: ../external/plone.api/docs/about.rst:36
msgid "`Requests <http://docs.python-requests.org>`_"
msgstr ""

#: ../external/plone.api/docs/about.rst:35
msgid "If you look at the documentation for this library, or make `a comparison between the urllib2 way and the requests way <https://gist.github.com/973705>`_, you cannot but see a parallel between the way we *have been* and the way we *should be* writing code for Plone. At the least, we should have the option to write such clean code."
msgstr ""

#: ../external/plone.api/docs/about.rst:38
msgid "The API provides grouped functional access to otherwise distributed logic in Plone. This distribution is a result of two historical factors: re-use of CMF- and Zope-methods and reasonable but hard to remember splits like `acl_users` and `portal_memberdata`. Methods defined in `plone.api` implement best-practice access to the original distributed APIs. These methods also provide clear documentation of how best to access Plone APIs directly."
msgstr ""

#: ../external/plone.api/docs/about.rst:44
msgid "If you doubt those last sentences: We had five different ways to get the portal root with different edge-cases. We had three different ways to move an object. With this in mind, it's obvious that even the most simple tasks can't be documented in Plone in a sane way."
msgstr ""

#: ../external/plone.api/docs/about.rst:49
msgid "We do not intend to cover all possible use-cases, only the most common. We will cover the 20% of possible tasks on which we spend 80% of our time. If you need to do something that `plone.api` does not support, use the underlying APIs directly. We try to document sensible use cases even when we don't provide APIs for them, though."
msgstr ""

#: ../external/plone.api/docs/about.rst:55
#: ../external/plone.app.contenttypes/README.rst:313
#: ../external/plone.app.contenttypes/docs/README.rst:313
msgid "Design decisions"
msgstr ""

#: ../external/plone.api/docs/about.rst:58
msgid "Import and usage style"
msgstr ""

#: ../external/plone.api/docs/about.rst:60
msgid "API methods are grouped according to what they affect. For example: :ref:`chapter_portal`, :ref:`chapter_content`, :ref:`chapter_users`, :ref:`chapter_env` and :ref:`chapter_groups`. In general, importing and using an API looks something like this:"
msgstr ""

#: ../external/plone.api/docs/about.rst:89
msgid "Always import the top-level package (``from plone import api``) and then use the group namespace to access the method you want (``portal = api.portal.get()``)."
msgstr ""

#: ../external/plone.api/docs/about.rst:94
msgid "All example code should adhere to this style, to encourage one and only one preferred way of consuming API methods."
msgstr ""

#: ../external/plone.api/docs/about.rst:98
msgid "Prefer keyword arguments"
msgstr ""

#: ../external/plone.api/docs/about.rst:100
msgid "We prefer using keyword arguments to positional arguments. Example code in `plone.api` will use this style, and we recommend users to follow this convention. For the curious, here are the reasons:"
msgstr ""

#: ../external/plone.api/docs/about.rst:104
msgid "There will never be a doubt when writing a method on whether an argument should be positional or not. Decision already made."
msgstr ""

#: ../external/plone.api/docs/about.rst:106
msgid "There will never be a doubt when using the API on which argument comes first, or which ones are named/positional. All arguments are named."
msgstr ""

#: ../external/plone.api/docs/about.rst:108
msgid "When using positional arguments, the method signature is dictated by the underlying implementation (think required vs. optional arguments). Named arguments are always optional in Python. Using keywords allows implementation details to change while the signature is preserved. In other words, the underlying API code can change substantially but code using it will remain valid."
msgstr ""

#: ../external/plone.api/docs/about.rst:113
msgid "The arguments can all be passed as a dictionary."
msgstr ""

#: ../external/plone.api/docs/about.rst:128
msgid "FAQ"
msgstr ""

#: ../external/plone.api/docs/about.rst:131
msgid "Why aren't we using wrappers?"
msgstr ""

#: ../external/plone.api/docs/about.rst:133
msgid "We could wrap an object (like a user) with an API to make it more usable right now. That would be an alternative to the convenience methods."
msgstr ""

#: ../external/plone.api/docs/about.rst:136
msgid "Unfortunately a wrapper is not the same as the object it wraps, and answering the inevitable questions about this difference would be confusing. Moreover, functionality provided by :mod:`zope.interface` such as annotations would need to be proxied. This would be extremely difficult, if not impossible."
msgstr ""

#: ../external/plone.api/docs/about.rst:139
msgid "It is also important that developers be able to ensure that their tests continue to work even if wrappers were to be deprecated. Consider the failure lurking behind test code such as this::"
msgstr ""

#: ../external/plone.api/docs/about.rst:147
msgid "Why ``delete`` instead of ``remove``?"
msgstr ""

#: ../external/plone.api/docs/about.rst:149
msgid "The underlying code uses methods that are named more similarly to *delete* rather than to *remove*."
msgstr ""

#: ../external/plone.api/docs/about.rst:150
msgid "The ``CRUD`` verb is *delete*, not *remove*."
msgstr ""

#: ../external/plone.api/docs/api/content.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/api/content.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/api/content.rst:11
msgid "plone.api.content"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content:1
msgid "Module that provides functionality for content manipulation."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.copy:1
#: ../../../<autosummary>:1
msgid "Copy the object to the target container."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.copy:3
msgid "[required] Object that we want to copy."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.copy:5
msgid "Target container to which the source object will be moved. If no target is specified, the source object's container will be used as a target."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.copy:9
msgid "Id of the copied object on the target location. If no id is provided, the copied object will have the same id as the source object - however, if the new object's id conflicts with another object in the target container, a suffix will be added to the new object's id."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.copy:14
#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.move:15
msgid "When False, the given id will be enforced. If the id is conflicting with another object in the target container, raise a InvalidParameterError. When True, choose a new, non-conflicting id."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.copy:18
msgid "Content object that was created in the target location"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.copy:20
msgid "KeyError, ValueError"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.copy:22
msgid ":ref:`content_copy_example`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.create:1
#: ../../../<autosummary>:1
msgid "Create a new content item."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.create:3
msgid "[required] Container object in which to create the new object."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.create:6
msgid "[required] Type of the object."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.create:8
msgid "Id of the object.  If the id conflicts with another object in the container, a suffix will be added to the new object's id. If no id is provided, automatically generate one from the title. If there is no id or title provided, raise a ValueError."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.create:13
msgid "Title of the object. If no title is provided, use id as the title."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.create:16
msgid "When False, the given id will be enforced. If the id is conflicting with another object in the target container, raise an InvalidParameterError. When True, choose a new, non-conflicting id."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.create:20
#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get:8
msgid "Content object"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.create:22
msgid "KeyError, :class:`~plone.api.exc.MissingParameterError`, :class:`~plone.api.exc.InvalidParameterError`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.create:25
msgid ":ref:`content_create_example`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.delete:1
#: ../../../<autosummary>:1
msgid "Delete the object(s)."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.delete:3
msgid "Object that we want to delete."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.delete:5
msgid "Objects that we want to delete."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.delete:7
msgid "Raise exception if there are linkintegrity-breaches."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.delete:12
msgid "ValueError plone.app.linkintegrity.exceptions.LinkIntegrityNotificationException"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.delete:15
msgid ":ref:`content_delete_example`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:1
msgid "Find content in the portal."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:3
msgid "Context for the search"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:5
msgid "How far in the content tree we want to search from context"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:7
msgid "Catalog brains"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:9
msgid ":ref:`content_find_example`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:11
msgid "Find works alike catalog(). Indexes are passing in as arguments with the search query as the values."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:14
msgid "Specify indexes as arguments: >>> find(portal_type='Document')"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:17
msgid "or combinations of indexes. >>> find(portal_type='Document', SearchableText='Team')"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:21
msgid "Differences to using the catalog directly are:"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:23
msgid "The context argument allows passing in an context object, instead of path='/'.join(context.getPhysicalPath()."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:30
msgid "Specifing the search depth is supported using the `depth` argument. >>> find(depth=1)"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:33
msgid "Using `depth` needs a context for it's path. If no context is passed, the portal root is used. >>> find(context=portal, depth=1, portal_type='Document') - or - >>> find(depth=1, portal_type='Document')"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:39
msgid "The path can be queried directly, too: >>> find(path={'query': '/plone/about/team', 'depth': 1})"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:42
msgid "The `object_provides` index/argument allows Interface objects as well as identifiers. >>> find(object_provides=IATDocument) - or - >>> find(object_provides=IATDocument.__identifier__)"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.find:48
msgid "An empty resultset is returned if no valid indexes are queried. >>> len(find()) >>> 0"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get:1
#: ../../../<autosummary>:1
msgid "Get an object."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get:3
msgid "Path to the object we want to get, relative to the portal root."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get:6
msgid "UID of the object we want to get."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get:10
msgid "ValueError,"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get:11
msgid ":ref:`content_get_example`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_state:1
#: ../../../<autosummary>:1
msgid "Get the current workflow state of the object."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_state:3
msgid "[required] Object that we want to get the state for."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_state:5
msgid "Returned if no workflow is defined for the object."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_state:6
msgid "Object's current workflow state, or `default`."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_state:9
msgid "Products.CMFCore.WorkflowCore.WorkflowException"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_state:10
msgid ":ref:`content_get_state_example`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_uuid:1
#: ../../../<autosummary>:1
msgid "Get the object's Universally Unique IDentifier (UUID)."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_uuid:3
msgid "[required] Object we want its UUID."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_uuid:5
msgid "Object's UUID"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_uuid:8
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.create:16
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.delete:11
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get:8
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_roles:13
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.grant_roles:15
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.revoke_roles:15
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_localized_time:25
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.send_email:13
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.show_message:10
msgid "ValueError"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_uuid:9
msgid ":ref:`content_get_uuid_example`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_view:1
#: ../../../<autosummary>:1
msgid "Get a BrowserView object."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_view:3
msgid "[required] Name of the view."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_view:5
msgid "[required] Context on which to get view."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_view:7
msgid "[required] Request on which to get view."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_view:10
#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.transition:15
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_tool:7
msgid ":class:`~plone.api.exc.MissingParameterError`, :class:`~plone.api.exc.InvalidParameterError`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.get_view:12
msgid ":ref:`content_get_view_example`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.move:1
#: ../../../<autosummary>:1
msgid "Move the object to the target container."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.move:3
msgid "[required] Object that we want to move."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.move:5
msgid "Target container to which the source object will be moved. If no target is specified, the source object's container will be used as a target, effectively making this operation a rename (:ref:`content_rename_example`)."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.move:10
msgid "Pass this parameter if you want to change the id of the moved object on the target location. If the new id conflicts with another object in the target container, a suffix will be added to the moved object's id."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.move:19
msgid "Content object that was moved to the target location"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.move:21
msgid "KeyError ValueError"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.move:23
msgid ":ref:`content_move_example`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.rename:1
#: ../../../<autosummary>:1
msgid "Rename the object."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.rename:3
msgid "[required] Object that we want to rename."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.rename:5
msgid "New id of the object."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.rename:7
msgid "When False, the given id will be enforced. If the id is conflicting with another object in the container, raise a InvalidParameterError. When True, choose a new, non-conflicting id."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.rename:11
msgid "Content object that was renamed"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.rename:12
msgid ":ref:`content_rename_example`"
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.transition:1
msgid "Perform a workflow transition for the object or attempt to perform workflow transitions on the object to reach the given state. The later will not guarantee that transition guards conditions can be met."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.transition:5
msgid "Accepts kwargs to supply to the workflow policy in use, such as \"comment\""
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.transition:7
msgid "[required] Object for which we want to perform the workflow transition."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.transition:10
msgid "Name of the workflow transition."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.transition:12
msgid "Name of the workflow state."
msgstr ""

#: ../../plone.api/src/plone/api/content.py:docstring of plone.api.content.transition:17
msgid ":ref:`content_transition_example`"
msgstr ""

#: ../external/plone.api/docs/api/env.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/api/env.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/api/env.rst:11
msgid "plone.api.env"
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.adopt_roles:1
#: ../../../<autosummary>:1
msgid "Context manager for temporarily switching roles."
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.adopt_roles:3
msgid "New roles to gain inside block. Existing roles will be lost."
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.adopt_roles:5
msgid ":ref:`env_adopt_roles_example`"
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.adopt_user:1
#: ../../../<autosummary>:1
msgid "Context manager for temporarily switching user inside a block."
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.adopt_user:3
msgid "User object to switch to inside block."
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.adopt_user:5
msgid "username of user to switch to inside block."
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.adopt_user:7
msgid ":ref:`env_adopt_user_example`"
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.debug_mode:1
#: ../../../<autosummary>:1
msgid "Returns True if your zope instance is running in debug mode."
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.debug_mode:3
msgid ":ref:`env_debug_mode_example`"
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.plone_version:1
msgid "Return Plone version number."
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.plone_version:3
msgid "string denoting what release of Plone this distribution contains"
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.plone_version:4
msgid ":ref:`env_plone_version_example`"
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.test_mode:1
#: ../../../<autosummary>:1
msgid "Returns True if you are running the zope test runner."
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.test_mode:3
msgid ":ref:`env_test_mode_example`"
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.zope_version:1
msgid "Return Zope 2 version number."
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.zope_version:3
msgid "string denoting what release of Zope2 this distribution contains"
msgstr ""

#: ../../plone.api/src/plone/api/env.py:docstring of plone.api.env.zope_version:4
msgid ":ref:`env_zope_version_example`"
msgstr ""

#: ../external/plone.api/docs/api/exceptions.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/api/exceptions.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/api/exceptions.rst:11
msgid "plone.api.exc"
msgstr ""

#: ../../plone.api/src/plone/api/exc.py:docstring of plone.api.exc:1
msgid "Exceptions raised by plone.api methods."
msgstr ""

#: ../../plone.api/src/plone/api/exc.py:docstring of plone.api.exc.CannotGetPortalError:1
#: ../../../<autosummary>:1
msgid "Raised when the portal object cannot be retrieved."
msgstr ""

#: ../../plone.api/src/plone/api/exc.py:docstring of plone.api.exc.CannotGetPortalError:3
msgid "This normally happens if you are using plone.api ``bin/instance debug``, because debug sessions do not have a request and so the getSite() cannot know which Plone portal you want to get (as there can be multiple Plone sites)."
msgstr ""

#: ../../plone.api/src/plone/api/exc.py:docstring of plone.api.exc.CannotGetPortalError:8
msgid "The solution is to use the ``-O <portal_id>`` parameter to tell Zope to traverse to a portal, for example ``bin/instance -O Plone debug.``"
msgstr ""

#: ../../plone.api/src/plone/api/exc.py:docstring of plone.api.exc.GroupNotFoundError:1
msgid "Raised when a specified or implicit group can not be retrieved."
msgstr ""

#: ../../plone.api/src/plone/api/exc.py:docstring of plone.api.exc.InvalidParameterError:1
#: ../../../<autosummary>:1
msgid "Raised when a parameter is invalid."
msgstr ""

#: ../../plone.api/src/plone/api/exc.py:docstring of plone.api.exc.MissingParameterError:1
#: ../../../<autosummary>:1
msgid "Raised when a parameter is missing."
msgstr ""

#: ../../plone.api/src/plone/api/exc.py:docstring of plone.api.exc.PloneApiError:1
#: ../../../<autosummary>:1
msgid "Base exception class for plone.api errors."
msgstr ""

#: ../../plone.api/src/plone/api/exc.py:docstring of plone.api.exc.UserNotFoundError:1
msgid "Raised when a specified or implicit user can not be retrieved."
msgstr ""

#: ../external/plone.api/docs/api/group.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/api/group.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/api/group.rst:11
msgid "plone.api.group"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group:1
msgid "Module that provides functionality for group manipulation."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.add_user:1
#: ../../../<autosummary>:1
msgid "Add the user to a group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.add_user:3
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.delete:3
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_roles:3
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.grant_roles:3
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.remove_user:3
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.revoke_roles:3
msgid "Arguments ``groupname`` and ``group`` are mutually exclusive. You can either set one or the other, but not both."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.add_user:6
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_groups:3
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.remove_user:6
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.delete:3
msgid "Arguments ``username`` and ``user`` are mutually exclusive. You can either set one or the other, but not both."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.add_user:9
msgid "Name of the group to which to add the user."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.add_user:11
msgid "Group to which to add the user."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.add_user:13
msgid "Username of the user to add to the group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.add_user:15
msgid "User to add to the group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.add_user:18
#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.remove_user:18
msgid "ValueError UserNotFoundError"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.add_user:20
msgid ":ref:`group_add_user_example`"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.create:1
#: ../../../<autosummary>:1
msgid "Create a group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.create:3
msgid "[required] Name of the new group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.create:5
msgid "Title of the new group"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.create:7
msgid "Description of the new group"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.create:9
msgid "Roles to assign to this group"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.create:11
msgid "Groups that belong to this group"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.create:13
msgid "Newly created group"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.create:17
msgid ":ref:`group_create_example`"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.delete:1
#: ../../../<autosummary>:1
msgid "Delete a group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.delete:6
msgid "Name of the group to be deleted."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.delete:8
msgid "Group object to be deleted."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.delete:12
msgid ":ref:`group_delete_example`"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get:1
#: ../../../<autosummary>:1
msgid "Get a group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get:3
msgid "[required] Name of the group we want to get."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get:5
msgid "Group"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get:9
msgid ":ref:`group_get_example`"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_groups:1
#: ../../../<autosummary>:1
msgid "Get all groups or all groups filtered by user."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_groups:6
msgid "Username of the user for which to return groups. If set, only return groups that this user is member of."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_groups:9
msgid "User for which to return groups. If set, only return groups that this user is member of."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_groups:12
msgid "All groups (optionlly filtered by user)"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_groups:14
msgid "UserNotFoundError"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_groups:15
msgid ":ref:`group_get_all_groups_example`, :ref:`group_get_users_groups_example`"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_roles:1
#: ../../../<autosummary>:1
msgid "Get group's site-wide or local roles."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_roles:6
msgid "Name of the group to get roles from."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_roles:8
msgid "Group to get roles from."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_roles:10
msgid "If obj is set then return local roles on this context."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.get_roles:14
msgid ":ref:`group_get_roles_example`"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.grant_roles:1
#: ../../../<autosummary>:1
msgid "Grant roles to a group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.grant_roles:6
msgid "Name of the group to grant roles to."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.grant_roles:8
msgid "Group to grant roles to."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.grant_roles:10
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.grant_roles:14
msgid "List of roles to grant"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.grant_roles:12
msgid "If obj is set then grant local roles on this context."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.grant_roles:16
msgid ":ref:`group_grant_roles_example`"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.remove_user:1
#: ../../../<autosummary>:1
msgid "Remove the user from a group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.remove_user:9
msgid "Name of the group to remove the user from."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.remove_user:11
msgid "Group to remove the user from."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.remove_user:13
msgid "Username of the user to delete from the group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.remove_user:15
msgid "User to delete from the group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.remove_user:20
msgid ":ref:`group_remove_user_example`"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.revoke_roles:1
#: ../../../<autosummary>:1
msgid "Revoke roles from a group."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.revoke_roles:6
msgid "Name of the group to revoke roles to."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.revoke_roles:8
msgid "Group to revoke roles to."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.revoke_roles:10
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.revoke_roles:14
msgid "List of roles to revoke"
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.revoke_roles:12
msgid "If obj is set then revoke local roles on this context."
msgstr ""

#: ../../plone.api/src/plone/api/group.py:docstring of plone.api.group.revoke_roles:16
msgid ":ref:`group_revoke_roles_example`"
msgstr ""

#: ../external/plone.api/docs/api/index.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/api/index.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/api/index.rst:11
msgid "List of all API methods with descriptions"
msgstr ""

#: ../external/plone.api/docs/api/index.rst:14
msgid "api.portal"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.portal.get <plone.api.portal.get>`\\ ()"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get:1
msgid "Get the Plone portal object out of thin air."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.portal.get_navigation_root <plone.api.portal.get_navigation_root>`\\ ([context])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_navigation_root:1
msgid "Get the navigation root object for the context."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.portal.get_tool <plone.api.portal.get_tool>`\\ ([name])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_tool:1
msgid "Get a portal tool in a simple way."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.portal.get_localized_time <plone.api.portal.get_localized_time>`\\ ([datetime, ...])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_localized_time:1
msgid "Display a date/time in a user-friendly way."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.portal.send_email <plone.api.portal.send_email>`\\ ([sender, recipient, ...])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.send_email:1
msgid "Send an email."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.portal.show_message <plone.api.portal.show_message>`\\ ([message, request, type])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.show_message:1
msgid "Display a status message."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.portal.get_registry_record <plone.api.portal.get_registry_record>`\\ ([name])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_registry_record:1
msgid "Get a record value from a the ``plone.app.registry``"
msgstr ""

#: ../external/plone.api/docs/api/index.rst:28
msgid "api.content"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.content.get <plone.api.content.get>`\\ ([path, UID])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.content.create <plone.api.content.create>`\\ ([container, type, id, ...])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.content.delete <plone.api.content.delete>`\\ ([obj, objects, ...])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.content.copy <plone.api.content.copy>`\\ ([source, target, id, safe_id])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.content.move <plone.api.content.move>`\\ ([source, target, id, safe_id])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.content.rename <plone.api.content.rename>`\\ ([obj, new_id, safe_id])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.content.get_uuid <plone.api.content.get_uuid>`\\ ([obj])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.content.get_state <plone.api.content.get_state>`\\ ([obj, default])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.content.transition <plone.api.content.transition>`\\ ([obj, transition, ...])"
msgstr ""

#: ../../../<autosummary>:1
msgid "Perform a workflow transition for the object or attempt to perform workflow transitions on the object to reach the given state."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.content.get_view <plone.api.content.get_view>`\\ ([name, context, request])"
msgstr ""

#: ../external/plone.api/docs/api/index.rst:45
msgid "api.user"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.user.get <plone.api.user.get>`\\ ([userid, username])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get:1
msgid "Get a user."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.user.create <plone.api.user.create>`\\ ([email, username, password, ...])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.create:1
msgid "Create a user."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.user.delete <plone.api.user.delete>`\\ ([username, user])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.delete:1
msgid "Delete a user."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.user.get_current <plone.api.user.get_current>`\\ ()"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_current:1
msgid "Get the currently logged-in user."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.user.is_anonymous <plone.api.user.is_anonymous>`\\ ()"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.is_anonymous:1
msgid "Check if the currently logged-in user is anonymous."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.user.get_users <plone.api.user.get_users>`\\ ([groupname, group])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_users:1
msgid "Get all users or all users filtered by group."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.user.get_roles <plone.api.user.get_roles>`\\ ([username, user, obj, ...])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_roles:1
msgid "Get user's site-wide or local roles."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.user.get_permissions <plone.api.user.get_permissions>`\\ ([username, user, obj])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_permissions:1
msgid "Get user's site-wide or local permissions."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.user.grant_roles <plone.api.user.grant_roles>`\\ ([username, user, obj, ...])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.grant_roles:1
msgid "Grant roles to a user."
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.user.revoke_roles <plone.api.user.revoke_roles>`\\ ([username, user, obj, ...])"
msgstr ""

#: ../../../<autosummary>:1
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.revoke_roles:1
msgid "Revoke roles from a user."
msgstr ""

#: ../external/plone.api/docs/api/index.rst:62
msgid "api.group"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.group.get <plone.api.group.get>`\\ ([groupname])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.group.create <plone.api.group.create>`\\ ([groupname, title, ...])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.group.delete <plone.api.group.delete>`\\ ([groupname, group])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.group.add_user <plone.api.group.add_user>`\\ ([groupname, group, ...])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.group.remove_user <plone.api.group.remove_user>`\\ ([groupname, group, ...])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.group.get_groups <plone.api.group.get_groups>`\\ ([username, user])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.group.get_roles <plone.api.group.get_roles>`\\ ([groupname, group, obj])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.group.grant_roles <plone.api.group.grant_roles>`\\ ([groupname, group, ...])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.group.revoke_roles <plone.api.group.revoke_roles>`\\ ([groupname, group, ...])"
msgstr ""

#: ../external/plone.api/docs/api/index.rst:78
msgid "api.env"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.env.adopt_roles <plone.api.env.adopt_roles>`\\ ([roles])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.env.adopt_user <plone.api.env.adopt_user>`\\ ([username, user])"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.env.debug_mode <plone.api.env.debug_mode>`\\ ()"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.env.test_mode <plone.api.env.test_mode>`\\ ()"
msgstr ""

#: ../external/plone.api/docs/api/index.rst:89
msgid "Exceptions and errors"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.exc.PloneApiError <plone.api.exc.PloneApiError>`\\"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.exc.MissingParameterError <plone.api.exc.MissingParameterError>`\\"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.exc.InvalidParameterError <plone.api.exc.InvalidParameterError>`\\"
msgstr ""

#: ../../../<autosummary>:1
msgid ":obj:`api.exc.CannotGetPortalError <plone.api.exc.CannotGetPortalError>`\\"
msgstr ""

#: ../external/plone.api/docs/api/portal.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/api/portal.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/api/portal.rst:11
msgid "plone.api.portal"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal:1
msgid "Module that provides various utility methods on the portal level."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get:3
msgid "Without the need to import fancy Interfaces and doing multi adapter lookups."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get:6
msgid "Plone portal object"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get:8
msgid ":ref:`portal_get_example`"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_localized_time:3
msgid "It should be localized to the user's preferred language."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_localized_time:5
msgid "Note that you can specify both long_format and time_only as True (or any other value that can be converted to a boolean True value), but time_only then wins: the long_format value is ignored."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_localized_time:9
msgid "You can also use datetime.datetime or datetime.date instead of Plone's DateTime. In case of datetime.datetime everything works the same, in case of datetime.date the long_format parameter is ignored and on time_only an empty string is returned."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_localized_time:14
#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.show_message:3
msgid "[required] Message to show."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_localized_time:16
msgid "When true, show long date format. When false (default), show the short date format."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_localized_time:19
msgid "When true, show only the time, when false (default), show the date."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_localized_time:22
msgid "Localized time"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_localized_time:26
msgid ":ref:`portal_get_localized_time_example`"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_navigation_root:3
msgid "This traverses the path up and returns the nearest navigation root. Useful for multi-lingual installations and sites with subsites."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_navigation_root:6
msgid "[required] Context on which to get the navigation root."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_navigation_root:8
msgid "Navigation Root"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_navigation_root:10
msgid ":ref:`portal_get_navigation_root_example`"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_registry_record:3
msgid "[required] Name"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_registry_record:5
msgid "Registry record value"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_registry_record:7
msgid ":ref:`portal_get_registry_record_example`"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_tool:3
msgid "[required] Name of the tool you want."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_tool:5
msgid "The tool that was found by name"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.get_tool:9
msgid ":ref:`portal_get_tool_example`"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.send_email:3
msgid "Email sender, 'from' field. If not set, the portal default will be used."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.send_email:6
msgid "[required] Email recipient, 'to' field."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.send_email:8
msgid "[required] Subject of the email."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.send_email:10
msgid "[required] Body text of the email"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.send_email:14
msgid ":ref:`portal_send_email_example`"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.set_registry_record:1
msgid "Set a record value in the ``plone.app.registry``"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.set_registry_record:3
msgid "[required] Name of the record"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.set_registry_record:5
msgid "[required] Value to set"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.set_registry_record:7
msgid ":ref:`portal_set_registry_record_example`"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.show_message:5
msgid "[required] Request."
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.show_message:7
msgid "Message type. Possible values: 'info', 'warn', 'error'"
msgstr ""

#: ../../plone.api/src/plone/api/portal.py:docstring of plone.api.portal.show_message:11
msgid ":ref:`portal_show_message_example`"
msgstr ""

#: ../external/plone.api/docs/api/user.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/api/user.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/api/user.rst:11
msgid "plone.api.user"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user:1
msgid "Module that provides functionality for user manipulation."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.create:3
msgid "[required] Email for the new user."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.create:5
msgid "Username for the new user. This is required if email is not used as a username."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.create:8
msgid "Password for the new user. If it's not set we generate a random 8-char alpha-numeric one."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.create:11
msgid "User properties to assign to the new user. The list of available properties is available in ``portal_memberdata`` through ZMI."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.create:14
msgid "Newly created user"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.create:17
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.delete:11
msgid "MissingParameterError InvalidParameterError"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.create:19
msgid ":ref:`user_create_example`"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.delete:6
msgid "Username of the user to be deleted."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.delete:8
msgid "User object to be deleted."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.delete:13
msgid ":ref:`user_delete_example`"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get:3
msgid "Plone provides both a unique, unchanging identifier for a user (the userid) and a username, which is the value a user types into the login form. In many cases, the values for each will be the same, but under some circumstances they will differ. Known instances of this behavior include:"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get:8
msgid "using content-based members via membrane"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get:9
msgid "users changing their email address when using email as login is enabled"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get:11
msgid "We provide the ability to look up users by either."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get:13
msgid "Userid of the user we want to get."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get:15
msgid "Username of the user we want to get."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get:17
msgid "User"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get:20
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_roles:18
msgid "MissingParameterError"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get:21
msgid ":ref:`user_get_example`"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_current:3
msgid "Currently logged-in user"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_current:5
msgid ":ref:`user_get_current_example`"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_permissions:3
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.grant_roles:3
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.has_permission:3
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.revoke_roles:3
msgid "Arguments ``username`` and ``user`` are mutually exclusive. You can either set one or the other, but not both. if ``username`` and ``user`` are not given, the authenticated member will be used."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_permissions:7
msgid "Username of the user for which you want to check the permissions."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_permissions:10
msgid "User object for which you want to check the permissions."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_permissions:12
msgid "If obj is set then check the permissions on this context. If obj is not given, the site root will be used."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_permissions:16
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.has_permission:18
#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.revoke_roles:17
msgid "InvalidParameterError"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_permissions:17
msgid ":ref:`user_get_permissions_example`"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_roles:3
msgid "Arguments ``username`` and ``user`` are mutually exclusive. You can either set one or the other, but not both. if ``username`` and ``user`` are not given, the currently authenticated member will be used."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_roles:7
msgid "Username of the user for which to get roles."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_roles:9
msgid "User object for which to get roles."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_roles:11
msgid "If obj is set then return local roles on this context. If obj is not given, the site root local roles will be returned."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_roles:14
msgid "if obj is set and inherit is False, only return local roles"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_roles:19
msgid ":ref:`user_get_roles_example`"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_users:3
msgid "Arguments ``group`` and ``groupname`` are mutually exclusive. You can either set one or the other, but not both."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_users:6
msgid "Groupname of the group of which to return users. If set, only return users that are member of this group."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_users:9
msgid "Group of which to return users. If set, only return users that are member of this group."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_users:12
msgid "All users (optionlly filtered by group)"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.get_users:14
msgid ":ref:`user_get_all_users_example`, :ref:`user_get_groups_users_example`"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.grant_roles:7
msgid "Username of the user that will receive the granted roles."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.grant_roles:9
msgid "User object that will receive the granted roles."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.grant_roles:11
msgid "If obj is set then grant roles on this context. If obj is not given, the site root will be used."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.grant_roles:17
msgid "InvalidParameterError MissingParameterError"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.grant_roles:19
msgid ":ref:`user_grant_roles_example`"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.has_permission:1
msgid "Check whether this user has the given permssion."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.has_permission:7
msgid "The permission you wish to check"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.has_permission:9
msgid "Username of the user for which you want to check the permission."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.has_permission:12
msgid "User object for which you want to check the permission."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.has_permission:14
msgid "If obj is set then check the permission on this context. If obj is not given, the site root will be used."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.has_permission:19
msgid "True if the user has the permission, False otherwise."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.is_anonymous:3
msgid "True if the current user is anonymous, False otherwise."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.is_anonymous:5
msgid ":ref:`user_is_anonymous_example`"
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.revoke_roles:7
msgid "Username of the user that will receive the revoked roles."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.revoke_roles:9
msgid "User object that will receive the revoked roles."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.revoke_roles:11
msgid "If obj is set then revoke roles on this context. If obj is not given, the site root will be used."
msgstr ""

#: ../../plone.api/src/plone/api/user.py:docstring of plone.api.user.revoke_roles:18
msgid ":ref:`user_revoke_roles_example`"
msgstr ""

#: ../external/plone.api/docs/content.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/content.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/content.rst:20
#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:23
msgid "Create content"
msgstr ""

#: ../external/plone.api/docs/content.rst:22
msgid "To add an object, you must first have a container in which to put it. Get the portal object, it will serve nicely:"
msgstr ""

#: ../external/plone.api/docs/content.rst:30
msgid "Create your new content item using the :meth:`api.content.create` method. The type argument will decide which content type will be created. Both Dexterity and Archetypes content types are supported."
msgstr ""

#: ../external/plone.api/docs/content.rst:42
msgid "The ``id`` of the new object is automatically and safely generated from its ``title``."
msgstr ""

#: ../external/plone.api/docs/content.rst:52
msgid "Get content object"
msgstr ""

#: ../external/plone.api/docs/content.rst:54
msgid "There are several approaches to getting your content object. Consider the following portal structure::"
msgstr ""

#: ../external/plone.api/docs/content.rst:83
msgid "The following operations will get objects from the stucture above, including using :meth:`api.content.get`."
msgstr ""

#: ../external/plone.api/docs/content.rst:124
msgid "Find content objects"
msgstr ""

#: ../external/plone.api/docs/content.rst:126
msgid "You can use the find function to search for content."
msgstr ""

#: ../external/plone.api/docs/content.rst:128
msgid "Finding all Documents:"
msgstr ""

#: ../external/plone.api/docs/content.rst:140
msgid "Finding all Documents within a context:"
msgstr ""

#: ../external/plone.api/docs/content.rst:152
msgid "Limit search depth:"
msgstr ""

#: ../external/plone.api/docs/content.rst:164
msgid "Limit search depth within a context:"
msgstr ""

#: ../external/plone.api/docs/content.rst:177
msgid "Search by interface:"
msgstr ""

#: ../external/plone.api/docs/content.rst:190
msgid "Combining multiple arguments:"
msgstr ""

#: ../external/plone.api/docs/content.rst:208
msgid "More information about how to use the catalog may be found in the `Plone Documentation <http://docs.plone.org/develop/plone/searching_and_indexing/index.html>`_. Note that the catalog returns *brains* (metadata stored in indexes) and not objects. However, calling ``getObject()`` on brains does in fact give you the object."
msgstr ""

#: ../external/plone.api/docs/content.rst:220
msgid "Get content object UUID"
msgstr ""

#: ../external/plone.api/docs/content.rst:222
msgid "A Universally Unique IDentifier (UUID) is a unique, non-human-readable identifier for a content object which stays on the object even if the object is moved."
msgstr ""

#: ../external/plone.api/docs/content.rst:224
msgid "Plone uses UUIDs for storing references between content and for linking by UIDs, enabling persistent links."
msgstr ""

#: ../external/plone.api/docs/content.rst:226
msgid "To get the UUID of any content object use :meth:`api.content.get_uuid`. The following code gets the UUID of the ``contact`` document."
msgstr ""

#: ../external/plone.api/docs/content.rst:244
msgid "Move content"
msgstr ""

#: ../external/plone.api/docs/content.rst:246
msgid "To move content around the portal structure defined above use the :meth:`api.content.move` method. The code below moves the ``contact`` item (with all it contains) out of the folder ``about`` and into the Plone portal root."
msgstr ""

#: ../external/plone.api/docs/content.rst:262
msgid "Actually, ``move`` behaves like a filesystem move. If you pass it an ``id`` argument the object will have that new ID in it's new home. By default it will retain its original ID."
msgstr ""

#: ../external/plone.api/docs/content.rst:269
msgid "Rename content"
msgstr ""

#: ../external/plone.api/docs/content.rst:271
msgid "To rename a content object (change its ID), use the :meth:`api.content.rename` method."
msgstr ""

#: ../external/plone.api/docs/content.rst:288
msgid "Copy content"
msgstr ""

#: ../external/plone.api/docs/content.rst:290
msgid "To copy a content object, use the :meth:`api.content.copy` method."
msgstr ""

#: ../external/plone.api/docs/content.rst:300
msgid "Note that the new object will have the same ID as the old object (unless otherwise stated). This is not a problem, since the new object is in a different container."
msgstr ""

#: ../external/plone.api/docs/content.rst:309
msgid "You can also set ``target`` to source's container and set ``safe_id=True``. This will duplicate your content object in the same container and assign it a new, non-conflicting ID."
msgstr ""

#: ../external/plone.api/docs/content.rst:326
msgid "Delete content"
msgstr ""

#: ../external/plone.api/docs/content.rst:328
msgid "To delete a content object, pass the object to the :meth:`api.content.delete` method:"
msgstr ""

#: ../external/plone.api/docs/content.rst:341
msgid "To delete multiple content objects, pass the objects to the :meth:`api.content.delete` method:"
msgstr ""

#: ../external/plone.api/docs/content.rst:361
msgid "If deleting content would result in broken links you will get a `LinkIntegrityNotificationException`. To delete anyway, set the option `check_linkintegrity` to `False`:"
msgstr ""

#: ../external/plone.api/docs/content.rst:386
msgid "Content manipulation with the `safe_id` option"
msgstr ""

#: ../external/plone.api/docs/content.rst:388
msgid "When manipulating content with :meth:`api.content.create`, :meth:`api.content.move` or :meth:`api.content.copy` the `safe_id` flag is disabled by default. This means the uniqueness of IDs will be enforced. If another object with the same ID is already present in the target container these API methods will raise an error."
msgstr ""

#: ../external/plone.api/docs/content.rst:392
msgid "However, if the `safe_id` option is enabled, a non-conflicting id will be generated."
msgstr ""

#: ../external/plone.api/docs/content.rst:407
msgid "Get workflow state"
msgstr ""

#: ../external/plone.api/docs/content.rst:409
msgid "To find out the current workflow state of your content, use the :meth:`api.content.get_state` method."
msgstr ""

#: ../external/plone.api/docs/content.rst:421
msgid "The optional `default` argument is returned if no workflow is defined for the object."
msgstr ""

#: ../external/plone.api/docs/content.rst:436
msgid "Transition"
msgstr ""

#: ../external/plone.api/docs/content.rst:438
msgid "To transition your content to a new workflow state, use the :meth:`api.content.transition` method."
msgstr ""

#: ../external/plone.api/docs/content.rst:453
msgid "If your workflow accepts any additional arguments to the checkin method you may supply them via kwargs.  These arguments can be saved to your transition using custom workflow variables inside of the ZMI using an expression.  ie. \"python:state_change.kwargs.get('comment', '')\""
msgstr ""

#: ../external/plone.api/docs/content.rst:466
msgid "Get view"
msgstr ""

#: ../external/plone.api/docs/content.rst:468
msgid "To get a :class:`BrowserView` for your content, use :meth:`api.content.get_view`."
msgstr ""

#: ../external/plone.api/docs/content.rst:486
#: ../external/plone.api/docs/env.rst:140
#: ../external/plone.api/docs/group.rst:362
#: ../external/plone.api/docs/portal.rst:260
#: ../external/plone.api/docs/user.rst:436
msgid "Further reading"
msgstr ""

#: ../external/plone.api/docs/content.rst:488
msgid "For more information on possible flags and usage options please see the full :ref:`plone-api-content` specification."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `api.plone.org <http://api.plone.org/contribute/conventions.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:18
msgid "We've modeled the following rules and recommendations based on the following documents:"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:21
msgid "`PEP8 <http://www.python.org/dev/peps/pep-0008>`__"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:22
msgid "`PEP257 <http://www.python.org/dev/peps/pep-0257>`_"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:23
msgid "`Rope project <http://rope.sourceforge.net/overview.html>`_"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:24
msgid "`Google Style Guide <http://google-styleguide.googlecode.com/svn/trunk/pyguide.html>`_"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:25
msgid "`Pylons Coding Style <http://docs.pylonsproject.org/en/latest/community/codestyle.html>`_"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:26
msgid "`Tim Pope on Git commit messages <http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`__"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:29
msgid "Line length"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:31
msgid "All Python code in this package should be PEP8 valid. This includes adhering to the 80-char line length. If you absolutely need to break this rule, append ``# noPEP8`` to the offending line to skip it in syntax checks."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:36
msgid "Configuring your editor to display a line at 79th column helps a lot here and saves time."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:40
msgid "The line length rule also applies to non-python source files, such as documentation ``.rst`` files or ``.zcml`` files, but is a bit more relaxed there."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:45
msgid "Breaking lines"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:47
msgid "Based on code we love to look at (Pyramid, Requests, etc.), we allow the following two styles for breaking long lines into blocks:"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:50
msgid "Break into next line with one additional indent block."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:62
msgid "If this still doesn't fit the 80-char limit, break into multiple lines."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:77
msgid "Arguments on first line, directly after the opening parenthesis are forbidden when breaking lines."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:79
msgid "The last argument line needs to have a trailing comma (to be nice to the next developer coming in to add something as an argument and minimize VCS diffs in these cases)."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:82
msgid "The closing parenthesis or bracket needs to have the same indentation level as the first line."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:84
msgid "Each line can only contain a single argument."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:85
msgid "The same style applies to dicts, lists, return calls, etc."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:87
msgid "This package follows all rules above, `check out the source <https://github.com/plone/plone.api/tree/master/src/plone/api>`_ to see them in action."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:93
msgid "Indentation"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:95
msgid "For Python files, we stick with the `PEP 8 recommondation <http://www.python.org/dev/peps/pep-0008/#indentation>`_: Use 4 spaces per indentation level."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:99
msgid "For ZCML and XML (GenericSetup) files, we recommend the `Zope Toolkit's coding style on ZCML <http://docs.zope.org/zopetoolkit/codingstyle/zcml-style.html>`_ ::"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:109
msgid "EditorConfig"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:111
msgid "`EditorConfig <http://editorconfig.org/>`_ provides a way to share the same configuration for all major source code editors."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:114
msgid "You only need to install the plugin for your editor of choice, and add the following configuration on ``~/.editorconfig``."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:136
msgid "Quoting"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:138
msgid "For strings and such prefer using single quotes over double quotes. The reason is that sometimes you do need to write a bit of HTML in your python code, and HTML feels more natural with double quotes so you wrap HTML string into single quotes. And if you are using single quotes for this reason, then be consistent and use them everywhere."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:144
msgid "There are two exceptions to this rule:"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:146
msgid "docstrings should always use double quotes (as per PEP-257)."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:147
msgid "if you want to use single quotes in your string, double quotes might make more sense so you don't have to escape those single quotes."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:166
msgid "Docstrings style"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:168
msgid "Read and follow http://www.python.org/dev/peps/pep-0257/. There is one exception though: We reject BDFL's recommendation about inserting a blank line between the last paragraph in a multi-line docstring and its closing quotes as it's Emacs specific and two Emacs users here on the Beer & Wine Sprint both support our way."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:174
msgid "The content of the docstring must be written in the active first-person form, e.g. \"Calculate X from Y\" or \"Determine the exact foo of bar\"."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:189
msgid "If you wanna be extra nice, you are encouraged to document your method's parameters and their return values in a `reST field list syntax <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#field-lists>`_."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:201
msgid "Check out the `plone.api source <https://github.com/plone/plone.api/tree/master/src/plone/api>`_ for more usage examples. Also, see the following for examples on how to write good *Sphinxy* docstrings: http://stackoverflow.com/questions/4547849/good-examples-of-python-docstrings-for-sphinx."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:209
msgid "Unit tests style"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:211
msgid "Read http://www.voidspace.org.uk/python/articles/unittest2.shtml to learn what is new in :mod:`unittest2` and use it."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:214
msgid "This is not true for in-line documentation tests. Those still use old unittest test-cases, so you cannot use ``assertIn`` and similar."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:219
msgid "String formatting"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:221
msgid "As per http://docs.python.org/2/library/stdtypes.html#str.format, we should prefer the new style string formatting (``.format()``) over the old one (``% ()``)."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:225
msgid "Also use numbering, like so:"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:233
msgid "and *not* like this:"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:242
msgid "because Python 2.6 supports only explicitly numbered placeholders."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:246
msgid "About imports"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:248
msgid "Don't use ``*`` to import *everything* from a module, because if you do, pyflakes cannot detect undefined names (W404)."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:250
msgid "Don't use commas to import multiple things on a single line. Some developers use IDEs (like `Eclipse <http://pydev.org/>`_) or tools (such as `mr.igor <http://pypi.python.org/pypi/mr.igor>`_) that expect one import per line. Let's be nice to them."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:255
msgid "Don't use relative paths, again to be nice to people using certain IDEs and tools. Also `Google Python Style Guide` recommends against it."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:265
#: ../external/plone.api/docs/contribute/conventions.rst:290
msgid "instead of"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:273
msgid "Don't catch ``ImportError`` to detect whether a package is available or not, as it might hide circular import errors. Instead, use ``pkg_resources.get_distribution`` and catch ``DistributionNotFound``. More background at http://do3.cc/blog/2010/08/20/do-not-catch-import-errors,-use-pkg_resources/."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:303
msgid "Grouping and sorting"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:305
msgid "Since Plone has such a huge code base, we don't want to lose developer time figuring out into which group some import goes (standard lib?, external package?, etc.). So we just sort everything alphabetically and insert one blank line between ``from foo import bar`` and ``import baz`` blocks. Conditional imports come last. Again, we *do not* distinguish between what is standard lib, external package or internal package in order to save time and avoid the hassle of explaining which is which."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:335
msgid "Declaring dependencies"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:337
msgid "All direct dependencies should be declared in ``install_requires`` or ``extras_require`` sections in ``setup.py``. Dependencies, which are not needed for a production environment (like \"develop\" or \"test\" dependencies) or are optional (like \"Archetypes\" or \"Dexterity\" flavors of the same package) should go in ``extras_require``. Remember to document how to enable specific features (and think of using ``zcml:condition`` statements, if you have such optional features)."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:345
msgid "Generally all direct dependencies (packages directly imported or used in ZCML) should be declared, even if they would already be pulled in by other dependencies. This explicitness reduces possible runtime errors and gives a good overview on the complexity of a package."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:350
msgid "For example, if you depend on ``Products.CMFPlone`` and use ``getToolByName`` from ``Products.CMFCore``, you should also declare the ``CMFCore`` dependency explicitly, even though it's pulled in by Plone itself. If you use namespace packages from the Zope distribution like ``Products.Five`` you should explicitly declare ``Zope`` as dependency."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:356
msgid "Inside each group of dependencies, lines should be sorted alphabetically."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:360
msgid "Versioning scheme"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:362
msgid "For software versions, use a sequence-based versioning scheme, which is `compatible with setuptools <http://pythonhosted.org/setuptools/setuptools.html#specifying-your-project-s-version>`_::"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:367
msgid "The way, setuptools interprets versions is intuitive::"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:371
msgid "You can test it with setuptools::"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:379
msgid "Setuptools recommends to seperate parts with a dot. The website about `semantic versioning <http://semver.org/>`_ is also worth a read."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:384
msgid "Restructured Text versus Plain Text"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:386
msgid "Use the Restructured Text (``.rst`` file extension) format instead of plain text files (``.txt`` file extension) for all documentation, including doctest files. This way you get nice syntax highlighting and formating in recent text editors, on GitHub and with Sphinx."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:395
msgid "Tracking changes"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:397
msgid "Feature-level changes to code are tracked inside ``CHANGES.rst``. The title of the ``CHANGES.rst`` file should be ``Changelog``. Example:"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:422
msgid "Add an entry every time you add/remove a feature, fix a bug, etc. on top of the current development changes block."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:429
msgid "Sphinx Documentation"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:431
msgid "Un-documented code is broken code."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:433
msgid "For every feature you add to the codebase you should also add documentation for it to ``docs/``."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:436
msgid "After adding/modifying documentation, run ``make`` to re-generate your docs."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:438
msgid "Publicly available documentation on http://api.plone.org is automatically generated from these source files, periodically. So when you push changes to master on GitHub you should soon be able to see them published on ``api.plone.org``."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:443
msgid "Read the `reStructuredText Primer <http://sphinx-doc.org/rest.html>`_ to brush up on your `reST` skills."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:446
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:198
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:215
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:259
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:278
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:316
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:348
msgid "Example:"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:467
msgid "Attributes are documented using the `#:` marker above the attribute. The documentation may span multiple lines."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:485
msgid "Travis Continuous Integration"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:487
msgid "On every push to GitHub, `Travis <http://travis-ci.org/plone/plone.api>`_ runs all tests and syntax validation checks and reports build outcome to the ``#sprint`` IRC channel and the person who committed the last change."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:491
msgid "Travis is configured with the ``.travis.yml`` file located in the root of this package."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:498
msgid "Git workflow & branching model"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:500
msgid "Our repository on GitHub has the following layout:"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:502
msgid "**feature branches**: all development for new features must be done in dedicated branches, normally one branch per feature,"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:504
msgid "**master branch**: when features get completed they are merged into the master branch; bugfixes are commited directly on the master branch,"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:506
msgid "**tags**: whenever we create a new release we tag the repository so we can later re-trace our steps, re-release versions, etc."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:511
msgid "Release process for Plone packages"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:513
msgid "To keep the Plone software stack maintainable, the Python egg release process must be automated to high degree. This happens by enforcing Python packaging best practices and then making automated releases using the `zest.releaser <https://github.com/zestsoftware/zest.releaser/>`_  tool."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:518
msgid "Anyone with necessary PyPi permissions must be able to make a new release by running the ``fullrelease`` command"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:521
msgid "... which includes ..."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:523
msgid "All releases must be hosted on PyPi"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:525
msgid "All versions must be tagged at version control"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:527
msgid "Each package must have README.rst with links to the version control repository and issue tracker"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:530
msgid "CHANGES.txt (docs/HISTORY.txt in some packages) must be always up-to-date and must contain list of functional changes which may affect package users."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:533
msgid "CHANGES.txt must contain release dates"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:535
msgid "README.rst and CHANGES.txt must be visible on PyPi"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:537
msgid "Released eggs must contain generated gettext .mo files, but these files must not be committed to the repository (files can be created with *zest.pocompile* addon)"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:541
msgid "``.gitignore`` and ``MANIFEST.in`` must reflect the files going to egg (must include page template, po files)"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:544
msgid "More information"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:546
msgid "`High quality automated package releases for Python with zest.releaser <http://opensourcehacker.com/2012/08/14/high-quality-automated-package-releases-for-python-with-zest-releaser/>`_."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:553
msgid "Setting up Git"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:555
msgid "Git is a very useful tool, especially when you configure it to your needs. Here are a couple of tips."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:559
msgid "Enhanced git prompt"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:561
msgid "Do one (or more) of the following:"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:563
msgid "http://clalance.blogspot.com/2011/10/git-bash-prompts-and-tab-completion.html"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:564
msgid "http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:565
msgid "http://gitready.com/advanced/2009/02/05/bash-auto-completion.html"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:568
msgid "Git dotfiles"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:570
msgid "Plone developers have dotfiles similar to these: https://github.com/plone/plone.dotfiles."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:575
msgid "Git Commit Message Style"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:577
msgid "`Tim Pope's post on Git commit message style <http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`__ is widely considered the gold standard:"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:603
msgid "`Github flavored markdown <http://github.github.com/github-flavored-markdown/>`_ is also useful in commit messages."
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:608
msgid "Squashing commits"
msgstr ""

#: ../external/plone.api/docs/contribute/conventions.rst:610
msgid "In order to keep a clear and concise git history, it is good practice to squash commits before merging. Use ``git rebase --interactive`` to squash all commits that you think are unnecessary."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/contribute/develop.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:10
msgid "Development environment"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:12
msgid "This section is meant for contributors to the `plone.api` project. Its purpose is to guide them through the steps needed to start contributing."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:22
msgid "Locations of information and tools"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:24
msgid "`Documentation @ docs.plone.org <http://docs.plone.org>`_"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:25
msgid "`Source code @ GitHub <http://github.com/plone/plone.api>`_"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:26
msgid "`Issues @ GitHub <http://github.com/plone/plone.api/issues>`_"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:27
msgid "`Continuous Integration @ Travis CI <http://travis-ci.org/plone/plone.api>`_"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:28
msgid "`Code Coverage @ Coveralls.io <http://coveralls.io/r/plone/plone.api>`_"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:35
msgid "System libraries"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:37
msgid "First let's look at 'system' libraries and applications that are normally installed with your OS packet manager, such as apt, aptitude, yum, etc.:"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:39
msgid "``libxml2`` - An xml parser written in C."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:40
msgid "``libxslt`` - XSLT library written in C."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:41
msgid "``git`` - Version control system."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:42
msgid "``gcc`` - The GNU Compiler Collection."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:43
msgid "``g++`` - The C++ extensions for gcc."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:44
msgid "``GNU make`` - The fundamental build-control tool."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:45
msgid "``GNU tar`` - The (un)archiving tool for extracting downloaded archives."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:46
msgid "``bzip2`` and ``gzip`` decompression packages - ``gzip`` is nearly standard, however some platforms will require that ``bzip2`` be installed."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:47
msgid "``Python 2.7`` - Linux distributions normally already have it, OS X users should use https://github.com/collective/buildout.python to get a clean Python version (the one that comes with OS X is broken)."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:51
msgid "Python tools"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:53
msgid "Then you'll also need to install some Python specific tools:"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:55
msgid "easy_install - the Python packaging system (download http://peak.telecommunity.com/dist/ez_setup.py and run ``sudo python2.7 ez_setup.py``."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:56
msgid "virtualenv - a tool that assists in creating isolated Python working environments. Run ``sudo easy_install virtualenv`` after your have installed   `easy_install` above."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:60
msgid "Again, OS X users should use https://github.com/collective/buildout.python, it will make your life much easier to have a cleanly compiled Python instead of using the system one that is broken in many deeply confusing ways."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:65
msgid "Further information"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:67
msgid "If you experience problems read through the following links as almost all of the above steps are required for a default Plone development environment:"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:69
msgid "http://plone.org/documentation/tutorial/buildout"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:70
msgid "http://pypi.python.org/pypi/zc.buildout/"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:71
msgid "http://pypi.python.org/pypi/setuptools"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:72
msgid "http://plone.org/documentation/manual/installing-plone"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:74
msgid "If you are an OS X user, you first need a working Python implementation (the one that comes with the operating system is broken). Use https://github.com/collective/buildout.python and be happy. Also applicable to other OSes, if getting a working Python proves a challenge."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:81
msgid "Creating and using the development environment"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:83
msgid "Go to your projects folder and download the lastest `plone.api` code:"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:90
msgid "Now `cd` into the newly created directory and build your environment:"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:97
msgid "Go make some tea while"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:99
msgid "`make` creates an isolated Python environment in your `plone.api`` folder,"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:100
msgid "bootstraps `zc.buildout`,"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:101
msgid "fetches all dependencies,"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:102
msgid "builds Plone,"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:103
msgid "runs all tests and"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:104
msgid "generates documentation so you can open it locally later on."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:106
msgid "Other commands that you may want to run:"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:115
msgid "Open ``Makefile`` in your favorite code editor to see all possible commands and what they do. And read http://www.gnu.org/software/make/manual/make.html to learn more about `make`."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:122
msgid "Working on an issue"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:124
msgid "Our GitHub account contains a `list of open issues <https://github.com/plone/plone.api/issues>`_. Click on one that catches your attention. If the issue description says ``No one is assigned`` it means no-one is already working on it and you can claim it as your own. Click on the button next to the text and make yourself the one assigned for this issue."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:129
msgid "Based on our :ref:`git_workflow` all new features must be developed in separate git branches. So if you are not doing a very trivial fix, but rather adding new features/enhancements, you should create a *feature branch*. This way your work is kept in an isolated place where you can receive feedback on it, improve it, etc. Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:148
msgid "Read more about Git branching at http://learn.github.com/p/branching.html. Also, to make your git nicer, read the :ref:`setting_up_git` chapter."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:152
msgid "Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*. Open a browser and point it to ``https://github.com/plone/plone.api/tree/issue_<ISSUE_NUMBER>``. There you should see a ``Pull Request`` button. Click on it, write some text about what you did and anything else you would like to tell the one who will review your work, and finally click ``Send pull request``. Now wait that someone comes by and merges your branch (don't do it yourself, even if you have permissions to do so)."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:158
msgid "An example pull request text::"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:165
msgid "Commit checklist"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:167
msgid "Before every commit you should:"
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:169
msgid "Run unit tests and syntax validation checks."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:170
msgid "Add an entry to :ref:`changes` (if applicable)."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:171
msgid "Add/modify :ref:`sphinx-docs` (if applicable)."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:173
msgid "All syntax checks and all tests can be run with a single command. This command also re-generates your documentation."
msgstr ""

#: ../external/plone.api/docs/contribute/develop.rst:181
msgid "It pays off to invest a little time to make your editor run `pep8` and `pyflakes` on a file every time you save that file (or use `flake8` which combines both). This saves you lots of time in the long run."
msgstr ""

#: ../external/plone.api/docs/contribute/index.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/contribute/index.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/contribute/index.rst:10
msgid "How to contribute to this package?"
msgstr ""

#: ../external/plone.api/docs/contribute/index.rst:15
msgid "Rules and guidelines on syntax style, development process, repository workflow, etc."
msgstr ""

#: ../external/plone.api/docs/contribute/index.rst:24
msgid "Local development environment"
msgstr ""

#: ../external/plone.api/docs/contribute/index.rst:26
msgid "Setting up and using the local development environment."
msgstr ""

#: ../external/plone.api/docs/contribute/index.rst:35
#: ../external/plone.api/docs/contribute/release.rst:11
#: ../external/tutorial.todoapp/docs/release.rst:8
msgid "Releasing a new version"
msgstr ""

#: ../external/plone.api/docs/contribute/index.rst:37
msgid "Description of our release process and guidelines."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/contribute/release.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:13
msgid "Releasing a new version of `plone.api` involves the following steps:"
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:15
msgid "Prepare source for a new release."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:16
#: ../external/tutorial.todoapp/docs/release.rst:12
msgid "Create a git tag for the release."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:17
#: ../external/tutorial.todoapp/docs/release.rst:13
msgid "Push the git tag upstream to GitHub."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:18
#: ../external/tutorial.todoapp/docs/release.rst:14
msgid "Generate a distribution file for the package."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:19
#: ../external/tutorial.todoapp/docs/release.rst:15
msgid "Upload the generated package to Python Package Index (PyPI)."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:21
msgid "To avoid human errors and to automate some of the tasks above we use ``jarn.mkrelease``. It's listed as a dependency in ``setup.py`` and should already be installed in your local bin:"
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:28
msgid "Apart from that, in order to be able to upload a new version to PyPI you need to be listed under `Package Index Owner` list and you need to configure your PyPI credentials in the ``~/.pypirc`` file, e.g.::"
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:40
#: ../external/tutorial.todoapp/docs/release.rst:19
msgid "Checklist"
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:42
msgid "Folow these step to create a new release of `plone.api`."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:44
msgid "Verify that we have documented all changes in the ``docs/CHANGES.rst`` file. Go through the list of commits since last release on GitHub and check all changes are documented."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:47
msgid "Modify the version identifier in the ``setup.py`` to reflect the version of the new release."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:49
msgid "Confirm that the package description (generated from ``README.rst`` and others) renders correctly by running ``bin/longtest`` and open its ouput in your favorite browser."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:52
msgid "Commit all changes to the git repository and push them upstream to GitHub."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:54
msgid "Create a release, tag it in git and upload it to GitHub by running ``bin/mkrelease -d pypi -pq .`` (see example below)."
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:58
#: ../external/tutorial.todoapp/docs/release.rst:63
msgid "Example"
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:60
msgid "In the following example we are releasing version 0.1 of `plone.api`. The package has been prepared so that ``setup.py`` contains the version ``0.1``, this change has been committed to git and all changes have been pushed upstream to GitHub:"
msgstr ""

#: ../external/plone.api/docs/contribute/release.rst:86
#: ../external/tutorial.todoapp/docs/release.rst:92
msgid "Please ignore the sdist warning about README file above. PyPI does not depend on it and it's just a bug in setupools (reported and waiting to be fixed)."
msgstr ""

#: ../external/plone.api/docs/env.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/env.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/env.rst:13
msgid "Environment"
msgstr ""

#: ../external/plone.api/docs/env.rst:21
msgid "Switch roles inside a block"
msgstr ""

#: ../external/plone.api/docs/env.rst:23
msgid "To temporarily override the list of roles that are available, use :meth:`api.env.adopt_roles`. This is especially useful in unit tests."
msgstr ""

#: ../external/plone.api/docs/env.rst:45
msgid "Switch user inside a block"
msgstr ""

#: ../external/plone.api/docs/env.rst:47
msgid "To temporarily override the user which is currently active, use :meth:`api.env.adopt_user`."
msgstr ""

#: ../external/plone.api/docs/env.rst:78
msgid "Debug mode"
msgstr ""

#: ../external/plone.api/docs/env.rst:80
msgid "To know if your zope instance is running in debug mode, use :meth:`api.env.debug_mode`."
msgstr ""

#: ../external/plone.api/docs/env.rst:94
msgid "Test mode"
msgstr ""

#: ../external/plone.api/docs/env.rst:96
msgid "To know if your plone instance is running in a test runner, use :meth:`api.env.test_mode`."
msgstr ""

#: ../external/plone.api/docs/env.rst:110
msgid "Plone version"
msgstr ""

#: ../external/plone.api/docs/env.rst:112
msgid "To know what version of Plone you are using, use :meth:`api.env.plone_version`."
msgstr ""

#: ../external/plone.api/docs/env.rst:126
msgid "Zope version"
msgstr ""

#: ../external/plone.api/docs/env.rst:128
msgid "To know what version of Zope 2 you are using, use :meth:`api.env.zope_version`."
msgstr ""

#: ../external/plone.api/docs/env.rst:142
msgid "For more information on possible flags and usage options please see the full :ref:`plone-api-env` specification."
msgstr ""

#: ../external/plone.api/docs/group.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/group.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/group.rst:13
msgid "Groups"
msgstr ""

#: ../external/plone.api/docs/group.rst:21
msgid "Create group"
msgstr ""

#: ../external/plone.api/docs/group.rst:23
msgid "To create a new portal group, use :meth:`api.group.create`."
msgstr ""

#: ../external/plone.api/docs/group.rst:34
msgid "When creating groups ``title``, ``description``, ``roles`` and ``groups`` are optional."
msgstr ""

#: ../external/plone.api/docs/group.rst:60
msgid "Get group"
msgstr ""

#: ../external/plone.api/docs/group.rst:62
msgid "To get a group by its name, use :meth:`api.group.get`."
msgstr ""

#: ../external/plone.api/docs/group.rst:77
msgid "Editing a group"
msgstr ""

#: ../external/plone.api/docs/group.rst:79
msgid "Groups can be edited by using the ``group_tool``. In this example the ``title``, ``description`` and ``roles`` are updated for the group 'Staff'."
msgstr ""

#: ../external/plone.api/docs/group.rst:110
msgid "Get all groups"
msgstr ""

#: ../external/plone.api/docs/group.rst:112
msgid "You can also get all groups, by using :meth:`api.group.get_groups`."
msgstr ""

#: ../external/plone.api/docs/group.rst:127
msgid "Get user's groups"
msgstr ""

#: ../external/plone.api/docs/group.rst:129
msgid "The groups returned may be filtered by member. By passing the ``username`` parameter, :meth:`api.group.get_groups` will return only those groups to which the user belongs."
msgstr ""

#: ../external/plone.api/docs/group.rst:150
msgid "You may also pass the user directly to :meth:`api.group.get_groups`:"
msgstr ""

#: ../external/plone.api/docs/group.rst:152
msgid "from plone import api user = api.user.get(username='jane') groups = api.group.get_groups(user=user)"
msgstr ""

#: ../external/plone.api/docs/group.rst:163
msgid "Get group members"
msgstr ""

#: ../external/plone.api/docs/group.rst:165
msgid "Use the :meth:`api.user.get_users` method to get all the users that are members of a group."
msgstr ""

#: ../external/plone.api/docs/group.rst:181
msgid "Delete group"
msgstr ""

#: ../external/plone.api/docs/group.rst:183
msgid "To delete a group, use :meth:`api.group.delete` and pass in either the groupname or the group object you want to delete."
msgstr ""

#: ../external/plone.api/docs/group.rst:208
msgid "Adding user to group"
msgstr ""

#: ../external/plone.api/docs/group.rst:210
msgid "To add a user to a group, use the :meth:`api.group.add_user` method. This method accepts either the groupname or the group object for the target group and the username or the user object you want to add to the group."
msgstr ""

#: ../external/plone.api/docs/group.rst:230
msgid "Removing user from group"
msgstr ""

#: ../external/plone.api/docs/group.rst:232
msgid "To remove a user from a group, use the :meth:`api.group.remove_user` method. This also accepts either the groupname or the group object for the target group and either the username or the user object you want to remove from the group."
msgstr ""

#: ../external/plone.api/docs/group.rst:249
msgid "Get group roles"
msgstr ""

#: ../external/plone.api/docs/group.rst:251
msgid "To find the roles assigned to a group, use the :meth:`api.group.get_roles` method. By default it returns site-wide roles."
msgstr ""

#: ../external/plone.api/docs/group.rst:265
msgid "If you pass in a content object, it will return the local roles of the group in that particular context."
msgstr ""

#: ../external/plone.api/docs/group.rst:287
msgid "Grant roles to group"
msgstr ""

#: ../external/plone.api/docs/group.rst:289
msgid "To grant roles to a group, use the :meth:`api.group.grant_roles` method. By default, roles are granted site-wide."
msgstr ""

#: ../external/plone.api/docs/group.rst:307
msgid "If you pass in a content object, roles will be assigned in that particular context."
msgstr ""

#: ../external/plone.api/docs/group.rst:328
msgid "Revoke roles from group"
msgstr ""

#: ../external/plone.api/docs/group.rst:330
msgid "To revoke roles already granted to a group, use the :meth:`api.group.revoke_roles` method."
msgstr ""

#: ../external/plone.api/docs/group.rst:345
msgid "If you pass in a content object, it will revoke roles granted in that particular context."
msgstr ""

#: ../external/plone.api/docs/group.rst:364
msgid "For more information on possible flags and complete options please see the full :ref:`plone-api-group` specification."
msgstr ""

#: ../external/plone.api/docs/index.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/index.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/index.rst:9
msgid "A Plone API"
msgstr ""

#: ../external/plone.api/docs/index.rst:11
msgid "The ``plone.api`` is an elegant and simple API, built for humans wishing to develop with Plone."
msgstr ""

#: ../external/plone.api/docs/index.rst:13
msgid "It comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone. Recipes try to assume the user does not have extensive knowledge about Plone internals."
msgstr ""

#: ../external/plone.api/docs/index.rst:16
msgid "The intention of this package is to provide clear API methods for Plone functionality which may be confusing or difficult to access. As the underlying code improves some API methods may be deprecated and the documentation here will be updated to show how to use the improved code (even if it means not using ``plone.api``)."
msgstr ""

#: ../external/plone.api/docs/index.rst:20
msgid "Some parts of the documentation do not use *plone.api* methods directly, but simply provide guidance on achieving a task using Plone's internal API. For example, using the portal catalog (see 'Find content objects')."
msgstr ""

#: ../external/plone.api/docs/index.rst:22
msgid "The intention is to cover 20% of the tasks any Plone developer does 80% of the time. By keeping everything in one place, the API stays introspectable and discoverable, important aspects of being Pythonic."
msgstr ""

#: ../external/plone.api/docs/index.rst:27
msgid "This package is stable and used in production, but from time to time changes will be made to the API. Additional api methods may be introduced in minor versions (1.1 -> 1.2). Backward-incompatible changes to the API will be restricted to major versions (1.x -> 2.x)."
msgstr ""

#: ../external/plone.api/docs/index.rst:33
msgid "Narrative documentation"
msgstr ""

#: ../external/plone.api/docs/index.rst:47
msgid "Complete API and advanced usage"
msgstr ""

#: ../external/plone.api/docs/index.rst:62
msgid "Contribute"
msgstr ""

#: ../external/plone.api/docs/portal.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/portal.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/portal.rst:13
msgid "Portal"
msgstr ""

#: ../external/plone.api/docs/portal.rst:21
msgid "Get portal object"
msgstr ""

#: ../external/plone.api/docs/portal.rst:23
msgid "Getting the Plone portal object is easy with :meth:`api.portal.get`."
msgstr ""

#: ../external/plone.api/docs/portal.rst:39
msgid "Get navigation root"
msgstr ""

#: ../external/plone.api/docs/portal.rst:41
msgid "In multi-lingual or multi-site Plone installations you probably want to get the language-specific navigation root object, not the top portal object. You do this with :meth:`api.portal.get_navigation_root()`."
msgstr ""

#: ../external/plone.api/docs/portal.rst:44
msgid "Assuming there is a document ``english_page`` in a folder ``en``, which is the navigation root:"
msgstr ""

#: ../external/plone.api/docs/portal.rst:74
msgid "returns the folder ``en``. If the folder ``en`` is not a navigation root it would return the portal."
msgstr ""

#: ../external/plone.api/docs/portal.rst:77
msgid "Get portal url"
msgstr ""

#: ../external/plone.api/docs/portal.rst:79
msgid "Since we now have the portal object, it's easy to get the portal url."
msgstr ""

#: ../external/plone.api/docs/portal.rst:94
msgid "Get tool"
msgstr ""

#: ../external/plone.api/docs/portal.rst:96
msgid "To get a portal tool in a simple way, just use :meth:`api.portal.get_tool` and pass in the name of the tool you need."
msgstr ""

#: ../external/plone.api/docs/portal.rst:111
msgid "Get localized time"
msgstr ""

#: ../external/plone.api/docs/portal.rst:113
msgid "To display the date/time in a user-friendly way, localized to the user's prefered language, use :meth:`api.portal.get_localized_time`."
msgstr ""

#: ../external/plone.api/docs/portal.rst:131
msgid "Send E-Mail"
msgstr ""

#: ../external/plone.api/docs/portal.rst:133
msgid "To send an e-mail use :meth:`api.portal.send_email`:"
msgstr ""

#: ../external/plone.api/docs/portal.rst:183
msgid "Show notification message"
msgstr ""

#: ../external/plone.api/docs/portal.rst:185
msgid "With :meth:`api.portal.show_message` you can show a notification message to the user."
msgstr ""

#: ../external/plone.api/docs/portal.rst:204
msgid "Get plone.app.registry record"
msgstr ""

#: ../external/plone.api/docs/portal.rst:206
msgid "Plone comes with a package ``plone.app.registry`` that provides a common way to store various configuration and settings. :meth:`api.portal.get_registry_record` provides an easy way to access these."
msgstr ""

#: ../external/plone.api/docs/portal.rst:233
msgid "Set plone.app.registry record"
msgstr ""

#: ../external/plone.api/docs/portal.rst:235
msgid "Plone comes with a package ``plone.app.registry`` that provides a common way to store various configuration and settings. :meth:`api.portal.set_registry_record` provides an easy way to change these."
msgstr ""

#: ../external/plone.api/docs/portal.rst:262
msgid "For more information on possible flags and usage options please see the full :ref:`plone-api-portal` specification."
msgstr ""

#: ../external/plone.api/docs/user.rst:3
msgid "WARNING: If you are reading this on GitHub, DON'T! Read the documentation at `docs.plone.org <http://docs.plone.org/external/plone.api/docs/user.html>`_ so you have working references and proper formatting."
msgstr ""

#: ../external/plone.api/docs/user.rst:13
msgid "Users"
msgstr ""

#: ../external/plone.api/docs/user.rst:21
msgid "Create user"
msgstr ""

#: ../external/plone.api/docs/user.rst:23
msgid "To create a new user, use :meth:`api.user.create`. If your portal is configured to use emails as usernames, you just need to pass in the email of the new user."
msgstr ""

#: ../external/plone.api/docs/user.rst:43
msgid "Otherwise, you also need to pass in the username of the new user."
msgstr ""

#: ../external/plone.api/docs/user.rst:59
msgid "To set user properties when creating a new user, pass in a properties dict."
msgstr ""

#: ../external/plone.api/docs/user.rst:79
msgid "Besides user properties you can also specify a password for the new user. Otherwise a random 8-character alphanumeric password will be generated."
msgstr ""

#: ../external/plone.api/docs/user.rst:94
msgid "Get user"
msgstr ""

#: ../external/plone.api/docs/user.rst:96
msgid "You can get a user with :meth:`api.user.get`."
msgstr ""

#: ../external/plone.api/docs/user.rst:108
msgid "User properties"
msgstr ""

#: ../external/plone.api/docs/user.rst:110
msgid "Users have various properties set on them. This is how you get and set them, using the underlying APIs:"
msgstr ""

#: ../external/plone.api/docs/user.rst:128
msgid "Get currently logged-in user"
msgstr ""

#: ../external/plone.api/docs/user.rst:130
msgid "Getting the currently logged-in user is easy with :meth:`api.user.get_current`."
msgstr ""

#: ../external/plone.api/docs/user.rst:145
msgid "Check if current user is anonymous"
msgstr ""

#: ../external/plone.api/docs/user.rst:147
msgid "Sometimes you need to trigger or display some piece of information only for logged-in users. It's easy to use :meth:`api.user.is_anonymous` to do a basic check for it."
msgstr ""

#: ../external/plone.api/docs/user.rst:165
msgid "Get all users"
msgstr ""

#: ../external/plone.api/docs/user.rst:167
msgid "Get all users in your portal with :meth:`api.user.get_users`."
msgstr ""

#: ../external/plone.api/docs/user.rst:182
msgid "Get group's users"
msgstr ""

#: ../external/plone.api/docs/user.rst:184
msgid "If you set the `groupname` parameter, then :meth:`api.user.get_users` will return only users that are members of this group."
msgstr ""

#: ../external/plone.api/docs/user.rst:204
msgid "Delete user"
msgstr ""

#: ../external/plone.api/docs/user.rst:206
msgid "To delete a user, use :meth:`api.user.delete` and pass in either the username or the user object you want to delete."
msgstr ""

#: ../external/plone.api/docs/user.rst:232
msgid "Get user roles"
msgstr ""

#: ../external/plone.api/docs/user.rst:234
msgid "The :meth:`api.user.get_roles` method is used for getting a user's roles. By default it returns site-wide roles."
msgstr ""

#: ../external/plone.api/docs/user.rst:247
msgid "If you pass in a content object, it will return local roles of the user in that particular context."
msgstr ""

#: ../external/plone.api/docs/user.rst:264
msgid "Get user permissions"
msgstr ""

#: ../external/plone.api/docs/user.rst:266
msgid "The :meth:`api.user.get_permissions` method is used for getting user's permissions. By default it returns site root permissions."
msgstr ""

#: ../external/plone.api/docs/user.rst:289
msgid "If you pass in a content object, it will return local permissions of the user in that particular context."
msgstr ""

#: ../external/plone.api/docs/user.rst:315
msgid "Check user permission"
msgstr ""

#: ../external/plone.api/docs/user.rst:317
msgid "Instead of getting all user permissions, you can check a single permission using the :meth:`api.user.has_permission` method. By default it checks the permission on the site root."
msgstr ""

#: ../external/plone.api/docs/user.rst:331
msgid "If you pass in a content object, it will check the permission in that particular context."
msgstr ""

#: ../external/plone.api/docs/user.rst:348
msgid "Grant roles to user"
msgstr ""

#: ../external/plone.api/docs/user.rst:350
msgid "The :meth:`api.user.grant_roles` allows us to grant a list of roles to the user."
msgstr ""

#: ../external/plone.api/docs/user.rst:366
msgid "If you pass a content object or folder, the roles are granted only on that context and not site-wide. But all site-wide roles will also be returned by :meth:`api.user.get_roles` for this user on the given context."
msgstr ""

#: ../external/plone.api/docs/user.rst:391
msgid "Revoke roles from user"
msgstr ""

#: ../external/plone.api/docs/user.rst:393
msgid "The :meth:`api.user.revoke_roles` allows us to revoke a list of roles from the user."
msgstr ""

#: ../external/plone.api/docs/user.rst:407
msgid "If you pass a context object the local roles for that context will be removed."
msgstr ""

#: ../external/plone.api/docs/user.rst:438
msgid "For more information on possible flags and usage options please see the full :ref:`plone-api-user` specification."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:3
#: ../external/plone.app.contentlisting/docs/README.rst:3
msgid "Listing and working with Plone content objects using plone.app.contentlisting"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:5
#: ../external/plone.app.contentlisting/docs/README.rst:5
msgid "This is valid for Plone 4.1 upwards."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:7
#: ../external/plone.app.contentlisting/docs/README.rst:7
msgid "Many of the operations for customizations, templates, views and portlets in Plone are related to lists of content objects. Their sources can be different, although usually they are some sort of catalog search, the contents of a particular folder or a list of objects from a relation."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:12
#: ../external/plone.app.contentlisting/docs/README.rst:12
msgid "To make it simpler to work with these, we have made plone.app.contentlisting, which ensures that lists of content objects always behave in the same way and according to predefined interfaces, regardless of what the source of the objects are. The integrator shouldn't have to care whether the list of objects came from the catalog, an ORM or they are the actual objects."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:20
#: ../external/plone.app.contentlisting/docs/README.rst:20
msgid "Making or getting a contentListing"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:22
#: ../external/plone.app.contentlisting/docs/README.rst:22
msgid "The typical way to get a contentlisting is to call one of two built-in views:"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:26
#: ../external/plone.app.contentlisting/docs/README.rst:26
msgid "Listing the contents of a Folder or Collection"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:28
#: ../external/plone.app.contentlisting/docs/README.rst:28
msgid "In Page templates getting the contents of a folder or the results of a collection is as simple as this::"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:33
#: ../external/plone.app.contentlisting/docs/README.rst:33
msgid "Every template-writer's dream ;)"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:37
#: ../external/plone.app.contentlisting/docs/README.rst:37
msgid "In previous versions there was only support to list the contents of a folder with ``context/@@folderListing``. There was no collection support. The ``@@folderListing`` view is kept for compatibility, but we encourage you to use the ``@@contentlisting`` instead."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:44
#: ../external/plone.app.contentlisting/docs/README.rst:44
msgid "A real example of listing the titles of the content objects of a folder::"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:50
#: ../external/plone.app.contentlisting/docs/README.rst:50
msgid "The context in which it is called defines which folder is listed or which collection results are queried."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:53
#: ../external/plone.app.contentlisting/docs/README.rst:53
msgid "You can also use Python expressions to be able to pass parameters, like which content type or review state you want to use::"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:58
#: ../external/plone.app.contentlisting/docs/README.rst:58
msgid "Batching can be done like this::"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:71
#: ../external/plone.app.contentlisting/docs/README.rst:71
msgid "Note that you iterate directly over the results that you get from ``@@contentlisting``.  The definition of ``batch`` is only used in the ``batch_macros`` call."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:75
#: ../external/plone.app.contentlisting/docs/README.rst:75
msgid "In Python a ContentListing of a particular folder's contents can be fetched by using::"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:80
#: ../external/plone.app.contentlisting/docs/README.rst:80
msgid "Exactly the same for collections::"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:84
#: ../external/plone.app.contentlisting/docs/README.rst:84
msgid "The contentlisting view called above implements all the logic the old getFolderContents script in Plone used to do. The old script has been left in place to not break compatibility for customizations and add-ons that might depend on its particular return values."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:91
#: ../external/plone.app.contentlisting/docs/README.rst:91
msgid "Rolling your own with adaption"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:93
#: ../external/plone.app.contentlisting/docs/README.rst:93
msgid "At the time of writing, all parts of Plone do not yet return 'contentlistings' when asked for lists of content. It was impossible to change this everywhere without breaking backwards compatibility. Therefore you may have to convert your sequence of stuff to a contentlisting manually."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:98
#: ../external/plone.app.contentlisting/docs/README.rst:98
msgid "To do this, you need to import and adapt::"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:109
#: ../external/plone.app.contentlisting/docs/README.rst:109
msgid "The contentListing, its properties and behaviors"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:111
#: ../external/plone.app.contentlisting/docs/README.rst:111
msgid "Now, you no longer need to worry whether you have a bunch of catalog brains or the actual objects (or fake objects for that sake). As long as you have a contentlisting, you know what you can expect from it. You also know what you can expect from each item within it - a content listing object."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:116
#: ../external/plone.app.contentlisting/docs/README.rst:116
msgid "The content listing is a normal iterator that we can loop over and do all sorts of stuff you normally can do with sequences."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:121
#: ../external/plone.app.contentlisting/docs/README.rst:121
msgid "contentListingObjects, the items inside the sequence"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:123
#: ../external/plone.app.contentlisting/docs/README.rst:123
msgid "The `contentListingObjects` are wrapper objects, each representing a content object in the site. Their intention is to be predictable so you can always call at least a common base set of methods on the objects listed."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:127
#: ../external/plone.app.contentlisting/docs/README.rst:127
msgid "You do not have to be aware whether the object originates from a brain, a full object or something else. If you try to call a method or access an attribute of the object and the wrapper is not aware of it, it will silently fetch the real object and delegate the call to it. This means you can treat your objects as you would any other -- even writing to it."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:135
#: ../external/plone.app.contentlisting/docs/README.rst:135
msgid "Methods of contentlistingObjects"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:138
#: ../external/plone.app.contentlisting/docs/README.rst:138
msgid "getId() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:138
#: ../external/plone.app.contentlisting/docs/README.rst:138
msgid "Returns the object id in its container for example `my-example-page`."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:141
#: ../external/plone.app.contentlisting/docs/README.rst:141
msgid "getObject() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:141
#: ../external/plone.app.contentlisting/docs/README.rst:141
msgid "Returns the real object"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:144
#: ../external/plone.app.contentlisting/docs/README.rst:144
msgid "def getDataOrigin() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:144
#: ../external/plone.app.contentlisting/docs/README.rst:144
msgid "The origin of the data for the object."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:148
#: ../external/plone.app.contentlisting/docs/README.rst:148
msgid "getPath() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:147
#: ../external/plone.app.contentlisting/docs/README.rst:147
msgid "Path to the object, relative to the site root for example ``/artifacts/my-example-page``"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:152
#: ../external/plone.app.contentlisting/docs/README.rst:152
msgid "getURL()-"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:151
#: ../external/plone.app.contentlisting/docs/README.rst:151
msgid "Full url to the object, including the site root for example ``http://my.site.com/artifacts/my-example-page``"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:157
#: ../external/plone.app.contentlisting/docs/README.rst:157
msgid "uuid() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:155
#: ../external/plone.app.contentlisting/docs/README.rst:155
msgid "Unique content identifier for example an uuid from `plone.uuid` The only real point of it is to be unique. It can for example look like this `b0e80776-d41d-4f48-bf9e-7cb1aebabad5`."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:162
#: ../external/plone.app.contentlisting/docs/README.rst:162
msgid "getIcon() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:160
#: ../external/plone.app.contentlisting/docs/README.rst:160
msgid "Icon for the object. Returns an icon object from plone.app.layout. If printed as a string, it will produce an HTML tag for the icon. Check plone.app.layout for more info."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:165
#: ../external/plone.app.contentlisting/docs/README.rst:165
msgid "getSize() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:165
#: ../external/plone.app.contentlisting/docs/README.rst:165
msgid "Size in bytes for example `24`."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:168
#: ../external/plone.app.contentlisting/docs/README.rst:168
msgid "review_state() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:168
#: ../external/plone.app.contentlisting/docs/README.rst:168
msgid "Workflow review state for example `published`."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:172
#: ../external/plone.app.contentlisting/docs/README.rst:172
msgid "ContentTypeClass() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:171
#: ../external/plone.app.contentlisting/docs/README.rst:171
msgid "A normalized type name that identifies the object in listings. Used for CSS styling, for example `content-type-page`."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:176
#: ../external/plone.app.contentlisting/docs/README.rst:176
msgid "Title() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:175
#: ../external/plone.app.contentlisting/docs/README.rst:175
msgid "Return a single string, the DCMI Title element (resource name). For example `My example page`."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:181
#: ../external/plone.app.contentlisting/docs/README.rst:181
msgid "Description() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:179
#: ../external/plone.app.contentlisting/docs/README.rst:179
msgid "Return the DCMI Description element (resource summary). Result is a natural language description of this object. Description is a plain text string describing the object. It should not contain HTML or similar."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:186
#: ../external/plone.app.contentlisting/docs/README.rst:186
msgid "Type() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:184
#: ../external/plone.app.contentlisting/docs/README.rst:184
msgid "Return the DCMI Type element (resource type). Result is a human-readable message id for the resource (typically the Title of its type info object). For example `u'Page'` from the `plone` domain."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:191
#: ../external/plone.app.contentlisting/docs/README.rst:191
msgid "listCreators() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:189
#: ../external/plone.app.contentlisting/docs/README.rst:189
msgid "Return a sequence of DCMI Creator elements (resource authors). Depending on the implementation, this returns the full name(s) of the author(s) of the content object or their ids. For example `Jane Smith`."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:195
#: ../external/plone.app.contentlisting/docs/README.rst:195
msgid "Creator() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:194
#: ../external/plone.app.contentlisting/docs/README.rst:194
msgid "Return the first DCMI Creator element, or an empty string. For example `Jane Smith`."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:200
#: ../external/plone.app.contentlisting/docs/README.rst:200
msgid "Subject() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:198
#: ../external/plone.app.contentlisting/docs/README.rst:198
msgid "Return a sequence of DCMI Subject elements (resource keywords). Result is zero or more keywords associated with the content object. These are the tags in Plone. For example ``['Ecology', 'Sustainability']``."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:205
#: ../external/plone.app.contentlisting/docs/README.rst:205
msgid "Publisher() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:203
#: ../external/plone.app.contentlisting/docs/README.rst:203
msgid "Return the DCMI Publisher element (resource publisher). Result is the full formal name of the entity or person responsible for publishing the resource. For example `Plone Foundation`."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:209
#: ../external/plone.app.contentlisting/docs/README.rst:209
msgid "listContributors() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:208
#: ../external/plone.app.contentlisting/docs/README.rst:208
msgid "Return a sequence of DCMI Contributor elements (resource collaborators). Return zero or more collaborators (beyond those returned by `listCreators`)."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:212
#: ../external/plone.app.contentlisting/docs/README.rst:212
msgid "Contributors() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:212
#: ../external/plone.app.contentlisting/docs/README.rst:212
msgid "Deprecated alias for `listContributors`."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:217
#: ../external/plone.app.contentlisting/docs/README.rst:217
msgid "Date(zone=None) -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:215
#: ../external/plone.app.contentlisting/docs/README.rst:215
msgid "Return the DCMI Date element (default resource date). Result is a string, formatted 'YYYY-MM-DD H24:MN:SS TZ'. The zone keyword is not yet supported (but is part of the DublinCore interface and has to stay)"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:222
#: ../external/plone.app.contentlisting/docs/README.rst:222
msgid "CreationDate(zone=None) -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:220
#: ../external/plone.app.contentlisting/docs/README.rst:220
msgid "Return the DCMI Date element (date resource created). Result is a string, formatted 'YYYY-MM-DD H24:MN:SS TZ'. The zone keyword is not yet supported (but is part of the DublinCore interface and has to stay)"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:227
#: ../external/plone.app.contentlisting/docs/README.rst:227
msgid "EffectiveDate(zone=None) -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:225
#: ../external/plone.app.contentlisting/docs/README.rst:225
msgid "Return the DCMI Date element (date resource becomes effective). Result is a string, formatted 'YYYY-MM-DD H24:MN:SS TZ', or None. The zone keyword is not yet supported (but is part of the DublinCore interface and has to stay)"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:232
#: ../external/plone.app.contentlisting/docs/README.rst:232
msgid "ExpirationDate(zone=None) -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:230
#: ../external/plone.app.contentlisting/docs/README.rst:230
msgid "Return the DCMI Date element (date resource expires). Result is a string, formatted 'YYYY-MM-DD H24:MN:SS TZ', or None. The zone keyword is not yet supported (but is part of the DublinCore interface and has to stay)"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:237
#: ../external/plone.app.contentlisting/docs/README.rst:237
msgid "ModificationDate(zone=None) -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:235
#: ../external/plone.app.contentlisting/docs/README.rst:235
msgid "DCMI Date element - date resource last modified. Result is a string, formatted 'YYYY-MM-DD H24:MN:SS TZ'. The zone keyword is not yet supported (but is part of the DublinCore interface and has to stay)"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:241
#: ../external/plone.app.contentlisting/docs/README.rst:241
msgid "Format() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:240
#: ../external/plone.app.contentlisting/docs/README.rst:240
msgid "Return the DCMI Format element (resource format). Result is the resource's MIME type (e.g. `text/html`, `image/png`, etc.)."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:245
#: ../external/plone.app.contentlisting/docs/README.rst:245
msgid "Identifier() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:244
#: ../external/plone.app.contentlisting/docs/README.rst:244
msgid "Return the DCMI Identifier element (resource ID). Result is a unique ID (a URL) for the resource."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:249
#: ../external/plone.app.contentlisting/docs/README.rst:249
msgid "Language() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:248
#: ../external/plone.app.contentlisting/docs/README.rst:248
msgid "DCMI Language element (resource language). Result it the RFC language code (e.g. `en-US`, `pt-BR`) for the resource."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:253
#: ../external/plone.app.contentlisting/docs/README.rst:253
msgid "Rights() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:252
#: ../external/plone.app.contentlisting/docs/README.rst:252
msgid "Return the DCMI Rights element (resource copyright). Return a string describing the intellectual property status, if any, of the resource."
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:255
#: ../external/plone.app.contentlisting/docs/README.rst:255
msgid "isVisibleInNav() -"
msgstr ""

#: ../external/plone.app.contentlisting/README.rst:256
#: ../external/plone.app.contentlisting/docs/README.rst:256
msgid "Return whether this object will be visible in a navigation view."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:17
#: ../external/plone.app.contenttypes/docs/README.rst:17
msgid "plone.app.contenttypes documentation"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:22
#: ../external/plone.app.contenttypes/docs/README.rst:22
msgid "plone.app.contenttypes provides default content types for Plone based on Dexterity. It replaces ``Products.ATContentTypes`` and provides the default-types in Plone 5. It can be used as an add-on in Plone 4.x."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:24
#: ../external/plone.app.contenttypes/docs/README.rst:24
msgid "It contains the following types:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:26
#: ../external/plone.app.contenttypes/README.rst:166
#: ../external/plone.app.contenttypes/docs/README.rst:26
#: ../external/plone.app.contenttypes/docs/README.rst:166
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:19
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:24
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:26
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:19
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:24
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:26
msgid "Collection"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:27
#: ../external/plone.app.contenttypes/README.rst:159
#: ../external/plone.app.contenttypes/docs/README.rst:27
#: ../external/plone.app.contenttypes/docs/README.rst:159
msgid "Document"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:28
#: ../external/plone.app.contenttypes/README.rst:160
#: ../external/plone.app.contenttypes/docs/README.rst:28
#: ../external/plone.app.contenttypes/docs/README.rst:160
msgid "Event"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:29
#: ../external/plone.app.contenttypes/README.rst:161
#: ../external/plone.app.contenttypes/docs/README.rst:29
#: ../external/plone.app.contenttypes/docs/README.rst:161
msgid "File"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:30
#: ../external/plone.app.contenttypes/README.rst:162
#: ../external/plone.app.contenttypes/docs/README.rst:30
#: ../external/plone.app.contenttypes/docs/README.rst:162
msgid "Folder"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:31
#: ../external/plone.app.contenttypes/README.rst:163
#: ../external/plone.app.contenttypes/docs/README.rst:31
#: ../external/plone.app.contenttypes/docs/README.rst:163
msgid "Image"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:32
#: ../external/plone.app.contenttypes/README.rst:164
#: ../external/plone.app.contenttypes/docs/README.rst:32
#: ../external/plone.app.contenttypes/docs/README.rst:164
msgid "Link"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:33
#: ../external/plone.app.contenttypes/README.rst:165
#: ../external/plone.app.contenttypes/docs/README.rst:33
#: ../external/plone.app.contenttypes/docs/README.rst:165
msgid "News Item"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:35
#: ../external/plone.app.contenttypes/docs/README.rst:35
msgid "The main difference from a users perspective is that these types are extendable through-the-web. This means you can add or remove fields and behaviors using the control-panel \"Dexterity Content Types\" (``/@@dexterity-types``)."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:37
#: ../external/plone.app.contenttypes/docs/README.rst:37
msgid "**Warning: Using plone.app.contenttypes on a site with existing Archetypes-based content requires migrating the sites content. Please see the chapter \"Migration\".**"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:43
#: ../external/plone.app.contenttypes/docs/README.rst:43
msgid "The versions 1.2.x (build from the master-branch) are used in Plone 5."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:45
#: ../external/plone.app.contenttypes/docs/README.rst:45
msgid "Version 1.1b5 and later are tested with Plone 4.3.x. The versions build from the branch 1.1.x will stay compatible with Plone 4.3.x."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:47
#: ../external/plone.app.contenttypes/docs/README.rst:47
msgid "For support of Plone 4.1 and 4.2 please use versions 1.0.x. Please note that they do not provide the full functionality."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:53
#: ../external/plone.app.contenttypes/docs/README.rst:53
msgid "This package is included in Plone 5 and does not need installation."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:55
#: ../external/plone.app.contenttypes/docs/README.rst:55
msgid "To use plone.app.contenttypes in Plone 4.x add this line in the eggs section of your ``buildout.cfg``"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:63
#: ../external/plone.app.contenttypes/docs/README.rst:63
msgid "If you have a Plone site with mixed Archetypes and Dexterity content use the extra requirement ``atrefs``."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:71
#: ../external/plone.app.contenttypes/docs/README.rst:71
msgid "This will also install the package `plone.app.referenceablebehavior <https://pypi.python.org/pypi/plone.app.referenceablebehavior>`_ that allows you to reference dexterity-based content from archetypes-based content. You will have to enable the behavior ``plone.app.referenceablebehavior.referenceable.IReferenceable`` for all types that need to be referenced by Archetypes-content."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:75
#: ../external/plone.app.contenttypes/docs/README.rst:75
msgid "What happens to existing content?"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:77
#: ../external/plone.app.contenttypes/docs/README.rst:77
msgid "If you install plone.app.contenttypes in a existing site all Archetypes-based content of the default types still exists and can be viewed but can't be edited. On installation plone.app.contenttypes removes the type-definitions for the old default-types like this:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:83
#: ../external/plone.app.contenttypes/docs/README.rst:83
msgid "They are then replaced by new Definitions:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:89
#: ../external/plone.app.contenttypes/docs/README.rst:89
msgid "To make the existing content editable again you need to migrate it to Dexterity (please see the section on migration) or uninstall plone.app.contenttypes (see the section on uninstalling)."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:91
#: ../external/plone.app.contenttypes/docs/README.rst:91
msgid "Archetypes-based content provided by add-ons (e.g. Products.PloneFormGen) will still work since only the default-types are replaced."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:93
#: ../external/plone.app.contenttypes/docs/README.rst:93
msgid "If you install plone.app.contenttypes on a fresh site (i.e. when no content has been edited or added) the usual default-content (Events, News, Members...) will be created as dexterity-content."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:97
#: ../external/plone.app.contenttypes/docs/README.rst:97
msgid "Uninstalling"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:99
#: ../external/plone.app.contenttypes/docs/README.rst:99
msgid "Uninstalling the default-types is not supported in Plone 5. If you really want to switch back to Archetypes-based types you have to to the following:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:101
#: ../external/plone.app.contenttypes/docs/README.rst:101
msgid "Go to the ZMI"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:102
#: ../external/plone.app.contenttypes/docs/README.rst:102
msgid "In portal_types delete the default-types"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:103
#: ../external/plone.app.contenttypes/docs/README.rst:103
msgid "In portal_setup navigate to the tab 'import', select the profile 'Archetypes Content Types for Plone' and install all step including dependencies."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:105
#: ../external/plone.app.contenttypes/docs/README.rst:105
msgid "Any content you created based on plone.app.contenttypes will no longer be editable until you reinstall plone.app.contenttypes."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:109
#: ../external/plone.app.contenttypes/docs/README.rst:109
#: ../external/tutorial.todoapp/docs/chapter_2.rst:105
msgid "Dependencies"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:111
#: ../external/plone.app.contenttypes/docs/README.rst:111
msgid "``plone.app.dexterity >= 2.0.7``. Dexterity is shipped with Plone 4.3.x. Version pinns for Dexterity are included in Plone 4.2.x. For Plone 4.1.x you need to pin the right version for Dexterity in your buildout. See `Installing Dexterity on older versions of Plone <http://docs.plone.org/external/plone.app.dexterity/docs/install.html#installing-dexterity-on-older-versions-of-plone>`_."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:113
#: ../external/plone.app.contenttypes/docs/README.rst:113
msgid "``plone.dexterity >= 2.2.1``. Olders version of plone.dexterity break the rss-views because plone.app.contenttypes uses behaviors for the richtext-fields."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:115
#: ../external/plone.app.contenttypes/docs/README.rst:115
msgid "``plone.app.event >= 1.1.4``. This provides the behaviors used for the event-type."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:117
#: ../external/plone.app.contenttypes/docs/README.rst:117
msgid "``plone.app.portlets >= 2.5a1``. In older version the event-portlet will not work with the new event-type."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:119
#: ../external/plone.app.contenttypes/docs/README.rst:119
msgid "These are the version-pinns for Plone 4.3.4:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:129
#: ../external/plone.app.contenttypes/docs/README.rst:129
msgid "Plone 4.3.3 also needs ``plone.app.portlets = 2.5.2``"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:131
#: ../external/plone.app.contenttypes/docs/README.rst:131
msgid "Plone-versions before 4.3.3 need to pinn more packages:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:145
#: ../external/plone.app.contenttypes/docs/README.rst:145
msgid "For migrations to work you need at least ``Products.contentmigration = 2.1.9`` and ``plone.app.intid`` (part of Plone since Plone 4.1.0)."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:149
#: ../external/plone.app.contenttypes/docs/README.rst:149
msgid "Migration"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:151
#: ../external/plone.app.contenttypes/docs/README.rst:151
msgid "To migrate your existing content from Archetypes to Dexterity use the form at ``/@@atct_migrator``."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:155
#: ../external/plone.app.contenttypes/docs/README.rst:155
msgid "Migrating Archetypes-based content to plone.app.contenttypes"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:157
#: ../external/plone.app.contenttypes/docs/README.rst:157
msgid "plone.app.contenttypes can migrate the following archetypes-based default types:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:167
#: ../external/plone.app.contenttypes/docs/README.rst:167
msgid "Topic (old Collections)"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:169
#: ../external/plone.app.contenttypes/docs/README.rst:169
msgid "The following non-default types will also be migrated:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:171
#: ../external/plone.app.contenttypes/docs/README.rst:171
msgid "The AT-based Event-type provided by plone.app.event"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:172
#: ../external/plone.app.contenttypes/docs/README.rst:172
msgid "The DX-based Event-type provided by plone.app.event"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:173
#: ../external/plone.app.contenttypes/docs/README.rst:173
msgid "The Event-type provided by plone.app.contenttypes until version 1.0"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:174
#: ../external/plone.app.contenttypes/docs/README.rst:174
msgid "News Items with blobs (provoded by https://github.com/plone/plone.app.blob/pull/2)"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:175
#: ../external/plone.app.contenttypes/docs/README.rst:175
msgid "Files and Images without blobs"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:177
#: ../external/plone.app.contenttypes/docs/README.rst:177
msgid "The migration tries to keep most features (including portlets, comments, contentrules, local roles and local workflows)."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:179
#: ../external/plone.app.contenttypes/docs/README.rst:179
msgid "**Warning:** Versions of content are not migrated. During migration you will lose all old revisions."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:183
#: ../external/plone.app.contenttypes/docs/README.rst:183
msgid "Migrating only certain types"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:185
#: ../external/plone.app.contenttypes/docs/README.rst:185
msgid "There is also a view ``/@@pac_installer`` that allows you to install plone.app.contenttypes without replacing those archetypes-types with the dexterity-types of which there are existing objects in the site. Afterwards it redirects to the migration-form and only the types that you chose to migrate are installed. This allows you to keep certain types as archetypes while migrating others to dexterity (for example if you did heavy customizations of these types and do not have the time to reimplement these features in dexterity."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:189
#: ../external/plone.app.contenttypes/docs/README.rst:189
msgid "Migrating Topics"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:191
#: ../external/plone.app.contenttypes/docs/README.rst:191
msgid "Topics are migrated to Collections. However, the old type Topic had support for Subtopics, a feature that does not exit in Collections. Subtopics are nested Topics that inherited search terms from their parents. Since Collections are not folderish (i.e. they cannot contain content) Subtopics cannot be migrated unless Collections are made folderish (i.e. that they can contain content). Also the feature that search terms can be inherited from parents does not exist for Collections."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:193
#: ../external/plone.app.contenttypes/docs/README.rst:193
msgid "The migration-form will warn you if you have subtopics in your site and your Collections are not folderish. You then have several options:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:195
#: ../external/plone.app.contenttypes/docs/README.rst:195
msgid "You can delete all Subtopics before migrating and achieve their functionality in another way (e.g. using eea.facetednavigation)."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:196
#: ../external/plone.app.contenttypes/docs/README.rst:196
msgid "You can choose to not migrate Topics by not selecting them. This will keep your old Topics functional. You can still add new Collections."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:197
#: ../external/plone.app.contenttypes/docs/README.rst:197
msgid "You can modify Collections to be folderish or create your own folderish content-type.   That type would need a base-class that inherits from ``plone.dexterity.content.Container`` instead of ``plone.dexterity.content.Item``:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:209
#: ../external/plone.app.contenttypes/docs/README.rst:209
msgid "You can either use a new Collection type or simply modify the default type to use this new base-class by overriding the klass-attribute of the default Collection. To override add a ``Collection.xml`` in your own package:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:218
#: ../external/plone.app.contenttypes/docs/README.rst:218
msgid "If you really need it you could add the functionality to inherit search terms to your own folderish Collections by extending the behavior like in the example at https://github.com/plone/plone.app.contenttypes/commit/366cc1a911c81954645ec6aabce925df4a297c63"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:222
#: ../external/plone.app.contenttypes/docs/README.rst:222
msgid "Migrating content that is translated with LinguaPlone"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:224
#: ../external/plone.app.contenttypes/docs/README.rst:224
msgid "Since LinguaPlone does not support Dexterity you need to migrate from LinguaPlone to plone.app.multilingual (http://pypi.python.org/pypi/plone.app.multilingual). The migration from Products.LinguaPlone to plone.app.multilingual should happen **before** the migration from Archetypes to plone.app.contenttypes. For details on the migration see http://pypi.python.org/pypi/plone.app.multilingual#linguaplone-migration"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:228
#: ../external/plone.app.contenttypes/docs/README.rst:228
msgid "Migrating from old versions of plone.app.contenttypes"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:230
#: ../external/plone.app.contenttypes/docs/README.rst:230
msgid "Before version 1.0a2 the content-items did not implement marker-interfaces. They will break in newer versions since the views are now registered for these interfaces (e.g. ``plone.app.contenttypes.interfaces.IDocument``). To fix this you can call the view ``/@@fix_base_classes`` on your site-root."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:232
#: ../external/plone.app.contenttypes/docs/README.rst:232
msgid "Since plone.app.contenttypes 1.1a1, the Collection type uses the new Collection behavior and the Event type utilizes behaviors from `plone.app.event <http://pypi.python.org/pypi/plone.app.event>`_. In order to upgrade:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:234
#: ../external/plone.app.contenttypes/docs/README.rst:234
msgid "First run the default profile (``plone.app.contenttypes:default``) or reinstall plone.app.contenttypes"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:235
#: ../external/plone.app.contenttypes/docs/README.rst:235
msgid "Then run the upgrade steps."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:239
#: ../external/plone.app.contenttypes/docs/README.rst:239
msgid "Migrating default-content that was extended with archetypes.schemaextender"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:241
#: ../external/plone.app.contenttypes/docs/README.rst:241
msgid "The migration-form warns you if any of your old types were extended with aditional fields using archetypes.schemaextender. The data contained in these fields will be lost during migration (with the exception of images added with collective.contentleadimage)."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:243
#: ../external/plone.app.contenttypes/docs/README.rst:243
msgid "To keep the data you would need to write a custom migration for your types dexterity-behaviors for the functionality provided by the schemaextenders. This is an advanced development task and beyond the scope of this documentation."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:247
#: ../external/plone.app.contenttypes/docs/README.rst:247
msgid "Migrating images created with collective.contentleadimage"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:249
#: ../external/plone.app.contenttypes/docs/README.rst:249
msgid "`collective.contentleadimage <https://pypi.python.org/pypi/collective.contentleadimage/>`_ was a popular addon that allows you to add images to any content in your site by extending the default types. To make sure these images are kept during migration you have to enable the behavior \"Lead Image\" on all those types where you want to migrate images added using collective.contentleadimage."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:251
#: ../external/plone.app.contenttypes/docs/README.rst:251
msgid "The old types that use leadimages are listed in the navigation-form with the comment *\"extended fields: 'leadImage', 'leadImage_caption'\"*. The migration-form informs you which new types have the behavior enabled and which do not. Depending on the way you installed plone.app.contenttypes you might have to first install these types by (re-)installing plone.app.contenttypes."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:255
#: ../external/plone.app.contenttypes/docs/README.rst:255
msgid "Migrating custom content"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:257
#: ../external/plone.app.contenttypes/docs/README.rst:257
msgid "During migrations of the default types any custom content-types will not be migrated and will continue to work as expected."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:259
#: ../external/plone.app.contenttypes/docs/README.rst:259
msgid "To help you migrating these types to Dexterity plone.app.contenttypes contains a migration form (``/@@custom_migration``) that allows you to migrate any (custom or default) Archetypes-type to any (custom or default) Dexterity-type. The only requirement is that the Dexterity-type you want to migrate to has to exist and that the class of the old type is still present. It makes no difference if the type you are migrating from is still registered in portal_types or is already removed or replaced by a dexterity-version using the same name."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:261
#: ../external/plone.app.contenttypes/docs/README.rst:261
msgid "In the form ``/@@custom_migration`` you can select a Dexterity-type for any Archetypes-types that exists in the portal. You can then map the source-types fields to the targets fields. You can also choose to ignore fields. You have to take care that the values can be migrated (since there is no validation for that), e.g. it would make no sense to migrate a ImageField to a TextField. There are build-in methods for most field-types, custom or rarely used fields might not migrate properly (you can create a issue if you miss a migration that is not yet supported)."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:263
#: ../external/plone.app.contenttypes/docs/README.rst:263
msgid "After you map the fields you can test the configuration. During a test one item will be test-migrated and Plone checks if the migrated item will be accessible without throwing a errors. After the test any changes will be rolled back."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:267
#: ../external/plone.app.contenttypes/docs/README.rst:267
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:2
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:2
msgid "Widgets"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:269
#: ../external/plone.app.contenttypes/docs/README.rst:269
msgid "When used in Plone 4.x plone.app.contenttypes uses the default z3c.form widgets. All widgets work as they used to with Archetypes except for the keywords-widget for which a simple linesfield is used. Replacing that with a nicer implementation is explained below."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:271
#: ../external/plone.app.contenttypes/docs/README.rst:271
msgid "It is also possible to use ``plone.app.widgets`` to switch to the widgets that are used in Plone 5."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:275
#: ../external/plone.app.contenttypes/docs/README.rst:275
msgid "How to override widgets"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:277
#: ../external/plone.app.contenttypes/docs/README.rst:277
msgid "To override the default keywords-widgets with a nicer widget you can use the package `collective.z3cform.widgets <https://pypi.python.org/pypi/collective.z3cform.widgets>`_."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:279
#: ../external/plone.app.contenttypes/docs/README.rst:279
msgid "Add ``collective.z3cform.widgets`` to your ``buildout`` and in your own package register the override in your ``configure.zcml``:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:285
#: ../external/plone.app.contenttypes/docs/README.rst:285
msgid "Then add a file ``subjects.py``"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:306
#: ../external/plone.app.contenttypes/docs/README.rst:306
msgid "Once you install ``collective.z3cform.widgets`` in the quickinstaller, the new widget will then be used for all types."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:310
#: ../external/plone.app.contenttypes/docs/README.rst:310
msgid "Information for Addon-Developers"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:315
#: ../external/plone.app.contenttypes/docs/README.rst:315
msgid "The schemata for the types File, Image and Link are defined in xml-files using ``plone.supermodel``. This allows the types to be editable trough the web. The types Document, News Item, Folder and Event have no schemata at all but only use behaviors to provide their fields."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:319
#: ../external/plone.app.contenttypes/docs/README.rst:319
msgid "Installation as a dependency from another product"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:321
#: ../external/plone.app.contenttypes/docs/README.rst:321
msgid "If you want to add plone.app.contenttypes as a dependency from another products use the profile ``plone-content`` in your ``metadata.xml`` to have Plone populate a new site with DX-based default-content."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:332
#: ../external/plone.app.contenttypes/docs/README.rst:332
msgid "If you use the profile ``default`` then the default-content in new sites will still be Archetypes-based. You'll then have to migrate that content using the migration-form ``@@atct_migrator`` or delete it by hand."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:336
#: ../external/plone.app.contenttypes/docs/README.rst:336
msgid "Using folderish types"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:338
#: ../external/plone.app.contenttypes/docs/README.rst:338
msgid "At some point all default types will probably be folderish. If you want the default types to be folderish before that happens please look at https://pypi.python.org/pypi/collective.folderishtypes."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:342
#: ../external/plone.app.contenttypes/docs/README.rst:342
msgid "Changing the base class for existing objects"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:344
#: ../external/plone.app.contenttypes/docs/README.rst:344
msgid "If you changed the base-class of existing types (e.g. because you changed them to be folderish) you also need to upgrade the base-class of existing objects. You can use the following form for this: ``@@base_class_migrator_form``."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:346
#: ../external/plone.app.contenttypes/docs/README.rst:346
msgid "This form lets you select classes to be updated and shows the number of objects for each class. This form can be used to change the base-class of any dexterity-types instances. The migration will also transform itemish content to folderish content if the new class is folderish. You might want to use the method ``plone.app.contenttypes.migration.dxmigration.migrate_base_class_to_new_class`` in your own upgrade-steps."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:350
#: ../external/plone.app.contenttypes/docs/README.rst:350
msgid "Extending the types"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:352
#: ../external/plone.app.contenttypes/docs/README.rst:352
msgid "You have several options:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:354
#: ../external/plone.app.contenttypes/docs/README.rst:354
msgid "Extend the types through-the-web by adding new fields or behaviors in the types-controlpanel ``/@@dexterity-types``."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:356
#: ../external/plone.app.contenttypes/docs/README.rst:356
msgid "Extend the types with a custom type-profile that extends the existing profile with behaviors, or fields."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:358
#: ../external/plone.app.contenttypes/docs/README.rst:358
msgid "You will first have to add the type to your ``[yourpackage]/profiles/default/types.xml``."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:367
#: ../external/plone.app.contenttypes/docs/README.rst:367
msgid "Here is an example that enables the image-behavior for Folders in ``[yourpackage]/profiles/default/types/Folder.xml``:"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:378
#: ../external/plone.app.contenttypes/docs/README.rst:378
msgid "By adding a schema-definition to the profile you can add fields."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:390
#: ../external/plone.app.contenttypes/docs/README.rst:390
msgid "Put the schema-xml in ``your/package/content/folder.xml`` (the folder ``content`` needs a ``__init__.py``)"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:417
#: ../external/plone.app.contenttypes/docs/README.rst:417
msgid "You could alternatively override the peroperty ``model_file`` of the type-definition with a empty string and use the property ``schema`` to provide your custom python-schema."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:419
#: ../external/plone.app.contenttypes/docs/README.rst:419
msgid "For more complex features you should always consider create custom behaviors and/or write your own content-types since that will most likely give you more flexibility and less problem when you want to upgrade to a newer version in the future."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:421
#: ../external/plone.app.contenttypes/docs/README.rst:421
msgid "For more information on custom dexterity-types and custom behaviors please read the `dexterity documentation <http://docs.plone.org/external/plone.app.dexterity/docs/>`_."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:425
#: ../external/plone.app.contenttypes/docs/README.rst:425
msgid "Differences to Products.ATContentTypes"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:427
#: ../external/plone.app.contenttypes/docs/README.rst:427
msgid "The image of the News Item is not a field on the contenttype but a behavior that can add a image to any contenttypes (similar to http://pypi.python.org/pypi/collective.contentleadimage)"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:428
#: ../external/plone.app.contenttypes/docs/README.rst:428
msgid "All richtext-fields are also provided by a reuseable behavior."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:429
#: ../external/plone.app.contenttypes/docs/README.rst:429
msgid "The functionality to transform (rotate and flip) images has been removed."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:430
#: ../external/plone.app.contenttypes/docs/README.rst:430
msgid "There is no more field ``Location``. If you need georeferenceable consider using ``collective.geo.behaviour``"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:431
#: ../external/plone.app.contenttypes/docs/README.rst:431
msgid "The link on the image of the newsitem triggers an overlay"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:432
#: ../external/plone.app.contenttypes/docs/README.rst:432
msgid "The link-type now allows the of the variables ``${navigation_root_url}`` and ``${portal_url}`` to construct relative urls."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:433
#: ../external/plone.app.contenttypes/docs/README.rst:433
msgid "The views for Folders and Collections changed their names and now share a common implementation (since version 1.2a8):"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:435
#: ../external/plone.app.contenttypes/docs/README.rst:435
msgid "``folder_listing_view`` (Folders) and ``collection_view`` (Collections) -> ``listing_view`` (Folders and Collections)"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:436
#: ../external/plone.app.contenttypes/docs/README.rst:436
msgid "``folder_summary_view`` (Folders) and ``summary_view`` (Collections) -> ``summary_view`` (Folders and Collections)"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:437
#: ../external/plone.app.contenttypes/docs/README.rst:437
msgid "``folder_tabular_view`` (Folders) and ``tabular_view`` (Collections) -> ``tabular_view`` (Folders and Collections)"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:438
#: ../external/plone.app.contenttypes/docs/README.rst:438
msgid "``folder_full_view`` (Folders) and ``all_content`` (Collections) -> ``full_view`` (Folders and Collections)"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:439
#: ../external/plone.app.contenttypes/docs/README.rst:439
msgid "``atct_album_view`` (Folders) and ``thumbnail_view`` (Collections) -> ``album_view`` (Folders and Collections)"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:444
#: ../external/plone.app.contenttypes/docs/README.rst:444
msgid "Toubleshooting"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:446
#: ../external/plone.app.contenttypes/docs/README.rst:446
msgid "Please report issues in the bugtracker at https://github.com/plone/plone.app.contenttypes/issues."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:449
#: ../external/plone.app.contenttypes/docs/README.rst:449
msgid "ValueError on installing"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:451
#: ../external/plone.app.contenttypes/docs/README.rst:451
msgid "When you try to install plone.app.contenttypes < 1.1a1 in a existing site you might get the following error::"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:459
#: ../external/plone.app.contenttypes/docs/README.rst:459
msgid "Before installing plone.app.contenttypes you have to reinstall plone.app.collection to update collections to the version that uses Dexterity."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:463
#: ../external/plone.app.contenttypes/docs/README.rst:463
msgid "Branches"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:465
#: ../external/plone.app.contenttypes/docs/README.rst:465
msgid "The master-branch supports Plone 5 only. From this 1.2.x-releases will be cut."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:467
#: ../external/plone.app.contenttypes/docs/README.rst:467
msgid "The 1.1.x-branch supports Plone 4.3.x. From this 1.1.x-releases will be cut."
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:471
#: ../external/plone.app.contenttypes/docs/README.rst:471
#: ../external/plone.app.multilingual/README.rst:398
msgid "License"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:473
#: ../external/plone.app.contenttypes/docs/README.rst:473
#: ../external/plone.app.multilingual/README.rst:400
msgid "GNU General Public License, version 2"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:479
#: ../external/plone.app.contenttypes/docs/README.rst:479
msgid "Philip Bauer <bauer@starzel.de>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:480
#: ../external/plone.app.contenttypes/docs/README.rst:480
msgid "Michael Mulich <michael.mulich@gmail.com>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:481
#: ../external/plone.app.contenttypes/docs/README.rst:481
msgid "Timo Stollenwerk <contact@timostollenwerk.net>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:482
#: ../external/plone.app.contenttypes/docs/README.rst:482
msgid "Peter Holzer <hpeter@agitator.com>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:483
#: ../external/plone.app.contenttypes/docs/README.rst:483
msgid "Patrick Gerken <gerken@starzel.de>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:484
#: ../external/plone.app.contenttypes/docs/README.rst:484
msgid "Steffen Lindner <lindner@starzel.de>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:485
#: ../external/plone.app.contenttypes/docs/README.rst:485
msgid "Daniel Widerin <daniel@widerin.net>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:486
#: ../external/plone.app.contenttypes/docs/README.rst:486
msgid "Jens Klein <jens@bluedynamics.com>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:487
#: ../external/plone.app.contenttypes/docs/README.rst:487
msgid "Joscha Krutzki <joka@jokasis.de>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:488
#: ../external/plone.app.contenttypes/docs/README.rst:488
msgid "Mathias Leimgruber <m.leimgruber@4teamwork.ch>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:489
#: ../external/plone.app.contenttypes/docs/README.rst:489
msgid "Matthias Broquet <mbroquet@atreal.fr>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:490
#: ../external/plone.app.contenttypes/docs/README.rst:490
msgid "Wolfgang Thomas <thomas@syslab.com>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:491
#: ../external/plone.app.contenttypes/docs/README.rst:491
msgid "Bo Simonsen <bo@geekworld.dk>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:492
#: ../external/plone.app.contenttypes/docs/README.rst:492
msgid "Andrew Mleczko <andrew@mleczko.net>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:493
#: ../external/plone.app.contenttypes/docs/README.rst:493
msgid "Roel Bruggink <roel@jaroel.nl>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:494
#: ../external/plone.app.contenttypes/docs/README.rst:494
msgid "Carsten Senger <senger@rehfisch.de>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:495
#: ../external/plone.app.contenttypes/docs/README.rst:495
msgid "Rafael Oliveira <rafaelbco@gmail.com>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:496
#: ../external/plone.app.contenttypes/README.rst:507
#: ../external/plone.app.contenttypes/docs/README.rst:496
#: ../external/plone.app.contenttypes/docs/README.rst:507
msgid "Martin Opstad Reistadbakk <martin@blaastolen.com>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:497
#: ../external/plone.app.contenttypes/docs/README.rst:497
msgid "Nathan Van Gheem <vangheem@gmail.com>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:498
#: ../external/plone.app.contenttypes/docs/README.rst:498
msgid "Johannes Raggam <raggam-nl@adm.at>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:499
#: ../external/plone.app.contenttypes/docs/README.rst:499
msgid "Jamie Lentin <jm@lentin.co.uk>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:500
#: ../external/plone.app.contenttypes/docs/README.rst:500
msgid "Maurits van Rees <maurits@vanrees.org>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:501
#: ../external/plone.app.contenttypes/docs/README.rst:501
msgid "David Glick <david@glicksoftware.com>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:502
#: ../external/plone.app.contenttypes/docs/README.rst:502
msgid "Kees Hink <keeshink@gmail.com>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:503
#: ../external/plone.app.contenttypes/docs/README.rst:503
msgid "Roman Kozlovskyi <krzroman@gmail.com>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:504
#: ../external/plone.app.contenttypes/docs/README.rst:504
msgid "Gauthier Bastien <gauthier.bastien@imio.be>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:505
#: ../external/plone.app.contenttypes/docs/README.rst:505
msgid "Andrea Cecchi <andrea.cecchi@redturtle.it>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:506
#: ../external/plone.app.contenttypes/docs/README.rst:506
msgid "Bogdan Girman <bogdan.girman@gmail.com>"
msgstr ""

#: ../external/plone.app.contenttypes/README.rst:508
#: ../external/plone.app.contenttypes/docs/README.rst:508
msgid "Florent Michon <fmichon@atreal.fr>"
msgstr ""

#: ../external/plone.app.contenttypes/docs/source/index.rst:7
msgid "Welcome to plone.app.contenttypes's documentation!"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:0
msgid "Table of Contents"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:3
msgid "``2.1.1`` is the last Plone 4 compatible release."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:9
msgid "Dexterity wants to make some things really easy. These are:"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:11
msgid "Create a \"real\" content type entirely through-the-web without having to know programming."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:13
msgid "As a business user, create a schema using visual or through-the-web tools, and augment it with adapters, event handlers, and other Python code written on the filesystem by a Python programmer."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:16
msgid "Create content types in filesystem code quickly and easily, without losing the ability to customise any aspect of the type and its operation later if required."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:19
msgid "Support general \"behaviours\" that can be enabled on a custom type in a declarative fashion. Behaviours can be things like title-to-id naming, support for locking or versioning, or sets of standard metadata with associated UI elements."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:23
msgid "Easily package up and distribute content types defined through-the-web, on the filesystem, or using a combination of the two."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:27
msgid "Philosophy"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:29
msgid "Dexterity is designed with a specific philosophy in mind. This can be summarised as follows:"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:36
msgid "Reuse over reinvention"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:33
msgid "As far as possible, Dexterity should reuse components and technologies that already exist. More importantly, however, Dexterity should reuse concepts that exist elsewhere. It should be easy to learn Dexterity by analogy, and to work with Dexterity types using familiar APIs and techniques."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:43
msgid "Small over big"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:39
msgid "Mega-frameworks be damned. Dexterity consists of a number of specialised packages, each of which is independently tested and reusable. Furthermore, packages should have as few dependencies as possible, and should declare their dependencies explicitly. This helps keep the design clean and the code manageable."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:53
msgid "Natural interaction over excessive generality"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:46
msgid "The Dexterity design was driven by several use cases that express the way in which we want people to work with Dexterity. The end goal is to make it easy to get started, but also easy to progress from an initial prototype to a complex set of types and associated behaviours through step-wise learning and natural interaction patterns. Dexterity aims to consider its users - be they business analysts, light integrators or Python developers, and be they new or experienced - and cater to them explicitly with obvious, well-documented, natural interaction patterns."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:58
msgid "Real code over generated code"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:56
msgid "Generated code is difficult to understand and difficult to debug when it doesn't work as expected. There is rarely, if ever, any reason to scribble methods or 'exec' strings of Python code."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:66
msgid "Zope 3 over Zope 2"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:61
msgid "Although Dexterity does not pretend to work with non-CMF systems, as many components as possible should work with plain Zope 3, and even where there are dependencies on Zope 2, CMF or Plone, they should - as far as is practical - follow Zope 3 techniques and best practices. Many operations (e.g. managing objects in a folder, creating new objects or manipulating objects through a defined schema) are better designed in Zope 3 than they were in Zope 2."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:71
msgid "Zope concepts over new paradigms"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:69
msgid "We want Dexterity to be \"Zope-ish\". Zope is a mature, well-designed (well, mostly) and battle tested platform. We do not want to invent brand new paradigms and techniques if we can help it."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:76
msgid "Automated testing over wishful thinking"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:74
msgid "\"Everything\" should be covered by automated tests. Dexterity necessarily has a lot of moving parts. Untested moving parts tend to come loose and fall on people's heads. Nobody likes that."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:79
msgid "Getting started"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:81
msgid "Please read the `installation guide`_ to get Dexterity up and running."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:85
msgid "Then log in to Plone, go to Site Setup, and go to the ``Dexterity Types`` control panel to get started creating content types through the web."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:88
msgid "Or read the `Dexterity Developer Manual`_ to get started developing Dexterity content types on the filesystem."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:91
msgid "The 2.0.x release series of Dexterity is compatible with and included with Plone 4.3."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:97
msgid "If you are upgrading from a previous release of Dexterity, you need to:"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:99
msgid "Update your buildout with the new versions (or extend the updated KGS), and re-run it."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:101
msgid "Restart Zope."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:102
msgid "Go to the Add-ons control panel in Plone Site Setup, and run the upgrade steps for \"Dexterity Content Types\" if there are any available."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:108
msgid "Various documentation is available:"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:110
msgid "`Dexterity Developer Manual`_"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:111
msgid "`How to create reusable behaviors for Dexterity types`_"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:116
msgid "The following documents are not Dexterity-specific, but will likely be useful to users of Dexterity:"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:119
msgid "`Schema-driven forms manual`_"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:125
msgid "Issue tracker"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:127
msgid "Please report issues via the `Plone issue tracker`_."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:132
msgid "Support"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:134
msgid "Dexterity use questions may be answered via `Plone's support channels`_."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:139
msgid "Contributing"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:141
#: ../external/plone.app.multilingual/README.rst:393
msgid "Contributors please read the document `Process for Plone core's development <http://docs.plone.org/develop/plone-coredev/index.html>`_"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:143
msgid "Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.app.dexterity>`_."
msgstr ""

#: ../external/plone.app.dexterity/README.rst:145
msgid "Dexterity wouldn't be possible without the hard work of a lot of people, including:"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:147
msgid "Martin Aspeli"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:148
msgid "Jian Aijun"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:149
msgid "Wichert Akkerman"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:150
msgid "Jonas Baumann"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:151
msgid "David Brenneman"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:152
msgid "Joel Burton"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:153
msgid "Vincent Fretin"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:154
msgid "Rok Garbas"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:155
msgid "Anthony Gerrard"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:156
msgid "Nathan van Gheem"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:157
msgid "David Glick"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:158
msgid "Craig Haynal"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:159
msgid "Wouter Vanden Hove"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:160
msgid "Jean-Michel Francois"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:161
msgid "Jim Fulton"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:162
msgid "Jamie Lentin"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:163
msgid "Alex Limi"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:164
msgid "Steve McMahon"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:165
msgid "Jason Mehring"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:166
msgid "Alec Mitchell"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:167
msgid "Daniel Nouri"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:168
msgid "Ross Patterson"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:169
msgid "Maurits van Rees"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:170
msgid "Lennart Regebro"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:171
msgid "Laurence Rowe"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:172
msgid "Israel Saeta Perez"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:173
msgid "Hanno Schlichting"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:174
msgid "Christian Schneider"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:175
msgid "Carsten Senger"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:176
msgid "Jon Stahl"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:177
msgid "Eric Steele"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:178
msgid "Gaudenz Steinlin"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:179
msgid "Dorneles Tremea"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:180
msgid "Sean Upton"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:181
msgid "Sylvain Viollon"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:182
msgid "Matthew Wilkes"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:183
msgid "Matt Yoder"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:184
msgid "Andi Zeidler"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:185
msgid "Hector Velarde"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:186
msgid "Giacomo Spettoli"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:187
msgid "Jens Klein"
msgstr ""

#: ../external/plone.app.dexterity/README.rst:189
msgid "(Please add your name if we have neglected to.)"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/behaviours.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/behaviours.rst:2
msgid "Using behaviors"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/behaviours.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/behaviours.rst:4
msgid "**Finding and adding behaviors**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/behaviours.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/behaviours.rst:6
msgid "Dexterity introduces the concept of *behaviors* – re-usable bundles of functionality and/or form fields which can be turned on or off on a per-type basis."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/behaviours.rst:10
#: ../external/plone.app.dexterity/docs/grok/advanced/behaviours.rst:10
msgid "Each behavior has a unique interface. When a behavior is enabled on a type, you will be able to adapt that type to the behavior’s interface. If the behavior is disabled, the adaptation will fail. The behavior interface can also be marked as an ``IFormFieldsProvider``, in which case it will add fields to the standard add and edit forms. Finally, a behavior may imply a sub-type: a marker interface which will be dynamically provided by instances of the type for which the behavior is enabled."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/behaviours.rst:19
#: ../external/plone.app.dexterity/docs/grok/advanced/behaviours.rst:19
msgid "We will not cover writing new behaviors in this manual, but we will show how to enable behaviors on a type. Writing behaviors is covered in the `Behaviors manual <http://docs.plone.org/external/plone.app.dexterity/docs/behaviors/index.html>`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/behaviours.rst:23
#: ../external/plone.app.dexterity/docs/grok/advanced/behaviours.rst:23
msgid "In fact, we’ve already seen one standard behavior applied to our example types, registered in the FTI and imported using GenericSetup:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/behaviours.rst:33
#: ../external/plone.app.dexterity/docs/grok/advanced/behaviours.rst:33
msgid "Other behaviors are added in the same way, by listing additional behavior interfaces as elements of the ``behaviors`` property."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/behaviours.rst:36
#: ../external/plone.app.dexterity/docs/grok/advanced/behaviours.rst:36
msgid "Behaviors are normally registered with the ``<plone:behavior />`` ZCML directive. When registered, a behavior will create a global utility providing ``IBehavior``, which is used to provide some metadata, such as a title and description for the behavior."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/behaviours.rst:41
#: ../external/plone.app.dexterity/docs/grok/advanced/behaviours.rst:41
msgid "You can find and apply behaviors via the :guilabel:`Dexterity Content Types` control panel that is installed with `plone.app.dexterity`_. For a list of standard behaviors that ship with Dexterity, see the reference at the end of this manual."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:3
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:3
msgid "Catalog indexing strategies"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:5
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:5
msgid "You may have two different interests in regard to indexing your custom content type objects:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:7
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:7
msgid "Making particular fields searchable via Plone's main search facility;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:8
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:9
msgid "Indexing particular fields for custom lookup."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:11
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:12
msgid "Making content searchable"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:13
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:14
msgid "Plone's main index is called *SearchableText*. This is the index which is searched when you use the main portal search. Fields in your custom content types are not necessarily added to SearchableText. Fields added via Dublin-core behaviors are automatically part of SearchableText; others are not."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:15
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:16
msgid "So, you may need to explicitly add fields to SearchableText if you wish their information to be findable via the main search. There are all sorts of highly customizable ways to do this, but the easiest is to use the `collective.dexteritytextindexer  <https://github.com/collective/collective.dexteritytextindexer>`_ add-on package."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:17
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:18
msgid "Add ``collective.dexteritytextindexer`` to your buildout and you will gain a new Dexterity behavior that will allow you to easily add fields to SearchableText. Once you turn on this behavior, you will then need to specify fields for addition to SearchableText."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:21
msgid "Note that if you turn on the ``Dynamic SearchableText indexer behavior`` for a content type, then you must specify all fields that need SearchableText indexing. Dublin core fields like Title and Description are no longer automatically handled."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:23
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:24
msgid "Once you have turned on the indexer behavior, edit the XML field model to add ``indexer:searchable=\"true\"`` to the ``field`` tag for each field you wish to add to the SearchableText index."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:25
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:26
msgid "See the `collective.dexteritytextindexer  <https://github.com/collective/collective.dexteritytextindexer>`_ package documentation for details and for information on how to use it via Python schema."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:29
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:30
msgid "Creating and using custom indexes"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:31
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:32
msgid "**How to create custom catalog indexes**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:33
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:34
msgid "The ZODB is a hierarchical object store where objects of different schemata and sizes can live side by side. This is great for managing individual content items, but not optimal for searching across the content repository. A naive search would need to walk the entire object graph, loading each object into memory and comparing object metadata with search criteria. On a large site, this would quickly become prohibitive."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:38
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:39
msgid "Luckily, Zope comes with a technology called the *ZCatalog*, which is basically a table structure optimised for searching. In Plone, there’s a ZCatalog instance called ``portal_catalog``. Standard event handlers will index content in the catalog when it is created or modified, and unindex when the content is removed."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:42
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:43
msgid "The catalog manages *indexes*, which can be searched, and *metadata* (also known as *columns*), which are object attributes for which the value is copied into the catalog. When we perform a search, the result is a lazily loaded list of objects known as *catalog brains*. Catalog brains contain the value of metadata columns (but not indexes) as attributes. The functions ``getURL()``, ``getPath()`` and ``getObject()`` can be used to get the URL and path of the indexed content item, and to load the full item into memory."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:49
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:50
msgid "Dexterity objects are more lightweight than Archetypes objects. This means that loading objects into memory is not quite as undesirable as is sometimes assumed. If you’re working with references, parent objects, or a small number of child objects, it is usually OK to load objects directly to work with them. However, if you are working with a large or unknown-but-potentially-large number of objects, you should consider using catalog searches to find them and use catalog metadata to store frequently used values. There is an important trade-off to be made between limiting object access and bloating the catalog with unneeded indexes and metadata, though. In particular, large strings (such as the body text of a document) or binary data (such as the contents of image or file fields) should not be stored as catalog metadata."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:56
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:57
msgid "Plone comes with a number of standard indexes and metadata columns. These correspond to much of the *Dublin Core* set of metadata as well as several Plone-specific attributes. You can view the indexes, columns and the contents of the catalog through the ZMI pages of the ``portal_catalog`` tool. If you’ve never done this, it is probably instructive to have a look, both to understand how the indexes and columns may apply to your own content types, and to learn what searches are already possible."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:61
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:62
msgid "Indexes come in various types. The most common ones are:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:64
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:65
msgid "``FieldIndex``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:64
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:65
msgid "the most common type, used to index a single value."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:68
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:69
msgid "``KeywordIndex``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:67
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:68
msgid "used to index lists of values where you want to be able to search for a subset of the values. As the name implies, commonly used for keyword fields, such as the ``Subject`` Dublin Core metadata field."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:72
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:73
msgid "``DateIndex``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:71
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:72
msgid "used to index Zope 2 ``DateTime`` objects. Note that if your type uses a *Python* ``datetime`` object, you’ll need to convert it to a Zope 2 ``DateTime`` using a custom indexer!"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:75
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:76
msgid "``DateRangeIndex``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:75
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:76
msgid "used mainly for the effective date range."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:79
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:80
msgid "``ZCTextIndex``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:78
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:79
msgid "used mainly for the ``SearchableText`` index. This is the index used for full-text search."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:83
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:84
msgid "``ExtendedPathIndex``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:82
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:83
msgid "a variant of ``PathIndex``, which is used for the ``path`` index. This is used to search for content by path and optionally depth."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:86
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:87
msgid "Adding new indexes and metadata columns"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:88
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:89
msgid "When an object is indexed, the catalog will by default attempt to find attributes and methods that match index and column names on the object. Methods will be called (with no arguments) in an attempt to get a value. If a value is found, it is indexed."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:93
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:94
msgid "Objects are normally acquisition-wrapped when they are indexed, which means that an indexed value may be acquired from a parent. This can be confusing, especially if you are building container types and creating new indexes for them. If child objects don’t have attributes/methods with names corresponding to indexes, the parent object’s value will be indexed for all children as well."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:97
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:98
msgid "Catalog indexes and metadata can be installed with the ``catalog.xml`` GenericSetup import step. It is useful to look at the one in Plone (``parts/omelette/Products/CMFPlone/profiles/default/catalog.xml``)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:99
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:100
msgid "As an example, let’s index the ``track`` property of a ``Session`` in the catalog, and add a metadata column for this property as well. In ``profiles/default/catalog.xml``, we have:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:112
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:113
msgid "Notice how we specify both the index name and the indexed attribute. It is possible to use an index name (the key you use when searching) that is different to the indexed attribute, although they are usually the same. The metadata column is just the name of an attribute."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:117
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:118
msgid "Creating custom indexers"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:119
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:120
msgid "Indexing based on attributes can sometimes be limiting. First of all, the catalog is indiscriminate in that it attempts to index every attribute that’s listed against an index or metadata column for every object. Secondly, it is not always feasible to add a method or attribute to a class just to calculate an indexed value."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:123
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:124
msgid "Plone 3.3 and later ships with a package called `plone.indexer`_ to help make it easier to write custom indexers: components that are invoked to calculate the value which the catalog sees when it tries to index a given attribute. Indexers can be used to index a different value to the one stored on the object, or to allow indexing of a “virtual” attribute that does not actually exist on the object in question. Indexers are usually registered on a per-type basis, so you can have different implementations for different types of content."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:128
msgid "To illustrate indexers, we will add three indexers to ``program.py``. Two will provide values for the ``start`` and ``end`` indexes, normally used by Plone’s ``Event`` type. We actually have attributes with the correct name for these already, but they use Python ``datetime`` objects whereas the ``DateIndex`` requires a Zope 2 ``DateTime.DateTime`` object. (Python didn’t have a ``datetime`` module when this part of Zope was created!) The third indexer will be used to provide a value for the ``Subject`` index that takes its value from the ``tracks`` list."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:157
msgid "And we need to register the indexers in ZCML:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:165
msgid "Here, we use the ``@indexer`` decorator to create an indexer. This doesn’t register the indexer component, though, so we need to use ZCML to finalise the registration. Crucially, this is where the indexer’s ``name`` is defined. This is the name of the indexed attribute for which the indexer is providing a value."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:172
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:166
msgid "Since all of these indexes are part of a standard Plone installation, we won’t register them in ``catalog.xml``. If you are creating custom indexers and need to add new catalog indexes or columns for them, remember that the “indexed attribute” name (and the column name) must match the name of the indexer as set in its adapter registration."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:176
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:170
msgid "Searching using your indexes"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:178
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:172
msgid "Once we have registered our indexers and re-installed our product (to ensure that the ``catalog.xml`` import step is allowed to install new indexes in the catalog), we can use our new indexes just like we would any of the default indexes."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:180
msgid "The pattern is always the same:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:195
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:187
msgid "This shows a simple search using the ``portal_catalog`` tool, which we look up from some context object. We call the tool to perform a search, passing search criteria as keyword arguments, where the left hand side refers to an installed index and the right hand side is the search term."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:198
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:190
msgid "Some of the more commonly used indexes are:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:201
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:193
msgid "``Title``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:201
#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:271
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:193
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:263
msgid "the object’s title."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:204
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:196
msgid "``Description``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:204
#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:274
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:196
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:266
msgid "the object’s description."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:215
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:207
#: ../external/plone.app.theming/docs/index.rst:740
msgid "``path``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:207
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:199
msgid "the object’s path. The argument is a string like ``/foo/bar``. To get the path of an object (e.g. a parent folder), do ``'/'.join(folder.getPhysicalPath())``. Searching for an object’s path will return the object and any children. To depth-limit the search, e.g. to get only those 1 level deep, use a compound query, e.g. ``path={'query': '/'.join(folder.getPhysicalPath()), 'depth': 1}``. If a depth is specified, the object at the given path is not returned (but any children within the depth limit are)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:222
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:214
msgid "``object_provides``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:218
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:210
msgid "used to match interfaces provided by the object. The argument is an interface name or list of interface names (of which any one may match). To get the name of a given interface, you can call ``ISomeInterface.__identifier__``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:232
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:224
msgid "``portal_type``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:225
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:217
msgid "used to match the portal type. Note that users can rename portal types, so it is often better not to hardcode these. Often, using an ``object_provides`` search for a type-specific interface will be better. Conversely, if you are asking the user to select a particular type to search for, then they should be choosing from the currently installed ``portal_types``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:236
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:228
msgid "``SearchableText``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:235
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:227
msgid "used for full-text searches. This supports operands like ``AND`` and ``OR`` in the search string."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:239
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:231
msgid "``Creator``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:239
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:231
msgid "the username of the creator of a content item."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:242
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:234
msgid "``Subject``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:242
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:234
msgid "a ``KeywordIndex`` of object keywords."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:245
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:237
msgid "``review_state``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:245
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:237
msgid "an object’s workflow state."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:247
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:239
msgid "In addition, the search results can be sorted based on any ``FieldIndex``, ``KeywordIndex`` or ``DateIndex`` using the following keyword arguments:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:250
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:242
msgid "Use ``sort_on='<index name>'`` to sort on a particular index. For example, ``sort_on='sortable_title'`` will produce a sensible title-based sort. ``sort_on='Date'`` will sort on the publication date, or the creation date if this is not set."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:253
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:245
msgid "Add ``sort_order='reverse'`` to sort in reverse. The default is ``sort_order='ascending'``. ``'descending'`` can be used as an alias for ``'reverse'``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:256
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:248
msgid "Add ``sort_limit=10`` to limit to approximately 10 search results. Note that it is possible to get more results due to index optimisations. Use a list slice on the catalog search results to be absolutely sure that you have got the maximum number of results, e.g. ``results = catalog(…, sort_limit=10)[:10]``. Also note that the use of ``sort_limit`` requires a ``sort_on`` as well."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:262
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:254
msgid "Some of the more commonly used metadata columns are:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:265
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:257
msgid "*Creator*"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:265
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:257
msgid "the user who created the content object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:268
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:260
msgid "*Date*"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:268
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:260
msgid "the publication date or creation date, whichever is later."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:271
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:263
msgid "*Title*"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:274
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:266
msgid "*Description*"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:277
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:269
msgid "*getId*"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:277
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:269
msgid "the object’s id (note that this is an attribute, not a function)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:280
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:272
msgid "*review_state*"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:280
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:272
msgid "the object’s workflow state."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:283
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:275
msgid "*portal_type*"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:283
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:275
msgid "the object’s portal type."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:285
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:277
msgid "For more information about catalog indexes and searching, see the `ZCatalog chapter in the Zope 2 book`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:294
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:286
msgid "How to setup the index TTW:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:296
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:288
msgid "Now that the fields are index-able, we need to create the index itself."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:298
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:290
msgid "Go to the Zope Management Interface"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:299
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:291
msgid "Go on 'portal_catalog'"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:300
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:292
msgid "Click 'Indexes' tab"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:301
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:293
msgid "There's a drop down menu to the top right to let you choose what type of index to add - if you are using a plain text string field you would select 'FieldIndex'"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:302
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:294
msgid "As the 'id' put in the programmatical name of your Dexterity type field that you want to index"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:303
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:295
msgid "Hit OK, tick your new index and click 'Reindex'"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:305
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:297
msgid "You should now see content being indexed."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/catalog-indexing-strategies.rst:307
#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:299
msgid "See the :doc:`documentation </develop/plone/searching_and_indexing/indexing>` for further information"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:2
msgid "Custom add and edit forms"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:4
msgid "**Using `z3c.form`_ to build custom forms**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:6
msgid "Until now, we have used Dexterity’s default content add and edit forms, supplying form hints in our schemata to influence how the forms are built. For most types, that is all that’s ever needed. In some cases, however, we want to build custom forms, or supply additional forms."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:13
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:13
msgid "Dexterity uses the `z3c.form`_ library to build its forms, via the `plone.z3cform`_ integration package."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:16
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:22
msgid "Dexterity also relies on `plone.autoform`_, in particular its ``AutoExtensibleForm`` base class, which is responsible for processing form hints and setting up `z3c.form`_ widgets and groups (fieldsets). A custom form, therefore, is simply a view that uses these libraries, although Dexterity provides some helpful base classes that make it easier to construct forms based on the schema and behaviors of a Dexterity type."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:25
msgid "If you want to build standalone forms not related to content objects, see the `z3c.form`_ documentation."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:29
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:37
msgid "Edit forms"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:31
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:39
msgid "An edit form is just a form that is registered for a particular type of content and knows how to register its fields. If the form is named ``edit``, it will replace the default edit form, which is registered with that name for the more general ``IDexterityContent`` interface."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:37
msgid "Dexterity provides a standard edit form base class that provides sensible defaults for buttons, labels and so on. This should be registered for a type schema (not a class). To create an edit form that is identical to the default, we could do:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:49
msgid "and register it in configure.zcml:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:60
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:63
msgid "This form is of course not terribly interesting, since it is identical to the default. However, we can now start changing fields and values. For example, we could:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:64
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:67
msgid "Override the ``schema`` property to tell `plone.autoform`_ to use a different schema interface (with different form hints) than the content type schema."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:67
msgid "Override the ``additionalSchemata`` property to tell `plone.autoform`_ to use different supplemental schema interfaces. The default is to use all behavior interfaces that provide the ``IFormFieldProvider`` marker from `plone.autoform`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:71
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:74
msgid "Override the ``label`` and ``description`` properties to provide different a different title and description for the form."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:73
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:76
msgid "Set the `z3c.form`_ ``fields`` and ``groups`` attributes directly."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:74
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:77
msgid "Override the ``updateWidgets()`` method to modify widget properties, or one of the other ``update``()`` methods, to perform additional processing on the fields. In most cases, these require us to call the ``super`` version at the beginning. See the `plone.autoform`_ and `z3c.form`_ documentation to learn more about the sequence of calls that emanate from the form ``update()`` method in the ``z3c.form.form.BaseForm`` class."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:82
msgid "Override the ``template`` attribute to specify a custom template."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:85
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:87
msgid "Content add sequence"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:87
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:89
msgid "Add forms are similar to edit forms in that they are built from a type’s schema and the schemata of its behaviors. However, for an add form to be able to construct a content object, it needs to know which ``portal_type`` to use."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:92
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:94
msgid "You should realise that the FTIs in the ``portal_types`` tool can be modified through the web. It is even possible to create new types through the web that re-use existing classes and factories."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:97
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:99
msgid "For this reason, add forms are looked up via a namespace traversal adapter alled ``++add++``. You may have noticed this in the URLs to add forms already. What actually happens is this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:102
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:104
msgid "Plone renders the :guilabel:`add` menu. - To do so, it looks, among other places, for actions in the *folder/add* category. This category is provided by the ``portal_types`` tool. - The *folder/add* action category is constructed by looking up the ``add\\_view\\_expr`` property on the FTIs of all addable types. This is a TALES expression telling the add menu which URL to use. - The default ``add\\_view\\_expr`` in Dexterity (and CMF 2.2) is ``string:${folder\\_url}/++add++${fti/getId}``. That is, it uses the ``++add++`` traversal namespace with an argument containing the FTI name."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:122
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:124
msgid "A user clicks on an entry in the menu and is taken to a URL like ``/path/to/folder/++add++my.type``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:107
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:109
msgid "The ``++add++`` namespace adapter looks up the FTI with the given name, and gets its ``factory`` property."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:108
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:110
msgid "The ``factory`` property of an FTI gives the name of a particular ``zope.component.interfaces.IFactory`` utility, which is used later to construct an instance of the content object.  Dexterity automatically registers a factory instance for each type, with a name that matches the type name, although it is possible to use an existing factory name in a new type. This allows administrators to create new “logical” types that are functionally identical to an existing type."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:111
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:113
msgid "The ``++add++`` namespace adapter looks up the actual form to render as a multi-adapter from ``(context, request, fti``) to ``Interface`` with a name matching the ``factory`` property. Recall that a standard view is a multi-adapter from ``(context, request)`` to ``Interface`` with a name matching the URL segment for which the view is looked up. As such, add forms are not standard views, because they get the additional ``fti`` parameter when constructed."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:119
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:121
msgid "If this fails, there is no custom add form for this factory (as is normally the case). The fallback is an unnamed adapter from ``(context, request, fti)``. The default Dexterity add form is registered as such an adapter, specific to the ``IDexterityFTI`` interface."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:124
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:126
msgid "The form is rendered like any other ``z3c.form`` form instance, and is subject to validation, which may cause it to be loaded several times."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:139
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:141
msgid "Eventually, the form is successfully submitted. At this point:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:128
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:130
msgid "The standard ``AddForm`` base class will look up the factory from the FTI reference it holds and call it to create an instance."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:129
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:131
msgid "The default Dexterity factory looks at the ``klass`` [*]_ attribute of the FTI to determine the actual content class to use, creates an object and initialises it."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:130
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:132
msgid "The ``portal_type`` attribute of the newly created instance is set to the name of the FTI. Thus, if the FTI is a “logical type” created through the web, but using an existing factory, the new instance’s ``portal_type`` will be set to the “logical type”."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:135
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:137
msgid "The object is initialised with the values submitted in the form."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:136
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:138
msgid "An ``IObjectCreatedEvent`` is fired."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:137
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:139
msgid "The object is added to its container."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:138
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:140
msgid "The user is redirected to the view specified in the ``immediate_view`` property of the FTI."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:141
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:143
msgid "``class`` is a reserved word in Python, so we use ``klass``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:143
msgid "This sequence is pretty long, but thankfully we rarely have to worry about it. In most cases, we can use the default add form, and when we can’t, creating a custom add form is only a bit more difficult than creating a custom edit form."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:149
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:152
msgid "Custom add forms"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:151
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:154
msgid "As with edit forms, Dexterity provides a sensible base class for add forms that knows how to deal with the Dexterity FTI and factory."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:154
msgid "A custom form replicating the default would look like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:163
msgid "and be registered in ZCML like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:182
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:162
msgid "The name here should match the *factory* name. By default, Dexterity types have a factory called the same as the FTI name. If no such factory exists (i.e. you have not registered a custom ``IFactory`` utility), a local factory utility will be created and managed by Dexterity when the FTI is installed."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:189
msgid "Also note that we do not specify a context here. Add forms are always registered for any ``IFolderish`` context."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:193
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:175
msgid "If the permission used for the add form is different to the ``add_permission`` set in the FTI, the user needs to have *both* permissions to be able to see the form and add content. For this reason, most add forms will use the generic ``cmf.AddPortalContent`` permission. The :guilabel:`add` menu will not render links to types where the user does not have the add permission stated in the FTI, even if this is different to ``cmf.AddPortalContent``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-add-and-edit-forms.rst:202
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:184
msgid "As with edit forms, we can customise this form by overriding `z3c.form`_ and `plone.autoform`_ properties and methods. See the `z3c.form`_ documentation on add forms for more details."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:2
msgid "Custom content classes"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:4
msgid "**Adding a custom implementation**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:6
msgid "When we learned about configuring the Dexterity FTI, we saw the ``klass`` attribute and how it could be used to refer to either the ``Container`` or ``Item`` content classes. These classes are defined in the `plone.dexterity.content`_ module, and represent container (folder) and item (non-folder) types, respectively."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:12
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:12
msgid "For most applications, these two classes will suffice. We will normally use behaviors, adapters, event handlers and schema interfaces to build additional functionality for our types. In some cases, however, it is useful or necessary to override the class, typically to override some method or property provided by the base class that cannot be implemented with an adapter override. A custom class may also be able to provide marginally better performance by side-stepping some of the schema-dependent dynamic behavior found in the base classes. In real life, you are very unlikely to notice, though."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:23
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:23
msgid "Creating a custom class is simple: simply derive from one of the standard ones, e.g.::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:32
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:32
msgid "For a container type, we’d do::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:40
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:40
msgid "You can now add any required attributes or methods to this class."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:42
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:42
msgid "To make use of this class, set the ``klass`` attribute in the FTI to its dotted name, e.g."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:49
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:49
msgid "This will cause the standard Dexterity factory to instantiate this class when the user submits the add form."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:54
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:54
msgid "As an alternative to setting ``klass`` in the FTI, you may provide your own ``IFactory`` utility for this type in lieu of Dexterity’s default factory (see `plone.dexterity.factory`_). However, you need to be careful that this factory performs all necessary initialisation, so it is normally better to use the standard factory."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:61
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:61
msgid "Custom class caveats"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:63
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:63
msgid "There are a few important caveats when working with custom content classes:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:65
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:65
msgid "Make sure you use the correct base class: either ``plone.dexterity.content.Item`` or ``plone.dexterity.content.Container``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:68
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:68
msgid "If you mix in other base classes, it is safer to put the ``Item`` or ``Container`` class first. If another class comes first, it may override the ``__name__``, ``__providedBy__``, ``__allow_access_to_unprotected_subobjects__`` and/or ``isPrincipiaFolderish`` properties, and possibly the ``__getattr__()`` and ``__getitem__()`` methods, causing problems with the dynamic schemata and/or folder item security. In all cases, you may need to explicitly set these attributes to the ones from the correct base class."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/custom-content-classes.rst:77
#: ../external/plone.app.dexterity/docs/grok/advanced/custom-content-classes.rst:77
msgid "If you define a custom constructor, make sure it can be called with no arguments, and with an optional ``id`` argument giving the name."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/defaults.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:2
#: ../external/plone.app.dexterity/docs/grok/reference/value-and-validator-adaptors.rst:11
msgid "Defaults"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/defaults.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:4
msgid "**Default values for fields on add forms**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/defaults.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:6
msgid "It is often useful to calculate a default value for a field. This value will be used on the add form, before the field is set."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/defaults.rst:9
#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:9
msgid "To continue with our conference example, let’s set the default values for the ``start`` and ``end`` dates to one week in the future and ten days in the future, respectively. We can do this by adding the following to ``program.py``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/defaults.rst:24
msgid "We also need to modify IProgram so the ``start`` and ``end`` fields use these functions as their ``defaultFactory``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/defaults.rst:43
msgid "The ``defaultFactory`` is a function that will be called when the add form is loaded to determine the default value."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/defaults.rst:46
#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:49
msgid "The value returned by the method should be a value that’s allowable for the field. In the case of ``Datetime`` fields, that’s a Python ``datetime`` object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/defaults.rst:50
msgid "It is also possible to write a context-aware default factory that will be passed the container for which the add form is being displayed:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/defaults.rst:62
msgid "It is possible to provide different default values depending on the type of context, a request layer, the type of form, or the type of widget used. See the `z3c.form`_ documentation for more details."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/defaults.rst:66
#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:64
msgid "We’ll cover creating custom forms later in this manual."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:2
msgid "Event handlers"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:4
msgid "**Adding custom event handlers for your type**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:6
msgid "So far, we have mainly been concerned with content types’ schemata and forms created from these. However, we often want to add more dynamic functionality, reacting when something happens to objects of our type. In Zope, that usually means writing event subscribers."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:11
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:11
msgid "Zope’s event model is *synchronous*. When an event is broadcast (via the ``notify()`` function from the `zope.event`_ package), for example from the ``save`` action of an add form, all registered event handlers will be called. There is no guarantee of which order the event handlers will be called in, however."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:17
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:17
msgid "Each event is described by an interface, and will typically carry some information about the event. Some events are known as *object events*, and provide ``zope.component.interfaces.IObjectEvent``. These have an ``object`` attribute giving access to the (content) object that the event relates to. Object events allow event handlers to be registered for a specific type of object as well as a specific type of event."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:24
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:24
msgid "Some of the most commonly used event types in Plone are shown below. They are all object events."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:31
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:31
msgid "``zope.lifecycleevent.interfaces.IObjectCreatedEvent``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:28
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:28
msgid "fired by the standard add form just after an object has been created, but before it has been added on the container. Note that it is often easier to write a handler for ``IObjectAddedEvent`` (see below), because at this point the object has a proper acquisition context."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:34
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:34
msgid "``zope.lifecycleevent.interfaces.IObjectModifiedEvent``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:34
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:34
msgid "fired by the standard edit form when an object has been modified."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:39
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:39
msgid "``zope.lifecycleevent.interfaces.IObjectAddedEvent``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:37
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:37
msgid "fired when an object has been added to its container. The container is available as the ``newParent`` attribute, and the name the new item holds in the container is available as ``newName``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:44
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:44
msgid "``zope.lifecycleevent.interfaces.IObjectRemovedEvent``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:42
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:42
msgid "fired when an object has been removed from its container. The container is available as the ``oldParent`` attribute, and the name the item held in the container is available as ``oldName``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:52
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:52
msgid "``zope.lifecycleevent.interfaces.IObjectMovedEvent``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:47
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:47
msgid "fired when an object is added to, removed from, renamed in, or moved between containers. This event is a super-type of ``IObjectAddedEvent`` and ``IObjectRemovedEvent``, shown above, so an event handler registered for this interface will be invoked for the ‘added’ and ‘removed’ cases as well. When an object is moved or renamed, all of ``oldParent``, ``newParent``, ``oldName`` and ``newName`` will be set."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:57
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:57
msgid "``Products.CMFCore.interfaces.IActionSucceededEvent``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:55
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:55
msgid "fired when a workflow event has completed. The ``workflow`` attribute holds the workflow instance involved, and the ``action`` attribute holds the action (transition) invoked."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:59
msgid "Event handlers can be registered using ZCML with the ``<subscriber />`` directive."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:62
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:63
msgid "As an example, let’s add an event handler to the ``Presenter`` type that tries to find users with matching names matching the presenter id, and send these users an email."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:66
msgid "First, we require an additional import at the top of ``presenter.py``::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:70
#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:72
msgid "Then, we’ll add the following event subscriber after the schema definition::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:93
msgid "And register it in ZCML::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/event-handlers.rst:100
msgid "There are many ways to improve this rather simplistic event handler, but it illustrates how events can be used. The first argument to ``for`` is an interface describing the object type. The second argument is the event type. The arguments to the function reflects these two, so the first argument is the ``IPresenter`` instance and the second is an ``IObjectAddedEvent`` instance."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:2
msgid "Files and images"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:4
msgid "**Working with file and image fields, including BLOBs**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:6
msgid "Plone has dedicated ``File`` and ``Image`` types, and it is often preferable to use these for managing files and images. However, it is sometimes useful to treat fields on an object as binary data. When working with Dexterity, you can accomplish this by using `plone.namedfile`_ and `plone.formwidget.namedfile`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:12
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:12
msgid "The `plone.namedfile`_ package includes four field types, all found in the ``plone.namedfile.field`` module:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:15
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:15
msgid "``NamedFile`` stores non-BLOB files. This is useful for small files when you don’t want to configure BLOB storage."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:17
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:17
msgid "``NamedImage`` stores non-BLOB images."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:18
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:18
msgid "``NamedBlobFile`` stores BLOB files (see note below). It is otherwise identical to ``NamedFile``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:20
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:20
msgid "``NamedBlobImage`` stores BLOB images (see note below). It is otherwise identical to ``NamedImage``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:23
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:23
msgid "In use, the four field types are all pretty similar. They actually store persistent objects of type ``plone.namedfile.NamedFile``, ``plone.namedfile.NamedImage``, ``plone.namedfile.NamedBlobFile`` and ``plone.namedfile.NamedBlobImage``, respectively. Note the different module! These objects have attributes like ``data``, to access the raw binary data, ``contentType``, to get a MIME type, and ``filename``, to get the original filename. The image values also support ``_height`` and ``_width`` to get image dimensions."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:31
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:31
msgid "To use the non-BLOB image and file fields, it is sufficient to depend on ``plone.formwidget.namedfile``, since this includes ``plone.namefile`` as a dependency. We prefer to be explicit in ``setup.py``, however, since we will actually import directly from ``plone.namedfile``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:46
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:46
msgid "Again, we do not need separate ``<include />`` lines in ``configure.zcml`` for these new dependencies, because we use ``<includeDependencies />``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:50
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:50
msgid "For the sake of illustration, we will add an image of the speaker to the ``Presenter`` type. In ``presenter.py``, we add::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:63
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:63
msgid "To use this in a view, we can either use a display widget via a ``DisplayForm``, or construct a download URL manually. Since we don’t have a ``DisplayForm`` for the ``Presenter`` type, we’ll do the latter (of course, we could easily turn the view into a display form as well)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:68
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:68
msgid "In ``presenter_templates/view.pt``, we add this block of TAL::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:78
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:78
msgid "This constructs an image URL using the ``@@download`` view from ``plone.namedfile``. This view takes the name of the field containing the file or image on the traversal subpath (``/picture``), and optionally a filename on a further sub-path. The filename is used mainly so that the URL ends in the correct extension, which can help ensure web browsers display the picture correctly. We also define the ``height`` and ``width`` of the image based on the values set on the object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:86
msgid "Access to image scales is similar::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:93
msgid "where ``scales`` is large, preview, mini, thumb, tile, icon, or a custom scale. This code generates a full tag, including height and width attributes and alt and title based on the context title. To generate just a URL, use code like::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/files-and-images.rst:99
#: ../external/plone.app.dexterity/docs/grok/advanced/files-and-images.rst:86
msgid "For file fields, you can construct a download URL in a similar way, using an ``<a />`` tag, e.g.::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/index.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/index.rst:2
msgid "Advanced configuration"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/index.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/index.rst:4
msgid "**Further configuration and tips**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:2
msgid "Permissions"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:4
msgid "**Setting up add permissions, view permissions and field view/edit permissions**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:6
msgid "Plone’s security system is based on the concept of *permissions* protecting *operations* (like accessing a view, viewing a field, modifying a field, or adding a type of content) that are granted to *roles*, which in turn are granted to *users* and/or *groups*. In the context of developing content types, permissions are typically used in three different ways:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:17
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:17
msgid "A content type or group of related content types often has a custom *add permission* which controls who can add this type of content."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:19
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:19
msgid "Views (including forms) are sometimes protected by custom permissions."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:21
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:21
msgid "Individual fields are sometimes protected by permissions, so that some users can view and edit fields that others can’t see."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:24
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:24
msgid "It is easy to create new permissions. However, be aware that it is considered good practice to use the standard permissions wherever possible and use *workflow* to control which roles are granted these permissions on a per-instance basis."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:27
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:27
msgid "For more basic information on permissions and how to create custom permissions read the `Security Section`_ in the Plone documentation."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:32
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:32
msgid "Performing permission checks in code"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:34
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:34
msgid "It is sometimes necessary to check permissions explicitly in code, for example in a view. A permission check always checks a permission on a context object, since permissions can change with workflow."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:39
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:39
msgid "Never make security dependent on users’ roles directly. Always check for a permission, and assign the permission to the appropriate role or roles."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:42
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:42
msgid "As an example, let’s display a message on the view of a ``Session`` type if the user has the ``cmf.RequestReview`` permission. In ``session.py``, we update the ``View`` class with the following::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:54
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:54
msgid "And in the ``session_templates/view.pt`` template, we add:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:66
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:66
msgid "Content type add permissions"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:68
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:68
msgid "Dexterity content types’ add permissions are set in the FTI, using the ``add_permission`` property. This can be changed through the web or in the GenericSetup import step for the content type."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:73
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:73
msgid "To make the ``Session`` type use our new permission, we modify the ``add_permission`` line in ``profiles/default/example.conference.session.xml``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:82
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:82
msgid "Protecting views and forms"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:84
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:84
msgid "Access to views and other browser resources (like viewlets or portlets) can be protected by permissions, either using the ``permission`` attribute on ZCML statements like::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:94
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:94
msgid "We could also use the special ``zope.Public`` permission name to make the view accessible to anyone."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:97
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:97
msgid "Protecting form fields"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:99
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:99
msgid "Individual fields in a schema may be associated with a *read* permission and a *write* permission. The read permission is used to control access to the field’s value via protected code (e.g. scripts or templates created through the web) and URL traversal, and can be used to control the appearance of fields when using display forms (if you use custom views that access the attribute directly, you’ll need to perform your own checks). Write permissions can be used to control whether or not a given field appears on a type’s add and edit forms."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:108
msgid "In both cases, read and write permissions are annotated onto the schema using directives similar to those we’ve already seen for form widget hints. The ``read_permission()`` and ``write_permission()`` directives are found in the `plone.autoform`_ package."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:112
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:112
msgid "If XML-schemas are used for defintion see :ref:`Dexterity XML: security attributes <dexterity-xml-security>`."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:114
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:114
msgid "Simple example protecting a field to be readable for Site Administrators only::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:128
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:128
msgid "As a complex example, let’s add a field for *Session* reviewers to record the track for a session. We’ll store the vocabulary of available tracks on the parent ``Program`` object in a text field, so that the creator of the ``Program`` can choose the available tracks."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:132
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:132
msgid "First, we add this to the ``IProgram`` schema in ``program.py``::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:142
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:142
msgid "The ``TextLinesFieldWidget`` is used to edit a list of text lines in a text area. It is imported as::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:147
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:147
msgid "Next, we’ll add a vocabulary for this to ``session.py``::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:169
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:169
msgid "This vocabulary finds the closest ``IProgram`` (in the add form, the ``context`` will be the ``Program``, but on the edit form, it will be the ``Session``, so we need to check the parent) and uses its ``tracks`` variable as the vocabulary."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:175
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:175
msgid "Next, we add a field to the ``ISession`` interface in the same file and protect it with the relevant write permission::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/permissions.rst:185
#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:185
msgid "With this in place, users with the ``example.conference: Modify track`` permission should be able to edit tracks for a session. For everyone else, the field will be hidden in the edit form."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:3
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:3
msgid "References"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:5
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:5
msgid "**How to work with references between content objects**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:7
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:7
msgid "References are a way to maintain links between content that remain valid even if one or both of the linked items are moved or renamed."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:10
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:10
msgid "Under the hood, Dexterity’s reference system uses `five.intid`_, a Zope 2 integration layer for `zope.intid`_, to give each content item a unique integer id. These are the basis for relationships maintained with the `zc.relationship`_ package, which in turn is accessed via an API provided by `z3c.relationfield`_, integrated into Zope 2 with `plone.app.relationfield`_. For most purposes, you need only to worry about the ``z3c.relationfield`` API, which provides methods for finding source and target objects for references and searching the relationship catalog."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:20
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:20
msgid "References are most commonly used in form fields with a selection or content browser widget. Dexterity comes with a standard widget in `plone.formwidget.contenttree`_ configured for the ``RelationList`` and ``RelationChoice`` fields from ``z3c.relationfield``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:25
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:25
msgid "To illustrate the use of references, we will allow the user to create a link between a ``Session`` and its ``Presenter``. Since Dexterity already ships with and installs ``plone.formwidget.contenttree`` and ``z3c.relationfield``, we do not need to add any further setup code, and we can use the field directly in ``session.py``::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:52
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:52
msgid "Remeber that `plone.app.relationfield`_ needs to be installed to use any RelationChoice or RelationList field."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:55
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:55
msgid "To allow multiple items to be selected, we could have used a ``RelationList`` like::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:66
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:66
msgid "The ``ObjPathSourceBinder`` class is an ``IContextSourceBinder`` that returns a vocabulary with content objects as values, object titles as term titles and object paths as tokens."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:70
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:70
msgid "You can pass keyword arguments to the constructor for ``ObjPathSourceBinder()`` to restrict the selectable objects. Here, we demand that the object must provide the ``IPresenter`` interface. The syntax is the same as that used in a catalog search, except that only simple values and lists are allowed (e.g. you can’t use a dict to specify a range or values for a field index)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:77
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:77
msgid "If you want to restrict the folders and other content shown in the content browser, you can pass a dictionary with catalog search parameters (and here, any valid catalog query will do) as the first non-keyword argument (``navigation_tree_query``) to the ``ObjPathSourceBinder()`` constructor."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:83
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:83
msgid "You can also create the fields in an XML schema, however you have to provide a pre-baked source instance. If you are happy with not restricting folders shown, you can use some that ``plone.formwidget.contenttree`` makes for you. For example::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:97
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:97
msgid "The pre-baked source binders were added in plone.formwidget.contenttree 1.0.7, which ships with Plone 4.3.2+."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:100
msgid "If you want to use a different widget, you can use the same source (or a custom source that has content objects as values) with something like the autocomplete widget. The following line added to the interface will make the presenter selection similar to the ``organizer`` selection widget we showed in the previous section:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:111
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:108
msgid "Once the user has created some relationships, the value stored in the relation field is a ``RelationValue`` object. This provides various attributes, including:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:115
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:112
msgid "``from_object``, the object from which the relationship is made;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:116
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:113
msgid "``to_object``, the object to which the relationship is made;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:117
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:114
msgid "``from_id`` and ``to_id``, the integer ids of the source and target;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:118
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:115
msgid "``from_path`` and ``to_path``, the path of the source and target."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:120
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:117
msgid "The ``isBroken()`` method can be used to determine if the relationship is broken. This normally happens if the target object is deleted."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:123
msgid "To display the relationship on our form, we can either use a display widget on a *display view*, or use this API to find the object and display it. We’ll do the latter in ``templates/sessionview.pt``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:136
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:133
msgid "Back references"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:138
msgid "To retrieve back-reference (all objects pointing to particular object using specified attribute) you can't simply use ``from_object`` or ``from_path``, because source object is stored in the relation without acquisition wrappers. You should use ``from_id`` and ``helper`` method, which search the object in the ``IntId`` catalog:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:165
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:158
msgid "Please note, this method does not check effective and expiration date or content language."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/references.rst:167
#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:160
msgid "Original issue: `<http://code.google.com/p/dexterity/issues/detail?id=234>`_"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:2
msgid "Rich text, markup and transformations"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:4
msgid "**How to store markup (such as HTML or reStructuredText) and render it with a transformation**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:6
msgid "Many content items need to allow users to provide rich text in some kind of markup, be that HTML (perhaps entered using a WYSIWYG editor), reStructuredText, Markdown or some other format. This markup typically needs to be transformed into HTML for the view template, but we also want to keep track of the original “raw” markup so that it can be edited again. Even when the input format is HTML, there is often a need for a transformation to tidy up the HTML and strip out tags that are not permitted."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:15
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:15
msgid "It is possible to store HTML in a standard ``Text`` field. You can even get a WYSIWYG widget, by using a schema such as this::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:30
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:30
msgid "However, this approach does not allow for alternative markups or any form of content filtering. For that, we need to use a more powerful field: ``RichText`` from the `plone.app.textfield`_ package::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:41
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:41
msgid "The ``RichText`` field constructor can take the following arguments in addition to the usual arguments for a ``Text`` field:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:44
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:44
msgid "``default_mime_type``, a string representing the default MIME type of the input markup. This defaults to ``text/html``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:46
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:46
msgid "``output_mime_type``, a string representing the default output MIME type. This defaults to ``text/x-html-safe``, which is a Plone-specific MIME type that disallows certain tags. Use the :guilabel:`HTML Filtering` control panel in Plone to control the tags."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:50
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:50
msgid "``allowed_mime_types``, a tuple of strings giving a vocabulary of allowed input MIME types. If this is ``None`` (the default), the allowable types will be restricted to those set in Plone’s :guilabel:`Markup` control panel."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:55
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:55
msgid "Also note: The *default* field can be set to either a unicode object (in which case it will be assumed to be a string of the default MIME type) or a ``RichTextValue`` object (see below)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:59
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:59
msgid "Below is an example of a field allow StructuredText and reStructuredText, transformed to HTML by default::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:88
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:88
msgid "The RichTextValue"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:90
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:90
msgid "The ``RichText`` field does not store a string. Instead, it stores a ``RichTextValue`` object. This is an immutable object that has the following properties:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:95
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:95
msgid "``raw``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:95
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:95
msgid "a unicode string with the original input markup;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:99
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:99
msgid "``mimeType``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:98
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:98
msgid "the MIME type of the original markup, e.g. ``text/html`` or ``text/structured``;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:103
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:103
msgid "``encoding``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:102
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:102
msgid "the default character encoding used when transforming the input markup. Most likely, this will be UTF-8;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:106
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:106
msgid "``raw_encoded``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:106
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:106
msgid "the raw input encoded in the given encoding;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:110
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:110
msgid "``outputMimeType``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:109
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:109
msgid "the MIME type of the default output, taken from the field at the time of instantiation;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:115
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:115
msgid "``output``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:113
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:113
msgid "a unicode object representing the transformed output. If possible, this is cached persistently until the ``RichTextValue`` is replaced with a new one (as happens when an edit form is saved, for example)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:117
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:117
msgid "The storage of the ``RichTextValue`` object is optimised for the case where the transformed output will be read frequently (i.e. on the view screen of the content object) and the raw value will be read infrequently (i.e. on the edit screen). Because the output value is cached indefinitely, you will need to replace the ``RichTextValue`` object with a new one if any of the transformation parameters change. However, as we will see below, it is possible to apply a different transformation on demand should you need to."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:126
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:126
msgid "The code snippet belows shows how a ``RichTextValue`` object can be constructed in code. In this case, we have a raw input string of type ``text/plain`` that will be transformed to a default output of ``text/html``. (Note that we would normally look up the default output type from the field instance.)::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:137
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:137
msgid "Of course, the standard widget used for a ``RichText`` field will correctly store this type of object for you, so it is rarely necessary to create one yourself."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:142
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:142
msgid "Using rich text fields in templates"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:144
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:144
msgid "What about using the text field in a template? If you are using a ``DisplayForm``, the display widget for the ``RichText`` field will render the transformed output markup automatically. If you are writing TAL manually, you may try something like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:153
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:153
msgid "This, however, will render a string like::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:157
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:157
msgid "The correct syntax is:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:163
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:163
msgid "This will render the cached, transformed output. This operation is approximately as efficient as rendering a simple ``Text`` field, since the transformation is only applied once, when the value is first saved."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:168
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:168
msgid "Alternative transformations"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:170
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:170
msgid "Sometimes, you may want to invoke alternative transformations. Under the hood, the default implementation uses the ``portal_transforms`` tool to calculate a transform chain from the raw value’s input MIME type to the desired output MIME type. (Should you need to write your own transforms, take a look at `this tutorial`_.) This is abstracted behind an ``ITransformer`` adapter to allow alternative implementations."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:177
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:177
msgid "To invoke a transformation in code, you can use the following syntax::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:184
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:184
msgid "The ``__call__()`` method of the ``ITransformer`` adapter takes a ``RichTextValue`` object and an output MIME type as parameters."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:187
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:187
msgid "If you are writing a page template, there is an even more convenient syntax:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:194
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:194
msgid "The first traversal name gives the name of the field on the context (``body`` in this case). The second and third give the output MIME type. If the MIME type is omitted, the default output MIME type will be used."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/rich-text-markup-transformations.rst:199
#: ../external/plone.app.dexterity/docs/grok/advanced/rich-text-markup-transformations.rst:199
msgid "Unlike the ``output`` property, the value is not cached, and so will be calculated each time the page is rendered."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:2
#: ../external/tutorial.todoapp/docs/chapter_3.rst:57
msgid "Static resources"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:4
msgid "**Adding images and stylesheets**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:6
msgid "Earlier in this manual, we have seen how to create views, and how to use file and image fields. These are all dynamic, however, and often we just want to ship with a static image/icon, CSS or JavaScript file. For this, we need to register static resources."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:12
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:12
msgid "Registering a static resource directory"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:14
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:14
msgid "The easiest way to manage static resources is to create a ``static`` resource directory in your Dexterity project using the ZCML resourceDirectory directive."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:17
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:17
msgid "Registration of the resource directory is done using the ``<browser:resourceDirectory />`` ZCML directive. This requires two attributes: ``name`` is the name that appears after the ``++resource++`` namespace; ``directory`` is a relative path to the directory containing resources."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:23
msgid "It's conventional to use \"static\" for the directory name and the dotted name of your package for the resource name. You would use this zcml to register it:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:33
msgid "Then, if a \"static\" resource directory in the ``example.conference`` package contains a file called ``conference.css``, it will be accessible on a URL like ``http://<server>/site/++resource++example.conference/conference.css.`` The resource name is the same as the package name wherein the ``resources`` directory appears."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:41
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:48
msgid "Importing CSS and JavaScript files in templates"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:43
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:50
msgid "One common use of static resources is to add a static CSS or JavaScript file to a specific template. We can do this by filling the ``style_slot`` or ``javascript_slot`` in Plone’s ``main_template`` in our own view template and using an appropriate resource link."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:48
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:55
msgid "For example, we could add the following near the top of ``presenter_templates/view.pt``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:63
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:70
msgid "Always create the resource URL relative to the navigation root as shown here, so that the URL is the same for all content objects using this view. This allows for efficient resource caching."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:68
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:75
msgid "Registering resources with Plone’s resource registries"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:70
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:77
msgid "Sometimes it is more appropriate to register a stylesheet with Plone’s ``portal_css`` registry (or a JavaScript file with ``portal_javascripts``), rather than add the registration on a per-template basis. This ensures that the resource is available site-wide."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:77
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:84
msgid "It may seem wasteful to include a resource that is not be used on all pages in the global registry. Remember, however, that ``portal_css`` and ``portal_javascripts`` will merge and compress resources, and set caching headers such that browsers and caching proxies can cache resources well. It is often more effective to have one slightly larger file that caches well, than to have a variable number of files that may need to be loaded at different times."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:85
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:92
msgid "To add a static resource file, you can use the GenericSetup ``cssregistry.xml`` or ``jsregistry.xml`` import steps in the ``profiles/default`` directory. For example, an import step to add the ``conference.css`` file site-wide may involve a ``cssregistry.xml`` file that looks like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:101
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:108
msgid "Similarly, a JavaScript resource could be imported with a ``jsregistry.xml`` like:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:114
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:121
msgid "Image resources"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:116
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:123
msgid "Images can be added to resource directories just like any other type of resource. To use the image in a view, you can construct an ``<img />`` tag like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:128
#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:135
msgid "Content type icons"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/static-resources.rst:130
msgid "Finally, to use an image resource as the icon for a content type, simply list it in the FTI under the ``content_icon`` property. For example, in ``profiles/default/types/example.conference.presenter.xml``, we can use the following line, presuming we have a ``presenter.gif`` in the ``example.conference`` resource directory:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:2
#: ../external/plone.app.dexterity/docs/grok/reference/value-and-validator-adaptors.rst:32
msgid "Validators"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:4
msgid "**Creating custom validators for your type**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:6
msgid "Many applications require some form of data entry validation. The simplest form of validation you get for free – the `z3c.form`_ library ensures that all data entered on Dexterity add and edit forms is valid for the field type."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:11
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:11
msgid "It is also possible to set certain properties on the fields to add further validation (or even create your own fields with custom validation logic, although that is a lot less common). These properties are set as parameters to the field constructor when the schema interface is created. You should see the `zope.schema`_ package for details, but the most common constraints are:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:19
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:19
msgid "``required=True/False``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:19
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:19
msgid "to make a field required or optional;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:24
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:24
msgid "``min`` and ``max``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:22
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:22
msgid "used for ``Int``, ``Float``, ``Datetime``, ``Date``, and ``Timedelta`` fields, specify the minimum and maximum (inclusive) allowed values of the given type;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:30
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:30
msgid "``min_length`` and ``max_length``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:27
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:27
msgid "used for collection fields (``Tuple``, ``List``, ``Set``, ``Frozenset``, ``Dict``) and text fields (``Bytes``, ``BytesLine``, ``ASCII``, ``ASCIILine``, ``Text``, ``TextLine``), set the minimum and maximum (inclusive) length of a field."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:36
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:36
msgid "Constraints"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:38
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:38
msgid "If this does not suffice, you can pass your own constraint function to a field. The constraint function should take a single argument: the value that is to be validated. This will be of the field’s type. The function should return a boolean ``True`` or ``False``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:50
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:50
msgid "Hint: The constraint function does not have access to the context, but if you need to acquire a tool, you can use the ``zope.app.component.hooks.getSite()`` method to obtain the site root."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:54
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:54
msgid "To use the constraint, pass the function as the ``constraint`` argument to the field constructor, e.g.::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:59
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:59
msgid "Constraints are easy to write, but do not necessarily produce very friendly error messages. It is however possible to customise these error messages using `z3c.form`_ error view snippets. See the `z3c.form documentation <z3c.form>`_ for more details."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:65
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:65
msgid "Invariants"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:67
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:67
msgid "You’ll also notice that constraints only check a single field value. If you need to write a validator that compares multiple values, you can use an invariant. Invariants use exceptions to signal errors, which are displayed at the top of the form rather than next to a particular field."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:72
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:72
msgid "To illustrate an invariant, let’s make sure that the start date of a `Program` is before the end date. In `program.py`, we add the following. Code not relevant to this example is snipped with an ellipsis (…)::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:108
#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:108
msgid "Form validators"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/validators.rst:110
msgid "Finally, you can write more powerful validators by using the `z3c.form <http://pypi.python.org/pypi/z3c.form>`_ widget validators. For details see the `z3c.form validators section <http://docs.plone.org/develop/plone/forms/z3c.form.html#validators>`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:2
#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:107
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:109
msgid "Vocabularies"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:4
msgid "**Creating your own static and dynamic vocabularies**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:6
msgid "Vocabularies are normally used in conjunction with selection fields, and are supported by the `zope.schema`_ package, with widgets provided by `z3c.form`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:10
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:10
msgid "Selection fields use the ``Choice`` field type. To allow the user to select a single value, use a ``Choice`` field directly::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:16
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:16
msgid "For a multi-select field, use a ``List``, ``Tuple``, ``Set`` or ``Frozenset`` with a ``Choice`` as the ``value_type``::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:22
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:22
msgid "The choice field must be passed one of the following arguments:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:24
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:24
msgid "``values`` can be used to give a list of static values;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:25
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:25
msgid "``source`` can be used to refer to an ``IContextSourceBinder`` or ``ISource`` instance;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:27
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:27
msgid "``vocabulary`` can be used to refer to an ``IVocabulary`` instance or (more commonly) a string giving the name of an ``IVocabularyFactory`` named utility."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:31
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:31
msgid "In the remainder of this section, we will show the various techniques for defining vocabularies through several iterations of a new field added to the Program type allowing the user to pick the organiser responsible for the program."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:37
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:37
msgid "Static vocabularies"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:39
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:39
msgid "Our first attempt uses a static list of organisers. We use the message factory to allow the labels (term titles) to be translated. The values stored in the ``organizer`` field will be a unicode object representing the chosen label, or ``None`` if no value is selected::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:58
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:58
msgid "Since ``required`` is ``False``, there will be a :guilabel:`no value` option in the drop-down list."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:62
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:62
msgid "Dynamic sources"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:64
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:64
msgid "The static vocabulary is obviously a bit limited. Not only is it hard-coded in Python, it also does not allow separation of the stored values and the labels shown in the selection widget."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:68
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:68
msgid "We can make a one-off dynamic vocabulary using a context source binder. This is simply a callable (usually a function or an object with a ``__call__`` method) that provides the ``IContextSourceBinder`` interface and takes a ``context`` parameter. The ``context`` argument is the context of the form (i.e. the folder on an add form, and the content object on an edit form). The callable should return a vocabulary, which is most easily achieved by using the ``SimpleVocabulary`` class from `zope.schema`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:77
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:77
msgid "Here is an example using a function to return all users in a particular group::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:101
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:99
msgid "We use the PAS API to get the group and its members, building a list, which we then turn into a vocabulary."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:104
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:102
msgid "When working with vocabularies, you’ll come across some terminology that is worth explaining:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:107
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:105
msgid "A *term* is an entry in the vocabulary. The term has a value. Most terms are *tokenised* terms which also have a token, and some terms are *titled*, meaning they have a title that is different to the token."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:111
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:109
msgid "The *token* must be an ASCII string. It is the value passed with the request when the form is submitted. A token must uniquely identify a term."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:114
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:112
msgid "The *value* is the actual value stored on the object. This is not passed to the browser or used in the form. The value is often a unicode object, but can be any type of object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:117
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:115
msgid "The *title* is a unicode object or translatable message. It is used in the form."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:120
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:118
msgid "The ``SimpleVocabulary`` class contains two class methods that can be used to create vocabularies from lists:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:125
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:123
msgid "``fromValues()``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:124
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:122
msgid "takes a simple list of values and returns a tokenised vocabulary where the values are the items in the list, and the tokens are created by calling ``str()`` on the values."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:129
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:127
msgid "``fromItems()``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:128
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:126
msgid "takes a list of ``(token, value)`` tuples and creates a tokenised vocabulary with the token and value specified."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:131
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:129
msgid "You can also instantiate a ``SimpleVocabulary`` yourself and pass a list of terms in the initialiser. The ``createTerm()`` class method can be used to create a term from a ``value``, ``token`` and ``title``. Only the value is required."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:136
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:134
msgid "In the example above, we have chosen to create a ``SimpleVocabulary`` from terms with the user id used as value and token, and the user’s full name as a title."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:140
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:138
msgid "To use this context source binder, we use the ``source`` argument to the ``Choice`` constructor::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:150
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:148
msgid "Parameterised sources"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:152
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:150
msgid "We can improve this example by moving the group name out of the function, allowing it to be set on a per-field basis. To do so, we turn our ``IContextSourceBinder`` into a class that is initialised with the group name::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:183
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:179
msgid "Again, the source is set using the ``source`` argument to the ``Choice`` constructor::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:192
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:188
msgid "When the schema is initialised on startup, a ``GroupMembers`` object is instantiated, storing the desired group name. Each time the vocabulary is needed, this object will be called (i.e. the ``__call__()`` method is invoked) with the context as an argument, expected to return an appropriate vocabulary."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:199
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:195
msgid "Named vocabularies"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:201
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:197
msgid "Context source binders are great for simple dynamic vocabularies. They are also re-usable, since you can import the source from a single location and use it in multiple instances."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:205
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:201
msgid "Sometimes, however, we want to provide an additional level of decoupling, by using *named* vocabularies. These are similar to context source binders, but are components registered as named utilities, referenced in the schema by name only. This allows local overrides of the vocabulary via the Component Architecture, and makes it easier to distribute vocabularies in third party packages."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:214
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:210
msgid "Named vocabularies cannot be parameterised in the way as we did with the ``GroupMembers`` context source binder, since they are looked up by name only."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:218
msgid "We can turn our first \"members in the *organizers* group\" vocabulary into a named vocabulary by creating a named utility providing ``IVocabularyFactory``. Add to your ``configure.zcml``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:235
msgid "Then create a vocabulary factory in ``vocabularies.py``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:257
msgid "We can make use of this vocabulary in any schema by passing its name to the ``vocabulary`` argument of the ``Choice`` field constructor:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:269
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:255
msgid "Some common vocabularies"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:271
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:257
msgid "As you might expect, there are a number of standard vocabularies that come with Plone. These are found in the `plone.app.vocabularies`_ package. Some of the more useful ones include:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:275
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:261
msgid "``plone.app.vocabularies.AvailableContentLanguages``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:276
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:262
msgid "a list of all available content languages;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:277
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:263
msgid "``plone.app.vocabularies.SupportedContentLanguages``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:278
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:264
msgid "a list of currently supported content languages;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:279
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:265
msgid "``plone.app.vocabularies.Roles``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:280
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:266
msgid "the user roles available in the site;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:281
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:267
msgid "``plone.app.vocabularies.PortalTypes``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:282
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:268
msgid "a list of types installed in ``portal_types``;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:283
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:269
msgid "``plone.app.vocabularies.ReallyUserFriendlyTypes``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:284
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:270
msgid "a list of those types that are likely to mean something to users;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:285
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:271
msgid "``plone.app.vocabularies.Workflows``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:286
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:272
msgid "a list of workflows;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:287
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:273
msgid "``plone.app.vocabularies.WorkflowStates``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:288
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:274
msgid "a list of all states from all workflows;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:290
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:276
msgid "``plone.app.vocabularies.WorkflowTransitions``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:290
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:276
msgid "a list of all transitions from all workflows."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:292
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:278
msgid "In addition, the package `plone.principalsource`_ provides several vocabularies that are useful for selecting users and groups in a Dexterity context:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:297
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:283
msgid "``plone.principalsource.Users``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:297
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:283
msgid "provides users"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:300
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:286
msgid "``plone.principalsource.Groups``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:300
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:286
msgid "provides groups"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:303
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:289
msgid "``plone.principalsource.Principals``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:303
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:289
msgid "provides security principals (users or groups)"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:305
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:291
msgid "Importantly, these sources are not iterable, which means that you cannot use them to provide a list of all users in the site. This is intentional: calculating this list can be extremely expensive if you have a large site with many users, especially if you are connecting to LDAP or Active Directory. Instead, you should use a search-based source such as one of these."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:312
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:298
msgid "We will use one of these together with an auto-complete widget to finalise our ``organizer`` field. To do so, we need to add ``plone.principalsource`` as a dependency of ``example.conference``. In ``setup.py``, we add::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:324
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:310
msgid "Since we use an ``<includeDependencies />`` line in ``configure.zcml``, we do not need a separate ``<include />`` line in ``configure.zcml`` for this new dependency."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:328
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:314
msgid "The ``organizer`` field now looks like::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:337
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:323
msgid "The autocomplete selection widget"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:339
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:325
msgid "The ``organizer`` field now has a query-based source. The standard selection widget (a drop-down list) is not capable of rendering such a source. Instead, we need to use a more powerful widget. For a basic widget, see `z3c.formwidget.query`_, but in a Plone context, you will more likely want to use `plone.formwidget.autocomplete`_, which extends ``z3c.formwidget.query`` to provide friendlier user interface."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:346
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:332
msgid "The widget is provided with `plone.app.dexterity`_, so we do not need to configure it ourselves. We only need to tell Dexterity to use this widget instead of the default, using a form widget hint as shown earlier. At the top of ``program.py``, we add the following import::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:355
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:341
msgid "If we were using a multi-valued field, such as a ``List`` with a ``Choice`` ``value_type``, we would use the ``AutocompleteMultiFieldWidget`` instead."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:359
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:345
msgid "In the ``IProgram`` schema (which, recall, derives from ``model.Schema`` and is therefore processed for form hints at startup), we then add the following::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:365
msgid "from plone.autoform import directives"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:367
msgid "directives.widget(organizer=AutocompleteFieldWidget) organizer = schema.Choice("
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:369
msgid "title=_(u\"Organiser\"), vocabulary=u\"plone.principalsource.Users\", required=False,"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:372
msgid ")"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/vocabularies.rst:374
#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:356
msgid "You should now see a dynamic auto-complete widget on the form, so long as you have JavaScript enabled. Start typing a user name and see what happens. The widget also has fall-back for non-JavaScript capable browsers."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:2
msgid "WebDAV and other file representations"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:4
msgid "**Adding support for WebDAV and accessing and modifying a content object using file-like operations**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:7
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:7
msgid "Zope supports WebDAV, a protocol that allows content objects to be viewed, modified, copied, renamed, moved and deleted as if they were files on the filesystem. WebDAV is also used to support saving to remote locations from various desktop programs. In addition, WebDAV powers the `External Editor`_ product, which allows users to launch a desktop program from within Plone to edit a content object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:14
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:14
msgid "To configure a WebDAV server, you can add the following option to the ``[instance]`` section of your ``buildout.cfg`` and re-run buildout."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:21
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:21
msgid "See the documentation for `plone.recipe.zope2instance`_ for details. When Zope is started, you should now be able to mount it as a WebDAV server on the given port."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:25
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:25
msgid "Most operating systems support mounting WebDAV servers as folders. Unfortunately, not all WebDAV implementations are very good. Dexterity content should work with Windows Web Folders [*]_ and well-behaved clients such as Novell NetDrive."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:30
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:30
msgid "open Internet Explorer, go to :guilabel:`File | Open`, type in a WebDAV address, e.g.  http://localhost:9800, and then select :guilabel:`Open as web folder` before hitting :guilabel:`OK`"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:36
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:36
msgid "On Mac OS X, the Finder claims to support WebDAV, but the implementation is so flakey that it is just as likely to crash Mac OS X as it is to let you browse files and folders. Use a dedicated WebDAV client instead, such as `Cyberduck`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:42
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:42
msgid "Default WebDAV behaviour"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:44
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:44
msgid "By default, Dexterity content can be downloaded and uploaded using a text format based on :RFC:`2822`, the same standard used to encode email messages. Most fields are encoded in headers, whilst the field marked as “primary” will be contained in the body of the message. If there is more than one primary field, a multi-part message is created."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:51
msgid "A field can be marked as “primary” using the ``primary()`` directive from `plone.supermodel`_. For example:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:92
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:87
msgid "This will actually apply the ``IPrimaryField`` marker interface from the `plone.rfc822`_ package to the given field(s)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:95
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:90
msgid "A WebDAV download of this content item will by default look like this::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:107
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:102
msgid "Notice how most fields are encoded as header strings. The ``presenter`` relation field stores a number, which is the integer id of the target object. Note that this id is generated when the content object is created, and so is unlikely to be valid on a different site. The ``details`` field, which we marked as primary, is encoded in the body of the message."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:115
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:110
msgid "It is also possible to upload such a file to create a new session. In order to do that, the ``content_type_registry`` tool needs to be configured with a predicate that can detect the type of content from the uploaded file and instantiate the correct type of object. Such predicates could be based on an extension or a filename pattern. Below, we will see a different approach that uses a custom “file factory” for the containing ``Program`` type."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:124
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:119
msgid "Containers"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:126
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:121
msgid "Container objects will be shown as *collections* (WebDAV-speak for folders) for WebDAV purposes. This allows the WebDAV client to open the container and list its contents. However, representing containers as collections makes it impossible to access the data contained in the various fields of the content object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:132
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:127
msgid "To allow access to this information, a pseudo-file called ``_data`` will be exposed inside a Dexterity container. This file can be read and written like any other, to access or modify the container’s data. It cannot be copied, moved, renamed or deleted: those operations should be performed on the container itself."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:140
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:135
msgid "Customising WebDAV behaviour"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:142
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:137
msgid "There are several ways in which you can influence the WebDAV behaviour of your type."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:145
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:140
msgid "If you are happy with the :RFC:`2822` format, you can provide your own ``plone.rfc822.interfaces.IFieldMarshaler`` adapters to provide alternate serialisations and parsers for fields. See the `plone.rfc822`_ documentation for details."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:149
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:144
msgid "If you want to use a different file representation, you can provide your own ``IRawReadFile`` and ``IRawWriteFile`` adapters. For example, if you have a content object that stores binary data, you could return this data directly, with an appropriate MIME type, to allow it to be edited in a desktop program (e.g. an image editor if the MIME type is ``image/jpeg``). The file ``plone.dexterity.filerepresentation`` contains two base classes, ``ReadFileBase`` and ``WriteFileBase``, which you may be able to use to make it easier to implement these interfaces."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:158
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:153
msgid "If you want to control how content objects are created when a new file or directory is dropped into a particular type of container, you can provide your own ``IFileFactory`` or ``IDirectoryFactory`` adapters. See `plone.dexterity.filerepresentation`_ for the default implementations."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:163
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:158
msgid "As an example, let’s register a custom ``IFileFactory`` adapter for the ``IProgram`` type. This adapter will not rely on the ``content_type_registry`` tool to determine which type to construct, but will instead create a ``Session`` object, since that is the only type that is allowed inside a ``Program`` container."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:170
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:165
msgid "The code, in ``program.py``, looks like this::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:193
msgid "We need to register the adapter in configure.zcml::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:197
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:188
msgid "This adapter overrides the ``DefaultFileFactory`` found in `plone.dexterity.filerepresentation`_. It creates an object of the designated type, fires an ``IObjectModifiedEvent`` and then returns the object, which will then be populated with data from the uploaded file."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:203
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:194
msgid "To test this, you could write a text file like the one shown above in a text editor and save it on your desktop, then drag it into the folder in your WebDAV client representing a ``Program``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:207
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:198
msgid "Here is a simple automated integration test for the same component::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:217
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:208
msgid "How it all works"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:219
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:210
msgid "The rest of this section describes in some detail how the various WebDAV related components interact in Zope 2, CMF and Dexterity. This may be helpful if you are trying to customise or debug WebDAV behaviour."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:224
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:215
msgid "Background"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:226
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:217
msgid "Basic WebDAV support can be found in the ``webdav`` package. This defines two base classes, ``webdav.Resource.Resource`` and ``webdav.Collection.Collection``. ``Collection`` extends ``Resource``. These are mixed into *item* and *container* content objects, respectively."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:232
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:223
msgid "The webdav package also defines the ``NullResource`` object. A ``NullResource`` is a kind of placeholder, which supports the HTTP verbs ``HEAD``, ``PUT``, and ``MKCOL``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:236
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:227
msgid "Contents based on ``ObjectManager`` (including those in Dexterity) will return a ``NullResource`` if they cannot find the requested object and the request is a WebDAV request."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:240
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:231
msgid "The `zope.filerepresentation`_ package defines a number of interfaces which are intended to help manage file representations of content objects. Dexterity uses these interfaces to allow the exact file read and write operations to be overridden without subclassing."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:247
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:238
msgid "``HEAD``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:249
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:240
msgid "A ``HEAD`` request retrieves headers only."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:251
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:242
msgid "``Resource.HEAD()`` sets ``Content-Type`` based on ``self.content_type()``, ``Content-Length`` based on ``self.get\\_size()``, ``Last-Modified`` based on ``self._p_mtime``, and an ``ETag`` based on ``self.http__etag()``, if available."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:257
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:248
msgid "``Collection.HEAD()`` looks for ``self.index_html.HEAD()`` and returns its value if that exists. Otherwise, it returns a \"405 Method Not Allowed\" response. If there is no ``index_html`` object, it returns \"404 Not Found\"."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:263
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:254
msgid "``GET``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:265
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:256
msgid "A ``GET`` request retrieves headers and body."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:267
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:258
msgid "Zope calls ``manage_DAVget()`` to retrieve the body. The default implementation calls ``manage_FTPget()``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:270
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:261
msgid "In Dexterity, ``manage_FTPget()`` adapts ``self`` to ``IRawReadFile`` and uses its ``mimeType`` and ``encoding`` properties to set the ``Content-Type`` header, and its ``size()`` method to set ``Content-Length``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:274
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:265
msgid "If the ``IRawReadFile`` adapter is also an ``IStreamIterator``, it will be returned for the publisher to consume directly. This provides for efficient serving of large files, although it does require that the file can be read in its entirety with the ZODB connection closed. Dexterity solves this problem by writing the file content to a temporary file on the server."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:282
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:273
msgid "If the ``IRawReadFile`` adapter is not a stream iterator, its contents are returned as a string, by calling its ``read()`` method. Note that this loads the entire file contents into memory on the server."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:286
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:277
msgid "The default ``IRawReadFile`` implementation for Dexterity content returns an :RFC:`2822`-style message document. Most fields on the object and any enabled behaviours will be turned into UTF-8 encoded headers. The primary field, if any, will be returned in the body, also most likely encoded as an UTF-8 encoded string. Binary data may be base64-encoded instead."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:294
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:285
msgid "A type which wishes to override this behaviour can provide its own adapter. For example, an image type could return the raw image data."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:298
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:289
msgid "``PUT``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:300
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:291
msgid "A ``PUT`` request reads the body of a request and uses it to update a resource that already exists, or to create a new object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:303
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:294
msgid "By default ``Resource.PUT()`` fails with \"405 Method Not Allowed\". That is, it is not by default possible to ``PUT`` to a resource that already exists. The same is true of ``Collection.PUT()``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:308
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:299
msgid "In Dexterity, the ``PUT()`` method is overridden to adapt self to ``zope.filerepresentation.IRawWriteFile``, and call its ``write()`` method one or more times, writing the contents of the request body, before calling ``close()``. The ``mimeType`` and ``encoding`` properties will also be set based on the value of the ``Content-Type`` header, if available."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:315
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:306
msgid "The default implementation of ``IRawWriteFile`` for Dexterity objects assumes the input is an RFC 2822 style message document. It will read header values and use them to set fields on the object or in behaviours, and similarly read the body and update the corresponding primary field."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:321
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:312
msgid "``NullResource.PUT()`` is responsible for creating a new content object and initialising it (recall that a ``NullResource`` may be returned if a WebDAV request attempts to traverse to an object which does not exist). It sniffs the content type and body from the request, and then looks for the ``PUT_factory()`` method on the parent folder."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:327
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:318
msgid "In Dexterity, ``PUT_factory()`` is implemented to look up an ``IFileFactory`` adapter on self and use it to create the empty file. The default implementation will use the ``content_type_registry`` tool to determine a type name for the request (e.g. based on its extension or MIME type), and then construct an instance of that type."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:333
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:324
msgid "Once an instance has been constructed, the object will be initialised by calling its ``PUT()`` method, as above."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:336
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:327
msgid "Note that when content is created via WebDAV, an ``IObjectCreatedEvent`` will be fired from the ``IFileFactory`` adapter, just after the object has been constructed. At this point, none of its values will be set. Subsequently, at the end of the ``PUT()`` method, an ``IObjectModifiedEvent`` will be fired. This differs from the event sequence of an object created through the web. Here, only an ``IObjectCreatedEvent`` is fired, and only *after* the object has been fully initialised."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:347
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:338
msgid "``DELETE``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:349
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:340
msgid "A ``DELETE`` request instructs the WebDAV server to delete a resource."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:351
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:342
msgid "``Resource.DELETE()`` calls ``manage_delObjects()`` on the parent folder to delete an object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:354
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:345
msgid "``Collection.DELETE()`` does the same, but checks for write locks of all children of the collection, recursively, before allowing the delete."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:359
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:350
msgid "``PROPFIND``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:361
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:352
msgid "A ``PROPFIND`` request returns all or a set of WebDAV properties. WebDAV properties are metadata used to describe an object, such as the last modified time or the author."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:365
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:356
msgid "``Resource.PROPFIND()`` parses the request and then looks for a ``propertysheets`` attribute on self."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:368
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:359
msgid "If an ``allprop`` request is received, it calls ``dav__allprop()``, if available, on each property sheet. This method returns a list of name/value pairs in the correct WebDAV XML encoding, plus a status."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:373
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:364
msgid "If a ``propnames`` request is received, it calls ``dav__propnames()``, if available, on each property sheet. This method returns a list of property names in the correct WebDAV XML encoding, plus a status."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:378
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:369
msgid "If a ``propstat`` request is received, it calls ``dav__propstats()``, if available, on each property sheet, for each requested property. This method returns a property name/value pair in the correct WebDAV XML encoding, plus a status."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:384
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:375
msgid "The ``PropertyManager`` mixin class defines the ``propertysheets`` variable to be an instance of ``DefaultPropertySheets``. This in turn has two property sheets: ``default``, a ``DefaultProperties`` instance; and ``webdav``, a ``DAVProperties`` instance."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:390
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:381
msgid "The ``DefaultProperties`` instance contains the main property sheet. This typically has a ``title`` property, for example."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:393
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:384
msgid "``DAVProperties`` will provides various core WebDAV properties. It defines a number of read-only properties: ``creationdate``, ``displayname``, ``resourcetype``, ``getcontenttype``, ``getcontentlength``, ``source``, ``supportedlock``, and ``lockdiscovery``. These in turn are delegated to methods prefixed with ``dav__``, so e.g. reading the ``creationdate`` property calls ``dav__creationdate()`` on the property sheet instance. These methods in turn return values based on the property manager instance (i.e. the content object). In particular:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:406
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:397
msgid "``creationdate``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:406
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:397
msgid "returns a fixed date (January 1st, 1970)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:409
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:400
msgid "``displayname``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:409
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:400
msgid "returns the value of the ``title_or_id()`` method."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:412
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:403
msgid "``resourcetype``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:412
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:403
msgid "returns an empty string or ``<n:collection/>``."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:415
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:406
msgid "``getlastmodified``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:415
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:406
msgid "returns the ZODB modification time."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:422
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:413
msgid "``getcontenttype``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:418
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:409
msgid "delegates to the ``content_type()`` method, falling back on the ``default_content_type()`` method. In Dexterity, ``content_type()`` is implemented to look up the ``IRawReadFile`` adapter on the context and return the value of its ``mimeType`` property."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:430
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:421
msgid "``getcontentlength``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:425
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:416
msgid "delegates to the ``get_size()`` method (which is also used for the “size” column in Plone folder listings). In Dexterity, this looks up a ``zope.size.interfaces.ISized`` adapter on the object and calls ``sizeForSorting()``. If this returns a unit of ``'bytes'``, the value portion is used. Otherwise, a size of 0 is returned."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:433
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:424
msgid "``source``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:433
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:424
msgid "returns a link to ``/document_src``, if that attribute exists."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:436
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:427
msgid "``supportedlock``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:436
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:427
msgid "indicates whether ``IWriteLock`` is supported by the content item."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:439
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:430
msgid "``lockdiscovery``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:439
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:430
msgid "returns information about any active locks."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:441
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:432
msgid "Other properties in this and any other property sheets are returned as stored when requested."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:444
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:435
msgid "If the ``PROPFIND`` request specifies a depth of 1 or infinity (i.e. the client wants properties for items in a collection), the process is repeated for all items returned by the ``listDAVObjects()`` methods, which by default returns all contained items via the ``objectValues()`` method."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:452
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:443
msgid "``PROPPATCH``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:454
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:445
msgid "A ``PROPPATCH`` request is used to update the properties on an existing object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:457
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:448
msgid "``Resource.PROPPATCH()`` deals with the same types of properties from property sheets as ``PROPFIND()``. It uses the ``PropertySheet`` API to add or update properties as appropriate."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:463
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:454
msgid "``MKCOL``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:465
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:456
msgid "A ``MKCOL`` request is used to create a new collection resource, i.e. create a new folder."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:468
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:459
msgid "``Resource.MKCOL()`` raises \"405 Method Not Allowed\", because the resource already exists (remember that in WebDAV, the ``MKCOL`` request, like a ``PUT`` for a new resource, is sent with a location that specifies the desired new resource location, not the location of the parent object)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:474
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:465
msgid "``NullResource.MKCOL()`` handles the valid case where a ``MKCOL`` request has been sent to a new resource. After checking that the resource does not already exist, that the parent is indeed a collection (folderish item), and that the parent is not locked, it calls the ``MKCOL_handler()`` method on the parent folder."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:481
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:472
msgid "In Dexterity, the ``MKCOL()_handler`` is overridden to adapt ``self`` to an ``IDirectoryFactory`` from `zope.filerepresentation`_ and use this to create a directory. The default implementation simply calls ``manage_addFolder()`` on the parent. This will create an instance of the ``Folder`` type."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:488
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:479
msgid "``COPY``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:490
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:481
msgid "A ``COPY`` request is used to copy a resource."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:492
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:483
msgid "``Resource.COPY()`` implements this operation using the standard Zope content object copy semantics."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:496
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:487
msgid "``MOVE``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:498
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:489
msgid "A ``MOVE`` request is used to relocate or rename a resource."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:500
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:491
msgid "``Resource.MOVE()`` implements this operation using the standard Zope content-object move semantics."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:504
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:495
msgid "``LOCK``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:506
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:497
msgid "A ``LOCK`` request is used to lock a content object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:508
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:499
msgid "All relevant WebDAV methods in the ``webdav`` package are lock aware. That is, they check for locks before attempting any operation that would violate a lock."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:512
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:503
msgid "Also note that `plone.locking`_ uses the lock implementation from the ``webdav`` package by default."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:515
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:506
msgid "``Resource.LOCK()`` implements locking and lock refresh support."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:517
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:508
msgid "``NullResource.LOCK()`` implements locking on a ``NullResource``. In effect, this means locking the name of the non-existent resource. When a ``NullResource`` is locked, it is temporarily turned into a ``LockNullResource`` object, which is a persistent object set onto the parent (remember that a ``NullResource`` is a transient object returned when a child object cannot be found in a WebDAV request)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:525
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:516
msgid "``UNLOCK``"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:527
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:518
msgid "An ``UNLOCK`` request is used to unlock a locked object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:529
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:520
msgid "``Resource.UNLOCK()`` handles unlock requests."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:531
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:522
msgid "``LockNullResource.UNLOCK()`` handles unlocking of a ``LockNullResource``. This deletes the ``LockNullResource`` object from the parent container."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:535
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:526
msgid "Fields on container objects"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:537
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:528
msgid "When browsing content via WebDAV, a container object (folderish item) will appear as a folder. Most likely, this object will also have content in the form of schema fields. To make this accessible, Dexterity containers expose a pseudo-file with the name ``_data``, by injecting this into the return value of ``listDAVObjects()`` and adding a special traversal hook to allow its contents to be retrieved."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/webdav-and-other-file-representations.rst:546
#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:537
msgid "This file supports ``HEAD``, ``GET``, ``PUT``, ``LOCK``, ``UNLOCK``, ``PROPFIND`` and ``PROPPATCH`` requests (an error will be raised if the user attempts to rename, copy, move or delete it). These operate on the container object, obviously. For example, when the data object is updated via a PUT request, the ``PUT()`` method on the container is called, by default delegating to an ``IRawWriteFile`` adapter on the container."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:2
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:2
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:236
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:240
#: ../external/plone.app.testing/README.rst:1015
#: ../external/plone.app.testing/docs/source/README.rst:1015
msgid "Workflow"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:4
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:4
msgid "**Controlling security with workflow**"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:6
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:6
msgid "Workflow is used in Plone for three distinct, but overlapping purposes:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:8
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:8
msgid "To keep track of metadata, chiefly an object’s *state*;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:9
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:9
msgid "to create content review cycles and model other types of processes;"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:10
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:10
msgid "to manage object security."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:12
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:12
msgid "When writing content types, we will often create custom workflows to go with them. In this section, we will explain at a high level how Plone’s workflow system works, and then show an example of a simple workflow to go with our example types. An exhaustive manual on using workflows is beyond the scope of this manual, but hopefully this will cover the basics."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:22
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:22
msgid "There is nothing Dexterity-specific in this section. Everything here applies equally well to content objects created with Archetypes or using CMF directly."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:27
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:27
msgid "A DCWorkflow refresher"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:29
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:29
msgid "What follows is a fairly detailed description of `DCWorkflow`_, originally posted `here`_. You may find some of this a little detailed on first reading, so feel free to skip to the specifics later on. However, it is useful to be familiar with the high level concepts. You’re unlikely to need multi-workflow chains in your first few attempts at workflow, for instance, but it’s useful to know what it is if you come across the term."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:40
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:40
msgid "Plone’s workflow system is known as DCWorkflow. It is a *states-and-transitions* system, which means that your workflow starts in a particular *state* (the *initial state*) and then moves to other states via *transitions* (also called *actions* in CMF)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:46
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:46
msgid "When an object enters a particular state (including the initial state), the workflow is given a chance to update **permissions** on the object. A workflow manages a number of permissions – typically the “core” CMF permissions like :guilabel:`View`, :guilabel:`Modify portal content` and so on – and will set those on the object at each state change. Note that this is event-driven, rather than a real-time security check: only by changing the state is the security information updated. This is why you need to click :guilabel:`Update security settings` at the bottom of the ``portal_workflow`` screen in the ZMI when you change your workflows’ security settings and want to update existing objects."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:59
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:59
msgid "A state can also assign *local roles* to *groups*. This is akin to assigning roles to groups on Plone’s :guilabel:`Sharing` tab, but the mapping of roles to groups happens on each state change, much like the mapping of roles to permissions. Thus, you can say that in the ``pending_secondary`` state, members of the :guilabel:`Secondary reviewers` group have the :guilabel:`Reviewer` local role. This is powerful stuff when combined with the more usual role-to-permission mapping, although it is not very commonly used."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:69
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:69
msgid "State changes result in a number of *variables* being recorded, such as the *actor* (the user that invoked the transition), the *action* (the name of the transition), the date and time and so on. The list of variables is dynamic, so each workflow can define any number of variables linked to `TALES`_ expressions that are invoked to calculate the current value at the point of transition. The workflow also keeps track of the current state of each object. The state is exposed as a special type of workflow variable called the *state variable*. Most workflows in Plone uses the name ``review_state`` as the state variable."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:82
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:82
msgid "Workflow variables are recorded for each state change in the *workflow history*. This allows you to see when a transition occurred, who effected it, and what state the object was in before or after. In fact, the “current state” of the workflow is internally looked up as the most recent entry in the workflow history."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:89
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:89
msgid "Workflow variables are also the basis for *worklists*. These are basically pre-defined catalog queries run against the current set of workflow variables. Plone’s review portlet shows all current worklists from all installed workflows. This can be a bit slow, but it does mean that you can use a single portlet to display an amalgamated list of all items on all worklists that apply to the current user. Most Plone workflows have a single worklist that matches on the ``review_state`` variable, e.g. showing all items in the ``pending`` state."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:102
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:102
msgid "If states are the static entities in the workflow system, *transitions* (actions) provide the dynamic parts. Each state defines zero or more possible exit transitions, and each transition defines exactly one target state, though it is possible to mark a transition as “stay in current state”. This can be useful if you want to do something in reaction to a transition and record that the transition happened in the workflow history, but not change the state (or security) of the object."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:111
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:111
msgid "Transitions are controlled by one or more *guards*. These can be permissions (the preferred approach), roles (mostly useful for the :guilabel:`Owner` role – in other cases it is normally better to use permissions) or `TALES`_ expressions. A transition is available if all its guard conditions are true. A transition with no guard conditions is available to everyone (including anonymous!)."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:120
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:120
msgid "Transitions are user-triggered by default, but may be **automatic**. An automatic transition triggers immediately following another transition provided its guard conditions pass. It will not necessarily trigger as soon as the guard condition becomes true, as that would involve continually re-evaluating guards for all active workflows on all objects!"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:127
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:127
msgid "When a transition is triggered, the ``IBeforeTransitionEvent`` and ``IAfterTransitionEvent`` **events** are triggered. These are low-level events from ``Products.DCWorkflow`` that can tell you a lot about the previous and current states. There is a higher level ``IActionSucceededEvent`` in ``Products.CMFCore`` that is more commonly used to react after a workflow action has completed."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:135
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:135
msgid "In addition to the events, you can configure workflow **scripts**. These are either created through-the-web or (more commonly) as External Methods [*]_, and may be set to execute before a transition is complete (i.e.  before the object enters the target state) or just after it has been completed (the object is in the new state). Note that if you are using event handlers, you’ll need to check the event object to find out which transition was invoked, since the events are fired on all transitions. The per-transition scripts are only called for the specific transitions for which they were configured."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:147
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:147
msgid "An *External Method* is a Python script evaluated in Zope context. See `Logic Objects <http://docs.zope.org/zope2/zope2book/BasicObject.html#logic-objects-script-python-objects-and-external-methods>`_ in the Zope 2 Book."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:153
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:153
msgid "Multi-chain workflows"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:155
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:155
msgid "Workflows are mapped to types via the ``portal_workflow`` tool. There is a default workflow, indicated by the string ``(Default)``. Some types have no workflow, which means that they hold no state information and typically inherit permissions from their parent. It is also possible for types to have *multiple workflows*. You can list multiple workflows by separating their names by commas. This is called a *workflow chain*."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:164
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:164
msgid "Note that in Plone, the workflow chain of an object is looked up by multi-adapting the object and the workflow to the ``IWorkflowChain`` interface. The adapter factory should return a tuple of string workflow names (``IWorkflowChain`` is a specialisation of ``IReadSequence``, i.e. a tuple). The default obviously looks at the mappings in the ``portal_workflow`` tool, but it is possible to override the mapping, e.g. by using a custom adapter registered for some marker interface, which in turn could be provided by a type-specific behavior."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:174
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:174
msgid "Multiple workflows applied in a single chain co-exist in time. Typically, you need each workflow in the chain to have a different state variable name. The standard ``portal_workflow`` API (in particular, ``doActionFor()``, which is used to change the state of an object) also assumes the transition ids are unique. If you have two workflows in the chain and both currently have a ``submit`` action available, only the first workflow will be transitioned if you do ``portal_workflow.doActionFor(context, ‘submit’)``. Plone will show all available transitions from all workflows in the current object’s chain in the ``State`` drop-down, so you do not need to create any custom UI for this. However, Plone always assumes the state variable is called ``review_state`` (which is also the variable indexed in ``portal_catalog``). Therefore, the state of a secondary workflow won’t show up unless you build some custom UI."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:192
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:192
msgid "In terms of security, remember that the role-to-permission (and group-to-local-role) mappings are event-driven and are set after each transition. If you have two concurrent workflows that manage the same permissions, the settings from the last transition invoked will apply. If they manage different permissions (or there is a partial overlap) then only the permissions managed by the most-recently-invoked workflow will change, leaving the settings for other permissions untouched."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:201
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:201
msgid "Multiple workflows can be very useful in case you have concurrent processes. For example, an object may be published, but require translation. You can track the review state in the main workflow and the translation state in another. If you index the state variable for the second workflow in the catalog (the state variable is always available on the indexable object wrapper so you only need to add an index with the appropriate name to ``portal_catalog``) you can search for all objects pending translation, for example using a *Collection*."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:213
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:213
msgid "Creating a new workflow"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:215
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:215
msgid "With the theory out of the way, let’s show how to create a new workflow."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:217
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:217
msgid "Workflows are managed in the ``portal_workflow`` tool. You can use the ZMI to create new workflows and assign them to types. However, it is usually preferable to create an installable workflow configuration using GenericSetup. By default, each workflow as well as the workflow assignments are imported and exported using an XML syntax. This syntax is comprehensive, but rather verbose if you are writing it manually."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:224
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:224
msgid "For the purposes of this manual, we will show an alternative configuration syntax based on spreadsheets (in CSV format). This is provided by the `collective.wtf`_ package. You can read more about the details of the syntax in its documentation. Here, we will only show how to use it to create a simple workflow for the ``Session`` type, allowing members to submit sessions for review."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:231
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:231
msgid "To use ``collective.wtf``, we need to depend on it. In ``setup.py``, we have::"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:241
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:241
msgid "As before, the ``<includeDependencies />`` line in ``configure.zcml`` takes care of configuring the package for us."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:244
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:244
msgid "A workflow definition using ``collective.wtf`` consists of a CSV file in the ``profiles/default/workflow_csv`` directory, which we will create, and a ``workflows.xml`` file in ``profiles/default`` which maps types to workflows."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:250
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:250
msgid "The workflow mapping in ``profiles/default/workflows.xml`` looks like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:264
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:264
msgid "The CSV file itself is found in ``profiles/default/workflow_csv/example.conference.session_workflow.csv``. It contains the following, which was exported to CSV from an OpenOffice spreadsheet. You can find the original spreadsheet with the `example.conference source code`_. This applies some useful formatting, which is obviously lost in the CSV version."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:274
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:274
msgid "For your own workflows, you may want to use `this template`_ as a starting point."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:342
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:342
msgid "Here, you can see several states and transitions. Each state contains a role/permission map, and a list of the possible exit transitions. Each transition contains a target state and other meta-data such as a title and a description, as well as guard permissions."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:350
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:350
msgid "Like most other GenericSetup import steps, the workflow uses the Zope 2 permission title when referring to permissions."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:353
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:353
msgid "When the package is (re-)installed, this workflow should be available under ``portal_workflow`` and mapped to the ``Session`` type."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:358
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:358
msgid "If you have existing instances, don’t forget to go to ``portal_workflow`` in the ZMI and click :guilabel:`Update security settings` at the bottom of the page. This ensures that existing objects reflect the most recent security settings in the workflow."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:365
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:365
msgid "A note about add permissions"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:367
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:367
msgid "This workflow assumes that regular members can add *Session* proposals to *Programs*, which are then reviewed. Previously, we granted the ``example.conference: Add session`` permission to the ``Member`` role. This is necessary, but not sufficient to allow members to add sessions to programs. The user will also need the generic ``Add portal content`` permission in the ``Program`` folder."
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:376
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:376
msgid "There are two ways to achieve this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:378
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:378
msgid "Build a workflow for the ``Program`` type that manages this permission"
msgstr ""

#: ../external/plone.app.dexterity/docs/advanced/workflow.rst:379
#: ../external/plone.app.dexterity/docs/grok/advanced/workflow.rst:379
msgid "Use the :guilabel:`Sharing` tab to grant :guilabel:`Can add` to the :guilabel:`Authenticated Users` group. This grants the :guilabel:`Contributor` local role to members. By default, this role is granted the :guilabel:`Add portal content` permission."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/behavior-basics.rst:2
#: ../external/plone.app.dexterity/docs/grok/behaviors/behavior-basics.rst:2
msgid "Behavior basics"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/behavior-basics.rst:4
#: ../external/plone.app.dexterity/docs/grok/behaviors/behavior-basics.rst:4
msgid "**The fundamental concepts behind behaviors**"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/behavior-basics.rst:6
#: ../external/plone.app.dexterity/docs/grok/behaviors/behavior-basics.rst:6
msgid "Before we dive into the practical examples, we need to explain a few of the concepts that underpin behaviors."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/behavior-basics.rst:8
msgid "At the most basic level, a behavior is like a ‘conditional’ adapter. For a Dexterity content type, the default condition is, \"is this behavior listed in the *behaviors* property in the FTI?\" But the condition itself is an adapter, in rare cases this can be overruled. When a behavior is enabled for a particular object, it will be possible to adapt that object to the behavior’s interface. If the behavior is disabled, adaptation will fail."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/behavior-basics.rst:14
#: ../external/plone.app.dexterity/docs/grok/behaviors/behavior-basics.rst:15
msgid "A behavior consist at the very least of an interface and some metadata, namely a title and a description. In most cases, there is also a *factory*, akin to an adapter factory, which will be invoked to get an appropriate adapter when requested. This is usually just a class that looks like any other adapter factory, although it will tend to be applicable to *Interface*, *IContentish* or a similarly broad context."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/behavior-basics.rst:18
msgid "Behaviors may specify a *marker interface*, which will be directly provided by instances for which the behavior is enabled. This is useful if you want to conditionally enable event handlers or view components, which are registered for this marker interface. Some behaviors have no factory. In this case, the behavior interface and the marker interface must be one and the same. If a factory is given a marker interface different from the behavior interface must be declared."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/behavior-basics.rst:23
#: ../external/plone.app.dexterity/docs/grok/behaviors/behavior-basics.rst:29
msgid "Behaviors are registered globally, using the *<plone.behavior />* ZCML directive. This results in, among other things, a named utility providing *plone.behavior.interfaces.IBehavior* being registered. This utility contains various information about the behavior, such as its name, title, interface and (optional) marker interface. The utility name is the full dotted name to the behavior interface."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:2
#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:2
msgid "Creating and registering behaviors"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:4
#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:4
msgid "**How to create a basic behavior that provides form fields**"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:6
msgid "The following example is based on the `collective.gtags`_ product. It comes with a behavior that adds a *tags* field to the “Categorization” fieldset, storing the actual tags in the Dublin Core *Subject* field."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:9
#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:10
msgid "*collective.gtags* is a standard package, with a *configure.zcml*, a GenericSetup profile, and a number of modules. We won’t describe those here, though, since we are only interested in the behavior."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:12
#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:14
msgid "First, there are a few dependencies in *setup.py*:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:24
#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:33
msgid "Next, we have *behaviors.zcml*, which is included from *configure.zcml* and contains all necessary configuration to set up the behaviors. It looks like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:45
#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:61
msgid "We first include the *plone.behavior meta.zcml* file, so that we get access to the *<plone:behavior />* ZCML directive."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:47
#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:75
msgid "The behavior itself is registered with the *<plone:behavior />* directive. We set a *title* and a *description*, and then speicfy the **behavior interface** with the *provides* attribute. This attribute is required, and is used to construct the unique name for the behavior. In this case, the behavior name is *collective.gtags.behaviors.ITags*, the full dotted name to the behavior interface. When the behavior is enabled for a type, it will be possible to adapt instances of that type to *ITags*. That adaptation will invoke the factory specified by the *factory* attribute."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:54
#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:85
msgid "The *behaviors.py* module looks like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:113
#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:145
msgid "We first define the *ITags* interface, which is also the behavior interface. Here, we define a single attribute, *tags*, but we could also have added methods and additional fields if required. Naturally, these need to be implemented by the behavior adapter."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:117
msgid "Since we want this behavior to provide form fields, we derive the behavior interface from *model.Schema* and set form hints using *plone.autoform.directives*. We also mark the *ITags* interface with *IFormFieldProvider* to signal that it should be processed for form fields by the standard forms. See the `Dexterity Developer Manual`_ for more information about setting form hints in schema interfaces."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:122
#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:158
msgid "If your behavior does not provide form fields, you can just derive from *zope.interface.Interface* and omit the *alsoProvides()* line."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:124
msgid "Next, we write the class that implements the behavior adapter and acts the adapter factory. Notice how it implements the behavior interface (*ITags*), and adapts a broad interface *(IDublinCore*). The behavior cannot be enabled on types not supporting this interface. In many cases, you will omit the *adapter()* line, provided your behavior is generic enough to work on any context."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/creating-and-registering-behaviors.rst:129
msgid "The adapter is otherwise identical to any other adapter. It implements the interface, here by storing values in the *Subject* field."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/index.rst:2
#: ../external/plone.app.dexterity/docs/grok/behaviors/index.rst:2
msgid "Behaviors"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/index.rst:4
#: ../external/plone.app.dexterity/docs/grok/behaviors/index.rst:4
msgid "**How to create re-usable behaviors for Dexterity types**"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:4
#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:4
msgid "**About this manual**"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:6
msgid "This manual should teach you everything you need to know to write your own behaviors, but not how to integrate them into another framework."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:8
#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:6
msgid "*Behaviors* are re-usable bundles of functionality that can be enabled or disabled on a per-content type basis. Examples might include:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:11
msgid "A set of form fields (on standard add and edit forms),"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:12
msgid "Enabling particular event handler,"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:13
msgid "Enabling one or more views, viewlets or other UI components,"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:14
msgid "Anything else which may be expressed in code via an adapter and/or marker interface."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:16
#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:15
msgid "You would typically not write a behavior as a one-off. Behaviors are normally used when:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:19
#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:18
msgid "You want to share fields and functionality across multiple types easily. Behaviors allow you to write a schema and associated components (e.g. adapters, event handlers, views, viwelets) once and re-use them easily."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:21
#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:22
msgid "A more experienced developer is making functionality available for re-use by less experienced integrators. For example, a behavior can be packaged up and release as an add-on product. Integators can then install that product and use the behavior in their own types, either in code or through-the-web."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:25
msgid "This manual is aimed at developers who want to write new behaviors. This is a slightly more advanced topic than the writing of custom content types. It assumes you are familiar with buildout, know how to create a custom package, understand interfaces and have a basic understanding of Zope’s component architecture."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:29
#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:34
msgid "Behaviors are not tied to Dexterity, but Dexterity provides behavior support for its types via the *behaviors* FTI property. In fact, if you’ve used Dexterity before, you’ve probably used some behaviors. Take a look at the `Dexterity Developer Manual`_ for more information about how to enable behaviors on a type and for a list of standard behaviors."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/intro.rst:33
msgid "To learn more about how behaviors in detail are implemented, see the `plone.behavior`_ package."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:2
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:2
msgid "Providing marker interfaces"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:4
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:4
msgid "**How to use behaviors to set marker interfaces on instances of a given type.**"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:6
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:6
msgid "Sometimes, it is useful for objects that provide a particular behavior to also provide a specific marker interface. For example, you can register a viewlet for a particular marker and use a behavior to enable that marker on all instances of a particular content type. The viewlet will then only show up when the behavior is enabled. The same principle can be applied to event handlers, views and other components."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:12
msgid "There is usually no need to use markers to enable a custom adapter since a standard behavior is already a conditional adapter. However, in certain cases, you may want to provide one or more adapters to an interface that is not the behavior interface. E.g. to use a particular extension point provided by another component. In this case, it may easier to set a marker interface and provide an adapter from this marker."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:17
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:22
msgid "*plone.behavior’s* marker support can be used in two ways:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:19
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:24
msgid "As the behavior interface itself. In this case, there is no behavior adapter factory. The behavior interface and the marker interface are one and the same."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:21
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:27
msgid "As a supplement to a standard behavior adapter. In this case, a factory is provided, and the behavior interface (which the behavior adapter factory implements) is different to the marker interface."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:25
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:32
msgid "Primary marker behaviors"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:27
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:34
msgid "In the first case, where the behavior interface and the marker interface are the same, you can simply use the *<plone:behavior />*directive without a *factory*. For example:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:38
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:46
msgid "One could imagine a viewlet based on `plone.pony`_ registered for the *IWantAPony* marker interface. If the behavior is enabled for a particular object, *IWantAPony.providedBy(object)* would be true."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:42
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:51
msgid "Supplementary marker behaviors"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:44
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:53
msgid "In the second case, we want to provide a behavior interface with a behavior adapter factory as usual (e.g. with some form fields and a custom storage or a few methods implemented in an adapter), but we also need a custom marker. Here, we use both the *provides* and *marker* attributes to *<plone:behavior />* to reference the two interfaces, as well as a *factory*."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:48
msgid "To a more interesting example, here is a behavior from a project that lets content authors with particular permissions (*iz.EditOfficialReviewers* and *iz.EditUnofficialReviewers*), nominate the “official” and any “unofficial” reviewers for a given content item. The behavior provides the necessary form fields to support this. It also sets a marker interface that enables"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:52
msgid "an *ILocalRoleProvider* adapter to automatically grant local roles to the chosen reviewers,"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:53
msgid "a custom indexer that lists the reviewers."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:55
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:69
msgid "The ZCML registration looks like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:67
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:81
msgid "Notice the use of the *AnnotationStorage* factory. This is a re-usable factory that can be used to easily create behaviors from schema interfaces that store their values in annotations. We’ll describe this in more detail later. We could just as easily have provided our own factory in this example."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:72
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:93
msgid "The *reviewers.py* module contains the following:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:210
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:216
msgid "Note that the *iz.EditOfficialReviewers* and *iz.EditUnofficialReviewers* permissions are defined and granted elsewhere."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:212
msgid "We need to register these components in *configure.zcml*:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:220
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:220
msgid "This is quite a complex behavior, but hopefully you can see what’s going on:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:222
msgid "There is a standard schema interface, which includes form hints using *plone.autoform.directives* and is marked as an *IFormFieldProvider*. It uses *plone.formwidget.autocomplete* and *plone.principalsource* to implement the fields."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:224
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:227
msgid "We define a marker interface (*IReviewersMarker*) and register this with the *marker* attribute of the *<plone:behavior />* directive."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:225
msgid "We define and register an adapter from this marker to *ILocalRoles* from *borg.localrole*."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:226
msgid "Similarly, we register a multi-adapter to *IIndexer*, as provided by *plone.indexer*."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/providing-marker-interfaces.rst:228
#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:237
msgid "Although this behavior provides a lot of functionality, it is no more difficult for integrators to use than any other: they would simply list the behavior interface (*iz.behaviors.reviewers.IReviewers* in this case) in the FTI, and all this functionality comes to life. This is the true power of behaviors: developers can bundle up complex functionality into re-usable behaviors, which can then be enabled on a per-type basis by integrators (or the same developers in lazier moments)."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:2
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:2
msgid "Schema-only behaviors using annotations or attributes"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:4
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:4
msgid "**Writing behaviors that provide schema fields**"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:6
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:6
msgid "Oftentimes, we simply want a behavior to be a reusable collection of form fields. Integrators can then compose their types by combining different schemata. Writing the behavior schema is no different to writing any other schema interface. But how and where do we store the values? By default, *plone.behavior* provides two alternatives."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:13
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:13
msgid "Using annotations"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:15
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:15
msgid "Annotations, as provided by the `zope.annotation`_ package, are a standard means of storing of key/value pairs on objects. In the default implementation (so-called *attribute annotation*), the values are stored in a BTree on the object called *\\_\\_annotations\\_\\_*. The raw annotations API involves adapting the object to the *IAnnotations* interface, which behaves like a dictionary, and storing values under unique keys here. *plone.behavior* comes with a special type of factory that means you can simply adapt an object to its behavior interface to get an adapter providing this interface, on which you can get and set values, which are eventually stored in annotations."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:20
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:26
msgid "We’ve already seen an example of this factory:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:32
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:38
msgid "Here, *plone.behavior.AnnotationStorage* is a behavior factory that can be used by any behavior with an interface that consists entirely of *zope.schema* fields. It simply stores those items in object annotations, saving you the trouble of writing your own annotation storage adapter. If you adapt an object for which the behavior is enabled to the behavior interface, you will be able to read and write values off the resultant adapter as normal."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:37
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:47
msgid "Storing attributes"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:39
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:49
msgid "This approach is convenient, but there is another approach that is even more convenient, and, contrary to what you may think, may be more efficient: simply store the attributes of the schema interface directly on the content object."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:43
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:54
msgid "As an example, here’s the standard *IRelatedItems* behavior from *plone.app.dexerity*:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:54
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:66
msgid "The *IRelatedItems* schema looks like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:83
msgid "This is a standard schema using *plone.autoform.directives*. However, notice the lack of a behavior factory. This is a directly provided “marker” interface, except that it has attributes, and so it is not actually a marker interface. The result is that the *relatedItems* attribute will be stored directly onto a content object when first set (usually in the add form)."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:88
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:101
msgid "This approach has a few advantages:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:90
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:103
msgid "There is no need to write or use a separate factory, so it is a little easier to use."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:91
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:105
msgid "The attribute is available on the content object directly, so you can write *context/relatedItems* in a TAL expression, for example. This does require that it has been set at least once, though! If the schema is used in the type’s add form, that will normally suffice, but old instances of the same type may not have the attribute and could raise an *AttributeError.*"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:94
msgid "If the value is going to be used frequently, and especially if it is read when viewing the content object, storing it in an attribute is more efficient than storing it in an annotation. Background: This is because the *\\_\\_annotations\\_\\_* BTree is a separate persistent object which has to be loaded into memory, and may push something else out of the ZODB cache."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:97
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:118
msgid "The possible disadvantages are:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:99
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:120
msgid "The attribute name may collide with another attribute on the object, either from its class, its base schema, or another behavior. Whether this is a problem in practice depends largely on whether the name is likely to be unique. In most cases, it will probably be sufficiently unique."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:102
msgid "If the attribute stores a large value, it will increase memory usage, as it will be loaded into memory each time the object is fetched from the ZODB. However, you should use BLOBs to store large values and BTrees to store many values anyway. Loading an object with a BLOB or BTree does not mean loading the entire data, so the memory overhead does not occur unless the whole BLOB or BTree is actually used."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/schema-only-behaviors.rst:107
#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:133
msgid "“The moral of this story? BTrees do not always make things more efficient!” ~ Laurence Rowe"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:2
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:2
msgid "Testing behaviors"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:4
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:4
msgid "**How to write unit tests for behaviors**"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:6
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:6
msgid "Behaviors, like any other code, should be tested. If you are writing a behavior with just a marker interface or schema interface, it is probably not necessary to test the interface. However, any actual code, such as a behavior adapter factory, ought to be tested."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:10
msgid "Writing a behavior integration test is not very difficult if you are happy to depend on Dexterity in your test. You can create a dummy type by instantiating a Dexterty FTI in *portal\\_types*. Then enable your behavior by adding its interface name to the *behaviors* property."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:14
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:16
msgid "In many cases, however, it is better not to depend on Dexterity at all. It is not too difficult to mock what Dexterity does to enable behaviors on its types. The following example is taken from *collective.gtags* and tests the *ITags* behavior we saw on the first page of this manual."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:121
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:124
msgid "This test tries to prove that the behavior is correctly installed and works as intended on a suitable content class. It is not a true unit test, of course. For that, we would simply test the *Tags* adapter directly on a dummy context, but that is not terribly interesting, since all it does is convert sets to tuples."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:125
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:130
msgid "First, we configure the package. To keep the test small, we limit ourselves to the *behaviors.zcml* file, which in this case will suffice. We still need to include a minimal set of ZCML from Five."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:129
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:134
msgid "Next, we implement an *IBehaviorAssignable*adapter. This is a low-level component used by *plone.behavior* to determine if a behavior is enabled on a particular object. Dexterity provides an implementation that checks the type’s FTI. Our test version is much simpler - it hardcodes the supported behaviors."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:134
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:140
msgid "With this in place, we first check that the *IBehavior* utility has been correctly registered. This is essentially a test to show that we’ve used the *<plone:behavior />* directive as intended. We also verify that our schema interface is an *IFormFieldsProvider*. For a non-form behavior, we’d obviously omit this."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:139
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:146
msgid "Finally, we test the behavior. We’ve chosen to use CMFDefault’s *Document* type for our test, as the behavior adapter requires an object providing *IDublinCore*. If we were less lazy, we’d write our own class and implement *IDublinCore* directly. However, in many cases, the types from CMFDefault are going to provide convenient test fodder."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:144
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:152
msgid "Obviously, if our behavior was more complex, we’d add more intricate tests. By the last section of the doctest, we have enough context to test the adapter factory."
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:147
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:156
msgid "To run the test, we need a test suite. In *tests.py*, we have:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:170
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:179
msgid "This runs the *behaviors.rst* doctest from the same directory as the *tests.py* file. To run the test, we can use the usual test runner:"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:178
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:187
msgid "A note about marker interfaces"
msgstr ""

#: ../external/plone.app.dexterity/docs/behaviors/testing-behaviors.rst:180
#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:189
msgid "Note that marker interface support depends on code that is implemented in Dexterity and is non-trivial to reproduce in a test. If you need a marker interface in a test, set it manually with *zope.interface.alsoProvides*, or write an integration test with Dexterity content."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:2
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:2
msgid "Custom views"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:4
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:4
msgid "**Configuring custom views and using display forms**"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:7
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:7
msgid "Simple views"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:9
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:9
msgid "**Creating basic views**"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:11
msgid "So far, our types have used the default views. They use the *display* widgets from `z3c.form`_, much like the add and edit forms use the *edit* widgets. This is functional, but not very attractive. Most types will need one or more custom view templates."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:16
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:16
msgid "Dexterity types are no different from any other content type in Plone. You can register a view for your schema interface, and it will be available on your type. If the view is named *view*, it will be the default view, at least if you use the standard FTI configuration. This is because the FTI’s ``default_view`` property is set to ``view``, and ``view`` is in the list of ``view_methods.``"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:23
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:44
msgid "``addcontent`` will have created a \"SampleView\" class in each content type's .py file. Just rename it to \"View\" to follow the example."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:26
msgid "First create a view registration with a ``<browser:page />`` ZCML directive in your ```configure.zcml`` file:"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:46
msgid "Secondly add a browser view in ``program.py`` as follows:"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:70
msgid "We have added ``sessions``, a helper method which will be used in the view."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:72
msgid "You can add any methods to the view. They will be available to the template via the ``view`` variable. The content object is available via ``context``."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:76
msgid "Finaly add a template in ``templates/programview.pt``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:136
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:163
msgid "For the most part, this template outputs the values of the various fields, using the ``sessions()`` method on the view to obtain the sessions contained within the program."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:140
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:167
msgid "Notice how the ``details`` *RichText* field is output as ``tal:content=\"structure context/details/output\"``. The ``structure`` keyword ensures that the rendered HTML is not escaped. The extra traversal to ``details/output`` is necessary because the *RichText* field actually stores a *RichTextValue* object that contains not only the raw text as entered by the user, but also a MIME type (e.g. ``text/html``) and the rendered output text. *RichText* fields are covered in more detail :ref:`later in this manual <richtext-label>`."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:145
msgid "The view for ``Presenter`` is even simpler:"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:164
msgid "The template, in ``templates/presenterview.pt``, is similar to the previous template:"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:200
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:221
msgid "Obviously, these views are very basic. Much more interesting views could be created by putting a little more work into the templates."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:203
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:224
msgid "You should also realise that you can create any type of view using this technique. Your view does not have to be related to a particular content type, even. You could set the context to ``Interface``, for example, to make a view that’s available on all types."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:208
msgid "Display view"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:210
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:232
msgid "**Using display widgets in your views**"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:212
msgid "In the previous section, we created a browser view. This kind of view is the most common. Sometimes we want to make use of the widgets and information in the type’s schema more directly. For example to invoke transforms or re-use more complex HTML."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:217
msgid "To do this, you can use a *display view*. This is really just a view base class that knows about the schema of a type. We will use an example in ``session.py``, with a template in ``templates/sessionview.pt``."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:222
msgid "*Display view* involve the same type of overhead as add- and edit-forms. If you have complex content type with many behaviors, fieldsets and widget hints, you may notice a slow-down. This can be a problem on high volume sites."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:227
msgid "The new view class is pretty much the same as before, except that we derive from ``plone.dexterity.browser.view.DefaultView``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:254
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:258
msgid "This gives our view a few extra properties that we can use in the template:"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:259
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:265
msgid "``view.w``"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:257
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:262
msgid "a dictionary of all the display widgets, keyed by field names. For fields provided by behaviors, that is usually prefixed with the behavior interface name (``IBehaviorInterface.field_name``). For the default schema, unqualified names apply."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:262
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:268
msgid "``view.widgets``"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:262
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:268
msgid "contains a list of widgets in schema order for the default fieldset."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:265
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:271
msgid "``view.groups``"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:265
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:271
msgid "contains a list of fieldsets in fieldset order."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:268
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:274
msgid "``view.fieldsets``"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:268
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:274
msgid "contains a dictionary mapping fieldset name to fieldset."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:271
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:278
msgid "``widgets``"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:271
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:277
msgid "On a fieldset (group), you can access a ``widgets`` list to get widgets in that fieldset."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:273
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:280
msgid "The ``w`` dict is the most commonly used."
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:275
msgid "The ``templates/sessionview.pt`` template contains the following:"
msgstr ""

#: ../external/plone.app.dexterity/docs/custom-views.rst:303
#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:310
msgid "Notice how we use expressions like ``view/w/details/render`` (where ``details`` is the field name) to get the rendering of a widget. Other properties include ``__name__``, the field name, and ``label``, the field title."
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:2
#: ../external/plone.app.dexterity/docs/grok/designing.rst:2
msgid "Designing with content types"
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:4
#: ../external/plone.app.dexterity/docs/grok/designing.rst:4
msgid "**How to solve problems with content types**"
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:6
#: ../external/plone.app.dexterity/docs/grok/designing.rst:6
msgid "Before we dive into Dexterity, it is worth thinking about the way we design solutions with content types in Plone. If you are familiar with Archetypes based development, Grok or Zope 3, then much of this will probably be familiar."
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:10
#: ../external/plone.app.dexterity/docs/grok/designing.rst:10
msgid "Plone uses the ZODB, an object database, instead of a relational database as its default content store. The ZODB is well suited to heterogeneous, loosely structured content such as web pages."
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:14
#: ../external/plone.app.dexterity/docs/grok/designing.rst:14
msgid "Types in Plone are either containers or items (this distinction is sometimes called folderish vs. non-folderish). A one-to-many type relationship is typically modelled as a container (the \"one\") containing many items (the \"many\"), although it is also possible to use references across the content hierarchy."
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:19
#: ../external/plone.app.dexterity/docs/grok/designing.rst:19
msgid "Each type has a schema – a set of fields with related properties such as a title, default value, constraints, and so on. The schema is used to generate forms and describe instances of the type. In addition to schema-driven forms, a type typically comes with one or more views, and is subject to security (e.g. add permissions, or per-field read/write permissions) and workflow."
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:25
#: ../external/plone.app.dexterity/docs/grok/designing.rst:25
msgid "When we attempt to solve a particular content management problem with Plone, we will often design new content types. For the purposes of this tutorial, we'll build a simple set of types to help conference organisers. We want to manage a program consisting of multiple sessions. Each session should be listed against a track, have a time slot, a title, a description and a presenter. We also want to manage bios for presenters."
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:32
#: ../external/plone.app.dexterity/docs/grok/designing.rst:32
msgid "There are many ways to approach this, but here is one possible design:"
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:34
#: ../external/plone.app.dexterity/docs/grok/designing.rst:34
msgid "A content type Presenter is used to represent presenter bios. Fields include name, description and professional experience."
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:36
#: ../external/plone.app.dexterity/docs/grok/designing.rst:36
msgid "A content type Program represents a given conference program. Besides some basic metadata, it will list the available tracks. This type is folderish."
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:38
#: ../external/plone.app.dexterity/docs/grok/designing.rst:38
msgid "A content type Session represents a session. Sessions can only be added inside Programs. A Session will contain some information about the session, and allow the user to choose the track and associate a presenter."
msgstr ""

#: ../external/plone.app.dexterity/docs/designing.rst:42
#: ../external/plone.app.dexterity/docs/grok/designing.rst:42
msgid "Each type will also have custom views, and we will show how to configure catalog indexers, security and workflow for the types."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:20
msgid "..Note::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:129
msgid "To illustrate indexers, we will add three indexers to ``program.py``. Two will provide values for the ``start`` and ``end`` indexes, normally used by Plone’s ``Event`` type. We actually have attributes with the correct name for these already, but they use Python ``datetime`` objects whereas the ``DateIndex`` requires a Zope 2 ``DateTime.DateTime`` object. (Python didn’t have a ``datetime`` module when this part of Zope was created!) The third indexer will be used to provide a value for the ``Subject`` index that takes its value from the ``tracks`` list. ::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:159
msgid "Here, we use the ``@indexer`` decorator to create an indexer. This doesn’t register the indexer component, though, so we need to use ``grok.global_adapter()`` to finalise the registration. Crucially, this is where the indexer’s ``name`` is defined. This is the name of the indexed attribute for which the indexer is providing a value."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/catalog-indexing-strategies.rst:174
msgid "The pattern is always the same::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:17
msgid "the `plone.z3cform`_ package requires that standard `z3c.form`_ forms are used via a form wrapper view. In Dexterity, this wrapper is normally applied automatically by the form grokkers in `plone.directives.form`_ and `plone.directives.dexterity`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:31
msgid "If you want to build standalone forms not related to content objects, see the `z3c.form`_ documentation. For convenience, you may want to use the base classes and schema support in `plone.directives.form`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:45
msgid "Dexterity provides a standard edit form base class that provides sensible defaults for buttons, labels and so on. This should be registered for a type schema (not a class). To create an edit form that is identical to the default, we could do::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:53
msgid "The ``dexterity`` module is `plone.directives.dexterity`_ and the ``grok`` module is `five.grok`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:56
msgid "The default name for the form is *edit*, but we could supply a different name using ``grok.name()``. The default permission is ``cmf.ModifyPortalContent``, but we could require a different permission with ``grok.require()``. We could also register the form for a particular browser layer, using ``grok.layer()``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:70
msgid "Override the ``additionalSchemata`` property to tell `plone.autoform`_ to use different supplemental schema interfaces. The default is to use all behavior interfaces that provide the ``IFormFieldProvider`` marker from `plone.directives.form`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:145
msgid "This sequence is pretty long, but thankfully we rarely have to worry about it. In most cases, we can use the default add form, and when we can’t, creating a custom add form is no more difficult than creating a custom edit form. The add form grokker take care of registering the add view appropriately."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:157
msgid "A custom form replicating the default would look like this::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/custom-add-and-edit-forms.rst:169
msgid "Also note that we do not specify a context here. Add forms are always registered for any ``IFolderish`` context. We can specify a layer with ``grok.layer()`` and a permission other than the default ``cmf.AddPortalContent`` with ``grok.require()``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:26
msgid "We also need to import ``datetime`` at the top of the file, of course."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:28
msgid "Notice how the functions specify a particular schema field that they provide the default value for. The decorator will actually register these as “value adapters” for `z3c.form <http://pypi.python.org/pypi/z3c.form>`_, but you probably don’t need to worry about that."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:33
msgid "The ``data`` argument is an object that contains an attribute for each field in the schema. On the add form, most of these are likely to be ``None``, but on a different form, the values may be populated from the context. The ``data`` object also has a ``context`` attribute that you can use to get the form’s context. For add forms, that’s the containing folder; for other forms, it is normally a content object being edited or displayed. If you need to look up tools (``getToolByName``) or acquire a value from a parent object, use ``data.context`` as the starting point, e.g.:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:53
msgid "It is possible to provide different default values depending on the type of context, a request layer, the type of form, or the type of widget used. See the `plone.directives.form`_ documentation for more details."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:57
msgid "For example, if you wanted to have a differently calculated default for a particular form, you could use a decorator like:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/defaults.rst:68
msgid "If the default_value decorator is not working, check that you have installed plone.directives.form installed with buildout or in your setup.py. Further ensure that you have \"groked\" your package."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:59
msgid "Event handlers can be registered using ZCML with the ``<subscriber />`` directive, but when working with Dexterity types, we’ll more commonly use the ``grok.subscriber()`` in Python code."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:67
msgid "First, we require a few additional imports at the top of ``presenter.py``::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/event-handlers.rst:96
msgid "There are many ways to improve this rather simplistic event handler, but it illustrates how events can be used. The first argument to ``grok.subscribe()`` is an interface describing the object type. For non-object events, this is omitted. The second argument is the event type. The arguments to the function reflects these two, so the first argument is the ``IPresenter`` instance and the second is an ``IObjectAddedEvent`` instance."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/permissions.rst:108
msgid "In both cases, read and write permissions are annotated onto the schema using directives similar to those we’ve already seen for form widget hints. The ``read_permission()`` and ``write_permission()`` directives are found in the `plone.autoform.directives`_ package."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:100
msgid "If you want to use a different widget, you can use the same source (or a custom source that has content objects as values) with something like the autocomplete widget. The following line added to the interface will make the presenter selection similar to the ``organizer`` selection widget we showed in the previous section::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:120
msgid "To display the relationship on our form, we can either use a display widget on a ``DisplayForm``, or use this API to find the object and display it. We’ll do the latter in ``session_templates/view.pt``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/references.rst:135
msgid "To retrieve back-reference (all objects pointing to particular object using specified attribute) you can't simply use from_object or from_path, because source object is stored in the relation without acquisition wrappers. You should use from_id and helper method, which search the object in the IntId catalog.::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:23
msgid "It's conventional to use \"static\" or \"resources\" for the directory name and the dotted name of your package for the resource name. If you create a directory named \"resources\", you would use this zcml to register it::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:31
msgid "Then, if a ``resources`` resource directory in the ``example.conference`` package contains a file called ``conference.css``, it will be accessible on a URL like ``http://<server>/site/++resource++example.conference/conference.css.`` The resource name is the same as the package name wherein the ``resources`` directory appears."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:38
msgid "Grok used to automatically register any directory named ``static``. That behavior no longer works. If you're updating a Dexterity project from < Plone 4.3, add to your configure.zcml a stanza like::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/static-resources.rst:137
msgid "Finally, to use an image resource as the icon for a content type, simply list it in the FTI under the ``content_icon`` property. For example, in ``profiles/default/types/example.conference.presenter.xml``, we can use the following line, presuming we have a ``presenter.gif`` in the ``static`` directory:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/validators.rst:110
msgid "Finally, you can write more powerful validators by using the `z3c.form <http://pypi.python.org/pypi/z3c.form>`_ widget validators. See :ref:`the z3c.form documentation <z3c.form>`_ for details."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:214
msgid "We can turn our first \"members in the *organizers* group\" vocabulary into a named vocabulary by creating a named utility providing ``IVocabularyFactory``, like so::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:242
msgid "By convention, the vocabulary name is prefixed with the package name, to ensure uniqueness."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/vocabularies.rst:245
msgid "We can make use of this vocabulary in any schema by passing its name to the ``vocabulary`` argument of the ``Choice`` field constructor::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/advanced/webdav-and-other-file-representations.rst:51
msgid "A field can be marked as “primary” using the ``primary()`` directive from `plone.directives.form`_. For example::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/behavior-basics.rst:9
msgid "At the most basic level, a behavior is like a ‘conditional’ adapter. For a Dexterity content type, the condition is, \"is this behavior listed in the *behaviors* property in the FTI?\" When a behavior is enabled for a particular object, it will be possible to adapt that object to the behavior’s interface. If the behavior is disabled, adaptation will fail."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/behavior-basics.rst:22
msgid "In some cases, behaviors specify a *marker interface*, which will be directly provided by instances for which the behavior is enabled. This is useful if you want to conditionally enable event handlers or view components, which are registered for this marker interface. Some behaviors have no factory. In this case, the behavior interface and the marker interface must be one and the same."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:6
msgid "The following example is based on the `collective.gtags`_ product, which comes with a behavior that adds a *tags* field to the “Categorization” fieldset, storing the actual tags in the Dublin Core *Subject* field."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:28
msgid "The dependency on *plone.directives.form* is there to support form fields. If your behavior does not require form fields, you can skip this dependency. The *rwproperty* dependency provides some convenience decorators that are used in the behavior adapter factory class."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:64
msgid "The next three lines include *plone.directives.form* and its *meta.zcml* file, and then invoke the *grok* action on the *behaviors* module. This is not directly related to the behavior, but rather to the configuration of a schema interface that provides form fields and display hints to *plone.autoform* (and thus Dexterity’s standard add and edit forms). If your behavior is not a form field provider, you can omit these lines. Similarly, if you have grokked the entire package elsewhere with *<grok:grok package=“.” />*, you can omit the *<grok:grok package=“.behaviors” />* line. Otherwise, adjust it to reflect the module or package where your behaviors are kept."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:150
msgid "Since we want this behavior to provide form fields, we derive the behavior interface from *form.Schema* and set form hints using *plone.directives.form*(remember that these will only take effect if the package is *grokked*). We also mark the *ITags* interface with *IFormFieldProvider* to signal that it should be processed for form fields by the standard forms. See the `Dexterity Developer Manual`_ for more information about setting form hints in schema interfaces."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:161
msgid "Next, we write the class that implements the behavior adapter and acts the adapter factory. Notice how it implements the behavior interface (*ITags*), and adapts a broad interface *(IDublinCore*). The behavior cannot be enabled on types not supporting this interface. In many cases, you will omit the *adapts()* line, provided your behavior is generic enough to work on any context."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/creating-and-registering-behaviors.rst:168
msgid "The adapter is otherwise identical to any other adapter. It implements the interface, here by storing values in the *Subject* field. The use of *getproperty* and *setproperty* from the `rwproperty`_ package is for convenience only."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:9
msgid "A set of form fields (on standard add and edit forms)"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:10
msgid "Enabling particular event handler"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:11
msgid "Enabling one or more views, viewlets or other UI components"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:12
msgid "Anything else which may be expressed in code via an adapter and/or marker interface"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:28
msgid "This manual is aimed at developers who want to write new behaviors. This is a slightly more advanced topic than the writing of custom content types, and we will assume that you are familiar with buildout, know how to create a custom package, understand interfaces and have a basic understanding of Zope’s adapter concept."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/intro.rst:40
msgid "To learn more about how behaviors are implemented, see the `plone.behavior`_ package. This manual should teach you everything you need to know to write your own behaviors, but not how to integrate them into another framework."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:14
msgid "There is usually no need to use markers to enable a custom adapter since a standard behavior is already a conditional adapter. However, in certain cases, you may want to provide one or more adapters to an interface that is not the behavior interface, e.g. to use a particular extension point provided by another component. In this case, it may easier to set a marker interface and provide an adapter from this marker."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:60
msgid "To show a slightly more interesting example, here is a behavior from a project that lets content authors with particular permissions (*iz.EditOfficialReviewers* and *iz.EditUnofficialReviewers*), nominate the “official” and any “unofficial” reviewers for a given content item. The behavior provides the necessary form fields to support this, but it also sets a marker interface that enables an *ILocalRoleProvider* adapter to automatically grant local roles to the chosen reviewers, as well as a custom indexer that lists the reviewers."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:87
msgid "This whole package is grokked, so in *configure.zcml* we have:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:223
msgid "There is a standard schema interface, which is grokked for form hints using *plone.directives.form* and marked as an *IFormFieldProvider*. It uses *plone.formwidget.autocomplete* and *plone.principalsource* to implement the fields."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:229
msgid "We define an adapter from this marker to *ILocalRoles* from *borg.localrole*. Here, we have chosen to use *grokcore.component* (via *five.grok*) to register the adapter. We could have used an *<adapter />* ZCML statement as well, of course."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/providing-marker-interfaces.rst:233
msgid "Similarly, we define a multi-adapter to *IIndexer*, as provided by *plone.indexer*. Again, we’ve chosen to use convention-over-configuration via *five.grok* to register this."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:94
msgid "This is a standard schema using *plone.directives.form* (the package is also grokked). However, notice the lack of a behavior factory. This is a directly provided “marker” interface, except that it has attributes, and so it is not actually a marker interface. The result is that the *relatedItems* attribute will be stored directly onto a content object when first set (usually in the add form)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:111
msgid "If the value is going to be used frequently, and especially if it is read when viewing the content object, storing it in an attribute is more efficient than storing it in an annotation. (This is because the *\\_\\_annotations\\_\\_* BTree is a separate persistent object which has to be loaded into memory, and may push something else out of the ZODB cache.)"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/schema-only-behaviors.rst:125
msgid "If the attribute stores a large value, it will increase memory usage, as it will be loaded into memory each time the object is fetched from the ZODB. However, you should use BLOBs or BTrees to store large values anyway. Loading an object with a BLOB or BTree does not mean loading the entire BLOB or Btree, so the memory overhead does not occur unless the whole BLOB or BTree is actually used."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/behaviors/testing-behaviors.rst:11
msgid "Writing a behavior integration test is not very difficult if you are happy to depend on Dexterity in your test. You can create a dummy type by instantiating a Dexterty FTI in *portal\\_types* and enable your behavior by adding its interface name to the *behaviors* property."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:11
msgid "So far, our types have used the default views, which use the *display* widgets from `z3c.form`_, much like the add and edit forms use the *edit* widgets. This is functional, but not very attractive. Most types will need one or more custom view templates."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:23
msgid "When working with Dexterity, we will typically configure our views using the `five.grok`_ configuration system, eschewing ZCML configuration. Below, we will show how to add simple views for the ``Program`` and ``Speaker`` types. Next, we will show how to use display forms to take advantage of the standard widgets if required."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:29
msgid "The `five.grok`_ view approach uses a class in the content type’s module, which is automatically associated with a template in an accompanying directory. These directories should be created next to the module files, so we will have ``program_templates``, ``presenter_templates`` and ``session_templates``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:35
msgid "(Note for newbies: A view will have update() and render() methods.  We will inherit these, with the result that our view will render a similarly-named page template. If you wanted, you could provide your own update and/or render methods. The sessions() method you will see defined below exists to provide information that will be referenced by the page template.)"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:46
msgid "In ``program.py``, the view is registered as follows:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:65
msgid "This creates a view registration similar to what you may do with a ``<browser:page />`` ZCML directive. We have also added a helper method which will be used in the view. Note that this requires some imports at the top of the file:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:77
msgid "The view registration works as follows:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:79
msgid "The view name will be ``@@view``, taken from the class name in lowercase. You can specify an alternative name with ``grok.name('some-name')`` if required."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:82
msgid "The ``grok.context()`` directive specifies that this view is used for objects providing ``IProgram``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:84
msgid "You can add a ``grok.layer()`` directive if you want to specify a browser layer."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:86
msgid "The ``grok.require()`` directive specifies the required permission for this view. It uses the Zope 3 permission name. ``zope2.View`` and ``zope.Public`` are the most commonly used permissions (in fact, ``zope.Public`` is not actually a permission, it just means “no permission required”). For a list of other standard permissions, see ``parts/omelette/Products/Five/permissions.zcml``. We will cover creating custom permissions later in this manual."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:96
msgid "Any methods added to the view will be available to the template via the ``view`` variable. The content object is available via ``context``, as usual."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:100
msgid "This is associated with a file in ``program_templates/view.pt``. The file name matches the class name (even if a different view name was specified). ``addcontent`` will have created a sampleview.pt file. Just rename it to continue with the example. This contains:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:176
msgid "The view for ``Presenter``, in ``presenter.py``, is even simpler:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:184
msgid "Its template, in ``presenter_templates/view.pt``, is similar to the previous template:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:230
msgid "Display forms"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:234
msgid "In the previous section, we created a view extending ``grok.View``. This kind of view is the most common, but sometimes we want to make use of the widgets and information in the type’s schema more directly, for example to invoke transforms or re-use more complex HTML."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:239
msgid "To do this, you can use a *display form*. This is really just a view base class that knows about the schema of a type. We will use an example in ``session.py``, with a template in ``session_templates/view.pt.``"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:243
msgid "Display forms involve the same type of overhead as add- and edit-forms. If you have complex forms with many behaviors, fieldsets and widget hints, you may notice a slow-down compared to standard views, at least on high volume sites."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:248
msgid "The new view class is pretty much the same as before, except that we derive from ``dexterity.DisplayForm`` (``plone.directives.dexterity.DisplayForm``):"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/custom-views.rst:282
msgid "The ``session_templates/view.pt`` template contains the following:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/index.rst:3
#: ../external/plone.app.dexterity/docs/index.rst:3
msgid "Dexterity Developer Manual"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/index.rst:6
msgid "``Grok`` is no longer part of Plone nor is it recommended to use Grok in Plone. This part of a manual needs a complete rewrite to not use grok. All grok does can be done easily with zcml and standard decorators."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/index.rst:24
#: ../external/plone.app.dexterity/docs/index.rst:19
msgid "Appendixes"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:2
#: ../external/plone.app.dexterity/docs/install.rst:2
msgid "Installing Dexterity"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:4
#: ../external/plone.app.dexterity/docs/install.rst:4
msgid "*How to install Dexterity and use it in your project*"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:6
#: ../external/plone.app.dexterity/docs/install.rst:6
msgid "Dexterity is distributed as a number of eggs, published on `PyPI <http://pypi.python.org>`_. The `plone.app.dexterity <http://pypi.python.org/pypi/plone.app.dexterity>`_ egg pulls in all the required dependencies and should get you up and running. This how-to explains what you need to do use Dexterity in a standard Plone buildout."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:14
#: ../external/plone.app.dexterity/docs/install.rst:14
msgid "Installing Dexterity on Plone 4.3"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:16
#: ../external/plone.app.dexterity/docs/install.rst:16
msgid "Note: Plone 4.3 is the latest release of Plone. Dexterity is included with Plone 4.3, but must be activated via the \"Add-ons\" configlet in site setup."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:19
msgid "**If you wish to follow the examples in this manual, you must do one extra installation step:** activate the `grok` extra for Dexterity. To do so, add the following line to the `eggs` section of yor buildout::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:28
#: ../external/plone.app.dexterity/docs/install.rst:28
msgid "**Important: If you installed Dexterity on a Plone site that you upgraded to Plone 4.3, you must include the relations extra. Otherwise your site will have a broken intid utility.**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:36
#: ../external/plone.app.dexterity/docs/install.rst:36
msgid "eggs ="
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:33
#: ../external/plone.app.dexterity/docs/install.rst:33
msgid "Plone ... plone.app.dexterity [grok,relations]"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:39
#: ../external/plone.app.dexterity/docs/install.rst:39
msgid "Installing Dexterity on Plone 4.2"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:41
#: ../external/plone.app.dexterity/docs/install.rst:41
msgid "Plone 4.2 is the previous stable release of Plone. The Plone KGS (known good set of package versions) includes version pins for the packages that make up Dexterity, so all you need to do is add plone.app.dexterity to the eggs in your buildout, and re-run the buildout::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:65
#: ../external/plone.app.dexterity/docs/install.rst:65
msgid "Note that:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:67
#: ../external/plone.app.dexterity/docs/install.rst:67
msgid "We use the `buildout.dumppickedversions <http://pypi.python.org/pypi/buildout.dumppickedversions>`_ extension to help show what versions buildout picked for any dependencies not pinned in the buildout. This helps trace any dependency issues."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:72
#: ../external/plone.app.dexterity/docs/install.rst:72
msgid "We extend the official Plone release known good set for Plone 4.2.1."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:73
#: ../external/plone.app.dexterity/docs/install.rst:73
msgid "In the instance configuration, we load the *Plone* egg and *plone.app.dexterity*. The latter will pull in all the Dexterity dependencies."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:76
#: ../external/plone.app.dexterity/docs/install.rst:76
msgid "Since *plone.app.dexterity* configures a *z3c.autoinclude* entry point, there is no need to load a separate ZCML slug."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:79
#: ../external/plone.app.dexterity/docs/install.rst:79
msgid "Your own buildout may be more extensive. The developer manual shows a more comprehensive one with some debugging tools, for example. However, the buildout above should be enough for creating types through the web. If you are using a package that itself depends on plone.app.dexterity, then the second eggs line becomes superfluous as well, of course."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:86
#: ../external/plone.app.dexterity/docs/install.rst:86
msgid "Installing Dexterity on older versions of Plone"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:88
#: ../external/plone.app.dexterity/docs/install.rst:88
msgid "Prior to Plone 4.2, the official Plone KGS did not include version pins for the packages that make up Dexterity. Instead, you can extend a KGS from the `good-py service <http://good-py.appspot.com>`_. That looks like this::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:112
#: ../external/plone.app.dexterity/docs/install.rst:112
msgid "Notice that the extends line has been changed to point at good-py and specify both a particular version of Dexterity and a particular version of Plone. good-py returns a set of versions that will work for that combination."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/install.rst:117
#: ../external/plone.app.dexterity/docs/install.rst:117
msgid "Dexterity 1.2.1 is the last version of Dexterity supported for Plone < 4.2. No version of Dexterity is compatible with Plone < 3.3."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:4
#: ../external/plone.app.dexterity/docs/intro.rst:4
msgid "This manual will teach you how to build content types using the Dexterity system."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:6
#: ../external/plone.app.dexterity/docs/intro.rst:6
msgid "If you have decided that Dexterity is for you, and you are a programmer and comfortable working on the filesystem, then this manual is a good place to start."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:9
#: ../external/plone.app.dexterity/docs/intro.rst:9
msgid "This manual will cover:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:11
#: ../external/plone.app.dexterity/docs/intro.rst:11
msgid "Some basic design techniques for solving problems with content types in Plone"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:12
#: ../external/plone.app.dexterity/docs/intro.rst:12
msgid "Getting a Dexterity development environment set up"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:13
#: ../external/plone.app.dexterity/docs/intro.rst:13
msgid "Creating a package to house your types"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:14
#: ../external/plone.app.dexterity/docs/intro.rst:14
msgid "Building a custom type based on a schema"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:15
#: ../external/plone.app.dexterity/docs/intro.rst:15
msgid "Creating custom views and forms for your type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:16
#: ../external/plone.app.dexterity/docs/intro.rst:16
msgid "Advanced customisation, including workflow and security"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:17
#: ../external/plone.app.dexterity/docs/intro.rst:17
msgid "Testing your types"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:18
#: ../external/plone.app.dexterity/docs/intro.rst:18
msgid "A quick reference to common fields, widgets and APIs"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:21
#: ../external/plone.app.dexterity/docs/intro.rst:21
msgid "History"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:24
#: ../external/plone.app.dexterity/docs/intro.rst:24
msgid "Why was Dexterity created?"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:26
#: ../external/plone.app.dexterity/docs/intro.rst:26
msgid "Dexterity was created to serve two audiences: Administrators/integrators, and developers."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:28
#: ../external/plone.app.dexterity/docs/intro.rst:28
msgid "For administrators and integrators, Dexterity offers:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:30
#: ../external/plone.app.dexterity/docs/intro.rst:30
msgid "the ability to create new content types through-the-web"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:31
#: ../external/plone.app.dexterity/docs/intro.rst:31
msgid "the ability to switch on/off various aspects (called \"behaviors\") on a per-type basis"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:32
#: ../external/plone.app.dexterity/docs/intro.rst:32
msgid "improved collaboration between integrators (who may define a type's schema, say) and programmers (who may provide re-usable behaviors that the administrator can plug in)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:34
#: ../external/plone.app.dexterity/docs/intro.rst:34
msgid "For developers, Dexterity promises:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:36
#: ../external/plone.app.dexterity/docs/intro.rst:36
msgid "the ability to create content types more quickly and easily, and with less boilerplate and repetition, than what is possible with Archetypes or plain CMF types"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:37
#: ../external/plone.app.dexterity/docs/intro.rst:37
msgid "content objects with a smaller runtime footprint, to improve performance"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:38
#: ../external/plone.app.dexterity/docs/intro.rst:38
msgid "types that use the now-standard zope.interface/zope.schema style of schema, and more broadly support modern idioms that sit a little awkardly with Archetypes and its ilk"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:41
#: ../external/plone.app.dexterity/docs/intro.rst:41
msgid "How is Dexterity different from Archetypes"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:43
#: ../external/plone.app.dexterity/docs/intro.rst:43
msgid "Dexterity is an alternative to Archetypes, Plone's venerable content type framework. Being more recent, Dexterity has been able to learn from some of the mistakes that were made Archetypes, and - more importantly - leverage some of the technologies that did not exist when Archetypes was first conceived."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:45
#: ../external/plone.app.dexterity/docs/intro.rst:45
msgid "Some of the main differences include:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:47
#: ../external/plone.app.dexterity/docs/intro.rst:47
msgid "Dexterity is able to leverage many technologies that come with newer versions of CMF and Zope 3. This means that the Dexterity framework contains significantly less code than Archetypes. Dexterity also has better automated test coverage."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:48
#: ../external/plone.app.dexterity/docs/intro.rst:48
msgid "Dexterity is more modular where Archetypes is more monolithic. This promises to make it easier to support things like SQL database-backed types, alternative workflow systems, instance-specific sub-types and so on. It also means that many of the components developed for Dexterity, such as the through-the-web schema editor, the \"behaviors\" system, or the forms construction API (plone.autoform) are re-usable in other contexts, e.g. to build standalone forms or even to augment existing Archetypes-based types."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:49
#: ../external/plone.app.dexterity/docs/intro.rst:49
msgid "Archetypes has its own Schema implementation which is incompatible with the interface-based approached found in zope.interface and zope.schema. The latter is used throughout the Zope stack to describe components and build forms. Various techniques exist to bridge the Archetypes schema to the Zope 3 schema notation, but none are particularly attractive."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:50
#: ../external/plone.app.dexterity/docs/intro.rst:50
msgid "Archetypes uses accessor and mutator methods to get/set values. These are generated and scribbled onto a class at startup. Dexterity uses attribute notation, so whereas in Archetypes you may write context.getFirstName(), in Dexterity you would write context.first_name."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:51
#: ../external/plone.app.dexterity/docs/intro.rst:51
msgid "Archetypes has its own implementation of fields and widgets. It is difficult to re-use these in standalone forms or templates, because they are tied to the idea of a content object. Dexterity uses the de-facto standard z3c.form library instead, which means that the widgets used for standalone forms are the same as those used for content type add- and edit forms."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:52
#: ../external/plone.app.dexterity/docs/intro.rst:52
msgid "Archetypes does not support add forms. Dexterity does, via z3c.form. This means that Dexterity types do not need to use the portal_factory hack to avoid stale objects in content space, and are thus significantly faster and less error prone."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:53
#: ../external/plone.app.dexterity/docs/intro.rst:53
msgid "Archetypes requires a chunk of boilerplate in your product's initialize() method (and requires that your package is registered as a Zope 2 product) and elsewhere. It requires a particular sequence of initialisation calls to register content classes, run the class generator to add accessors/mutators, and set up permissions. Dexterity does away with all that boilerplate, and tries to minimise repetition."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:54
#: ../external/plone.app.dexterity/docs/intro.rst:54
msgid "It is possible to extend the schemata of existing Archetypes types with the archetypes.schemaextender product, although this adds some performance overhead and relies on a somewhat awkward programming technique. Dexterity types were built to be extensible from the beginning, and it is possible to declaratively turn on or off aspects of a type (such as Dublin Core metadata, locking support, ratings, tagging, etc) with re-usable \"behaviors\"."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:55
#: ../external/plone.app.dexterity/docs/intro.rst:55
msgid "Dexterity is built from the ground up to support through-the-web type creation. There are products that achieve the same thing with Archetypes types, but they have to work around a number of limitations in the design of Archetypes that make them somewhat brittle or slow. Dexterity also allows types to be developed jointly through-the-web and on the filesystem. For example, a schema can be written in Python and then extended through the web."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:57
#: ../external/plone.app.dexterity/docs/intro.rst:57
msgid "All that said, Archetypes is still an older and more mature framework. Dexterity is a viable alternative to Archetypes in many projects, but if you are happy with Archetypes, you should not immediately rush to rewrite your types to use Dexterity."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/intro.rst:59
#: ../external/plone.app.dexterity/docs/intro.rst:59
msgid "There are also some things that Dexterity does not yet support, or, more commonly, services that Plone ships with that currently assume all content objects are built using Archetypes. The current list of \"gaps\" can be found in the Dexterity issue tracker. You should take a look at this before deciding whether Dexterity will work for you. If in doubt, don't hesitate to write to the Dexterity mailing list and ask for advice."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:2
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:2
msgid "Model-driven types"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:4
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:4
msgid "In the previous section, we defined two types by using Zope schema. In this section, we're going to define a type's fields using an XML model file."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:7
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:7
msgid "The great advantage of using a model file is that we can prototype the content type in Dexterity's through-the-web field editor, then export the XML model file for incorporation into our package."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:11
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:11
msgid "XML may be used to do pretty much anything you could do via Zope schema. Many users not already schooled in Zope schema will find this by far the easiest and fastest way to create Dexterity content types."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:16
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:16
msgid "Adding the type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:18
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:18
msgid "As in the previous section, we'll use ``addcontent`` to add our content type to the project. This type will be for conference presenters."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:31
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:31
msgid "Setting the field model"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:33
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:33
msgid "Look in ``example.conference/example/conference/models/presenter.xml`` for a bare model file created by addcontent. Let's elaborate it:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:63
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:63
msgid "The XML name spaces we use are described in the `Dexterity XML` reference section."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:66
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:66
msgid "That's all we need! To see why, look in the generated file ``presenter.py``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:84
msgid "Note the model.load directive. We'd deleted that when we created schema-driven field sets. Now, we leave it in to automatically load our model file."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:87
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:86
msgid "Setting Factory Type Information"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:89
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:88
msgid "This part of the process is identical to what we explained for schema-driven type."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:92
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:91
msgid "Look in the ``types.xml`` file in your packages ``example/conference/profiles/default`` directory. It should now contain:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:104
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:103
msgid "For the *Presenter* type, we have ``example.conference.presenter.xml``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/model-driven-types.rst:160
#: ../external/plone.app.dexterity/docs/model-driven-types.rst:159
msgid "Note that this is addable anywhere."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:4
#: ../external/plone.app.dexterity/docs/prerequisite.rst:4
msgid "**Setting up a Dexterity project**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:7
#: ../external/plone.app.dexterity/docs/prerequisite.rst:7
msgid "Preparing a development environment"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:9
#: ../external/plone.app.dexterity/docs/prerequisite.rst:9
msgid "First, get a working Plone installation. If you don't already have one, the easiest way to do so is to use one of Plone's installers. Note that for development purposes, you may use a `standalone` (non-ZEO), non-root install."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:13
#: ../external/plone.app.dexterity/docs/prerequisite.rst:13
msgid "Second, add our standard development tools. If you've used one of our installers, developer tool configurations are in a separate file, ``develop.cfg``. Once your site is running, you may activate the development configuration by using the command::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:20
#: ../external/plone.app.dexterity/docs/prerequisite.rst:20
msgid "rather than simply running ``bin/buildout``. The `develop.cfg` config file extends the existing buildout.cfg."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:23
#: ../external/plone.app.dexterity/docs/prerequisite.rst:23
msgid "If you've created yor own buildout.cfg file rather than using one of the installers, you'll need to add an equivalent development configuration. The easiest way to do so is to pick up a copy from the `Unified Installer's github repository <https://github.com/plone/Installers-UnifiedInstaller/blob/master/base_skeleton/develop.cfg>`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:27
#: ../external/plone.app.dexterity/docs/prerequisite.rst:27
msgid "The key tools that you'll need, both supplied by develop.cfg, are:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:29
#: ../external/plone.app.dexterity/docs/prerequisite.rst:29
msgid "A ZopeSkel configuration to supply a package skeleton builder; and"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:30
#: ../external/plone.app.dexterity/docs/prerequisite.rst:30
msgid "A test runner."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:34
#: ../external/plone.app.dexterity/docs/prerequisite.rst:34
msgid "If you are using Plone earlier than 4.3, you'll need to add `zopeskel.dexterity` to the eggs list for the zopeskel part. This supplies the Dexterity skeleton."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:39
#: ../external/plone.app.dexterity/docs/prerequisite.rst:39
msgid "Creating a package"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:41
#: ../external/plone.app.dexterity/docs/prerequisite.rst:41
msgid "**Setting up a package to house your content types**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:45
#: ../external/plone.app.dexterity/docs/prerequisite.rst:45
msgid "We're going to build a package named example.conference. You may find a completed version of it in the `Collective repository <https://github.com/collective/example.conference>`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:49
#: ../external/plone.app.dexterity/docs/prerequisite.rst:49
msgid "Typically, our content types will live in a separate package to our theme and other customisations."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:52
#: ../external/plone.app.dexterity/docs/prerequisite.rst:52
msgid "To create a new package, we can start with *ZopeSkel* and the ``dexterity`` template."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:57
#: ../external/plone.app.dexterity/docs/prerequisite.rst:57
msgid "Nothing that we're doing actually requires ZopeSkel or the zopeskel.dexterity skeleton package. It's just a quick way of getting started."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:59
#: ../external/plone.app.dexterity/docs/prerequisite.rst:59
msgid "We run the following from the ``src/`` directory"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:65
#: ../external/plone.app.dexterity/docs/prerequisite.rst:65
msgid "You may accept all the default suggestions. This will create a directory named ``example.conference`` inside ./src."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:68
#: ../external/plone.app.dexterity/docs/prerequisite.rst:68
msgid "Now, take a look at the setup.py file in your new package. Edit the `author,` `author_email` and `description` fields as you wish. Note a couple of parts of the generated setup.py file::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:84
msgid "The addition of `plone.app.dexterity [grok]` to our install requirements assures that we'll have dexterity loaded with the `grok` extra. Our example code won't work without it. The specification of `plone` as a z3c.autoinclude.plugin entry point ensures that we won't need to separately specify our zcml in buildout."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:90
#: ../external/plone.app.dexterity/docs/prerequisite.rst:90
msgid "Now, let's take a look at ``configure.zcml`` in the examples/conference directory of our project. Again, we want to note a few parts::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:112
#: ../external/plone.app.dexterity/docs/prerequisite.rst:110
msgid "Here, with the ``includeDependencies`` tag we automatically include the ZCML configuration for all packages listed under ``install_requires`` in ``setup.py``. The alternative would be to manually add a line like ``<include package=\"plone.app.dexterity\" />`` for each dependency."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:117
msgid "Next, we *grok* the package to construct and register schemata, views, forms and so on based on conventions used in the various files we will add throughout this tutorial."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:121
#: ../external/plone.app.dexterity/docs/prerequisite.rst:115
msgid "The ``browser.resourceDirectory`` command creates a directory for static resources that we want to make available through the web."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:123
#: ../external/plone.app.dexterity/docs/prerequisite.rst:117
msgid "Finally, we register a GenericSetup profile to make the type installable, which we will build up over the next several sections."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:126
#: ../external/plone.app.dexterity/docs/prerequisite.rst:120
msgid "When you've got your project tuned up, return to your buildout/instance directory and edit buildout.cfg to add ``example.conference`` to your eggs list and ``src/example.conference`` to your develop sources list::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:138
#: ../external/plone.app.dexterity/docs/prerequisite.rst:132
msgid "Run ``bin/buildout -c develop.cfg`` to add your new product to the configuration. (Or, just bin/buildout if you don't have a separate develop.cfg.)"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:141
#: ../external/plone.app.dexterity/docs/prerequisite.rst:135
msgid "The buildout should now configure Plone, Dexterity and the *example.conference* package."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/prerequisite.rst:144
#: ../external/plone.app.dexterity/docs/prerequisite.rst:138
msgid "We are now ready to start adding types."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:2
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:2
msgid "Dexterity XML"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:4
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:4
msgid "**A reference for Dexterity's XML name spaces**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:9
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:9
msgid "The schema (structure) of a Dexterity content type may be detailed in two very different ways:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:12
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:11
msgid "In Python as a Zope schema; or,"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:14
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:13
msgid "In XML"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:16
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:15
msgid "When you are using Dexterity's through-the-web schema editor, all your work is being saved in the content type's Factory Type Information (FTI) as XML. ``plone.supermodel`` dynamically translates that XML into Python objects which are used to display and edit your content objects."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:21
msgid "The XML model of your content object may be exported from Dexterity and incorporated into a Python package. That's typically done with code like::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:28
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:28
msgid "or::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:34
msgid "XML models in a package may be directly edited. (Dexterity will probably also include a TTW XML-model editor at some point in the future.)"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:37
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:36
msgid "This document is a reference to the tags and attributes you may use in model XML files. This includes several form-control and security-control attributes that are not available through the TTW schema editor."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:42
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:40
msgid "XML Document Structure"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:44
msgid "Dexterity requires that its model XML be well-formed XML, including name space declarations. The typical structure of a Dexterity XML document is::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:60
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:60
msgid "Only the default name space (.../supermodel/schema) is required for basic schema. The ``supermodel/form`` and ``supermodel/schema`` provide additional attributes to control form presentation and security."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:65
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:64
msgid "supermodel/schema fields"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:67
msgid "Most of the supermodel/schema field tag and its attributes map directly to what's available via the TTW schema editor::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:80
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:81
msgid "The field ``type`` needs to be the full dotted name (as if it was being imported in Python) of the field type."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:84
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:84
msgid "Fieldsets"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:86
msgid "It's easy to add fieldsets by surrounding embedding fields tags in a ``fieldset`` block::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:109
msgid "Vocabularies may be specified via dotted names using the ``source`` tag::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:121
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:125
msgid "Where the full Python dotted-name of a Zope vocabulary in a package::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:127
msgid "Or, a source binder::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:135
msgid "With Python like::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:147
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:155
msgid "You may also use the ``vocabulary`` tag rather than ``source`` to refer to named vocabularies registered via the ZCA."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:151
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:159
msgid "Internationalization"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:153
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:161
msgid "Translation domains and message ids can be specified for text that is interpreted as unicode. This will result in deserialization as a zope.i18nmessageid message id rather than a basic Unicode string."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:157
msgid "Note that we need to add the i18n namespace and a domain specification::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:173
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:183
msgid "supermodel/form attributes"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:175
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:185
msgid "supermodel/form provides attributes that govern presentation and editing."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:178
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:188
msgid "after/before"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:180
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:190
msgid "To re-order fields, use ``form:after`` or ``form:before``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:182
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:192
msgid "The value should be either ``'*'``, to put the field first/last in the form, or the name of a another field. Use ``'.fieldname'`` to refer to field in the current schema (or a base schema). Use a fully prefixed name (e.g. ``'my.package.ISomeSchema'``) to refer to a field in another schema. Use an unprefixed name to refer to a field in the default schema for the form."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:188
#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:203
#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:243
#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:260
#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:292
#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:320
msgid "Example::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:197
#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:51
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:209
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:49
msgid "mode"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:199
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:211
msgid "To turn a field into a view mode or hidden field, use ``form:mode``.  The mode may be set for only some forms by specifying a form interface in the same manner as for ``form:omitted``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:213
#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:49
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:227
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:47
msgid "omitted"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:215
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:229
msgid "To omit a field from all forms, use ``form:omitted=\"true\"``.  To omit a field only from some forms, specify a form interface like ``form:omitted=\"z3c.form.interfaces.IForm:true\"``. Multiple interface:value settings may be specified, separated by spaces."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:220
msgid "Examples::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:234
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:250
msgid "The latter example hides the field on everything except the edit form."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:238
#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:47
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:254
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:45
msgid "widget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:240
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:256
msgid "To set a custom widget for a field, use ``form:widget`` to give a fully qualified name to the field widget factory."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:253
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:271
msgid "Dynamic Defaults"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:255
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:273
msgid "To set a dynamic default for a field, use a ``defaultFactory`` tag to give a fully qualified name for a callable. The defaultFactory callable must provide either plone.supermodel.interfaces.IDefaultFactory or zope.schema.interfaces.IContextAwareDefaultFactory."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:267
#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:300
msgid "Sample Python for the validator factory::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:273
msgid "For a callable using context::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:281
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:305
msgid "The ``defaultFactory`` tag was added in plone.supermodel 1.2.3, shipping with Plone 4.3.2+."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:286
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:310
msgid "validator"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:288
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:312
msgid "To set a custom validator for a field, use ``form:validator`` to give a fully qualified name to the field validator factory. The validator factory should be a class derived from one of the validators in z3c.form.validator."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:311
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:339
msgid "supermodel/security attributes"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:314
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:342
msgid "read-permission/write-permission"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/dexterity-xml.rst:316
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:344
msgid "To set a read or write permission, use ``security:read-permission`` or ``security:write-permission``. The value should be the name of an ``IPermission`` utility."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:2
#: ../external/plone.app.dexterity/docs/reference/fields.rst:2
msgid "Fields"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:4
#: ../external/plone.app.dexterity/docs/reference/fields.rst:4
msgid "**The standard schema fields**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:6
#: ../external/plone.app.dexterity/docs/reference/fields.rst:6
msgid "The following tables shows the most common field types for use in Dexterity schemata. See the documentation on `creating schemata`_ for information about how to use these."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:12
#: ../external/plone.app.dexterity/docs/reference/fields.rst:12
msgid "Field properties"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:14
#: ../external/plone.app.dexterity/docs/reference/fields.rst:14
msgid "Fields are initialised with properties passed in their constructors. To avoid having to repeat the available properties for each field, we’ll list them once here, grouped into the interfaces that describe them. You’ll see those interfaces again in the tables below that describe the various field types. Refer to the table below to see what properties a particular interface implies."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:23
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:65
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:122
#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:11
#: ../external/plone.app.dexterity/docs/reference/fields.rst:23
#: ../external/plone.app.dexterity/docs/reference/fields.rst:65
#: ../external/plone.app.dexterity/docs/reference/fields.rst:122
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:11
msgid "Interface"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:23
#: ../external/plone.app.dexterity/docs/reference/fields.rst:23
msgid "Property"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:23
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:91
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:134
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:152
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:165
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:359
#: ../external/plone.app.dexterity/docs/reference/fields.rst:23
#: ../external/plone.app.dexterity/docs/reference/fields.rst:91
#: ../external/plone.app.dexterity/docs/reference/fields.rst:134
#: ../external/plone.app.dexterity/docs/reference/fields.rst:152
#: ../external/plone.app.dexterity/docs/reference/fields.rst:165
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:363
msgid "Type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:25
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:104
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:122
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:136
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:138
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:140
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:142
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:154
#: ../external/plone.app.dexterity/docs/reference/fields.rst:25
#: ../external/plone.app.dexterity/docs/reference/fields.rst:104
#: ../external/plone.app.dexterity/docs/reference/fields.rst:122
#: ../external/plone.app.dexterity/docs/reference/fields.rst:136
#: ../external/plone.app.dexterity/docs/reference/fields.rst:138
#: ../external/plone.app.dexterity/docs/reference/fields.rst:140
#: ../external/plone.app.dexterity/docs/reference/fields.rst:142
#: ../external/plone.app.dexterity/docs/reference/fields.rst:154
msgid "IField"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:25
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:381
#: ../external/plone.app.dexterity/docs/reference/fields.rst:25
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:385
msgid "title"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:25
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:26
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:101
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:103
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:111
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:116
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:361
#: ../external/plone.app.dexterity/docs/reference/fields.rst:25
#: ../external/plone.app.dexterity/docs/reference/fields.rst:26
#: ../external/plone.app.dexterity/docs/reference/fields.rst:101
#: ../external/plone.app.dexterity/docs/reference/fields.rst:103
#: ../external/plone.app.dexterity/docs/reference/fields.rst:111
#: ../external/plone.app.dexterity/docs/reference/fields.rst:116
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:365
msgid "unicode"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:25
#: ../external/plone.app.dexterity/docs/reference/fields.rst:25
msgid "The title of the field. Used in the widget."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:26
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:27
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:29
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:31
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:35
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:41
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:47
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:55
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:62
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:69
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:76
#: ../external/plone.app.dexterity/docs/reference/fields.rst:26
#: ../external/plone.app.dexterity/docs/reference/fields.rst:27
#: ../external/plone.app.dexterity/docs/reference/fields.rst:29
#: ../external/plone.app.dexterity/docs/reference/fields.rst:31
#: ../external/plone.app.dexterity/docs/reference/fields.rst:35
#: ../external/plone.app.dexterity/docs/reference/fields.rst:41
#: ../external/plone.app.dexterity/docs/reference/fields.rst:47
#: ../external/plone.app.dexterity/docs/reference/fields.rst:55
#: ../external/plone.app.dexterity/docs/reference/fields.rst:62
#: ../external/plone.app.dexterity/docs/reference/fields.rst:69
#: ../external/plone.app.dexterity/docs/reference/fields.rst:76
msgid "\\"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:26
#: ../external/plone.app.dexterity/docs/reference/fields.rst:26
msgid "description"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:26
#: ../external/plone.app.dexterity/docs/reference/fields.rst:26
msgid "A description for the field. Used in the widget."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:27
#: ../external/plone.app.dexterity/docs/reference/fields.rst:27
msgid "required"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:27
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:29
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:55
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:104
#: ../external/plone.app.dexterity/docs/reference/fields.rst:27
#: ../external/plone.app.dexterity/docs/reference/fields.rst:29
#: ../external/plone.app.dexterity/docs/reference/fields.rst:55
#: ../external/plone.app.dexterity/docs/reference/fields.rst:104
msgid "bool"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:27
#: ../external/plone.app.dexterity/docs/reference/fields.rst:27
msgid "Whether or not the field is required. Used for form validation. The default is ``True``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:29
#: ../external/plone.app.dexterity/docs/reference/fields.rst:29
msgid "readonly"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:29
#: ../external/plone.app.dexterity/docs/reference/fields.rst:29
msgid "Whether or not the field is read-only. Default is ``False``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:31
#: ../external/plone.app.dexterity/docs/reference/fields.rst:31
msgid "default"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:31
#: ../external/plone.app.dexterity/docs/reference/fields.rst:31
msgid "The default value for the field. Used in forms and sometimes as a fallback value. Must be a valid value for the field if set. The default is ``None``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:35
#: ../external/plone.app.dexterity/docs/reference/fields.rst:35
msgid "missing_value"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:35
#: ../external/plone.app.dexterity/docs/reference/fields.rst:35
msgid "A value that represents \"this field is not set\". Used by form validation. Defaults to ``None``. For lists and tuples, it is sometimes useful to set this to an empty list/tuple."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:39
#: ../external/plone.app.dexterity/docs/reference/fields.rst:39
msgid "IMinMaxLen"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:39
#: ../external/plone.app.dexterity/docs/reference/fields.rst:39
msgid "min_length"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:39
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:41
#: ../external/plone.app.dexterity/docs/reference/fields.rst:39
#: ../external/plone.app.dexterity/docs/reference/fields.rst:41
msgid "int"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:39
#: ../external/plone.app.dexterity/docs/reference/fields.rst:39
msgid "The minimum required length. Used for string fields. Default is ``0``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:41
#: ../external/plone.app.dexterity/docs/reference/fields.rst:41
msgid "max_length"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:41
#: ../external/plone.app.dexterity/docs/reference/fields.rst:41
msgid "The maximum allowed length. Used for string fields. Default is ``None`` (no check)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:43
#: ../external/plone.app.dexterity/docs/reference/fields.rst:43
msgid "IMinMax"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:43
#: ../external/plone.app.dexterity/docs/reference/fields.rst:43
msgid "min"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:43
#: ../external/plone.app.dexterity/docs/reference/fields.rst:43
msgid "The minimum allowed value. Must be a valid value for the field, e.g. for an ``Int`` field this should be an integer. Default is ``None`` (no check)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:47
#: ../external/plone.app.dexterity/docs/reference/fields.rst:47
msgid "max"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:47
#: ../external/plone.app.dexterity/docs/reference/fields.rst:47
msgid "The maximum allowed value. Must be a valid value for the field, e.g. for an Int field this should be an integer. Default is ``None`` (no check)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:50
#: ../external/plone.app.dexterity/docs/reference/fields.rst:50
msgid "ICollection"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:50
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:62
#: ../external/plone.app.dexterity/docs/reference/fields.rst:50
#: ../external/plone.app.dexterity/docs/reference/fields.rst:62
msgid "value_type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:50
#: ../external/plone.app.dexterity/docs/reference/fields.rst:50
msgid "Another ``Field`` instance that describes the allowable values in a list, tuple or other collection. Must be set for any collection field. One common usage is to set this to a ``Choice``, to model a multi-selection field with a vocabulary."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:55
#: ../external/plone.app.dexterity/docs/reference/fields.rst:55
msgid "unique"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:55
#: ../external/plone.app.dexterity/docs/reference/fields.rst:55
msgid "Whether or not values in the collection must be unique. Usually not set directly – use a ``Set`` or ``Frozenset`` to guarantee uniqueness in an efficient way."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:59
#: ../external/plone.app.dexterity/docs/reference/fields.rst:59
msgid "IDict"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:59
#: ../external/plone.app.dexterity/docs/reference/fields.rst:59
msgid "key_type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:59
#: ../external/plone.app.dexterity/docs/reference/fields.rst:59
msgid "Another ``Field`` instance that describes the allowable keys in a dictionary. Similar to the ``value_type`` of a collection. Must be set."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:62
#: ../external/plone.app.dexterity/docs/reference/fields.rst:62
msgid "Another ``Field`` instance that describes the allowable values in a dictionary. Similar to the ``value_type`` of a collection. Must be set."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:65
#: ../external/plone.app.dexterity/docs/reference/fields.rst:65
msgid "IObject"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:65
#: ../external/plone.app.dexterity/docs/reference/fields.rst:65
msgid "schema"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:65
#: ../external/plone.app.dexterity/docs/reference/fields.rst:65
msgid "An interface that must be provided by any object stored in this field."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:67
#: ../external/plone.app.dexterity/docs/reference/fields.rst:67
msgid "IRichText"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:67
#: ../external/plone.app.dexterity/docs/reference/fields.rst:67
msgid "default_mime_type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:67
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:69
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:96
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:97
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:98
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:100
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:119
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:120
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:121
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:363
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:365
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:369
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:371
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:373
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:375
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:379
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:387
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:395
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:397
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:399
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:401
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:403
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:405
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:407
#: ../external/plone.app.dexterity/docs/reference/fields.rst:67
#: ../external/plone.app.dexterity/docs/reference/fields.rst:69
#: ../external/plone.app.dexterity/docs/reference/fields.rst:96
#: ../external/plone.app.dexterity/docs/reference/fields.rst:97
#: ../external/plone.app.dexterity/docs/reference/fields.rst:98
#: ../external/plone.app.dexterity/docs/reference/fields.rst:100
#: ../external/plone.app.dexterity/docs/reference/fields.rst:119
#: ../external/plone.app.dexterity/docs/reference/fields.rst:120
#: ../external/plone.app.dexterity/docs/reference/fields.rst:121
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:367
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:369
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:373
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:375
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:377
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:379
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:383
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:391
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:399
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:401
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:403
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:405
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:407
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:409
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:411
msgid "str"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:67
#: ../external/plone.app.dexterity/docs/reference/fields.rst:67
msgid "Default MIME type for the input text of a rich text field. Defaults to ``text/html``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:69
#: ../external/plone.app.dexterity/docs/reference/fields.rst:69
msgid "output_mime_type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:69
#: ../external/plone.app.dexterity/docs/reference/fields.rst:69
msgid "Default output MIME type for the transformed value of a rich text field. Defaults to ``text/x-html-safe``. There must be a transformation chain in the ``portal_transforms`` tool that can transform from the input value to the ``output`` value for the output property of the ``RichValue`` object to contain a value."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:76
#: ../external/plone.app.dexterity/docs/reference/fields.rst:76
msgid "allowed_mime_types"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:76
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:107
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:377
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:385
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:389
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:393
#: ../external/plone.app.dexterity/docs/reference/fields.rst:76
#: ../external/plone.app.dexterity/docs/reference/fields.rst:107
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:381
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:389
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:393
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:397
msgid "tuple"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:76
#: ../external/plone.app.dexterity/docs/reference/fields.rst:76
msgid "A list of allowed input MIME types. The default is ``None``, in which case the site-wide settings (from the ``Markup`` control panel) will be used."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:82
#: ../external/plone.app.dexterity/docs/reference/fields.rst:82
msgid "Field types"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:84
#: ../external/plone.app.dexterity/docs/reference/fields.rst:84
msgid "The following tables describe the most commonly used field types, grouped by the module from which they can be imported."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:88
#: ../external/plone.app.dexterity/docs/reference/fields.rst:88
msgid "Fields in zope.schema"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:91
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:134
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:152
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:165
#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:45
#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:131
#: ../external/plone.app.dexterity/docs/reference/fields.rst:91
#: ../external/plone.app.dexterity/docs/reference/fields.rst:134
#: ../external/plone.app.dexterity/docs/reference/fields.rst:152
#: ../external/plone.app.dexterity/docs/reference/fields.rst:165
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:43
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:135
msgid "Name"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:91
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:134
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:152
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:165
#: ../external/plone.app.dexterity/docs/reference/fields.rst:91
#: ../external/plone.app.dexterity/docs/reference/fields.rst:134
#: ../external/plone.app.dexterity/docs/reference/fields.rst:152
#: ../external/plone.app.dexterity/docs/reference/fields.rst:165
#: ../external/plone.app.testing/README.rst:1075
#: ../external/plone.app.testing/docs/source/README.rst:1075
msgid "Properties"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:93
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:18
#: ../external/plone.app.dexterity/docs/reference/fields.rst:93
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:18
msgid "Choice"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:93
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:117
#: ../external/plone.app.dexterity/docs/reference/fields.rst:93
#: ../external/plone.app.dexterity/docs/reference/fields.rst:117
msgid "N/A"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:93
#: ../external/plone.app.dexterity/docs/reference/fields.rst:93
msgid "Used to model selection from a vocabulary, which must be supplied. Often used as the ``value_type`` of a selection field. The value type is the value of the terms in the vocabulary."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:93
#: ../external/plone.app.dexterity/docs/reference/fields.rst:93
msgid "See `vocabularies`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:96
#: ../external/plone.app.dexterity/docs/reference/fields.rst:96
msgid "Bytes"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:96
#: ../external/plone.app.dexterity/docs/reference/fields.rst:96
msgid "Used for binary data."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:96
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:97
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:98
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:100
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:101
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:103
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:111
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:116
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:120
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:121
#: ../external/plone.app.dexterity/docs/reference/fields.rst:96
#: ../external/plone.app.dexterity/docs/reference/fields.rst:97
#: ../external/plone.app.dexterity/docs/reference/fields.rst:98
#: ../external/plone.app.dexterity/docs/reference/fields.rst:100
#: ../external/plone.app.dexterity/docs/reference/fields.rst:101
#: ../external/plone.app.dexterity/docs/reference/fields.rst:103
#: ../external/plone.app.dexterity/docs/reference/fields.rst:111
#: ../external/plone.app.dexterity/docs/reference/fields.rst:116
#: ../external/plone.app.dexterity/docs/reference/fields.rst:120
#: ../external/plone.app.dexterity/docs/reference/fields.rst:121
msgid "IField, IMinMaxLen"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:97
#: ../external/plone.app.dexterity/docs/reference/fields.rst:97
msgid "ASCII"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:97
#: ../external/plone.app.dexterity/docs/reference/fields.rst:97
msgid "ASCII text (multi-line)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:98
#: ../external/plone.app.dexterity/docs/reference/fields.rst:98
msgid "BytesLine"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:98
#: ../external/plone.app.dexterity/docs/reference/fields.rst:98
msgid "A single line of binary data, i.e. a ``Bytes`` with newlines disallowed."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:100
#: ../external/plone.app.dexterity/docs/reference/fields.rst:100
msgid "ASCIILine"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:100
#: ../external/plone.app.dexterity/docs/reference/fields.rst:100
msgid "A single line of ASCII text."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:101
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:16
#: ../external/plone.app.dexterity/docs/reference/fields.rst:101
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:16
msgid "Text"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:101
#: ../external/plone.app.dexterity/docs/reference/fields.rst:101
msgid "Unicode text (multi-line). Often used with a WYSIWYG widget, although the default is a text area."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:103
#: ../external/plone.app.dexterity/docs/reference/fields.rst:103
msgid "TextLine"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:103
#: ../external/plone.app.dexterity/docs/reference/fields.rst:103
msgid "A single line of Unicode text."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:104
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:25
#: ../external/plone.app.dexterity/docs/reference/fields.rst:104
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:25
msgid "Bool"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:104
#: ../external/plone.app.dexterity/docs/reference/fields.rst:104
msgid "``True`` or ``False``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:105
#: ../external/plone.app.dexterity/docs/reference/fields.rst:105
msgid "Int"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:105
#: ../external/plone.app.dexterity/docs/reference/fields.rst:105
msgid "int, long"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:105
#: ../external/plone.app.dexterity/docs/reference/fields.rst:105
msgid "An integer number. Both ints and longs are allowed."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:105
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:106
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:113
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:114
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:115
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:123
#: ../external/plone.app.dexterity/docs/reference/fields.rst:105
#: ../external/plone.app.dexterity/docs/reference/fields.rst:106
#: ../external/plone.app.dexterity/docs/reference/fields.rst:113
#: ../external/plone.app.dexterity/docs/reference/fields.rst:114
#: ../external/plone.app.dexterity/docs/reference/fields.rst:115
#: ../external/plone.app.dexterity/docs/reference/fields.rst:123
msgid "IField, IMinMax"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:106
#: ../external/plone.app.dexterity/docs/reference/fields.rst:106
msgid "Float"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:106
#: ../external/plone.app.dexterity/docs/reference/fields.rst:106
msgid "float"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:106
#: ../external/plone.app.dexterity/docs/reference/fields.rst:106
msgid "A floating point number."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:107
#: ../external/plone.app.dexterity/docs/reference/fields.rst:107
msgid "Tuple"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:107
#: ../external/plone.app.dexterity/docs/reference/fields.rst:107
msgid "A tuple (non-mutable)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:107
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:108
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:109
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:110
#: ../external/plone.app.dexterity/docs/reference/fields.rst:107
#: ../external/plone.app.dexterity/docs/reference/fields.rst:108
#: ../external/plone.app.dexterity/docs/reference/fields.rst:109
#: ../external/plone.app.dexterity/docs/reference/fields.rst:110
msgid "IField, ICollection, IMinMaxLen"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:108
#: ../external/plone.app.dexterity/docs/reference/fields.rst:108
msgid "List"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:108
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:155
#: ../external/plone.app.dexterity/docs/reference/fields.rst:108
#: ../external/plone.app.dexterity/docs/reference/fields.rst:155
msgid "list"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:108
#: ../external/plone.app.dexterity/docs/reference/fields.rst:108
msgid "A list."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:109
#: ../external/plone.app.dexterity/docs/reference/fields.rst:109
msgid "Set"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:109
#: ../external/plone.app.dexterity/docs/reference/fields.rst:109
msgid "set"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:109
#: ../external/plone.app.dexterity/docs/reference/fields.rst:109
msgid "A set."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:110
#: ../external/plone.app.dexterity/docs/reference/fields.rst:110
msgid "Frozenset"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:110
#: ../external/plone.app.dexterity/docs/reference/fields.rst:110
msgid "frozenset"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:110
#: ../external/plone.app.dexterity/docs/reference/fields.rst:110
msgid "A frozenset (non-mutable)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:111
#: ../external/plone.app.dexterity/docs/reference/fields.rst:111
msgid "Password"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:111
#: ../external/plone.app.dexterity/docs/reference/fields.rst:111
msgid "Stores a simple string, but implies a password widget."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:112
#: ../external/plone.app.dexterity/docs/reference/fields.rst:112
msgid "Dict"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:112
#: ../external/plone.app.dexterity/docs/reference/fields.rst:112
msgid "dict"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:112
#: ../external/plone.app.dexterity/docs/reference/fields.rst:112
msgid "Stores a dictionary. Both ``key_type`` and ``value_type`` must be set to fields."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:112
#: ../external/plone.app.dexterity/docs/reference/fields.rst:112
msgid "IField, IMinMaxLen, IDict"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:113
#: ../external/plone.app.dexterity/docs/reference/fields.rst:113
msgid "Datetime"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:113
#: ../external/plone.app.dexterity/docs/reference/fields.rst:113
msgid "datetime"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:113
#: ../external/plone.app.dexterity/docs/reference/fields.rst:113
msgid "Stores a Python ``datetime`` (not a Zope 2 ``DateTime``)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:114
#: ../external/plone.app.dexterity/docs/reference/fields.rst:114
msgid "Date"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:114
#: ../external/plone.app.dexterity/docs/reference/fields.rst:114
msgid "date"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:114
#: ../external/plone.app.dexterity/docs/reference/fields.rst:114
msgid "Stores a python ``date``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:115
#: ../external/plone.app.dexterity/docs/reference/fields.rst:115
msgid "Timedelta"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:115
#: ../external/plone.app.dexterity/docs/reference/fields.rst:115
msgid "timedelta"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:115
#: ../external/plone.app.dexterity/docs/reference/fields.rst:115
msgid "Stores a python ``timedelta``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:116
#: ../external/plone.app.dexterity/docs/reference/fields.rst:116
msgid "SourceText"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:116
#: ../external/plone.app.dexterity/docs/reference/fields.rst:116
msgid "A textfield intended to store source text (e.g. HTML or Python code)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:117
#: ../external/plone.app.dexterity/docs/reference/fields.rst:117
msgid "Object"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:117
#: ../external/plone.app.dexterity/docs/reference/fields.rst:117
msgid "Stores a Python object that conforms to the interface given as the ``schema``. There is no standard widget for this."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:117
#: ../external/plone.app.dexterity/docs/reference/fields.rst:117
msgid "IField, IObject"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:119
#: ../external/plone.app.dexterity/docs/reference/fields.rst:119
msgid "URI"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:119
#: ../external/plone.app.dexterity/docs/reference/fields.rst:119
msgid "A URI (URL) string."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:119
#: ../external/plone.app.dexterity/docs/reference/fields.rst:119
msgid "IField, MinMaxLen"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:120
#: ../external/plone.app.dexterity/docs/reference/fields.rst:120
msgid "Id"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:120
#: ../external/plone.app.dexterity/docs/reference/fields.rst:120
msgid "A unique identifier – either a URI or a dotted name."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:121
#: ../external/plone.app.dexterity/docs/reference/fields.rst:121
msgid "DottedName"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:121
#: ../external/plone.app.dexterity/docs/reference/fields.rst:121
msgid "A dotted name string."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:122
#: ../external/plone.app.dexterity/docs/reference/fields.rst:122
msgid "InterfaceField"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:122
#: ../external/plone.app.dexterity/docs/reference/fields.rst:122
msgid "A Zope interface."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:123
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:123
#: ../external/plone.app.dexterity/docs/reference/fields.rst:123
#: ../external/plone.app.dexterity/docs/reference/fields.rst:123
msgid "Decimal"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:123
#: ../external/plone.app.dexterity/docs/reference/fields.rst:123
msgid "Stores a Python ``Decimal``. Requires version 3.4 or later of `zope.schema`_. Not available by default in Zope 2.10."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:128
#: ../external/plone.app.dexterity/docs/reference/fields.rst:128
msgid "Fields in ``plone.namedfile.field``"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:130
#: ../external/plone.app.dexterity/docs/reference/fields.rst:130
msgid "See `plone.namedfile`_ and `plone.formwidget.namedfile`_ for more details."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:136
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:136
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:22
#: ../external/plone.app.dexterity/docs/reference/fields.rst:136
#: ../external/plone.app.dexterity/docs/reference/fields.rst:136
msgid "NamedFile"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:136
#: ../external/plone.app.dexterity/docs/reference/fields.rst:136
msgid "A binary uploaded file. Normally used with the widget from `plone.formwidget.namedfile`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:138
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:138
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:23
#: ../external/plone.app.dexterity/docs/reference/fields.rst:138
#: ../external/plone.app.dexterity/docs/reference/fields.rst:138
msgid "NamedImage"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:138
#: ../external/plone.app.dexterity/docs/reference/fields.rst:138
msgid "A binary uploaded image. Normally used with the widget from `plone.formwidget.namedfile`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:140
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:140
#: ../external/plone.app.dexterity/docs/reference/fields.rst:140
#: ../external/plone.app.dexterity/docs/reference/fields.rst:140
msgid "NamedBlobFile"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:140
#: ../external/plone.app.dexterity/docs/reference/fields.rst:140
msgid "A binary uploaded file stored as a ZODB BLOB. Requires the ``[blobs]`` extra to `plone.namedfile`_. Otherwise identical to ``NamedFile``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:142
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:142
#: ../external/plone.app.dexterity/docs/reference/fields.rst:142
#: ../external/plone.app.dexterity/docs/reference/fields.rst:142
msgid "NamedBlobImage"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:142
#: ../external/plone.app.dexterity/docs/reference/fields.rst:142
msgid "A binary uploaded image stored as a ZODB BLOB. Requires the ``[blobs]`` extra to `plone.namedfile`_. Otherwise identical to ``NamedImage``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:147
#: ../external/plone.app.dexterity/docs/reference/fields.rst:147
msgid "Fields in ``z3c.relationfield.schema``"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:149
#: ../external/plone.app.dexterity/docs/reference/fields.rst:149
msgid "See `z3c.relationfield`_ for more details."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:154
#: ../external/plone.app.dexterity/docs/reference/fields.rst:154
msgid "Relation"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:154
#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:156
#: ../external/plone.app.dexterity/docs/reference/fields.rst:154
#: ../external/plone.app.dexterity/docs/reference/fields.rst:156
msgid "RelationValue"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:154
#: ../external/plone.app.dexterity/docs/reference/fields.rst:154
msgid "Stores a single ``RelationValue``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:155
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:21
#: ../external/plone.app.dexterity/docs/reference/fields.rst:155
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:21
msgid "RelationList"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:155
#: ../external/plone.app.dexterity/docs/reference/fields.rst:155
msgid "A ``List`` field that defaults to ``Relation`` as the value type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:155
#: ../external/plone.app.dexterity/docs/reference/fields.rst:155
msgid "See ``List``"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:156
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:20
#: ../external/plone.app.dexterity/docs/reference/fields.rst:156
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:20
msgid "RelationChoice"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:156
#: ../external/plone.app.dexterity/docs/reference/fields.rst:156
msgid "A ``Choice`` field intended to store ``RelationValue``’s"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:156
#: ../external/plone.app.dexterity/docs/reference/fields.rst:156
msgid "See ``Choice``"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:160
#: ../external/plone.app.dexterity/docs/reference/fields.rst:160
msgid "Fields in `plone.app.textfield`_"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:162
#: ../external/plone.app.dexterity/docs/reference/fields.rst:162
msgid "See `plone.app.textfield`_  for more details."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:167
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:17
#: ../external/plone.app.dexterity/docs/reference/fields.rst:167
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:17
msgid "RichText"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:167
#: ../external/plone.app.dexterity/docs/reference/fields.rst:167
msgid "RichTextValue"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:167
#: ../external/plone.app.dexterity/docs/reference/fields.rst:167
msgid "Stores a ``RichTextValue``, which encapsulates a raw text value, the source MIME type, and a cached copy of the raw text transformed to the default output MIME type."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/fields.rst:167
#: ../external/plone.app.dexterity/docs/reference/fields.rst:167
msgid "IField, IRichText"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:2
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:2
msgid "Form schema hints"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:4
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:4
msgid "**Directives which can be used to configure forms from schemata**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:6
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:6
msgid "Dexterity uses the `plone.autoform`_ package to configure its `z3c.form`_-based add and edit forms. This allows a schema to be annotated with “form hints”, which are used to configure the form."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:10
msgid "The easiest way to apply form hints in Python code is to use the directives from `plone.directives.form`_ and `plone.directives.dexterity`_. These directives are used when the package is “grokked” (via the *<grok:grok package=“.” />*ZCML directive) to apply the form hints to the interface where they are found. For this process to work, the schema must derive from *plone.directives.form.Schema*. Directives can be placed anywhere in the class body. By convention they are kept next to the fields they apply to."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:20
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:17
msgid "For example, here is a schema that omits a field:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:34
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:33
msgid "The form directives take parameters in the form of a list of field names, or a set of field name/value pairs as keyword arguments. Each directive can be used zero or more times."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:39
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:38
msgid "Form directives"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:41
msgid "The form directives in the *plone.directives.form* package are shown below."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:47
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:45
msgid "Specify an alternate widget for a field. Pass the field name as a key and a widget as the value. The widget can either be a z3c.form widget instance or a string giving the dotted name to one."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:49
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:47
msgid "Omit one or more fields from forms. Takes a sequence of field names as parameters."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:51
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:49
msgid "Set the widget mode for one or more fields. Pass the field name as a key and the string ‘input’, ‘display’ or ‘hidden’ as the value."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:53
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:51
msgid "order\\_before"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:53
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:51
msgid "Specify that a given field should be rendered before another. Pass the field name as a key and name of the other field as a value. If the other field is in a supplementary schema (i.e. one from a behaviour), its name will be e.g. “IOtherSchema.otherFieldName”. Alternatively, pass the string “\\*” to put a field first in the form."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:55
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:53
msgid "order\\_after"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:55
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:53
msgid "The inverse of order\\_before(), putting a field after another. Passing “\\*” will put the field at the end of the form."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:57
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:59
msgid "primary"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:57
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:59
msgid "Designate a given field as the primary field in the schema. This is not used for form rendering, but is used for WebDAV marshaling of the content object."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:59
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:61
msgid "fieldset"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:59
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:61
msgid "Creates a fieldset (rendered in Plone as a tab on the edit form)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:62
#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:138
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:64
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:142
msgid "The code sample below illustrates each of these directives:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:124
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:128
msgid "Security directives"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:126
msgid "The security directives in the *plone.directives.dexterity* package are shown below. Note that these are also used to control reading and writing of fields on content instances."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:133
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:137
msgid "read\\_permission"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:133
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:137
msgid "Set the (Zope 3) name of a permission required to read the field’s value. Pass the field name as a key and the permission name as a string value. Among other things, this controls the field’s appearance in display forms."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:135
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:139
msgid "write\\_permission"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/form-schema-hints.rst:135
#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:139
msgid "Set the (Zope 3) name of a permission required to write the field’s value. Pass the field name as a key and the permission name as a string value. Among other things, this controls the field’s appearance in add and edit forms."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/index.rst:2
#: ../external/plone.app.dexterity/docs/reference/index.rst:2
#: ../external/plone.app.theming/docs/index.rst:311
msgid "Reference"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/index.rst:4
#: ../external/plone.app.dexterity/docs/reference/index.rst:4
msgid "**Useful references for things like field types, wigets and APIs**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:2
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:2
msgid "Manipulating content objects"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:4
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:8
msgid "**Common APIs used to manipulate Dexterity content objects**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:6
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:10
msgid "In this section, we will describe some of the more commonly used APIs that can be used to inspect and manipulate Dexterity content objects. In most cases, the content object is referred to as *context*, its parent folder is referred to as *folder*, and the type name is *example.type*. Relevant imports are shown with each code snippet, though of course you are more likely to place those at the top of the relevant code module."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:14
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:18
msgid "Content object creation and folder manipulation"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:16
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:20
msgid "This section describes means to create objects and manipulate folders."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:19
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:23
msgid "Creating a content object"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:21
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:25
msgid "The simplest way to create a content item is via its factory:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:28
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:32
msgid "At this point, the object is not acquisition wrapped. You can wrap it explicitly by calling:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:35
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:39
msgid "However, it’s normally better to add the item to a folder and then re-get it from the folder."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:38
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:42
msgid "Note that the factory is normally installed as a local utility, so the *createObject()* call will only work once you’ve traversed over the Plone site root."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:42
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:46
msgid "There is a convenience method that can be used to create a Dexterity object. It is mostly useful in tests:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:50
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:54
msgid "Any keyword arguments are used to set properties on the new instance (via *setattr()* on the newly created object). This method relies on being able to look up the FTI as a local utility, so again you must be inside the site for it to work."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:56
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:60
msgid "Adding an object to a container"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:58
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:62
msgid "Once an object has been created, it can be added to a container. If the container is a Dexterity container, or another container that supports a dict API (e.g. a *Large Plone Folder* in Plone 3 or a container based on *plone.folder*), you can do:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:67
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:71
msgid "You should normally make sure that the *id* property of the object is the same as the id used in the container."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:70
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:74
msgid "If the object only supports the basic OFS API (as is the case with standard Plone *Folders* in Plone 3), you can use the *\\_setObject()* method:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:78
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:82
msgid "Note that both of these approaches bypass any type checks, i.e. you can add items to containers that would not normally allow this type of content. Dexterity comes with a convenience function, useful in tests, to simulate the checks performed when content is added through the web:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:88
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:92
msgid "This will also invoke a name chooser and set the object’s id accordingly, so things like the title-to-id behavior should work. As before, this relies on local components, so you must have traversed into a Plone site (*PloneTestCase* takes care of this for you)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:93
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:97
msgid "To bypass folder constraints, you can use this function and pass *checkConstraints=False*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:96
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:100
msgid "You can also both create and add an object in one call:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:103
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:107
msgid "Again, you can pass *checkConstraints=False* to bypass folder constraints, and pass object properties as keyword arguments."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:106
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:110
msgid "Finally, you can use the *invokeFactory()* API, which is similar, but more generic in that it can be used for any type of content, not just Dexterity content:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:115
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:119
msgid "This always respects add constraints, including add permissions and the current user’s roles."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:119
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:123
msgid "Getting items from a folder"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:121
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:125
msgid "Dexterity containers and other containers based on *plone.folder* support a dict-like API to obtain and manipulate items in folders. For example, to obtain an (acquisition-wrapped) object by name:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:129
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:133
msgid "Folders can also be iterated over, and you can all *items()*, *keys()*, *values()* and so on, treating the folder as a dict with string keys and content objects as values."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:133
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:137
msgid "Dexterity containers also support the more basic OFS API. You can call *objectIds()* to get keys, *objectValues()* to get a list of content objects, *objectItems()* to get an *items()*-like dict,and *hasObject(id)* to check if an object exists in a container."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:139
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:143
msgid "Removing items from a folder"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:141
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:145
msgid "Again, Dexterity containers act like dictionaries, and so implement *\\_\\_delitem\\_\\_*:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:148
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:152
msgid "The OFS API uses the *\\_delObject()* function for the same purpose:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:155
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:159
msgid "Object introspection"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:157
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:161
msgid "This section describes means of getting information about an object."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:160
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:164
msgid "Obtaining an object’s schema interface"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:162
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:166
msgid "A content object’s schema is an interface, i.e. an object of type *zope.interface.interface.InterfaceClass*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:170
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:174
msgid "The schema can now be inspected. For example:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:178
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:182
msgid "Finding an object’s behaviors"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:180
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:184
msgid "To find all behaviors supported by an object, use the *plone.behavior* API:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:192
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:196
msgid "The objects returned are instances providing *plone.behavior.interfaces.IBehavior*. To get the behavior schema, use the *interface* property of this object. You can inspect this and use it to adapt the context if required."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:198
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:202
msgid "Getting the FTI"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:200
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:204
msgid "To obtain a Dexterity FTI, look it up as a local utility:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:208
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:212
msgid "The returned object provides *plone.dexterity.interfaces.IDexterityFTI*. To get the schema interface for the type from the FTI, you can do:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:216
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:220
msgid "Getting the object’s parent folder"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:218
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:222
msgid "A Dexterity item in a Dexterity container should have the *\\_\\_parent\\_\\_* property set, pointing to its containment parent:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:225
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:229
msgid "Items in standard Plone folders won’t have this property set, at least not in Plone 3.x."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:228
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:232
msgid "The more general approach relies on acquisition:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:238
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:242
msgid "This section describes ways to inspect an object’s workflow state and invoke transitions."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:242
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:246
msgid "Obtaining the workflow state of an object"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:244
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:248
msgid "To obtain an object’s workflow state, ask the*portal\\_workflow* tool:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:252
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:256
msgid "This assumes that the workflow state variable is called *review\\_state*, as is the case for almost all workflows."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:256
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:260
msgid "Invoking a workflow transition"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:258
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:262
msgid "To invoke a transition:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:264
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:268
msgid "The transition must be available in the current workflow state, for the current user. Otherwise, an error will be raised."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:268
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:272
msgid "Cataloging and indexing"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:270
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:274
msgid "This section describes ways of indexing an object in the portal\\_catalog tool."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:274
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:278
msgid "Reindexing the object"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:276
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:280
msgid "Objects may need to be reindexed if they are modified in code. The best way to reindex them is actually to send an event and let Dexterity’s standard event handlers take care of this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:285
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:289
msgid "In tests, it is sometimes necessary to reindex explicitly. This can be done with:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:292
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:296
msgid "You can also pass specific index names to reindex, if you don’t want to reindex everything:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:299
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:303
msgid "This method comes from the *Products.CMFCore.CMFCatalogAware.CMFCatalogAware* mix-in class."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:303
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:307
msgid "Security"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:305
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:309
msgid "This section describes ways to check and modify permissions. For more information, see the section on `permissions`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:309
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:313
msgid "Checking a permission"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:311
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:315
msgid "To check a permission by its Zope 3 name:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:318
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:322
msgid "Note: In a test, you may get an AttributeError when calling this method. To resolve this, call *newInteraction()* from *Products.Five.security* in your test setup (e.g. the *afterSetUp()* method)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:322
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:326
msgid "To use the Zope 2 permission title:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:329
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:333
msgid "Sometimes, normally in tests, you want to know which roles have a particular permission. To do this, use:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:336
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:340
msgid "Again, note that this uses the Zope 2 permission title."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:339
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:343
msgid "Changing permissions"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:341
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:345
msgid "Normally, permissions should be set with workflow, but in tests it is often useful to manipulate security directly:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:348
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:352
msgid "Again note that this uses the Zope 2 permission title."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:351
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:355
msgid "Content object properties and methods"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:353
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:357
msgid "The following table shows the more important properties and methods available on Dexterity content objects. In addition, any field described in the type’s schema will be available as a property, and can be read and set using normal attribute access."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:359
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:363
msgid "Property/method"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:361
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:365
msgid "\\_\\_name\\_\\_"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:361
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:365
msgid "The name (id) of the object in its container. This is a unicode string to be consistent with the Zope 3 *IContained* interface, although in reality it will only ever contain ASCII characters, since Zope 2 does not support non-ASCII URLs."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:363
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:367
msgid "id"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:363
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:367
msgid "The name (id) of the object in its container. This is an ASCII string encoding of the *\\_\\_name\\_\\_*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:365
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:369
msgid "getId()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:365
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:369
msgid "Returns the value of the *id*property*.*"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:367
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:371
msgid "isPrincipaFolderish"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:367
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:371
msgid "bool/int"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:367
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:371
msgid "True (or 1) if the object is a folder. False (or 0) otherwise."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:369
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:373
msgid "portal\\_type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:369
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:373
msgid "The portal\\_type of this instance. Should match an FTI in the *portal\\_types* tool. For Dexterity types, should match a local utility providing *IDexterityFTI*. Note that the *portal\\_type* is a per-instance property set upon creation (by the factory), and should not be set on the class."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:371
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:375
msgid "meta\\_type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:371
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:375
msgid "A Zope 2 specific way to describe a class. Rarely, if ever, used in Dexterity. Do not set it on your own classes unless you know what you’re doing."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:373
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:377
msgid "title\\_or\\_id()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:373
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:377
msgid "Returns the value of the *title* property or, if this is not set, the *id* property."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:375
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:379
msgid "absolute\\_url()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:375
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:379
msgid "The full URL to the content object. Will take virtual hosting and the current domain into account."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:377
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:381
msgid "getPhysicalPath()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:377
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:381
msgid "A sequence of string path elements from the application root. Stays the same regardless of virtual hosting and domain. A common pattern is to use *‘/’.join(context.getPhysicalPath())* to get a string representing the path to the Zope application root. Note that it is *not* safe to construct a relative URL from the path, because it does not take virtual hosting into account."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:379
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:383
msgid "getIcon()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:379
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:383
msgid "Returns a string suitable for use in the *src* attribute of an *<img />* tag to get the icon of the content object."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:381
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:383
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:391
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:385
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:387
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:395
msgid "unicode/str"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:381
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:385
msgid "Property representing the title of the content object. Usually part of an object’s schema or provided by the *IBasic* behavior. The default is an empty string."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:383
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:387
msgid "Title()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:383
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:387
msgid "Dublin Core accessor for the *title* property. Set the title by modifying this property. You can also use *setTitle()*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:385
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:389
msgid "listCreators()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:385
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:389
msgid "A list of user ids for object creators. The first creator is normally the owner of the content object. You can set this list using the *setCreators()* method."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:387
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:391
msgid "Creator()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:387
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:391
msgid "The first creator returned by the *listCreators()* method. Usually the owner of the content object."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:389
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:393
msgid "Subject()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:389
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:393
msgid "Dublin Core accessor for item keywords. You can set this list using the *setSubject()* method."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:391
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:395
msgid "Description()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:391
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:395
msgid "Dublin Core accessor for the *description* property, which is usually part of an object’s schema or provided by the *IBasic* behavior. You can set the description by setting the *description* attribute, or using the *setDescription()* method."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:393
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:397
msgid "listContributors()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:393
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:397
msgid "Dublin Core accessor for the list of object contributors. You can set this with *setContributors()*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:395
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:399
msgid "Date()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:395
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:399
msgid "Dublin Core accessor for the default date of the content item, in ISO format. Uses the effective date is set, falling back on the modification date."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:397
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:401
msgid "CreationDate()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:397
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:401
msgid "Dublin Core accessor for the creation date of the content item, in ISO format."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:399
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:403
msgid "EffectiveDate()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:399
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:403
msgid "Dublin Core accessor for the effective publication date of the content item, in ISO format. You can set this by passing a DateTime object to *setEffectiveDate()*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:401
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:405
msgid "ExpirationDate()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:401
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:405
msgid "Dublin Core accessor for the content expiration date, in ISO format. You can set this by passing a DateTime object to *setExpirationDate()*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:403
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:407
msgid "ModificationDate()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:403
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:407
msgid "Dublin Core accessor for the content last-modified date, in ISO format."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:405
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:409
msgid "Language()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:405
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:409
msgid "Dublin Core accessor for the content language. You can set this using *setLanguage()*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:407
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:411
msgid "Rights()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:407
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:411
msgid "Dublin Core accessor for content copyright information. You can set this using *setRights()*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:409
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:413
msgid "created()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:409
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:411
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:413
#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:415
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:413
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:415
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:417
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:419
msgid "DateTime"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:409
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:413
msgid "Returns the Zope 2 DateTime for the object’s creation date. If not set, returns a “floor” date of January 1st, 1970."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:411
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:415
msgid "modified()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:411
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:415
msgid "Returns the Zope 2 DateTime for the object’s modification date. If not set, returns a “floor” date of January 1st, 1970."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:413
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:417
msgid "effective()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:413
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:417
msgid "Returns the Zope 2 DateTime for the object’s effective date. If not set, returns a “floor” date of January 1st, 1970."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:415
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:419
msgid "expires()"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/manipulating-content-objects.rst:415
#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:419
msgid "Returns the Zope 2 DateTime for the object’s expiration date. If not set, returns a “floor” date of January 1st, 1970."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/misc.rst:2
#: ../external/plone.app.dexterity/docs/reference/misc.rst:2
msgid "Miscellaneous"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/misc.rst:5
#: ../external/plone.app.dexterity/docs/reference/misc.rst:5
msgid "User contributed recipes"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/misc.rst:7
#: ../external/plone.app.dexterity/docs/reference/misc.rst:7
msgid "**How to hide a field on a schema if we do not want to or cannot modify the original schema**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/misc.rst:9
#: ../external/plone.app.dexterity/docs/reference/misc.rst:9
msgid "To do this one can use tagged values on the schema. In this case want to hide 'introduction' and 'answers' fields:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/misc.rst:20
#: ../external/plone.app.dexterity/docs/reference/misc.rst:20
msgid "This code can sit in another.package.__init__.py for example."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/misc.rst:22
#: ../external/plone.app.dexterity/docs/reference/misc.rst:22
msgid "See also: `Original thread on coredev mailinglist`_"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:2
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:2
msgid "Standard behaviors"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:4
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:4
msgid "**A list of common behaviors that ship with Dexterity**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:6
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:6
msgid "Dexterity ships with several standard behaviors. The following table shows the interfaces you can list in the FTI *behaviors* properties and the resultant form fields and interfaces."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:13
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:13
msgid "plone.app.dexterity.behaviors.metadata.IBasic"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:13
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:13
msgid "Basic metadata: Adds title and description fields."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:15
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:15
msgid "plone.app.dexterity.behaviors.metadata.ICategorization"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:15
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:15
msgid "Categorization: Adds keywords and language fields."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:17
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:17
msgid "plone.app.dexterity.behaviors.metadata.IPublication"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:17
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:17
msgid "Date range: Adds effective date and expiration date fields."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:19
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:19
msgid "plone.app.dexterity.behaviors.metadata.IOwnership"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:19
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:19
msgid "Ownership: Adds creator, contributor, and rights fields."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:21
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:21
msgid "plone.app.dexterity.behaviors.metadata.IDublinCore"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:21
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:21
msgid "Dublin Core metadata: Adds standard metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:23
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:23
msgid "plone.app.content.interfaces.INameFromTitle"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:23
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:23
msgid "Name from title: Automatically generate short URL name for content based on its initial title. Not a form field provider."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:25
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:25
msgid "plone.app.dexterity.behaviors.filename.INameFromFileName"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:25
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:25
msgid "Name from file name: Automatically generate short URL name for content based on its primary field file name"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:27
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:27
msgid "plone.app.layout.navigation.interfaces.INavigationRoot"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:27
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:27
msgid "Navigation root: Make all items of this type a navigation root"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:29
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:29
msgid "plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:29
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:29
msgid "Exclude From navigation: Allow items to be excluded from navigation"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:31
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:31
msgid "plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:31
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:31
msgid "Next previous navigation toggle: Allow items to have next previous navigation enabled"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:33
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:33
msgid "plone.app.dexterity.behaviors.discussion.IAllowDiscussion"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:33
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:33
msgid "Allow discussion: Allow discussion on this item"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:35
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:35
msgid "plone.app.dexterity.behaviors.id.IShortName"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:35
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:35
msgid "Short name: Gives the ability to rename an item from its edit form."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:37
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:37
msgid "plone.app.dexterity.behaviors.nextprevious.INextPreviousEnabled"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:37
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:37
msgid "Next previous navigation: Enable next previous navigation for all items of this type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:39
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:39
msgid "Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:39
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:39
msgid "Folder Addable Constrains: Restrict the content types that can be added to folderish content"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:41
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:41
msgid "plone.app.relationfield.behavior.IRelatedItems"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/standard-behaviours.rst:41
#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:41
msgid "Adds the *Related items* field to the *Categorization* fieldset."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/value-and-validator-adaptors.rst:2
msgid "Value and validator adaptors"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/value-and-validator-adaptors.rst:4
msgid "**Handy Decorators to set computed defaults and dynamic validators**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/value-and-validator-adaptors.rst:6
msgid "Decorators from `plone.directives.form`_ allow you to set dynamic defaults and validators for schema fields. These are used outside the interface class, after its declaration."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/value-and-validator-adaptors.rst:13
msgid "Use the plone.directives.form.default\\_value decorator to create an adaptor to dynamically set a default. For example, to set a Datetime field to default to the current time:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/value-and-validator-adaptors.rst:34
msgid "Use the plone.directives.form.validator decorator to create an adaptor to validate field input. For example, to validate that a field is not entered all uppercase:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:4
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:4
msgid "**Standard and common third party widgets**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:6
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:6
msgid "Most of the time, you will use the standard widgets provided by *z3c.form*. To learn more about z3c.form widgets, see the `z3c.form documentation`_. To learn about setting custom widgets for Dexterity content types, see the `schema introduction`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:11
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:11
msgid "The table below shows some commonly used custom widgets."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:14
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:14
msgid "Widget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:14
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:14
msgid "Imported from"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:14
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:14
msgid "Field"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:16
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:16
msgid "WysiwygFieldWidget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:16
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:16
msgid "plone.app.z3cform.wysiwyg"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:16
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:16
msgid "Use Plone’s standard WYSIWYG HTML editor on a standard text field. Note that if you used a *RichText* field, you will get the WYSIWYG editor automatically."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:17
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:17
msgid "RichTextWidget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:17
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:17
msgid "plone.app.textfield.widget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:17
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:17
msgid "Use Plone’s standard WYSIWYG HTML editor on a *RichText* field. This also allows text-based markup such as reStructuredText."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:18
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:18
msgid "AutocompleteFieldWidget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:18
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:19
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:18
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:19
msgid "plone.formwidget.autocomplete"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:18
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:18
msgid "Autocomplete widget based on jQuery Autocomplete. Requires a Choice field with a query source. See `vocabularies`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:19
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:19
msgid "AutocompleteMultiFieldWidget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:19
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:19
msgid "Multi-select version of the above. Used for a List, Tuple, Set or Frozenset with a Choice value\\_type."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:20
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:20
msgid "ContentTreeFieldWidget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:20
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:21
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:20
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:21
msgid "plone.formwidget.contenttree"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:20
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:21
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:20
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:21
msgid "Content browser. Requires a query source with content objects as values."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:21
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:21
msgid "MultiContentTreeFieldWidget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:22
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:22
msgid "NamedFileFieldWidget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:22
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:22
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:23
msgid "plone.formwidget.namedfile"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:22
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:22
msgid "A file upload widget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:23
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:23
msgid "NamedImageFieldWidget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:23
msgid "plone.formwidget.namedimage"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:23
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:23
msgid "An image upload widget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:24
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:24
msgid "TextLinesFieldWidget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:24
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:24
msgid "plone.z3cform.textlines"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:24
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:24
msgid "One-per-line list entry for List, Tuple, Set or Frozenset fields. Requires a value_type of TextLine or ASCIILine."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:25
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:25
msgid "SingleCheckBoxFieldWidget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:25
#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:26
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:25
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:26
msgid "z3c.form.browser.checkbox"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:25
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:25
msgid "A single checkbox for true/false."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:26
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:26
msgid "CheckBoxFieldWidget"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/reference/widgets.rst:26
#: ../external/plone.app.dexterity/docs/reference/widgets.rst:26
msgid "A set of checkboxes. Used for Set or Frozenset fields with a Choice value_type and a vocabulary."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:2
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:2
msgid "Schema-driven types"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:4
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:4
msgid "**Creating a minimal type based on a schema**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:7
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:7
msgid "The schema"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:9
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:9
msgid "A simple Dexterity type consists of a schema and an FTI (Factory Type Information, the object configured in :guilabel:`portal_types` in the ZMI). We’ll create the schemata here, and the FTI on the next page."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:13
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:13
msgid "Each schema is typically in a separate module. Thus, we will add three files to our product: ``presenter.py``, ``program.py``, and ``session.py``. Each will start off with a schema interface."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:18
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:18
msgid "Creating base files"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:20
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:20
msgid "Since we created our example.conference command via ZopeSkel, we'll be able to use its ``addcontent`` command to add base files for our content types. ``addcontent`` must be used from inside your new package."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:24
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:24
msgid "If you didn't use ZopeSkel, you'll need to add the files yourself. We'll supply the full source here, and you may refer to the example repository."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:26
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:26
msgid "Typical `addcontent` use starting out at the buildout directory is:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:36
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:36
msgid "The \"-l\" lists available content templates."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:40
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:40
msgid "At this point, you may receive an error message beginning with ``pkg_resources.DistributionNotFound``. Do *not* follow the error messages advice to run `python setup.py`. Instead, check to make sure that you have added your package to the eggs and develop sections of your buildout and have run buildout. This loads package dependencies that are required to run addcontent."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:47
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:47
msgid "Now, let's add two of the three content types, for the conference sessions and programs. We'll do presenters in the next section as a model-driven type."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:66
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:66
msgid "Notice that we chose to make the `Conference` type a container, because we will want it to be able to contain sessions. Likewise, we set `Globally addable`` for the `Session` type to False, as we'll only want to allow them to be added inside programs."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:71
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:71
msgid "If you check ``example.conference/example/conference``, you'll discover that Python source files program.py, session.py and presenter.py have been added. If you explore ``example.conference/example/conference/profiles/default/types``, you'll also find XML files setting the Factory Type Information for each new type. We'll customize all of these."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:78
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:78
msgid "Setting the schema"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:80
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:80
msgid "Start with program.py. Notice the boilerplate:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:92
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:92
msgid "Since we're going to be defining our fields via Zope schema rather than an XML model, delete all of that."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:94
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:94
msgid "Next, add schema declarations for our fields. The top part of the file should look like:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:134
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:133
msgid "We've also removed unnecessary ``import`` declarations."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:136
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:135
msgid "If you haven't developed for Plone before, take special note of the ``from example.conference import MessageFactory as _`` code. This is to aid future internationalisation of the package. Every string that is presented to the user should be wrapped in ``_()`` as shown with the titles and descriptions below."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:141
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:140
msgid "The message factory lives in the package root ``__init__.py`` file:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:149
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:148
msgid "Notice how we use the package name as the translation domain."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:151
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:150
msgid "Notice how we use the field names title and description for the name and summary. We do this to provide values for the default title and description metadata used in Plone’s folder listings and searches, which defaults to these fields. In general, every type should have a title field, although it could be provided by behaviors (more on those later)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:157
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:156
msgid "Save program.py."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:159
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:158
msgid "``session.py`` for the Session type should look like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:189
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:187
msgid "Note that we haven’t added information about speakers or tracks yet. We’ll do that when we cover vocabularies and references later."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:193
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:191
msgid "Schema interfaces vs. other interfaces"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:195
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:193
msgid "As you may have noticed, each schema is basically just an interface (``zope.interface.Interface``) with fields. The standard fields are found in the `zope.schema`_ package. You should look at its interfaces (``parts/omelette/zope/schema/interfaces.py``) to learn about the various schema fields available, and review the `online documentation`_ for the package. You may also want to look up `plone.namedfile`_, which you can use if you require a file field, `plone.app.relationfield`_, which can be used for references, and `plone.app.textfield`_, which supports rich text with a WYSIWYG editor. We will cover these field types later in this manual. They can also be found in the reference at the end."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:207
msgid "Unlike a standard interface, however, we are deriving from ``model.Schema`` (actually, ``plone.supermodel.model.Schema``). This is just a marker interface that allows us to add some form hints to the interface, which are then used by Dexterity (actually, the `plone.autoform`_ package) to construct forms. Take a look at the `plone.autoform`_ documentation to learn more about the various hints that are possible. The most common ones are ``form.fieldset()``, to define groups of fields, ``form.widget()``, to set a widget for a particular field, and ``form.omit()`` to hide one or more fields from the form. We will see examples of these later in the manual."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:226
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:225
msgid "The FTI"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:228
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:227
msgid "**Adding a Factory Type Information object for the type**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:230
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:229
msgid "With the schema in place, we just need to make our types installable. We do this with GenericSetup. Most of this was set up when we used ``addcontent`` to add the content type boilerplate."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:233
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:232
msgid "Look in the ``types.xml`` file in your packages ``example/conference/profiles/default`` directory:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:242
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:241
msgid "We use the package name as a prefix and the type name in lowercase to create a unique name. It is important that the ``meta_type`` is *Dexterity FTI*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:246
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:245
msgid "We then need to add/edit an XML file for each of the types, where the file name matches the type name."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:249
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:248
msgid "The ``Session`` type, in ``example.conference.session.xml``, should look like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:305
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:304
msgid "There is a fair amount of boilerplate here which could actually be omitted, because the Dexterity FTI defaults will take care of most of this. However, it is useful to see the options available so that you know what you can change."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:310
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:309
msgid "The important lines here are:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:312
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:311
msgid "The ``name`` attribute on the root element must match the name in ``types.xml`` and the filename."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:314
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:313
msgid "We use the package name as the translation domain again, via ``i18n:domain``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:316
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:315
msgid "We set a title and description for the type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:317
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:316
msgid "We also specify an icon. Here, we use a standard icon from Plone’s ``plone_images`` skin layer. You’ll learn more about static resources later."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:320
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:319
msgid "We have set ``global_allow`` to ``False``, since these objects should only be addable inside a *Program*.."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:322
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:321
msgid "The schema interface is referenced by the ``schema`` property."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:323
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:322
msgid "We set the ``klass`` property to the class defined in the boilerplate file. If you were creating this yourself, you could have instead just used ``plone.dexterity.content.Item`` or ``plone.dexterity.content.Container``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:327
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:326
msgid "We specify the name of an add permission. The default ``cmf.AddPortalContent`` should be used unless you configure a custom permission. Custom permissions are convered later in this manual."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:330
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:329
msgid "We add a *behavior*. Behaviors are re-usable aspects providing semantics and/or schema fields. Here, we add the ``INameFromTitle`` behavior, which will give our content object a readable id based on the ``title`` property. We’ll cover other behaviors later. We removed the IBasic behavior (which would supply title and description fields) as we have alternative fields."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:338
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:337
msgid "The ``Program``, in ``example.conference.program.xml``, looks like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:396
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:395
msgid "We've edited this one a little from the boilplate: the difference here is that we filter the containable types (``filter_content_types`` and ``allowed_content_types``) to allow only ``Sessions`` to be added inside this folder."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:402
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:401
msgid "Testing the type"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:404
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:403
msgid "**How to start up Plone and test the type, and some trouble-shooting tips.**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:406
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:405
msgid "With a schema and FTI for each type, and our GenericSetup profile registered in ``configure.zcml``, we should be able to test our type. Make sure that you have run a buildout, and then start ``./bin/instance fg`` as normal. Add a Plone site, and go to the :guilabel:`portal_quickinstaller` in the ZMI. You should see your package there and be able to install it."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:412
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:411
msgid "Once installed, you should be able to add objects of the new content types."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:415
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:414
msgid "If Zope doesn’t start up:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:417
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:416
msgid "Look for error messages on the console, and make sure you start in the foreground with ``./bin/instance fg``. You could have a syntax error or a ZCML error."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:421
msgid "If you have a failed import for ``plone.directives.form``, make sure that you specified the ``[grok]`` extra for ``plone.app.dexterity`` in your setup.py install_requires."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:425
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:420
msgid "If you don’t see your package in :guilabel:`portal_quickinstaller`:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:427
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:422
msgid "Ensure that the package is either checked out by ``mr.developer`` or that you have a ``develop`` line in ``buildout.cfg`` to load it as a develop egg. ``develop = src/*`` should suffice, but you can also add the package explicitly, e.g. with ``develop = src/example.conference.``"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:432
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:427
msgid "Ensure that the package is actually loaded as an egg. It should be referenced in the ``eggs`` section under ``[instance]`` ."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:434
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:429
msgid "You can check that the package is correctly configured in the buildout by looking at the generated ``bin/instance`` script (``bin\\instance-script.py`` on Windows). There should be a line for your package in the list of eggs at the top of the file."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:438
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:433
msgid "Make sure that the package’s ZCML is loaded. You can do this by installing a ZCML slug (via the ``zcml`` option in the ``[instance]`` section of ``buildout.cfg``) or by adding an ``<include />`` line in another package’s ``configure.zcml``. However, the easiest way with Plone 3.3 and later is to add the ``z3c.autoinclude.plugin`` entry point to ``setup.py``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:444
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:439
msgid "Ensure that you have added a ``<genericsetup:registerProfile />`` stanza to ``configure.zcml``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:447
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:442
msgid "If the package fails to install in ``portal_quickinstaller``:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:449
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:444
msgid "Look for errors in the :guilabel:`error_log` at the root of the Plone site, in your console, or in your log files."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:451
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:446
msgid "Check the syntax and placement of the profile files. Remember that you need a ``types.xml`` listing your types, and corresponding files in ``types/*.xml``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:455
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:450
msgid "If your forms do not look right (e.g. you are missing custom widgets):"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:457
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:452
msgid "Make sure your schema derives from ``model.Schema``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:458
#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:453
msgid "Remember that the directives require you to specify the correct field name, even if they are placed before or after the relevant field."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/schema-driven-types.rst:460
msgid "Check that you have a ``<grok:grok package=\".\" />`` line in ``configure.zcml``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/index.rst:2
#: ../external/plone.app.dexterity/docs/testing/index.rst:2
msgid "Testing Dexterity types"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/index.rst:4
#: ../external/plone.app.dexterity/docs/testing/index.rst:4
msgid "**Writing unit and integration tests**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:2
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:2
msgid "Integration tests"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:4
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:4
msgid "**Writing integration tests with plone.app.testing**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:6
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:6
msgid "We’ll now add some integration tests for our type. These should ensure that the package installs cleanly, and that our custom types are addable in the right places and have the right schemata, at the very least."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:11
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:11
msgid "To help manage test setup, we’ll make use of the Zope test runner’s concept of *layers*. Layers allow common test setup (such as configuring a Plone site and installing a product) to take place once and be re-used by multiple test cases. Those test cases can still modify the environment, but their changes will be torn down and the environment reset to the layer’s initial state between each test, facilitating test isolation."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:20
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:20
msgid "As the name implies, layers are, erm, layered. One layer can extend another. If two test cases in the same test run use two different layers with a common ancestral layer, the ancestral layer is only set up and torn down once."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:26
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:26
msgid "`plone.app.testing`_ provides tools for writing integration and functional tests for code that runs on top of Plone, so we’ll use it."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:29
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:29
msgid "In *setup.py*, we will add the extras_require option, like so:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:38
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:38
msgid "Don’t forget to re-run buildout after making changes to ``setup.py``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:40
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:40
msgid "`plone.app.testing`_ includes a set of layers that set up fixtures containing a Plone site, intended for writing integration and functional tests."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:44
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:44
msgid "We need to create a custom fixture. The usual pattern is to create a new layer class that has ``PLONE_FIXTURE`` as its default base, instantiating that as a separate \"fixture\" layer. This layer is not to be used in tests directly, since it won't have test/transaction lifecycle management, but represents a shared fixture, potentially for both functional and integration testing. It is also the point of extension for other layers that follow the same pattern."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:53
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:53
msgid "Once this fixture has been defined, \"end-user\" layers can be defined using the IntegrationTesting and FunctionalTesting classes. We’ll add this in a ``testing.py`` file::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:86
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:86
msgid "This extends a base layer that sets up Plone, and adds some custom layer setup for our package, in this case installing the ``example.conference`` extension profile. We could also perform additional setup here, such as creating some initial content or setting the default roles for the test run. See the *plone.app.testing* documentation for more details."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:93
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:93
msgid "To use the layer, we can create a new test case based on ``unittest.TestCase`` that uses our layer. We’ll add one to ``test_program.py`` first. (In the code snippet below, the unit test we created previously has been removed to conserve space.)::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:176
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:176
msgid "This illustrates a basic set of tests that make sense for most content types. There are many more things we could test (for example, we could test the add permissions more thoroughly, and we ought to test the ``sessions()`` method on the view with some actual content!), but even this small set of integration tests tells us that our product has installed, that the content type is addable, that it has the right factory, and that instances of the type provide the right schema interface."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:188
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:188
msgid "There are some important things to note about this test case:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:190
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:190
msgid "We extend ``unittest.TestCase``, which means we have access to a full Plone integration test environment. See the `testing tutorial`_ for more details."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:193
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:193
msgid "We set the ``layer`` attribute to our custom layer. This means that all tests in our test case will have the ``example.conference:default`` profile installed."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:196
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:196
msgid "We need to create a test user's member folder as self.folder because ``plone.app.testing`` takes a minimalist approach and no content is available by default."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:199
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:199
msgid "We test that the content is addable (here, as a normal member in their member folder, since that is the default security context for the test – use ``self.setRoles([‘Manager’])`` to get the ``Manager`` role and ``self.portal`` to access the portal root), that the FTI is installed and can be located, and that both the FTI and instances of the type know about the correct type schema."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:206
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:206
msgid "We also test that the view can be looked up and has the correct methods. We’ve not included a fully functional test (e.g. using ``zope.testbrowser``) or any other front-end testing here. If you require those, take a look at the testing tutorial."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:210
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:210
msgid "We also test that our custom indexers are working, by creating an appropriate object and searching for it. Note that we need to reindex the object after we’ve modified it so that the catalog is up to date."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:214
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:214
msgid "The ``defaultTestLoader`` will find this test and load it, just as it found the ``TestProgramUnit`` test case."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:217
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:217
msgid "To run our tests, we can still do."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:223
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:223
msgid "You should now notice layers being set up and torn down. Again, use the ``-t`` option to run a particular test case (or test method) only."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:227
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:227
msgid "The other tests are similar. We have ``tests/test_session.py`` to test the ``Session`` type::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:312
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:312
msgid "Notice here how we test that the ``Session`` type cannot be added directly to a folder, and that it can be added inside a program. We also add a test for the ``possible_tracks()`` vocabulary method, as well as tests for the installation of the ``track`` index and metadata column and the custom workflow::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:367
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:367
msgid "Faster tests with Roadrunner"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:370
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:370
msgid "Roadrunner development halted in 2009. The following is only useful if you are using Plone 3.x."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:373
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:373
msgid "You will have noticed that running unit tests was much quicker than running integration tests. That is unfortunate, but to be expected: the integration test setup basically requires starting all of Zope and configuring a Plone site."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:378
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:378
msgid "Luckily, there is a tool that we can use to speed things up, and if you’ve been following along the tutorial, you already have it in your buildout: `Roadrunner`_. This is a command that takes the place of ``./bin/instance test`` that preloads the Zope environment and allows you to re-run tests much faster."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:384
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:384
msgid "To run our tests with roadrunner, we would do:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:390
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:390
msgid "This runs the tests once, and then drops to the Roadrunner prompt:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:396
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:396
msgid "Simply hitting enter here, or typing a command like ``test -s example.conference`` will re-run your tests, this time taking much less time."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:400
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:400
msgid "Roadrunner works best when you are adding and debugging your tests. For example, it’s a very quick way to get to a ``pdb`` prompt: just set a breakpoint in your test with ``import pdb; pdb.set_trace()`` and re-run it in roadrunner. You can then step into your test code and the code under test."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/integration-tests.rst:406
#: ../external/plone.app.dexterity/docs/testing/integration-tests.rst:406
msgid "Roadrunner should pick up changes to your tests automatically. However, it may not pick up changes to your application code, grokked components or ZCML files. If it doesn’t, you’ll need to exit the Roadrunner prompt and restart."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:2
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:2
msgid "Mock testing"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:4
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:4
msgid "**Using a mock objects framework to write mock based tests**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:6
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:6
msgid "Mock testing is a powerful approach to testing that lets you make assertions about how the code under test is interacting with other system modules. It is often useful when the code you want to test is performing operations that cannot be easily asserted by looking at its return value."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:12
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:12
msgid "In our example product, we have an event handler like this:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:37
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:36
msgid "If we want to test that this sends the right kind of email message, we’ll need to somehow inspect what is passed to *secureSend()*. The only way to do that is to replace the *MailHost*object that is acquired when *getToolByName(presenter, ‘MailHost’)* is called, with something that performs that assertion for us."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:43
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:42
msgid "If we wanted to write an integration test, we could use *PloneTestCase* to execute this event handler, e.g. by firing the event manually, and temporarily replace the *MailHost* object in the root of the test case portal (*self.portal*) with a dummy that raised an exception if the wrong value was passed."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:49
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:48
msgid "However, such integration tests can get pretty heavy handed, and sometimes it is difficult to ensure that it works in all cases. In the approach outlined above, for example, we would miss cases where no mail was sent at all."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:54
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:53
msgid "Enter mock objects. A mock object is a “test double” that knows how and when it ought to be called. The typical approach is as follows:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:57
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:56
msgid "Create a mock object."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:58
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:57
msgid "The mock object starts out in “record” mode."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:59
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:58
msgid "Record the operations that you expect the code under test perform on the mock object. You can make assertions about the type and value of arguments, the sequence of calls, or the number of times a method is called or an attribute is retrieved or set."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:63
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:62
msgid "You can also give your mock objects behaviour, e.g. by specifying return values or exceptions to be raised in certain cases."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:65
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:64
msgid "Initialise the code under test and/or the environment it runs in so that it will use the mock object rather than the real object. Sometimes this involves temporarily “patching” the environment."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:68
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:67
msgid "Put the mock framework into “replay” mode."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:69
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:68
msgid "Run the code under test."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:70
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:69
msgid "Apply any assertions as you normally would."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:71
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:70
msgid "The mock framework will raise exceptions if the mock objects are called incorrectly (e.g. with the wrong arguments, or too many times) or insufficiently (e.g. an expected method was not called)."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:75
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:74
msgid "There are several Python mock object frameworks. Dexterity itself users a powerful one called `mocker`_, via the `plone.mocktestcase`_ integration package. You are encouraged to read the documentation for those two packages to better understand how mock testing works, and what options are available."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:83
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:82
msgid "Take a look at the tests in *plone.dexterity* if you’re looking for more examples of mock tests using *plone.mocktestcase*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:86
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:85
msgid "To use the mock testing framework, we first need to depend on *plone.mocktestcase*. As usual, we add it to *setup.py* and re-run buildout."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:97
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:96
msgid "As an example test case, consider the following class in *test\\_presenter.py*:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:167
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:166
msgid "Note that the other tests in this module have been removed for the sake of brevity."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:170
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:169
msgid "If you are not familiar with mock testing, it may take a bit of time to get your head around what’s going on here. Let’s run though the test:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:173
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:172
msgid "First, we create a dummy presenter object. This is *not* a mock object, it’s just a class with the required minimum set of attributes, created using the *create\\_dummy()* helper method from the *MockTestCase* base class. We use this type of dummy because we are not interested in making any assertions on the *presenter* object: it is used as an “input” only."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:179
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:178
msgid "Next, we create a dummy event. Here we have opted to use a standard implementation from *zope.app.container*."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:181
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:180
msgid "We then define a few variables that we will use in the various assertions and mock return values: the user data that will form our dummy user search results, and the email data passed to the mail host."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:185
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:184
msgid "Next, we create mocks for each of the tools that our code needs to look up. For each, we use the *expect()* method from *MockTestCase* to make some assertions. For example, we expect that *getPortalObject()* will be called (once) on the *portal\\_url* tool, and it should return another mock object, the *portal\\_mock*. On this, we expect that *getProperty()* is called with an argument equal to *“email\\_from\\_address”*. The mock will then return *“test@example.org”*. Take a look at the *mocker* and *plone.mocktestcase* documentation to see the various other types of assertions you can make."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:195
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:194
msgid "The most important mock assertion is the line *self.expect(mail\\_host\\_mock.secureSend(message, email, sender, subject))*. This asserts that the *secureSend()* method gets called with the required message, recipient address, sender address and subject, exactly once."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:200
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:199
msgid "We then put the mock into replay mode, using *self.replay()*. Up until this point, any calls on our mock objects have been to record expectations and specify behaviour. From now on, any call will count towards verifying those expectations."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:204
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:203
msgid "Finally, we call the code under test with our dummy presenter and event."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:206
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:205
msgid "In this case, we don’t have any “normal” assertions, although the usual unit test assertion methods are all available if you need them, e.g. to test the return value of the method under test. The assertions in this case are all coming from the mock objects. The *tearDown()* method of the *MockTestCase* class will in fact check that all the various methods were called exactly as expected."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:213
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:212
msgid "To run these tests, use the normal test runner, e.g.:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:219
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:218
msgid "Note that mock tests are typically as fast as unit tests, so there is typically no need for something like roadrunner."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:223
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:222
msgid "Mock testing caveats"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:225
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:224
msgid "Mock testing is a somewhat controversial topic. On the one hand, it allows you to write tests for things that are often difficult to test, and a mock framework can - once you are familiar with it - make child’s play out of the often laborious task of creating reliable test doubles. On the other hand, mock based tests are inevitably tied to the implementation of the code under test, and sometimes this coupling can be too tight for the test to be meaningful. Using mock objects normally also means that you need a very good understanding of the external APIs you are mocking. Otherwise, your mock may not be a good representation of how these systems would behave in the real world. Much has been written on this, for example by `Martin Fowler`_."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:237
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:236
msgid "As always, it pays to be pragmatic. If you find that you can’t write a mock based test without reading every line of code in the method under test and reverse engineering it for the mocks, then an integration test may be more appropriate. In fact, it is prudent to have at least some integration tests in any case, since you can never be 100% sure your mocks are valid representations of the real objects they are mocking."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:244
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:243
msgid "On the other hand, if the code you are testing is using well-defined APIs in a relatively predictable manner, mock objects can be a valuable way to test the “side effects” of your code, and a helpful tool to simulate things like exceptions and input values that may be difficult to produce otherwise."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/mock-testing.rst:250
#: ../external/plone.app.dexterity/docs/testing/mock-testing.rst:249
msgid "Remember also that mock objects are not necessarily an “all or nothing” proposition. You can use simple dummy objects or “real” instances in most cases, and augment them with a few mock objects for those difficult-to-replicate test cases."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:2
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:2
msgid "Unit tests"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:4
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:4
msgid "**Writing simple unit tests**"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:6
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:6
msgid "As all good developers know, automated tests are very important! If you are not comfortable with automated testing and test-driven development, you should read the `Plone testing tutorial`_. In this section, we will assume you are familiar with Plone testing basics, and show some tests that are particularly relevant to our example types."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:12
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:12
msgid "Firstly, we will add a few unit tests. Recall that unit tests are simple tests for a particular function or method, and do not depend on an outside environment being set up. As a rule of thumb, if something can be tested with a simple unit test, do so, because:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:18
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:18
msgid "Unit tests are quick to write."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:19
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:19
msgid "They are also quick to run."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:20
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:20
msgid "Because they are more isolated, you are less likely to have tests that pass or fail due to incorrect assumptions or by luck."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:22
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:22
msgid "You can usually test things more thoroughly and exhaustively with unit tests than with (slower) integration tests."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:25
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:25
msgid "You’ll typically supplement a larger number of unit tests with a smaller number of integration tests, to ensure that your application’s correctly wired up and working."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:29
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:29
msgid "That’s the theory, at least. When we’re writing content types, we’re often more interested in integration test, because a type schema and FTI are more like configuration of the Plone and Dexterity frameworks than imperative programming. We can’t “unit test” the type’s schema interface, but we can and should test that the correct schema is picked up and used when our type is installed. We will often write unit tests (with mock objects, where required) for custom event handlers, default value calculation functions and other procedural code."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:39
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:39
msgid "In that spirit, let’s write some unit tests for the default value handler and the invariant in ``program.py``. We’ll add the directory ``tests``, with an ``__init__.py`` and a file ``test_program.py`` that looks like this::"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:107
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:107
msgid "This is a simple test using the Python standard library’s ``unittest`` module. There are a few things to note here:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:110
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:110
msgid "We have created a dummy class to simulate a ``Program`` instance. It doesn’t contain anything at all, but we set some attributes onto it for certain tests. This is a very simple way to do mocks. There are much more sophisticated mock testing approaches, but starting simple is good."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:116
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:116
msgid "Each test is self contained. There is no test layer or test case setup/tear-down."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:118
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:118
msgid "We use the ``defaultTestLoader`` to load all test classes in the module automatically. The test runner will look for modules in the ``tests`` package with names starting with ``test`` that have a ``test_suite()`` method to get test suites."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:124
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:124
msgid "To run the tests, we can do:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:130
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:130
msgid "Hopefully it should show five passing tests."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:134
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:134
msgid "This uses the testrunner configured via the ``[test]`` part in our ``buildout.cfg``. This provides better test reporting and a few more advanced options (like output colouring). We could also use the built-in test runner in the ``instance`` script, e.g. with ``./bin/instance test -s example.conference``."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:141
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:141
msgid "To run just this test suite, we can do:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:147
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:147
msgid "This is useful when we have other test suites that we don’t want to run, e.g. because they are integration tests and require lengthy setup."
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:150
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:150
msgid "To get a report about test coverage, we can run:"
msgstr ""

#: ../external/plone.app.dexterity/docs/grok/testing/unit-tests.rst:156
#: ../external/plone.app.dexterity/docs/testing/unit-tests.rst:156
msgid "Test coverage reporting is important. If you have a module with low test coverage, it means that your tests do not cover many of the code paths in those modules, and so are less useful for detecting bugs or guarding against future problems. Aim for 100%."
msgstr ""

#: ../external/plone.app.dexterity/docs/install.rst:19
msgid "**If you are using grok-style configuration, you must do one extra installation step:** activate the `grok` extra for Dexterity. To do so, add the following line to the `eggs` section of your buildout::"
msgstr ""

#: ../external/plone.app.dexterity/docs/model-driven-types.rst:83
msgid "Note the ``model.load`` directive. We'd deleted that when we created schema-driven field sets. Now, we leave it in to automatically load our model file."
msgstr ""

#: ../external/plone.app.dexterity/docs/prerequisite.rst:84
msgid "The addition of `plone.app.dexterity` to our install requirements assures that we'll have dexterity loaded. Our example code won't work without it. The specification of `plone` as a z3c.autoinclude.plugin entry point ensures that we won't need to separately specify our zcml in buildout."
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:18
msgid "The XML model of your content object may be exported from Dexterity and incorporated into a Python package. That's typically done with code like:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:34
msgid "XML models in a package may be directly edited."
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:42
msgid "Dexterity requires that its model XML be well-formed XML, including name space declarations. The typical structure of a Dexterity XML document is:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:66
msgid "Most of the supermodel/schema field tag and its attributes map directly to what's available via the TTW schema editor:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:86
msgid "It's easy to add fieldsets by surrounding embedding fields tags in a ``fieldset`` block:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:111
msgid "Vocabularies may be specified via dotted names using the ``source`` tag:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:131
msgid "Or, a source binder:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:141
msgid "With Python like:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:165
msgid "Note that we need to add the i18n namespace and a domain specification:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:234
msgid "Examples:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:287
#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:326
msgid "Sample Python for the validator factory:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/dexterity-xml.rst:295
msgid "For a callable using context:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:10
msgid "The easiest way to apply form hints in Python code is to use the directives from `plone.autoform` and `plone.supermodel`. For the directives to work, the schema must derive from *plone.supermodel.model.Schema*. Directives can be placed anywhere in the class body. By convention they are kept next to the fields they apply to."
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:40
msgid "These form directives are included in the *plone.autoform.directives* module:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:56
msgid "These form directives are included in the *plone.supermodel.directives* module:"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/form-schema-hints.rst:130
msgid "The security directives in the *plone.autoform.directives* module are shown below. Note that these are also used to control reading and writing of fields on content instances."
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/manipulating-content-objects.rst:5
msgid "Here the low level api is shown. When writing Plone Add-Ons consider using ``plone.api``, because it covers several standard cases and is a simple, future proof and stable api."
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:43
msgid "plone.app.contenttypes.behaviors.leadimage.ILeadImage"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/standard-behaviours.rst:43
msgid "Adds a *LeadImage* field like used for News item."
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/widgets.rst:22
msgid "NamedFile/NamedBlobFile"
msgstr ""

#: ../external/plone.app.dexterity/docs/reference/widgets.rst:23
msgid "NamedImage/NamedBlobImage"
msgstr ""

#: ../external/plone.app.dexterity/docs/schema-driven-types.rst:205
msgid "Unlike a standard interface, however, we are deriving from ``model.Schema`` (actually, ``plone.supermodel.model.Schema``). This is just a marker interface that allows us to add some form hints to the interface, which are then used by Dexterity (actually, the `plone.autoform`_ package) to construct forms. Take a look at the `plone.autoform`_ documentation to learn more about the various hints that are possible. The most common ones are from ``plone.autoform.directives``. Use ``fieldset()`` to define groups of fields, ``widget()`` to set widgets for particular fields and ``omitted()`` to hide one or more fields from the form. We will see examples of these later in the manual."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:13
msgid "Talking about multi-language support in Plone is talk about Products.LinguaPlone. It has been the *defacto* standard for managing translations of Archetypes-based content types in Plone through the years. Somehow its functionality never made its way into the Plone core and today it is in legacy status. Nowadays, Plone faces the rising of Dexterity content types and its incoming adoption into the Plone core in the near future (4.3) and complete the transition to Plone as default content types in Plone 5."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:21
msgid "plone.app.multilingual was designed originally to provide Plone a whole multilingual story. Using ZCA technologies, enables translations to Dexterity and Archetypes content types as well managed via an unified UI."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:25
msgid "This module provides the user interface for managing content translations. It's the app package of the next generation Plone multilingual engine. It's designed to work with Dexterity content types and the *old fashioned* Archetypes based content types as well. It only works with Plone 4.1 and above due to the use of UUIDs for referencing the translations."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:31
msgid "After more than 7 years, a GSOC, redesigns, reimplementations due to deprecated libraries, two major Plone versions finally we are able to say that plone.app.multilingual is finally here."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:37
msgid "Versions"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:39
msgid "``1.x`` - Plone 4.x with Archetypes and Dexterity"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:41
msgid "``2.x`` - Plone >= 4.x, < 5.0 with plone.app.contenttypes (Dexterity) and real shared content"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:44
msgid "``3.x`` - Plone >= 5.x"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:47
msgid "Components"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:49
msgid "PAM is composed of two packages, one is mandatory:"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:51
msgid "plone.app.multilingual (core, UI, enables Dexterity support via a behavior)"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:53
msgid "and one optional (at least one should be installed):"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:55
msgid "archetypes.multilingual (enables Archetypes support)"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:60
msgid "To use this package with both Dexterity and Archetypes based content types you should add the following line to your *eggs* buildout section::"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:66
msgid "To use this package with plone.app.contenttypes you should add the following line to your *eggs* buildout section::"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:73
msgid "Setup"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:75
msgid "After re-running your buildout and installing the newly available add-ons, you should go to the *Languages* section of your site's control panel and select at least two or more languages for your site. You will now be able to create translations of Plone's default content types, or to link existing content as translations."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:82
msgid "Features"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:84
msgid "These are the most important features PAM provides."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:87
msgid "Root Language folders"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:89
msgid "After the setup, PAM will create root folders for each of your site's languages and put translated content into the appropriate folders. A language folder implements INavigationRoot, so from the user's point of view, each language is \"jailed\" inside its correspondent language folder. There are event subscribers in place to capture user interaction with content and update the language in contents accordingly, for example when user moves or copy content between language folders."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:99
#: ../external/plone.app.multilingual/README.rst:411
msgid "Babel view"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:101
msgid "An evolution of the LP *translate* view, unified for either Archetypes and Dexterity content types. It features an already translated content viewer for the current content being edited via an ajaxified dynamic selector that shows them on the fly on user request."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:108
msgid "Language independent fields"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:110
msgid "PAM has support for language independent fields, but with a twist respect the LP implementation. As PAM does design does not give more relevance to one translated object above the others siblings (has no canonical object), fields marked as language independent get copied over all the members of the translation group always. The PAM UI will warn you about this behavior by reminding you that the values in the field on the other group participants will be overwritten."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:120
msgid "Translation locator policy"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:122
msgid "When translating content, this policy decides how it would be placed in the site's structure. There are two policies in place:"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:125
msgid "LP way, the translation gets placed in the nearest translated folder in parent's hierarchy"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:128
msgid "Ask user where to place the translated element in the destination language root folder"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:133
#: ../external/plone.app.multilingual/README.rst:415
msgid "Language selector policy"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:135
msgid "While browsing the site, the language selector viewlet allows users to switch site's content language and ease access between translations of the current content. There are two policies in place in case the translation of a specific language does not exist (yet):"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:140
msgid "LP way, the selector shows the nearest translated container."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:141
msgid "Shows the user an informative view that shows the current available translations for the current content."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:146
#: ../external/plone.app.multilingual/README.rst:416
msgid "Neutral root folder support"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:148
msgid "The root language folders are used to place the tree of the correspondent language content. However, there are some use cases we need content that does not belongs to any language. For example, for assets or side resources like images, videos and documents. There is need to maintain a language neutral folder for place this kind of objects. After PAM setup, there is a special folder called *Language shared*. All items placed in this folder will have neutral as its default language and will be visible from the other root language folders as they were placed there."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:159
#: ../external/plone.app.multilingual/README.rst:418
msgid "Translation map"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:161
msgid "In order to ease the translation tasks, we devised a tool that displays in a useful way all the current translated objects and its current translation information. The map also shows a list of missing translations in case you want to build a *mirrored* (completely) translated site."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:168
#: ../external/plone.app.multilingual/README.rst:419
msgid "Google Translation Service integration"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:170
msgid "If you are subscriber of the Google Translation service (a paid service), you can setup your API key on *Languages* site setup. Then, you will notice a new icon in the babel view that takes the original field on the left side and using Google Translations service, translates its contents and fill the right side field."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:178
#: ../external/plone.app.multilingual/README.rst:420
msgid "LinguaPlone migration"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:180
msgid "You can migrate your existing LP powered sites to PAM using the *Migration* tab in the *Languages* control panel. The migration has been divided into 4 steps for separation of concerns and for improving the success of each of the required procedures."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:186
msgid "Step 0 (optional) - Reindex the language index"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:188
msgid "The migration of LinguaPlone content depends on an up-to-date Language index. Use this step to refresh this index. **Warning:** Depending on the number of items in your site, this can take a considerable amount of time. This step is not destructive and can be executed as many times as needed."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:194
msgid "Step 1 - Relocate content to the proper root language folder"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:196
msgid "This step will move the site's content to its correspondent root language folder and previously will make a search for misplaced content through the site's content tree and will move them to its nearest translated parent. **Warning:** This step is destructive as it will alter your content tree structure. Make sure you have previously configured your site's languages properly in the 'Site Languages' tab of the 'Languages' control panel. It's advisable that you do not perform this step on production servers having not tried it in development/preproduction servers previously. Depending on the distribution of your site's content and the accuracy of the language information on each content object you may need to relocate manually some misplaced content after this step. Despite the fact that this step is 'destructive' it can be executed as times as needed if some problem is detected and afterwards you fix the problem. Please, refer to the procedure log when it finishes."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:211
msgid "Step 2 - Transfer multilingual catalog information"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:213
msgid "This step will transfer the relations between translations stored by LinguaPlone to the PAM catalog. This step is not destructive and can be executed as many times as needed."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:218
msgid "Step 3 - Cleanup after migration"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:220
msgid "This step will search and fix some lost dependencies to the ITranslatable interface hidden in the relation catalog and it gets rid of them. It must be run only when LinguaPlone is already uninstalled, so this step is hidden until then."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:226
msgid "Marking objects as translatables"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:229
#: ../external/plone.app.multilingual/README.rst:247
msgid "Archetypes"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:231
msgid "By default, if PAM is installed, Archetypes-based content types are marked as translatables"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:236
#: ../external/plone.app.multilingual/README.rst:267
msgid "Dexterity"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:238
msgid "Users should mark a dexterity content type as translatable by assigning a the multilingual behavior to the definition of the content type either via file system, supermodel or through the web."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:244
msgid "Marking fields as language independant"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:249
msgid "The language independent fields on Archetype-based content are marked the same way as in LinguaPlone::"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:262
msgid "If you want to completely remove LinguaPlone of your installation, you should make sure that your code are dependant in any way of LP."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:269
msgid "There are four ways of achieve it."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:272
msgid "Directive"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:274
msgid "In your content type class declaration::"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:280
msgid "Supermodel"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:282
msgid "In your content type XML file declaration::"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:290
msgid "Native"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:292
msgid "In your code::"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:298
#: ../external/plone.app.theming/docs/index.rst:368
msgid "Through the web"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:300
msgid "Via the content type definition in the *Dexterity Content Types* control panel."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:304
msgid "Internal design of plone.app.multilingual"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:306
msgid "All the internal features are implemented on the package plone.app.multilingual."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:308
msgid "The key points are:"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:310
msgid "Each translation is a content object"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:311
msgid "There is no canonical object"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:312
msgid "The translation reference storage is external to the content object"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:314
#: ../external/plone.app.multilingual/README.rst:340
msgid "Adapt all the steps on translation"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:315
#: ../external/plone.app.multilingual/README.rst:366
msgid "Language get/set via an unified adapter"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:316
msgid "Translatable marker interface(s)"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:320
msgid "There is no canonical content object"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:322
msgid "Having a canonical object on the content space produces a dependency which is not orthogonal with the normal behavior of Plone. Content objects should be autonomous and you should be able to remove it. This is the reason because we removed the canonical content object. There is a canonical object on the translation infrastructure but is not on the content space."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:330
msgid "Translation reference storage"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:332
msgid "In order to maintain the relations between the different language objects we designed a common object called a *translation group*. This translation group has an UUID on its own and each object member of the group stores it in the object catalog register. You can use the ITranslationManager utility to access and manipulate the members of a translation group given one object of the group."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:342
msgid "The different aspects involved on a translation are adapted, so it's possible to create different policies for different types, sites, etc."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:345
msgid "ITranslationFactory - General factory used to create a new content"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:347
msgid "ITranslationLocator - Where we are going to locate the new translated content"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:349
msgid "Default : If the parent folder is translated create the content on the translated parent folder, otherwise create on the parent folder."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:352
msgid "ITranslationCloner - Method to clone the original object to the new one"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:354
msgid "Default : Nothing"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:356
msgid "ITranslationIdChooser - Which id is the translation"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:358
msgid "Default : The original id + lang code-block"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:360
msgid "ILanguageIndependentFieldsManager - Manager for language independent fields"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:362
msgid "Default: Nothing"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:368
msgid "In order to access and modify the language of a content type regardless the type (Archetypes/Dexterity) there is a interface/adapter::"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:373
msgid "You can use::"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:378
msgid "or in case you want to set the language of a content::"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:384
msgid "Translatable marker interface"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:386
msgid "In order to know if a content can be translated there is a marker interface::"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:391
msgid "Source Code"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:395
msgid "Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.app.multilingual>`_."
msgstr ""

#: ../external/plone.app.multilingual/README.rst:404
msgid "Roadmap"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:406
msgid "This is the planned feature list for PAM:"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:409
msgid "1.0"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:412
msgid "Root language folders"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:413
msgid "Non invasive language selector"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:414
msgid "Universal link"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:417
msgid "Catalog based storage"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:424
msgid "2.0 (PLIP 13091)"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:426
msgid "The first version compatible with PLIP 13091 (https://dev.plone.org/ticket/13091)"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:428
msgid "Update, get rid of legacy code and transfer some of the PAM logic to the Plone core (plone.app.i18n)"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:430
msgid "Perform the same for other parts of Plone core to integrate some monkey patches and update legacy code from Products.PloneLanguageTool"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:435
msgid "3.0"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:437
msgid "XLIFF export/import"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:438
msgid "Iterate support: we know there are some needs about iterate integration"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:439
msgid "LinguaPlus/linguatools set of useful tools"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:440
msgid "Outdated translations alerts and translation workflows support"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:441
msgid "plone.app.toolbar/plone.app.cmsui support"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:442
msgid "Add support for Deco layouts and content types"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:443
msgid "Pluggable translation policies"
msgstr ""

#: ../external/plone.app.multilingual/README.rst:444
msgid "Pluggable language policies negotiations"
msgstr ""

#: ../external/plone.app.robotframework/README.rst:2
msgid "plone.app.robotframework"
msgstr ""

#: ../external/plone.app.robotframework/README.rst:13
msgid "**plone.app.robotframework** provides `Robot Framework <http://code.google.com/p/robotframework/>`_ compatible resources and tools for writing functional Selenium tests (including acceptance tests) for Plone CMS and its add-ons."
msgstr ""

#: ../external/plone.app.robotframework/README.rst:18
msgid "Please read the full documentation at `Plone Developer Documentation <http://developer.plone.org/reference_manuals/external/plone.app.robotframework/>`_."
msgstr ""

#: ../external/plone.app.robotframework/README.rst:22
msgid "Known good versions"
msgstr ""

#: ../external/plone.app.robotframework/README.rst:24
msgid "This is the latest known good versions for **plone.app.robotframework** and packages related to it."
msgstr ""

#: ../external/plone.app.robotframework/README.rst:27
msgid "Updated: 2015-07-31"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:2
msgid "Debugging Robot Framework tests"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:4
msgid "It's not always so easy to get the used Selenium keywords right. There are a few ways to pause the test runner in middle of a test to ease figuring out what to do next:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:8
msgid "Set the variable ``SELENIUM_RUN_ON_FAILURE`` to use the Debug-keyword provided in ``plone/app/robotframework/keywords.robot`` resource file, e.g. with:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:16
msgid "Or when testing against robot-server, just run your test suite with provided script:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:23
msgid "This will stop the test automatically at the first failing step with the first working approach listed also below."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:26
msgid "Use interactive `robotframework-debuglibrary`_ with *Debug*-keyword' (requires that the used python is compiled with readline-support):"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:37
msgid "Pause Selenium (WebDriver) completely to inspect your step with *Pause execution* keywords from *Dialogs*-library shipped with Robot Framework:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:49
msgid "The above is also provided as *Pause*-keyword in ``keywords.robot`` resource file:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:63
msgid "Let Selenium (WebDriver) sleep for long time:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:72
msgid "Slow down Selenium (WebDriver) to make the tests easier to follow:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:80
msgid "Use provided Python keyword to drop Zope server (or Robot Framework test runner) into debugger:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:91
msgid "Write a custom python keyword into your custom Python keyword library to drop Zope server (or Robot Framework test runner) into debugger."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:94
msgid "But there's one catch in debugging your code while running Robot Framework tests: Robot may eat your standard input and output, which prevents you to just ``import pdb; pdb.set_trace()``."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/debugging.rst:98
msgid "Instead, you have to add a few more lines to reclaim your I/O at first, and only then let your debugger in:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:2
msgid "Known plone.app.robotframework-examples"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:4
msgid "A minimal example **plone.app.robotramework**-example:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:6
msgid "https://github.com/datakurre/example.product/tree/p.a.robotframework"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:7
msgid "https://travis-ci.org/datakurre/example.product"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:8
msgid "https://saucelabs.com/u/exampleproduct"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:10
msgid "This is how we used this for Plomino to run some robot tests at SauceLabs:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:12
msgid "https://github.com/plomino/Plomino/pull/322/files"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:13
msgid "https://travis-ci.org/fulv/Plomino"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:14
msgid "https://saucelabs.com/u/fulv_plomino"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:16
msgid "More examples which already contain robotframework tests in collective:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:18
msgid "https://github.com/collective/collective.wfcomment (checking prepOverlays)"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:20
msgid "https://github.com/collective/collective.prettyphoto"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:21
msgid "https://github.com/collective/plone.app.imagecropping (includes javascript interaction in cropping editor)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:23
msgid "https://github.com/plone/plone.app.robotframework/tree/master/src/plone/app/robotframework/tests"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/examples.rst:24
msgid "http://plone.293351.n2.nabble.com/Robot-Framework-How-to-fill-TinyMCE-s-text-field-tp7563662p7563691.html"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:2
msgid "How to write Robot Framework tests for Plone"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:4
msgid "This is a brief tutorial for writing Robot Framework test for Plone with `plone.app.robotframework`_. *plone.app.robotframework* provides `Robot Framework`_ -compatible resources and tools for writing functional Selenium tests (including acceptance tests) for Plone CMS and its add-ons. (See also :doc:`examples` for more ideas)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:14
msgid "Require plone.app.robotframework"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:16
msgid "Update ``setup.py`` to require *plone.app.robotframework*:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:27
msgid "All you need is *plone.app.robotframework*. It will require the rest (selenium_, robotframework_, `robotframework-selenium2library`_ and also robotsuite_)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:31
msgid "Selenium-bindings for Python use Firefox as the default browser. Unless you know how to configure other browsers to work with Selenium you should have Firefox installed in your system"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:43
msgid "Define functional testing layer"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:45
msgid "Plone add-on testing requires defining a custom test layer, which setups Plone-sandbox, the dependent add-ons and any custom configuration required by the tests."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:49
msgid "Update your ``src/my/product/testing.py`` to include:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:62
msgid "AUTOLOGIN_LIBRARY_FIXTURE is optional, but it will allow you to write faster Selenium tests, because tests don't need to spend time on login forms. Also note that the order of the bases matters."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:66
msgid "If you don't have any testing layers for your product yet, or want to know more about them, please read `plone.app.testing`_-documentation."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:73
msgid "Install Robot-tools"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:75
msgid "*plone.app.robotframework* ships with two main helper scripts for writing tests:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:78
msgid "``bin/robot-server`` starts a temporary Plone site with the given test layer set up"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:81
msgid "``bin/robot`` executes Robot Framework's ``pybot``-runner so that it will run the given test suite against the running ``robot-server``, ensuring that tests will be run in isolation (database is cleaned between the tests)"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:86
#: ../external/plone.app.robotframework/docs/source/reload.rst:7
#: ../external/plone.app.robotframework/docs/source/ride.rst:8
msgid "Update ``buildout.cfg``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:102
msgid "Robot-tools are optional, but will ease and speed up your test development."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:107
msgid "Start test server"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:109
msgid "Once the buildout with Robot-tools is run, start the test server with:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:115
msgid "Once the test server has started, there should be a test Plone-site served at http://localhost:55001/plone/ (by default). This allows you to play with the sandbox while writing the tests."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:119
msgid "The default admin user for `plone.app.testing`_-based Plone-sandbox is ``admin`` and password is ``secret``."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:124
msgid "Write your first test suite"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:126
msgid "Robot tests are written in test suites, which are plain text files, usually ending with ``.robot`` (and older ones with ``.txt``)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:129
msgid "The first test can be written anywhere in the filesystem."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:131
msgid "For example, a ``test_hello.robot``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:149
msgid "Robot is all about running test clauses called **keywords** (or, to be more exact, keyword calls with parameters). Every test case may contain one or more keywords, which are run sequentially -- usually until the first of them fails. Keywords are separated from their arguments (and arguments from each other) using at least two spaces."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:155
#: ../external/plone.app.robotframework/docs/source/robot.rst:14
msgid "Keywords are defined in **keyword libraries** and as **user keywords**. Keyword libraries can be Python libraries or XML-RPC-services. User keywords are just lists of test clauses reusing existing keywords or other user keywords. User keywords are described in the test suite, or imported from **resource** files."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:160
msgid "Here is a more complicated example with some user keywords in action:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:197
msgid "Please, stop for a while end read the example above again. Once you understand how you can stack keyword calls with user keywords, you are ready to unleash the power of Robot Framework all the way to building your own domain specific test language."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:202
msgid "We use ``.robot`` as the Robot Framework test suite file extension to make it easier for developers to configure Robot Framework syntax highlighting for their editors (otherwise ``.txt`` would work also)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:208
msgid "Run your first test suite"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:210
msgid "Once the ``bin/robot-server`` has been started and a test suite has been written, the new test suite can be run with ``bin/robot``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:217
msgid "``bin/robot`` is mostly just a wrapper for Robot Framework's pybot test runner, but it does inject necessary options to enable plone.testing's test isolation for Plone when used together with ``bin/robot-server``."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:224
msgid "Integrate with Zope-testrunner"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:226
msgid "It's often convenient to run Robot tests with other Plone tests (e.g. on Jenkins or Travis-CI). To achieve that, we integrate Robot tests to be run with other tests so that all tests can be run with `zope.testrunner`_."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:232
msgid "For *zope.testrunner* integration, create ``src/my/product/tests/test_robot.py``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:252
msgid "For this to work and ``zope.testrunner`` to discover your robot test suite, remember to move ``test_hello.robot`` under ``my/product/tests``."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:256
msgid "`RobotSuite`_ is our package for wrapping Robot Framework tests into Python unittest compatible test cases. It's good to know that this registration pattern is the same as how doctest-suites are registered to support *zope.testrunner*'s layers (see https://pypi.python.org/pypi/plone.testing for layered doctest examples)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:264
msgid "Running tests with zope.testrunner"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:266
msgid "Once your robot test have been integrated with *zope.testrunner* using ``test_robot.py``-module (or any other module returning RobotTestSuite), you can list your integrated robot test cases with command:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:274
msgid "And run robot tests cases with all other test cases with command:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:280
msgid "You can filter robot test using ``-t``-argument for zope.testrunner*:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:286
msgid "And it's also possible to filter test by Robot Framework tags:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:292
msgid "Or exclude matching tests from being run:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:300
msgid "How to write more tests"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:302
msgid "The most difficult part in writing robot tests with Selenium-keywords is to know the application you are testing: which link to click when and to which field to input test data."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:306
msgid "At first, you should have a brief idea about the available keywords:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:308
#: ../external/plone.app.robotframework/docs/source/index.rst:49
msgid "`Robot Framework built-in library documentation`__"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:309
#: ../external/plone.app.robotframework/docs/source/index.rst:50
msgid "`Robot Framework Selenium2Library documentation`__"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:314
msgid "Then, learn to use pause test execution to make it easier to figure out, what to do next:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:337
msgid "Robot Framework ships with a few selected standard libraries. One of them is the *Dialogs*-library, which provides a very useful keyword: *Pause execution*. By importing Dialogs-library (while developing the test) and adding the *Pause execution* keyword, you can pause the test at any point to make it possible to figure out what to do next. (Dialogs depend on `TkInter-library <http://wiki.python.org/moin/TkInter>`_.)"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:344
msgid "Be sure to remove *Import libary* and *Pause execution* keyword calls before committing your tests to avoid pausing your tests on CI."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/happy.rst:348
msgid "*plone.app.robotframework* ships with an optional collection of Plone-specific user keywords, which already include *Pause* keyword as a shortcut for *Pause execution* keywords. You can include and use the collection with:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:2
msgid "Writing Robot Framework tests for Plone"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:4
msgid "`plone.app.robotframework`_ provides `Robot Framework`_-compatible tools and resources for writing functional Selenium_-tests (including acceptance tests) for `Plone CMS`_ and its add-ons."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:8
msgid "This documentation gives you everything to get started in writing and executing functional Selenium tests (including acceptance tests) for Plone or your own Plone add-on. We depend  on two testing frameworks, `Robot Framework`_ and Selenium_ (with Selenium2Library_), and our tools and resources provided in *plone.app.robotframework*."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:14
msgid "`Robot Framework`_ is a generic test automation framework for acceptance testing and acceptance test-driven development (ATDD), even for behavior driven development (BDD). It has easy-to-use plain text test syntax and utilizes the keyword-driven testing approach. Selenium is a web browser automation framework that exercises the browser as if the user was interacting with the browser."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:28
msgid "Start here"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:30
msgid "Start here to learn the default way of writing Robot Framework tests to be run just next to your other Plone-tests with `zope.testrunner`_:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:43
msgid "Print these"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:45
msgid "Print these keyword libraries to be easily available when writing Robot Framework tests, because they provide the basic building blocks for your tests:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:57
msgid "Advanced topics"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:71
msgid "User keywords"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:73
msgid "*plone.app.robotframework* ships with the following user keyword libraries as resource files:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:76
msgid ":download:`libdoc/user_keywords.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:77
msgid ":download:`libdoc/user_saucelabs.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:78
msgid ":download:`libdoc/user_selenium.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:79
msgid ":download:`libdoc/user_server.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:81
msgid "Each user keyword library can be included as a resource with ``Resource plone/app/robotframework/libraryname.rst`` in test suite ``*** Settings ***``."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:86
msgid "Remote keywords"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:88
msgid "Remote keywords are a special *plone.app.robotframework*-way to implement Plone-specific keyword in Python for e.g. creating Plone content in test setup keywords. *plone.app.robotframework* comes with the following remote keyword libraries:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:93
msgid ":download:`libdoc/remote_autologin.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:94
msgid ":download:`libdoc/remote_content.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:95
msgid ":download:`libdoc/remote_genericsetup.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:96
msgid ":download:`libdoc/remote_i18n.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:97
msgid ":download:`libdoc/remote_mockmailhost.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:98
msgid ":download:`libdoc/remote_quickinstaller.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:99
msgid ":download:`libdoc/remote_users.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:100
msgid ":download:`libdoc/remote_zope2server.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:102
msgid "All remote keywords above are included by including a special test fixture ``plone.app.robotframework.testing.REMOTE_LIBRARY_BUNDLE_FIXTURE`` in *bases* of the used functional testing fixture, and finally with ``Library  Remote ${PLONE_URL}/RobotRemote``-command in test suite ``*** Settings ***``."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:107
msgid "See ``testing.py`` in *plone.app.robotframework* for how to create a custom remote library bundle fixture with only selected (or custom) remote keyword libraries."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:113
msgid "Python keywords"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:115
msgid "In addition to user keywords and remote libraries, *plone.app.robotframeworks* provides the following generic Python keyword libraries (their code is not dependent on Plone code base)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:119
msgid ":download:`libdoc/python_debugging.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:120
msgid ":download:`libdoc/python_layoutmath.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:121
msgid ":download:`libdoc/python_saucelabs.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:122
msgid ":download:`libdoc/python_zope2server.html`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:124
msgid "Each Python keyword library can be included as with ``Library plone.app.robotframework.LibraryClassName`` in test suite ```*** Settings ***``."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:130
msgid "Other resources"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:132
msgid "`How to write good Robot Framework test cases`__"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:133
msgid "`List of available Robot Framework test libraries`__"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:134
msgid ":doc:`plone.app.robotframework examples of use <examples>`"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:141
msgid "Old tutorials"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/index.rst:143
msgid "While these tutorials are still useful for gettings started with Robot Framework testing for Plone, these may contain outdated instructions!"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:3
msgid "Selenium2Library Keywords"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:7
msgid "TODO: The general idea of this document is to give a first introduction to the Selenium2Library keywords. We do NOT want to re-document the existing Selenium2Library documentation."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:11
msgid "Selenium2Library is a web testing library for Robot Framework. It provides you with several low-level keywords to access certain elements of a web page, to conduct actions on a web page and to test if a page met certain acceptance critera."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:17
msgid "First Example"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:19
msgid "TODO: We need a simple first example to explain the basic concepts. Here are some ideas."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:23
msgid "Test Google Search For Plone::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:34
msgid "Test Plone Search::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:45
msgid "Test Plone Live Search::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:56
msgid "Test Plone Contact Form::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:65
msgid "TODO: Explain the concepts of tests"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:67
msgid "Form:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:69
msgid "Precondition (Given)"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:70
msgid "Action (When)"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:71
msgid "Postcondition/Test (Then)"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:73
msgid "These parts should be separated by blank lines."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:77
msgid "Preconditions"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:79
msgid "Open Browser???"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:80
msgid "Go to ..."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:84
msgid "http://rtomac.github.com/robotframework-selenium2library/doc/Selenium2Library.html#Go%20To"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:87
#: ../external/tutorial.todoapp/docs/release.rst:39
msgid "Actions"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:90
msgid "Click on elements"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:92
msgid "Click Button"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:93
msgid "Click Element"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:94
msgid "Click Image"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:95
msgid "Click Link"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:99
msgid "http://rtomac.github.com/robotframework-selenium2library/doc/Selenium2Library.html#Click%20Button"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:102
msgid "Fill out form"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:104
msgid "Input Text"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:105
msgid "Input Password"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:109
msgid "http://rtomac.github.com/robotframework-selenium2library/doc/Selenium2Library.html#Input%20Text"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:113
msgid "Postconditions"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:115
msgid "Page Should Contain <locator>"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:117
msgid "Page Should Contain Button | Checkbox | Element | Image | Link | List | Radio Button | Textfield <locator>"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:119
msgid "Page Should Not Contain <locator>"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:123
msgid "http://rtomac.github.com/robotframework-selenium2library/doc/Selenium2Library.html#Page%20Should%20Contain"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:127
msgid "Locating elements"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:129
msgid "Locating element by id::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/keywords.rst:142
msgid "'locating elements' section http://rtomac.github.com/robotframework-selenium2library/doc/Selenium2Library.html"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/browser.rst:3
msgid "Plone Browser Keywords"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/browser.rst:5
msgid "Start browser and wake plone up::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/browser.rst:25
msgid "Close browser and selenium server::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:3
msgid "Plone Content Keywords"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:5
msgid "Robot Framework / Selenium2Library keywords to create/delete/change Plone content."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:8
msgid "Use a test-folder (like in p.a.testing) for isolation and to avoid problems for instance with name clashes in the global navigation."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:11
msgid "We currently have two different ways to create content:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:13
msgid "Create <portal_type> <title>: create content object in portal root / test folder."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:16
msgid "Add <portal_type> <title>: add content object in current context / folder."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:18
msgid "Maybe we can come up with a smart way to do both with one keyword with optional parameters?"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:25
msgid "Create folder (Create a folder object within the test-folder)::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:39
msgid "Create page (Create a page object within the test-folder)::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:55
msgid "Add content"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/content.rst:57
msgid "Add page (Add a page object in the current context/location)::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/edit-wizard-tabs.rst:3
msgid "Edit Wizard Keywords"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/edit-wizard-tabs.rst:6
msgid "Wizard tabs"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/edit-wizard-tabs.rst:8
msgid "Open Wizard Tab::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/history.rst:3
msgid "History Keywords"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/history.rst:5
msgid "Open history popup::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/index.rst:3
msgid "Plone Keywords"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/index.rst:5
msgid "plone.act provides high-level keywords to test Plone. Idealy it should provide all the keywords that are necessary to write acceptance test in Plone."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/index.rst:21
msgid "Using plone.app.testing variables"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/index.rst:23
msgid "You can use existing plone.app.testing variables defined in `plone/app/testing/interfaces.py <https://github.com/plone/plone.app.testing/blob/master/plone/app/testing/interfaces.py>`_. in your acceptance tests::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/index.rst:49
msgid "Misc"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/index.rst:51
msgid "Goto homepage::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/index.rst:57
msgid "..note::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/index.rst:63
msgid "Click Overlay Link::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/index.rst:70
msgid "Should be above::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/index.rst:79
msgid "Remove Content::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/index.rst:91
msgid "Rename Content Title::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/login.rst:3
msgid "Plone Login/Logout Keywords"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/reference-browser-widget.rst:3
msgid "Reference Browser Widget Keywords"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/reference-browser-widget.rst:5
msgid "Set Reference Browser Field Value::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/plone-keywords/reference-browser-widget.rst:12
msgid "Checkbox Select::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/reload.rst:2
msgid "Auto-reload code with robot-server"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/reload.rst:4
msgid "[reload]-extras will make ``robot-server`` to detect filesystem changes under ``./src`` and reload the test layer when a change is detected."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/reload.rst:24
msgid "If you added the ``reload``-extras to the ``plone.app.robotframework`` egg and there is no ``src`` directory in your buildout (such as when you are using the buildout of a specific product), robot-server will complain and fail to start. In this case, use the ``--reload-paths`` option on the command line to tell it where it should watch for changes, e.g.:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:2
msgid "Speed up your BDD Given-clauses via a remote library"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:4
msgid "BDD-style tests begin with one or more *Given*-clauses that should setup the test environment for the actual tests-clauses (*When* and *Then*)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:7
msgid "Because Given-clauses are not really part of the actual test, it is not necessary to run them through Selenium (using Selenium2Library), but it would be faster to write custon Python keywords for them."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:11
msgid "**plone.act** includes an example, how to a robot `remote library <http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html?r=2.7.6#remote-library-interface>`_, which could be called to interact with the site without Selenium."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:15
msgid "The base implementation is provided at:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:17
msgid "https://github.com/plone/plone.app.robotframework/blob/master/src/plone/app/robotframework/remote.py"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:19
msgid "https://github.com/plone/plone.app.robotframework/blob/master/src/plone/app/robotframework/quickinstaller.py"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:21
msgid "An example integration into testing layer is provided at:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:23
msgid "https://github.com/plone/plone.app.robotframework/blob/master/src/plone/app/robotframework/testing.py#L65"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:25
msgid "An example test suite using the library is provided at:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:27
msgid "https://github.com/plone/plone.app.robotframework/blob/master/src/plone/app/robotframework/tests/test_robot.py#L48"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/remote.rst:29
msgid "https://github.com/plone/plone.app.robotframework/blob/master/src/plone/app/robotframework/tests/robot_quickinstaller_library.robot"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/ride.rst:2
msgid "Installing RIDE (Robot Framework IDE)"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/ride.rst:4
msgid "[ride]-extras will create a script to start RIDE, the IDE for Robot Framework, but it can be launched only explicitly with a compatible system python with wxPython 2.8.x installed."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/ride.rst:24
msgid "If you can get RIDE running, you should select its *Run*-tab, change the value of *Execution Profile* to *custom script*, and click Browser*-button to select *bin/robot* from the buildout directory. Running RIDE using bin/robot* will enable test isolation to work when running tests from RIDE."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/ride.rst:29
msgid "If you want to place a breakpoint you can use the ``Comment`` keyword with argument ``PAUSE``. RIDE will stop and let you step through your test."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:2
msgid "Robot terminology"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:4
msgid "Robot Framework is a generic and independent test automation framework. It has its own expandable test syntax, test runner and test reporting tools. Yet, because of its extensibility it's very pleasant to work with."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:8
msgid "Robot is all about running test clauses called **keywords** (or, to be more exact, keyword calls with parameters). Every test case may contain one or more keywords, which are run sequentially -- usually until the first of them fails. Keyword arguments use two spaces as a separator. Keywords are separated from their arguments (and arguments from each other) using at least two spaces."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:21
msgid "Test suites"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:23
msgid "Robot tests cases are written in test suites, which are plain text files, usually ending with ``.robot`` (or just ``.txt``)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:26
msgid "Advanced robot users may learn from the `Robot Framework User Guide`_ how to make hierarchical test suites."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:31
msgid "Let's look into an example test suite in detail:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:36
msgid "Each test suite may contain one to four different parts:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:41
msgid "**Settings**"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:39
msgid "Is used to import available keyword libraries or resources (resources are plain text files like test suites, but without test cases) and define possible setup and teardown keywords."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:45
msgid "**Variables**"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:44
msgid "Is used to define available robot variables with their default values, or override variables defined in imported resources."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:49
msgid "**Test Cases**"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:48
msgid "Is used to define runnable tests cases, which are made of test clauses calling test keywords."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:54
msgid "**Keywords**"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:52
msgid "Is used to define new user keywords, which may re-use existing keywords from imported libraries or resource files."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:57
msgid "Keywords libraries"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:59
msgid "By default, only keywords from `built-in`_-library are available to be used in tests. Other keywords must be included by importing a keyword library in *Settings* part of test suite:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:72
msgid "View `the complete list of available keyword libraries shipped with Robot Framework or available as separate package`__."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:77
msgid "Libraries may also be included in resource files, and then it's enough to import such resource file."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:80
msgid "There's also a built-in-keyword ``Import Library`` for importing library in a middle of test case or keyword:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:92
msgid "Remote keyword libraries"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:94
msgid "One of the available keyword libraries (shipped with Robot Framework) is special: `Remote`_-library. Remote-library makes it possible to provide test keywords from an XML-RPC-service, for example, from a public Zope2-object."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:100
msgid "*plone.app.robotframework*-provides convention and helpers to enable customizable set of remote keywords in Python as a public portal-tool object called ``RobotRemote``. These keywords can be imported with:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:112
msgid "Remote-library approach provides the following benefits when testing Plone:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:114
msgid "All test setup keywords can be implemented in Python, which makes their execution almost instant when compared to executing similar steps in Selenium (to make your Selenium tests as fast as possible only the really meaningful steps should be executed through Selenium)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:119
msgid "Each keyword call is executed as a normal transaction in Plone, which makes all code behave normally as in real use."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:122
msgid "When e.g. :download:`content creation (remote) keywords <libdoc/remote_autologin.html>` are called with :download:`autologin <libdoc/remote_content.html>` enabled, all actions are performed as the autologin user so author metadata etc is created correctly."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:131
msgid "Resource files"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:133
msgid "Resource files provide a re-usable way to abstract your test suites. To put it simply, resources files are just like all the other ``.robot``-files, but they should not contain ``*** Test Cases ***`` certain ``*** Settings ***`` commands (*Suite Setup*, *Suite Teardown*, *Test Setup* or *Test Teardown*)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:138
msgid "Resource files are the perfect way to import common libraries (with *Library* command in ```*** Settings ***``), define global ``*** Variables ***`` and define re-usable common ```*** Keywords ***```. Resource files are included in a test suite with *Resource*-command in ```*** Settings ***``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:153
msgid "BDD-style tests"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:155
msgid "Robot support Gherkin-style tests by removing exact words ``given``, ``when``, ``then`` and ``and`` from the beginning of keyword to find a matching keyword."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:159
msgid "For example, a clause ``Given I'm logged in as an admin``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:168
msgid "will match to a keyword ``I'm logged in as an admin``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/robot.rst:177
msgid "There's a little bit more of BDD-style tests available in `Robot Framework User Guide`_."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:2
msgid "Integrate with Sauce Labs"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:4
msgid "Register an account for http://saucelabs.com/ with the *Open Sauce* plan. Derive username from product name. For example, ``myproduct``. Use your own contact email for the beginning.  It can be changed later."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:8
msgid "Install travis-gem for your active Ruby-installation:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:14
msgid "Log in to Sauce Labs to see your Sauce Labs access key (at the bottom of the left column)."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:17
msgid "Encrypt Sauce Labs credentials into ``.travis.yml``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:24
msgid "Update ``.travis.yml`` to set up the Sauce Labs connection before tests:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:47
msgid "If you already have an ``env`` section, for instance to define different versions of Plone like this:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:58
msgid "you will need to declare those variables in a ``matrix`` section, like this:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:75
msgid "Update your test suites to use SauceLabs test browser by including ``saucelabs.robot`` resource and updating your *Test Setup* and *Test Teardown* to use SauceLabs-supporting keywords (with these changes the test suites will still continue to work also without SauceLabs):"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:93
msgid "Update ``travis.cfg`` to allow downloading robotframework-packages:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:107
msgid "Running Sauce Labs build manually"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:109
msgid "Download and unzip http://saucelabs.com/downloads/Sauce-Connect-latest.zip, then start Sauce-Connect with:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:116
msgid "Start ``bin/robot-server``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:122
msgid "Run tests with ``bin/robot``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:128
msgid "or"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:130
msgid "Create an argument file, e.g. ``saucelabs_arguments.txt``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/saucelabs.rst:138
msgid "Execute ``bin/robot`` with the argument file option:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/server.rst:2
msgid "Speed up your test writing with robot-server"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/server.rst:4
msgid "**plone.app.robotframework** comes with a special console script ``robot-server``, which starts up a Plone site with a given `plone.app.testing <http://pypi.python.org/pypi/plone.app.testing/>`_ testing layer set up."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/server.rst:8
msgid "This will save time when writing new robot tests, because you can try out your unfinished test over and over again without the usual time consuming setup/teardown of testing layers between every test."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/server.rst:12
msgid "Install ``robot-server`` and its counter part ``robot`` with support for the developed product with a buildout part::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/server.rst:28
msgid "After buildout, start ``robot-server`` with::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/server.rst:32
msgid "And run tests with ``robot`` and ``robot-server`` test isolation support with::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:2
msgid "Write a robot test for a new Plone add-on"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:4
msgid "This is a minimal tutorial for getting started with writing functional Selenium tests for a new Plone add-on with Robot Framework."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:9
msgid "Install Templer"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:11
msgid "At first, we should have an add-on to test with. For creating a new add-on, we use `Templer <http://templer-manual.readthedocs.org/en/latest/>`_."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:14
msgid "Create a directory for a Templer-buildout and move there::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:19
msgid "Create a file ``templer-buildout/buildout.cfg`` for Templer-installation with::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:31
msgid "Download a bootstrap for running the buildout::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:35
msgid "Bootstrap and run the buildout::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:42
msgid "Return back to the parent directory::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:48
msgid "Create a new product"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:50
msgid "Once we have Templer installed, we create a Plone add-on product by entering ``templer-buildout/bin/templer plone_basic`` and answering to the upcoming questions."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:54
msgid "We must make sure to answer ``True`` for the question::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:58
msgid "Once we have answered for all the questions, our add-on template is ready::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:94
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:39
msgid "Bootstrap and run buildout"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:96
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:41
msgid "Before we continue, now is a good time to run bootstrap and buildout to get the development environment ready::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:104
msgid "Run the default tests"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:106
msgid "Templer does create a couple of example tests for us -- one of them being a robot test."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:109
msgid "We can list the available tests with::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:117
msgid "And run the example robot test with::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:140
msgid "About functional test fixture"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:142
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:51
msgid "Functional Selenium tests require a fully functional Plone-environment."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:144
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:53
msgid "Luckily, with `plone.app.testing <http://pypi.python.org/pypi/plone.app.testing/>`_ we can easily define a custom test fixture with Plone and our own add-on installed."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:149
msgid "With Templer, both the base fixture and the functional test fixtures have already been defined in ``my.product/src/my/product/testing.py``. The latter with::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:164
msgid "Create a new robot test suite"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:166
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:77
msgid "Robot tests are written as text files, which are called test suites."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:168
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:79
msgid "It's good practice, with Plone, to prefix all robot test suite files with ``robot_``. This makes it easier to both exclude the robot tests (which are usually very time consuming) from test runs or run only the robot tests."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:172
msgid "Write an another robot tests suite ``my.product/src/my/product/tests/robot_hello.txt``::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:200
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:111
msgid "Defining browser for ``Open browser`` keyword as a variable makes it easy to run the test later with different browser."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:205
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:116
msgid "Register the suite for zope.testrunner"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:207
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:118
msgid "To be able to run Robot Framework test suite with `zope.testrunner <http://pypi.python.org/pypi/zope.testrunner/>`_ and on top of our add-ons functional test fixture, we need to"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:211
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:122
msgid "wrap the test suite into properly named Python unittest test suite"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:213
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:124
msgid "assign our functional test layer for all the test cases."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:215
msgid "We do this all by simply adding our new robot test suite into ``my.product/src/my/product/tests/test_robot.py``::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:234
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:143
msgid "Note that ``test_``-prefix in the filename of ``test_robot.py`` is required for **zope.testunner** to find the test suite."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:239
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:148
msgid "List and filter tests"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:241
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:150
msgid "Run ``bin/test`` (**zope.testrunner**) with ``--list-tests``-argument to see that our test is registered correctly::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:251
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:159
msgid "Experiment with ``-t``-argument to filter testrunner to find only our robot test::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:259
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:166
msgid "or everything else::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:265
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:172
msgid "We can also filter robot tests with tags::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:273
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:180
msgid "Run (failing) test"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:275
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:182
msgid "After the test has been written and registered, it can be run normally with ``bin/test``."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:278
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:185
msgid "The run will fail, because the test describes an unimplemented feature::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:327
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:234
msgid "Create an example view"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:329
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:236
msgid "Create view described in the test by registering a template into ``my.product/src/my/product/configure.zcml``::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:353
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:260
msgid "And writing the template into ``my.product/src/my/product/hello_world.pt``::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:375
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:282
msgid "Run (passing) test"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:377
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:284
msgid "Re-run the test to see it passing::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:400
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:307
msgid "Test reports"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:402
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:309
msgid "Robot Framework generates high quality test reports with screenshots of failing tests as:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:406
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:313
msgid "``my.product/parts/tests/robot_report.html``"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:406
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:313
msgid "Overview of the test results."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:408
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:315
msgid "``my.product/parts/tests/robot_log.html``:"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/templer.rst:409
#: ../external/plone.app.robotframework/docs/source/tutorial.rst:316
msgid "Detailed log for every test with screenshots of failing tests."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/travis-ci.rst:2
msgid "Integrate with Travis-CI"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/travis-ci.rst:5
msgid "travis.cfg"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/travis-ci.rst:22
msgid ".travis.yml"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/travis-ci.rst:40
msgid "Build matrix"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/travis-ci.rst:53
msgid "S3 artifacts"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:2
msgid "Write a robot test for an existing Plone add-on"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:4
msgid "This is a tutorial for getting started with writing functional Selenium tests for an existing Plone add-on with Robot Framework."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:7
msgid "Let's assumpt that we have an add-on **my.product**."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:11
msgid "Update requirements"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:13
msgid "At first, we need to fix our product to require all the necessary dependencies for running Robot Framework tests."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:16
msgid "To fix our dependencies, we update ``my.product/setup.py`` with::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:22
msgid "When testing with Plone version less than 4.3, we must pin the version of **plone.app.testing** into ``buildout.cfg``."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:25
msgid "Update ``my.product/buildout.cfg`` with::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:32
msgid "And create ``my.product/versions.cfg`` with::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:49
msgid "Define functional test fixture"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:58
msgid "After the base fixture has been created (by following `plone.app.testing <http://pypi.python.org/pypi/plone.app.testing/>`_ documentation) we only need to define a functional testing fixture, which adds a fully functional ZServer to serve a Plone sandbox with our add-on."
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:63
msgid "Update ``my.product/src/my/product/testing.py`` with::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:75
msgid "Create a robot test suite"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:83
msgid "Write a simple robot tests suite ``my.product/src/my/product/tests/robot_hello.txt``::"
msgstr ""

#: ../external/plone.app.robotframework/docs/source/tutorial.rst:126
msgid "We do this all by simply writing ``my.product/src/my/product/tests/test_robot.py``::"
msgstr ""

#: ../external/plone.app.testing/README.rst:0
#: ../external/plone.app.testing/docs/source/README.rst:0
msgid "Table of contents"
msgstr ""

#: ../external/plone.app.testing/README.rst:6
#: ../external/plone.app.testing/docs/source/README.rst:6
msgid "``plone.app.testing`` provides tools for writing integration and functional tests for code that runs on top of Plone. It is based on `plone.testing`_. If you are unfamiliar with ``plone.testing``, the concept of layers, or the `zope.testing`_ testrunner, please take a look at the the ``plone.testing`` documentation. In fact, even if you are working exclusively with Plone, you are likely to want to use some of its features for unit testing."
msgstr ""

#: ../external/plone.app.testing/README.rst:13
#: ../external/plone.app.testing/docs/source/README.rst:13
msgid "In short, ``plone.app.testing`` includes:"
msgstr ""

#: ../external/plone.app.testing/README.rst:15
#: ../external/plone.app.testing/docs/source/README.rst:15
msgid "A set of layers that set up fixtures containing a Plone site, intended for writing integration and functional tests."
msgstr ""

#: ../external/plone.app.testing/README.rst:17
#: ../external/plone.app.testing/docs/source/README.rst:17
msgid "A collection of helper functions, some useful for writing your own layers and some applicable to tests themselves."
msgstr ""

#: ../external/plone.app.testing/README.rst:19
#: ../external/plone.app.testing/docs/source/README.rst:19
msgid "A convenient layer base class, extending ``plone.testing.Layer``, which makes it easier to write custom layers extending the Plone site fixture, with proper isolation and tear-down."
msgstr ""

#: ../external/plone.app.testing/README.rst:22
#: ../external/plone.app.testing/docs/source/README.rst:22
msgid "Cleanup hooks for ``zope.testing.cleanup`` to clean up global state found in a Plone installation. This is useful for unit testing."
msgstr ""

#: ../external/plone.app.testing/README.rst:28
#: ../external/plone.app.testing/docs/source/README.rst:28
msgid "``plone.app.testing`` 5.x works with Plone 5. ``plone.app.testing`` 4.x works with Plone 4 and Zope 2.12. It may work with newer versions. It will not work with earlier versions. Use ``plone.app.testing`` 3.x for Plone 3 and Zope 2.10."
msgstr ""

#: ../external/plone.app.testing/README.rst:34
#: ../external/plone.app.testing/docs/source/README.rst:34
msgid "Installation and usage"
msgstr ""

#: ../external/plone.app.testing/README.rst:36
#: ../external/plone.app.testing/docs/source/README.rst:36
msgid "To use ``plone.app.testing`` in your own package, you need to add it as a dependency. Most people prefer to keep test-only dependencies separate, so that they do not need to be installed in scenarios (such as on a production server) where the tests will not be run. This can be achieved using a ``test`` extra."
msgstr ""

#: ../external/plone.app.testing/README.rst:42
#: ../external/plone.app.testing/docs/source/README.rst:42
msgid "In ``setup.py``, add or modify the ``extras_require`` option, like so::"
msgstr ""

#: ../external/plone.app.testing/README.rst:50
#: ../external/plone.app.testing/docs/source/README.rst:50
msgid "This will also include ``plone.testing``, with the ``[z2]``, ``[zca]`` and ``[zodb]`` extras (which ``plone.app.testing`` itself relies on)."
msgstr ""

#: ../external/plone.app.testing/README.rst:53
#: ../external/plone.app.testing/docs/source/README.rst:53
msgid "Please see the `plone.testing`_ documentation for more details about how to add a test runner to your buildout, and how to write and run tests."
msgstr ""

#: ../external/plone.app.testing/README.rst:57
#: ../external/plone.app.testing/docs/source/README.rst:57
msgid "Layer reference"
msgstr ""

#: ../external/plone.app.testing/README.rst:59
#: ../external/plone.app.testing/docs/source/README.rst:59
msgid "This package contains a layer class, ``plone.app.testing.layers.PloneFixture``, which sets up a Plone site fixture. It is combined with other layers from `plone.testing`_ to provide a number of layer instances. It is important to realise that these layers all have the same fundamental fixture: they just manage test setup and tear-down differently."
msgstr ""

#: ../external/plone.app.testing/README.rst:66
#: ../external/plone.app.testing/docs/source/README.rst:66
msgid "When set up, the fixture will:"
msgstr ""

#: ../external/plone.app.testing/README.rst:68
#: ../external/plone.app.testing/docs/source/README.rst:68
msgid "Create a ZODB sandbox, via a stacked ``DemoStorage``. This ensures persistent changes made during layer setup can be cleanly torn down."
msgstr ""

#: ../external/plone.app.testing/README.rst:70
#: ../external/plone.app.testing/docs/source/README.rst:70
msgid "Configure a global component registry sandbox. This ensures that global component registrations (e.g. as a result of loading ZCML configuration) can be cleanly torn down."
msgstr ""

#: ../external/plone.app.testing/README.rst:73
#: ../external/plone.app.testing/docs/source/README.rst:73
msgid "Create a configuration context with the ``disable-autoinclude`` feature set. This has the effect of stopping Plone from automatically loading the configuration of any installed package that uses the ``z3c.autoinclude.plugin:plone`` entry point via `z3c.autoinclude`_. (This is to avoid accidentally polluting the test fixture - custom layers should load packages' ZCML configuration explicitly if required)."
msgstr ""

#: ../external/plone.app.testing/README.rst:79
#: ../external/plone.app.testing/docs/source/README.rst:79
msgid "Install a number of Zope 2-style products on which Plone depends."
msgstr ""

#: ../external/plone.app.testing/README.rst:80
#: ../external/plone.app.testing/docs/source/README.rst:80
msgid "Load the ZCML for these products, and for ``Products.CMFPlone``, which in turn pulls in the configuration for the core of Plone."
msgstr ""

#: ../external/plone.app.testing/README.rst:82
#: ../external/plone.app.testing/docs/source/README.rst:82
msgid "Create a default Plone site, with the default theme enabled, but with no default content."
msgstr ""

#: ../external/plone.app.testing/README.rst:84
#: ../external/plone.app.testing/docs/source/README.rst:84
msgid "Add a user to the root user folder with the ``Manager`` role."
msgstr ""

#: ../external/plone.app.testing/README.rst:85
#: ../external/plone.app.testing/docs/source/README.rst:85
msgid "Add a test user to this instance with the ``Member`` role."
msgstr ""

#: ../external/plone.app.testing/README.rst:87
#: ../external/plone.app.testing/docs/source/README.rst:87
msgid "For each test:"
msgstr ""

#: ../external/plone.app.testing/README.rst:89
#: ../external/plone.app.testing/docs/source/README.rst:89
msgid "The test user is logged in"
msgstr ""

#: ../external/plone.app.testing/README.rst:90
#: ../external/plone.app.testing/docs/source/README.rst:90
msgid "The local component site is set"
msgstr ""

#: ../external/plone.app.testing/README.rst:91
#: ../external/plone.app.testing/docs/source/README.rst:91
msgid "Various global caches are cleaned up"
msgstr ""

#: ../external/plone.app.testing/README.rst:93
#: ../external/plone.app.testing/docs/source/README.rst:93
msgid "Various constants in the module ``plone.app.testing.interfaces`` are defined to describe this environment:"
msgstr ""

#: ../external/plone.app.testing/README.rst:97
#: ../external/plone.app.testing/docs/source/README.rst:97
msgid "**Constant**"
msgstr ""

#: ../external/plone.app.testing/README.rst:97
#: ../external/plone.app.testing/docs/source/README.rst:97
msgid "**Purpose**"
msgstr ""

#: ../external/plone.app.testing/README.rst:99
#: ../external/plone.app.testing/docs/source/README.rst:99
msgid "PLONE_SITE_ID"
msgstr ""

#: ../external/plone.app.testing/README.rst:99
#: ../external/plone.app.testing/docs/source/README.rst:99
msgid "The id of the Plone site object inside the Zope application root."
msgstr ""

#: ../external/plone.app.testing/README.rst:102
#: ../external/plone.app.testing/docs/source/README.rst:102
msgid "PLONE_SITE_TITLE"
msgstr ""

#: ../external/plone.app.testing/README.rst:102
#: ../external/plone.app.testing/docs/source/README.rst:102
msgid "The title of the Plone site"
msgstr ""

#: ../external/plone.app.testing/README.rst:104
#: ../external/plone.app.testing/docs/source/README.rst:104
msgid "DEFAULT_LANGUAGE"
msgstr ""

#: ../external/plone.app.testing/README.rst:104
#: ../external/plone.app.testing/docs/source/README.rst:104
msgid "The default language of the Plone site ('en')"
msgstr ""

#: ../external/plone.app.testing/README.rst:106
#: ../external/plone.app.testing/docs/source/README.rst:106
msgid "TEST_USER_ID"
msgstr ""

#: ../external/plone.app.testing/README.rst:106
#: ../external/plone.app.testing/docs/source/README.rst:106
msgid "The id of the test user"
msgstr ""

#: ../external/plone.app.testing/README.rst:108
#: ../external/plone.app.testing/docs/source/README.rst:108
msgid "TEST_USER_NAME"
msgstr ""

#: ../external/plone.app.testing/README.rst:108
#: ../external/plone.app.testing/docs/source/README.rst:108
msgid "The username of the test user"
msgstr ""

#: ../external/plone.app.testing/README.rst:110
#: ../external/plone.app.testing/docs/source/README.rst:110
msgid "TEST_USER_PASSWORD"
msgstr ""

#: ../external/plone.app.testing/README.rst:110
#: ../external/plone.app.testing/docs/source/README.rst:110
msgid "The password of the test user"
msgstr ""

#: ../external/plone.app.testing/README.rst:112
#: ../external/plone.app.testing/docs/source/README.rst:112
msgid "TEST_USER_ROLES"
msgstr ""

#: ../external/plone.app.testing/README.rst:112
#: ../external/plone.app.testing/docs/source/README.rst:112
msgid "The default global roles of the test user - ('Member',)"
msgstr ""

#: ../external/plone.app.testing/README.rst:115
#: ../external/plone.app.testing/docs/source/README.rst:115
msgid "SITE_OWNER_NAME"
msgstr ""

#: ../external/plone.app.testing/README.rst:115
#: ../external/plone.app.testing/docs/source/README.rst:115
msgid "The username of the user owning the Plone site."
msgstr ""

#: ../external/plone.app.testing/README.rst:117
#: ../external/plone.app.testing/docs/source/README.rst:117
msgid "SITE_OWNER_PASSWORD"
msgstr ""

#: ../external/plone.app.testing/README.rst:117
#: ../external/plone.app.testing/docs/source/README.rst:117
msgid "The password of the user owning the Plone site."
msgstr ""

#: ../external/plone.app.testing/README.rst:120
#: ../external/plone.app.testing/docs/source/README.rst:120
msgid "All the layers also expose a resource in addition to those from their base layers, made available during tests:"
msgstr ""

#: ../external/plone.app.testing/README.rst:124
#: ../external/plone.app.testing/docs/source/README.rst:124
#: ../external/plone.app.theming/docs/index.rst:772
msgid "``portal``"
msgstr ""

#: ../external/plone.app.testing/README.rst:124
#: ../external/plone.app.testing/docs/source/README.rst:124
msgid "The Plone site root."
msgstr ""

#: ../external/plone.app.testing/README.rst:127
#: ../external/plone.app.testing/docs/source/README.rst:127
msgid "Plone site fixture"
msgstr ""

#: ../external/plone.app.testing/README.rst:130
#: ../external/plone.app.testing/README.rst:223
#: ../external/plone.app.testing/README.rst:245
#: ../external/plone.app.testing/README.rst:266
#: ../external/plone.app.testing/README.rst:301
#: ../external/plone.app.testing/docs/source/README.rst:130
#: ../external/plone.app.testing/docs/source/README.rst:223
#: ../external/plone.app.testing/docs/source/README.rst:245
#: ../external/plone.app.testing/docs/source/README.rst:266
#: ../external/plone.app.testing/docs/source/README.rst:301
msgid "Layer:"
msgstr ""

#: ../external/plone.app.testing/README.rst:130
#: ../external/plone.app.testing/README.rst:227
#: ../external/plone.app.testing/README.rst:249
#: ../external/plone.app.testing/docs/source/README.rst:130
#: ../external/plone.app.testing/docs/source/README.rst:227
#: ../external/plone.app.testing/docs/source/README.rst:249
msgid "``plone.app.testing.PLONE_FIXTURE``"
msgstr ""

#: ../external/plone.app.testing/README.rst:132
#: ../external/plone.app.testing/README.rst:225
#: ../external/plone.app.testing/README.rst:247
#: ../external/plone.app.testing/README.rst:268
#: ../external/plone.app.testing/README.rst:303
#: ../external/plone.app.testing/docs/source/README.rst:132
#: ../external/plone.app.testing/docs/source/README.rst:225
#: ../external/plone.app.testing/docs/source/README.rst:247
#: ../external/plone.app.testing/docs/source/README.rst:268
#: ../external/plone.app.testing/docs/source/README.rst:303
msgid "Class:"
msgstr ""

#: ../external/plone.app.testing/README.rst:132
#: ../external/plone.app.testing/docs/source/README.rst:132
msgid "``plone.app.testing.layers.PloneFixture``"
msgstr ""

#: ../external/plone.app.testing/README.rst:134
#: ../external/plone.app.testing/README.rst:227
#: ../external/plone.app.testing/README.rst:249
#: ../external/plone.app.testing/README.rst:270
#: ../external/plone.app.testing/README.rst:305
#: ../external/plone.app.testing/docs/source/README.rst:134
#: ../external/plone.app.testing/docs/source/README.rst:227
#: ../external/plone.app.testing/docs/source/README.rst:249
#: ../external/plone.app.testing/docs/source/README.rst:270
#: ../external/plone.app.testing/docs/source/README.rst:305
msgid "Bases:"
msgstr ""

#: ../external/plone.app.testing/README.rst:134
#: ../external/plone.app.testing/docs/source/README.rst:134
msgid "``plone.testing.z2.STARTUP``"
msgstr ""

#: ../external/plone.app.testing/README.rst:136
#: ../external/plone.app.testing/README.rst:229
#: ../external/plone.app.testing/README.rst:251
#: ../external/plone.app.testing/README.rst:272
#: ../external/plone.app.testing/README.rst:308
#: ../external/plone.app.testing/docs/source/README.rst:136
#: ../external/plone.app.testing/docs/source/README.rst:229
#: ../external/plone.app.testing/docs/source/README.rst:251
#: ../external/plone.app.testing/docs/source/README.rst:272
#: ../external/plone.app.testing/docs/source/README.rst:308
msgid "Resources:"
msgstr ""

#: ../external/plone.app.testing/README.rst:139
#: ../external/plone.app.testing/docs/source/README.rst:139
msgid "This layer sets up the Plone site fixture on top of the ``z2.STARTUP`` fixture."
msgstr ""

#: ../external/plone.app.testing/README.rst:142
#: ../external/plone.app.testing/docs/source/README.rst:142
msgid "You should not use this layer directly, as it does not provide any test lifecycle or transaction management. Instead, you should use a layer created with either the ``IntegrationTesting`` or ``FunctionalTesting`` classes, as outlined below."
msgstr ""

#: ../external/plone.app.testing/README.rst:148
#: ../external/plone.app.testing/docs/source/README.rst:148
msgid "PloneWithPackageLayer class"
msgstr ""

#: ../external/plone.app.testing/README.rst:150
#: ../external/plone.app.testing/docs/source/README.rst:150
msgid "Most add-ons do not need more setup than loading a ZCML file and running a GenericSetup profile."
msgstr ""

#: ../external/plone.app.testing/README.rst:153
#: ../external/plone.app.testing/docs/source/README.rst:153
msgid "With this helper class, a fixture can easily be instantiated::"
msgstr ""

#: ../external/plone.app.testing/README.rst:165
#: ../external/plone.app.testing/docs/source/README.rst:165
msgid "PloneWithPackageLayer constructor takes two other keyword arguments: ``bases`` and ``additional_z2_products``."
msgstr ""

#: ../external/plone.app.testing/README.rst:168
#: ../external/plone.app.testing/docs/source/README.rst:168
msgid "The ``bases`` argument takes a sequence of base layer fixtures. It is useful, among other reasons, to pass a fixture which makes other calls to plone.app.testing API. The need could arise in the development process."
msgstr ""

#: ../external/plone.app.testing/README.rst:173
#: ../external/plone.app.testing/docs/source/README.rst:173
msgid "``additional_z2_products`` argument takes a sequence of package names that need to be installed as Zope2 Products and are dependencies of the tested add-on."
msgstr ""

#: ../external/plone.app.testing/README.rst:177
#: ../external/plone.app.testing/docs/source/README.rst:177
msgid "Integration and functional testing test lifecycles"
msgstr ""

#: ../external/plone.app.testing/README.rst:179
#: ../external/plone.app.testing/docs/source/README.rst:179
msgid "``plone.app.testing`` comes with two layer classes, ``IntegrationTesting`` and ``FunctionalTesting``, which derive from the corresponding layer classes in ``plone.testing.z2``."
msgstr ""

#: ../external/plone.app.testing/README.rst:183
#: ../external/plone.app.testing/docs/source/README.rst:183
msgid "These classes set up the ``app``, ``request`` and ``portal`` resources, and reset the fixture (including various global caches) between each test run."
msgstr ""

#: ../external/plone.app.testing/README.rst:186
#: ../external/plone.app.testing/docs/source/README.rst:186
msgid "As with the classes in ``plone.testing``, the ``IntegrationTesting`` class will create a new transaction for each test and roll it back on test tear- down, which is efficient for integration testing, whilst ``FunctionalTesting`` will create a stacked ``DemoStorage`` for each test and pop it on test tear- down, making it possible to exercise code that performs an explicit commit (e.g. via tests that use ``zope.testbrowser``)."
msgstr ""

#: ../external/plone.app.testing/README.rst:193
#: ../external/plone.app.testing/docs/source/README.rst:193
msgid "When creating a custom fixture, the usual pattern is to create a new layer class that has ``PLONE_FIXTURE`` as its default base, instantiating that as a separate \"fixture\" layer. This layer is not to be used in tests directly, since it won't have test/transaction lifecycle management, but represents a shared fixture, potentially for both functional and integration testing. It is also the point of extension for other layers that follow the same pattern."
msgstr ""

#: ../external/plone.app.testing/README.rst:200
#: ../external/plone.app.testing/docs/source/README.rst:200
msgid "Once this fixture has been defined, \"end-user\" layers can be defined using the ``IntegrationTesting`` and ``FunctionalTesting`` classes. For example::"
msgstr ""

#: ../external/plone.app.testing/README.rst:217
#: ../external/plone.app.testing/docs/source/README.rst:217
msgid "See the ``PloneSandboxLayer`` layer below for a more comprehensive example."
msgstr ""

#: ../external/plone.app.testing/README.rst:220
#: ../external/plone.app.testing/docs/source/README.rst:220
msgid "Plone integration testing"
msgstr ""

#: ../external/plone.app.testing/README.rst:223
#: ../external/plone.app.testing/docs/source/README.rst:223
msgid "``plone.app.testing.PLONE_INTEGRATION_TESTING``"
msgstr ""

#: ../external/plone.app.testing/README.rst:225
#: ../external/plone.app.testing/docs/source/README.rst:225
msgid "``plone.app.testing.layers.IntegrationTesting``"
msgstr ""

#: ../external/plone.app.testing/README.rst:229
#: ../external/plone.app.testing/README.rst:251
#: ../external/plone.app.testing/README.rst:272
#: ../external/plone.app.testing/README.rst:308
#: ../external/plone.app.testing/docs/source/README.rst:229
#: ../external/plone.app.testing/docs/source/README.rst:251
#: ../external/plone.app.testing/docs/source/README.rst:272
#: ../external/plone.app.testing/docs/source/README.rst:308
msgid "``portal`` (test setup only)"
msgstr ""

#: ../external/plone.app.testing/README.rst:232
#: ../external/plone.app.testing/docs/source/README.rst:232
msgid "This layer can be used for integration testing against the basic ``PLONE_FIXTURE`` layer."
msgstr ""

#: ../external/plone.app.testing/README.rst:235
#: ../external/plone.app.testing/README.rst:257
#: ../external/plone.app.testing/docs/source/README.rst:235
#: ../external/plone.app.testing/docs/source/README.rst:257
msgid "You can use this directly in your tests if you do not need to set up any other shared fixture."
msgstr ""

#: ../external/plone.app.testing/README.rst:238
#: ../external/plone.app.testing/docs/source/README.rst:238
msgid "However, you would normally not extend this layer - see above."
msgstr ""

#: ../external/plone.app.testing/README.rst:242
#: ../external/plone.app.testing/docs/source/README.rst:242
msgid "Plone functional testing"
msgstr ""

#: ../external/plone.app.testing/README.rst:245
#: ../external/plone.app.testing/README.rst:270
#: ../external/plone.app.testing/docs/source/README.rst:245
#: ../external/plone.app.testing/docs/source/README.rst:270
msgid "``plone.app.testing.PLONE_FUNCTIONAL_TESTING``"
msgstr ""

#: ../external/plone.app.testing/README.rst:247
#: ../external/plone.app.testing/README.rst:303
#: ../external/plone.app.testing/docs/source/README.rst:247
#: ../external/plone.app.testing/docs/source/README.rst:303
msgid "``plone.app.testing.layers.FunctionalTesting``"
msgstr ""

#: ../external/plone.app.testing/README.rst:254
#: ../external/plone.app.testing/docs/source/README.rst:254
msgid "This layer can be used for functional testing against the basic ``PLONE_FIXTURE`` layer, for example using ``zope.testbrowser``."
msgstr ""

#: ../external/plone.app.testing/README.rst:260
#: ../external/plone.app.testing/docs/source/README.rst:260
msgid "Again, you would normally not extend this layer - see above."
msgstr ""

#: ../external/plone.app.testing/README.rst:263
#: ../external/plone.app.testing/docs/source/README.rst:263
msgid "Plone ZServer"
msgstr ""

#: ../external/plone.app.testing/README.rst:266
#: ../external/plone.app.testing/docs/source/README.rst:266
msgid "``plone.app.testing.PLONE_ZSERVER``"
msgstr ""

#: ../external/plone.app.testing/README.rst:268
#: ../external/plone.app.testing/docs/source/README.rst:268
msgid "``plone.testing.z2.ZServer``"
msgstr ""

#: ../external/plone.app.testing/README.rst:275
#: ../external/plone.app.testing/docs/source/README.rst:275
msgid "This is layer is intended for functional testing using a live, running HTTP server, e.g. using Selenium or Windmill."
msgstr ""

#: ../external/plone.app.testing/README.rst:278
#: ../external/plone.app.testing/docs/source/README.rst:278
msgid "Again, you would not normally extend this layer. To create a custom layer that has a running ZServer, you can use the same pattern as this one, e.g.::"
msgstr ""

#: ../external/plone.app.testing/README.rst:294
#: ../external/plone.app.testing/docs/source/README.rst:294
msgid "See the description of the ``z2.ZSERVER`` layer in `plone.testing`_ for further details."
msgstr ""

#: ../external/plone.app.testing/README.rst:298
#: ../external/plone.app.testing/docs/source/README.rst:298
msgid "Plone FTP server"
msgstr ""

#: ../external/plone.app.testing/README.rst:301
#: ../external/plone.app.testing/docs/source/README.rst:301
msgid "``plone.app.testing.PLONE_FTP_SERVER``"
msgstr ""

#: ../external/plone.app.testing/README.rst:305
#: ../external/plone.app.testing/docs/source/README.rst:305
msgid "``plone.app.testing.PLONE_FIXTURE`` ``plone.testing.z2.ZSERVER_FIXTURE``"
msgstr ""

#: ../external/plone.app.testing/README.rst:311
#: ../external/plone.app.testing/docs/source/README.rst:311
msgid "This is layer is intended for functional testing using a live FTP server."
msgstr ""

#: ../external/plone.app.testing/README.rst:313
#: ../external/plone.app.testing/docs/source/README.rst:313
msgid "It is semantically equivalent to the ``PLONE_ZSERVER`` layer."
msgstr ""

#: ../external/plone.app.testing/README.rst:315
#: ../external/plone.app.testing/docs/source/README.rst:315
msgid "See the description of the ``z2.FTP_SERVER`` layer in `plone.testing`_ for further details."
msgstr ""

#: ../external/plone.app.testing/README.rst:319
#: ../external/plone.app.testing/docs/source/README.rst:319
msgid "Helper functions"
msgstr ""

#: ../external/plone.app.testing/README.rst:321
#: ../external/plone.app.testing/docs/source/README.rst:321
msgid "A number of helper functions are provided for use in tests and custom layers."
msgstr ""

#: ../external/plone.app.testing/README.rst:324
#: ../external/plone.app.testing/docs/source/README.rst:324
msgid "Plone site context manager"
msgstr ""

#: ../external/plone.app.testing/README.rst:369
#: ../external/plone.app.testing/docs/source/README.rst:369
msgid "``ploneSite(db=None, connection=None, environ=None)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:327
#: ../external/plone.app.testing/docs/source/README.rst:327
msgid "Use this context manager to access and make changes to the Plone site during layer setup. In most cases, you will use it without arguments, but if you have special needs, you can tie it to a particular database instance. See the description of the ``zopeApp()`` context manager in `plone.testing`_ (which this context manager uses internally) for details."
msgstr ""

#: ../external/plone.app.testing/README.rst:333
#: ../external/plone.app.testing/docs/source/README.rst:333
msgid "The usual pattern is to call it during ``setUp()`` or ``tearDown()`` in your own layers::"
msgstr ""

#: ../external/plone.app.testing/README.rst:350
#: ../external/plone.app.testing/docs/source/README.rst:350
msgid "Here, ``portal`` is the Plone site root. A transaction is begun before entering the ``with`` block, and will be committed upon exiting the block, unless an exception is raised, in which case it will be rolled back."
msgstr ""

#: ../external/plone.app.testing/README.rst:354
#: ../external/plone.app.testing/docs/source/README.rst:354
msgid "Inside the block, the local component site is set to the Plone site root, so that local component lookups should work."
msgstr ""

#: ../external/plone.app.testing/README.rst:357
#: ../external/plone.app.testing/docs/source/README.rst:357
msgid "**Warning:** Do not attempt to load ZCML files inside a ``ploneSite`` block. Because the local site is set to the Plone site, you may end up accidentally registering components in the local site manager, which can cause pickling errors later."
msgstr ""

#: ../external/plone.app.testing/README.rst:362
#: ../external/plone.app.testing/docs/source/README.rst:362
msgid "**Note:** You should not use this in a test, or in a ``testSetUp()`` or ``testTearDown()`` method of a layer based on one of the layer in this package. Use the ``portal`` resource instead."
msgstr ""

#: ../external/plone.app.testing/README.rst:366
#: ../external/plone.app.testing/docs/source/README.rst:366
msgid "**Also note:** If you are writing a layer setting up a Plone site fixture, you may want to use the ``PloneSandboxLayer`` layer base class, and implement the ``setUpZope()``, ``setUpPloneSite()``, ``tearDownZope()`` and/or ``tearDownPloneSite()`` methods instead. See below."
msgstr ""

#: ../external/plone.app.testing/README.rst:372
#: ../external/plone.app.testing/README.rst:906
#: ../external/plone.app.testing/docs/source/README.rst:372
#: ../external/plone.app.testing/docs/source/README.rst:906
msgid "User management"
msgstr ""

#: ../external/plone.app.testing/README.rst:397
#: ../external/plone.app.testing/docs/source/README.rst:397
msgid "``login(portal, userName)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:375
#: ../external/plone.app.testing/docs/source/README.rst:375
msgid "Simulate login as the given user. This is based on the ``z2.login()`` helper in `plone.testing`_, but instead of passing a specific user folder, you pass the portal (e.g. as obtained via the ``portal`` layer resource)."
msgstr ""

#: ../external/plone.app.testing/README.rst:420
#: ../external/plone.app.testing/docs/source/README.rst:420
msgid "``logout()``"
msgstr ""

#: ../external/plone.app.testing/README.rst:400
#: ../external/plone.app.testing/docs/source/README.rst:400
msgid "Simulate logging out, i.e. becoming the anonymous user. This is equivalent to the ``z2.logout()`` helper in `plone.testing`_."
msgstr ""

#: ../external/plone.app.testing/README.rst:441
#: ../external/plone.app.testing/docs/source/README.rst:441
msgid "``setRoles(portal, userId, roles)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:423
#: ../external/plone.app.testing/docs/source/README.rst:423
msgid "Set the roles for the given user. ``roles`` is a list of roles."
msgstr ""

#: ../external/plone.app.testing/README.rst:444
#: ../external/plone.app.testing/docs/source/README.rst:444
msgid "Product and profile installation"
msgstr ""

#: ../external/plone.app.testing/README.rst:471
#: ../external/plone.app.testing/docs/source/README.rst:471
msgid "``applyProfile(portal, profileName, blacklisted_steps=None)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:447
#: ../external/plone.app.testing/docs/source/README.rst:447
msgid "Install a GenericSetup profile (usually an extension profile) by name, using the ``portal_setup`` tool. The name is normally made up of a package name and a profile name. Do not use the ``profile-`` prefix."
msgstr ""

#: ../external/plone.app.testing/README.rst:501
#: ../external/plone.app.testing/docs/source/README.rst:501
msgid "``quickInstallProduct(portal, productName, reinstall=False)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:474
#: ../external/plone.app.testing/docs/source/README.rst:474
msgid "Use this function to install a particular product into the given Plone site, using the ``portal_quickinstaller`` tool. If ``reinstall`` is ``False`` and the product is already installed, nothing will happen; if ``reinstall`` is ``True``, the product will be reinstalled. The ``productName`` should be a full dotted name, e.g. ``Products.MyProduct``, or ``my.product``."
msgstr ""

#: ../external/plone.app.testing/README.rst:504
#: ../external/plone.app.testing/docs/source/README.rst:504
msgid "Component architecture sandboxing"
msgstr ""

#: ../external/plone.app.testing/README.rst:541
#: ../external/plone.app.testing/docs/source/README.rst:541
msgid "``pushGlobalRegistry(portal, new=None, name=None)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:507
#: ../external/plone.app.testing/docs/source/README.rst:507
msgid "Create or obtain a stack of global component registries, and push a new registry to the top of the stack. This allows Zope Component Architecture registrations (e.g. loaded via ZCML) to be effectively torn down."
msgstr ""

#: ../external/plone.app.testing/README.rst:511
#: ../external/plone.app.testing/docs/source/README.rst:511
msgid "If you are going to use this function, please read the corresponding documentation for ``zca.pushGlobalRegistry()`` in `plone.testing`_. In particular, note that you *must* reciprocally call ``popGlobalRegistry()`` (see below)."
msgstr ""

#: ../external/plone.app.testing/README.rst:516
#: ../external/plone.app.testing/docs/source/README.rst:516
msgid "This helper is based on ``zca.pushGlobalRegistry()``, but will also fix up the local component registry in the Plone site ``portal`` so that it has the correct bases."
msgstr ""

#: ../external/plone.app.testing/README.rst:554
#: ../external/plone.app.testing/docs/source/README.rst:554
msgid "``popGlobalRegistry(portal)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:544
#: ../external/plone.app.testing/docs/source/README.rst:544
msgid "Tear down the top of the component architecture stack, as created with ``pushGlobalRegistry()``"
msgstr ""

#: ../external/plone.app.testing/README.rst:557
#: ../external/plone.app.testing/docs/source/README.rst:557
msgid "Global state cleanup"
msgstr ""

#: ../external/plone.app.testing/README.rst:582
#: ../external/plone.app.testing/docs/source/README.rst:582
msgid "``tearDownMultiPluginRegistration(pluginName)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:560
#: ../external/plone.app.testing/docs/source/README.rst:560
msgid "PluggableAuthService \"MultiPlugins\" are kept in a global registry. If you have registered a plugin, e.g. using the ``registerMultiPlugin()`` API, you should tear that registration down in your layer's ``tearDown()`` method. You can use this helper, passing a plugin name."
msgstr ""

#: ../external/plone.app.testing/README.rst:585
#: ../external/plone.app.testing/docs/source/README.rst:585
msgid "Layer base class"
msgstr ""

#: ../external/plone.app.testing/README.rst:587
#: ../external/plone.app.testing/docs/source/README.rst:587
msgid "If you are writing a custom layer to test your own Plone add-on product, you will often want to do the following on setup:"
msgstr ""

#: ../external/plone.app.testing/README.rst:590
#: ../external/plone.app.testing/docs/source/README.rst:590
msgid "Stack a new ``DemoStorage`` on top of the one from the base layer. This ensures that any persistent changes performed during layer setup can be torn down completely, simply by popping the demo storage."
msgstr ""

#: ../external/plone.app.testing/README.rst:594
#: ../external/plone.app.testing/docs/source/README.rst:594
msgid "Stack a new ZCML configuration context. This keeps separate the information about which ZCML files were loaded, in case other, independent layers want to load those same files after this layer has been torn down."
msgstr ""

#: ../external/plone.app.testing/README.rst:598
#: ../external/plone.app.testing/docs/source/README.rst:598
msgid "Push a new global component registry. This allows you to register components (e.g. by loading ZCML or using the test API from ``zope.component``) and tear down those registration easily by popping the component registry."
msgstr ""

#: ../external/plone.app.testing/README.rst:603
#: ../external/plone.app.testing/docs/source/README.rst:603
msgid "Load your product's ZCML configuration"
msgstr ""

#: ../external/plone.app.testing/README.rst:605
#: ../external/plone.app.testing/docs/source/README.rst:605
msgid "Install the product into the test fixture Plone site"
msgstr ""

#: ../external/plone.app.testing/README.rst:607
#: ../external/plone.app.testing/docs/source/README.rst:607
msgid "Of course, you may wish to make other changes too, such as creating some base content or changing some settings."
msgstr ""

#: ../external/plone.app.testing/README.rst:610
#: ../external/plone.app.testing/docs/source/README.rst:610
msgid "On tear-down, you will then want to:"
msgstr ""

#: ../external/plone.app.testing/README.rst:612
#: ../external/plone.app.testing/docs/source/README.rst:612
msgid "Remove any Pluggable Authentication Service \"multi-plugins\" that were added to the global registry during setup."
msgstr ""

#: ../external/plone.app.testing/README.rst:615
#: ../external/plone.app.testing/docs/source/README.rst:615
msgid "Pop the global component registry to unregister components loaded via ZCML."
msgstr ""

#: ../external/plone.app.testing/README.rst:617
#: ../external/plone.app.testing/docs/source/README.rst:617
msgid "Pop the configuration context resource to restore its state."
msgstr ""

#: ../external/plone.app.testing/README.rst:619
#: ../external/plone.app.testing/docs/source/README.rst:619
msgid "Pop the ``DemoStorage`` to undo any persistent changes."
msgstr ""

#: ../external/plone.app.testing/README.rst:621
#: ../external/plone.app.testing/docs/source/README.rst:621
msgid "If you have made other changes on setup that are not covered by this broad tear-down, you'll also want to tear those down explicitly here."
msgstr ""

#: ../external/plone.app.testing/README.rst:624
#: ../external/plone.app.testing/docs/source/README.rst:624
msgid "Stacking a demo storage and component registry is the safest way to avoid fixtures bleeding between tests. However, it can be tricky to ensure that everything happens in the right order."
msgstr ""

#: ../external/plone.app.testing/README.rst:628
#: ../external/plone.app.testing/docs/source/README.rst:628
msgid "To make things easier, you can use the ``PloneSandboxLayer`` layer base class. This extends ``plone.testing.Layer`` and implements ``setUp()`` and ``tearDown()`` for you. You simply have to override one or more of the following methods:"
msgstr ""

#: ../external/plone.app.testing/README.rst:637
#: ../external/plone.app.testing/docs/source/README.rst:637
msgid "``setUpZope(self, app, configurationContext)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:634
#: ../external/plone.app.testing/docs/source/README.rst:634
msgid "This is called during setup. ``app`` is the Zope application root. ``configurationContext`` is a newly stacked ZCML configuration context. Use this to load ZCML, install products using the helper ``plone.testing.z2.installProduct()``, or manipulate other global state."
msgstr ""

#: ../external/plone.app.testing/README.rst:644
#: ../external/plone.app.testing/docs/source/README.rst:644
msgid "``setUpPloneSite(self, portal)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:640
#: ../external/plone.app.testing/docs/source/README.rst:640
msgid "This is called during setup. ``portal`` is the Plone site root as configured by the ``ploneSite()`` context manager. Use this to make persistent changes inside the Plone site, such as installing products using the ``applyProfile()`` or ``quickInstallProduct()`` helpers, or setting up default content."
msgstr ""

#: ../external/plone.app.testing/README.rst:654
#: ../external/plone.app.testing/docs/source/README.rst:654
msgid "``tearDownZope(self, app)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:647
#: ../external/plone.app.testing/docs/source/README.rst:647
msgid "This is called during tear-down, before the global component registry and stacked ``DemoStorage`` are popped. Use this to tear down any additional global state."
msgstr ""

#: ../external/plone.app.testing/README.rst:651
#: ../external/plone.app.testing/docs/source/README.rst:651
msgid "**Note:** Global component registrations PAS multi-plugin registrations are automatically torn down. Product installations are not, so you should use the ``uninstallProduct()`` helper if any products were installed during ``setUpZope()``."
msgstr ""

#: ../external/plone.app.testing/README.rst:663
#: ../external/plone.app.testing/docs/source/README.rst:663
msgid "``tearDownPloneSite(self, portal)``"
msgstr ""

#: ../external/plone.app.testing/README.rst:657
#: ../external/plone.app.testing/docs/source/README.rst:657
msgid "This is called during tear-down, before the global component registry and stacked ``DemoStorage`` are popped. During this method, the local component site hook is set, giving you access to local components."
msgstr ""

#: ../external/plone.app.testing/README.rst:661
#: ../external/plone.app.testing/docs/source/README.rst:661
msgid "**Note:** Persistent changes to the ZODB are automatically torn down by virtue of a stacked ``DemoStorage``. Thus, this method is less commonly used than the others described here."
msgstr ""

#: ../external/plone.app.testing/README.rst:665
#: ../external/plone.app.testing/docs/source/README.rst:665
msgid "Let's show a more comprehensive example of what such a layer may look like. Imagine we have a product ``my.product``. It has a ``configure.zcml`` file that loads some components and registers a ``GenericSetup`` profile, making it installable in the Plone site. On layer setup, we want to load the product's configuration and install it into the Plone site."
msgstr ""

#: ../external/plone.app.testing/README.rst:671
#: ../external/plone.app.testing/docs/source/README.rst:671
msgid "The layer would conventionally live in a module ``testing.py`` at the root of the package, i.e. ``my.product.testing``::"
msgstr ""

#: ../external/plone.app.testing/README.rst:711
#: ../external/plone.app.testing/docs/source/README.rst:711
msgid "Here, ``MY_PRODUCT_FIXTURE`` is the \"fixture\" base layer. Other layers can use this as a base if they want to build on this fixture, but it would not be used in tests directly. For that, we have created an ``IntegrationTesting`` instance, ``MY_PRODUCT_INTEGRATION_TESTING``."
msgstr ""

#: ../external/plone.app.testing/README.rst:716
#: ../external/plone.app.testing/docs/source/README.rst:716
msgid "Of course, we could have created a ``FunctionalTesting`` instance as well, e.g.::"
msgstr ""

#: ../external/plone.app.testing/README.rst:721
#: ../external/plone.app.testing/docs/source/README.rst:721
msgid "Of course, we could do a lot more in the layer setup. For example, let's say the product had a content type 'my.product.page' and we wanted to create some test content. We could do that with::"
msgstr ""

#: ../external/plone.app.testing/README.rst:743
#: ../external/plone.app.testing/docs/source/README.rst:743
msgid "Note that unlike in a test, there is no user logged in at layer setup time, so we have to explicitly log in as the test user. Here, we also grant the test user the ``Manager`` role temporarily, to allow object construction (which performs an explicit permission check)."
msgstr ""

#: ../external/plone.app.testing/README.rst:748
#: ../external/plone.app.testing/docs/source/README.rst:748
msgid "**Note:** Automatic tear down suffices for all the test setup above. If the only changes made during layer setup are to persistent, in-ZODB data, or the global component registry then no additional tear-down is required. For any other global state being managed, you should write a ``tearDownPloneSite()`` method to perform the necessary cleanup."
msgstr ""

#: ../external/plone.app.testing/README.rst:754
#: ../external/plone.app.testing/docs/source/README.rst:754
msgid "Given this layer, we could write a test (e.g. in ``tests.py``) like::"
msgstr ""

#: ../external/plone.app.testing/README.rst:771
#: ../external/plone.app.testing/docs/source/README.rst:771
msgid "Please see `plone.testing`_ for more information about how to write and run tests and assertions."
msgstr ""

#: ../external/plone.app.testing/README.rst:775
#: ../external/plone.app.testing/docs/source/README.rst:775
msgid "Common test patterns"
msgstr ""

#: ../external/plone.app.testing/README.rst:777
#: ../external/plone.app.testing/docs/source/README.rst:777
msgid "`plone.testing`_'s documentation contains details about the fundamental techniques for writing tests of various kinds. In a Plone context, however, some patterns tend to crop up time and again. Below, we will attempt to catalogue some of the more commonly used patterns via short code samples."
msgstr ""

#: ../external/plone.app.testing/README.rst:782
#: ../external/plone.app.testing/docs/source/README.rst:782
msgid "The examples in this section are all intended to be used in tests. Some may also be useful in layer set-up/tear-down. We have used ``unittest`` syntax here, although most of these examples could equally be adopted to doctests."
msgstr ""

#: ../external/plone.app.testing/README.rst:786
#: ../external/plone.app.testing/docs/source/README.rst:786
msgid "We will assume that you are using a layer that has ``PLONE_FIXTURE`` as a base (whether directly or indirectly) and uses the ``IntegrationTesting`` or ``FunctionalTesting`` classes as shown above."
msgstr ""

#: ../external/plone.app.testing/README.rst:790
#: ../external/plone.app.testing/docs/source/README.rst:790
msgid "We will also assume that the variables ``app``, ``portal`` and ``request`` are defined from the relative layer resources, e.g. with::"
msgstr ""

#: ../external/plone.app.testing/README.rst:797
#: ../external/plone.app.testing/docs/source/README.rst:797
msgid "Note that in a doctest set up using the ``layered()`` function from ``plone.testing``, ``layer`` is in the global namespace, so you would do e.g. ``portal = layer['portal']``."
msgstr ""

#: ../external/plone.app.testing/README.rst:801
#: ../external/plone.app.testing/docs/source/README.rst:801
msgid "Where imports are required, they are shown alongside the code example. If a given import or variable is used more than once in the same section, it will only be shown once."
msgstr ""

#: ../external/plone.app.testing/README.rst:806
#: ../external/plone.app.testing/docs/source/README.rst:806
msgid "Basic content management"
msgstr ""

#: ../external/plone.app.testing/README.rst:808
#: ../external/plone.app.testing/docs/source/README.rst:808
msgid "To create a content item of type 'Folder' with the id 'f1' in the root of the portal::"
msgstr ""

#: ../external/plone.app.testing/README.rst:813
#: ../external/plone.app.testing/docs/source/README.rst:813
msgid "The ``title`` argument is optional. Other basic properties, like ``description``, can be set as well."
msgstr ""

#: ../external/plone.app.testing/README.rst:816
#: ../external/plone.app.testing/docs/source/README.rst:816
msgid "Note that this may fail with an ``Unauthorized`` exception, since the test user won't normally have permissions to add content in the portal root, and the ``invokeFactory()`` method performs an explicit security check. You can set the roles of the test user to ensure that he has the necessary permissions::"
msgstr ""

#: ../external/plone.app.testing/README.rst:828
#: ../external/plone.app.testing/docs/source/README.rst:828
msgid "To obtain this object, acquisition-wrapped in its parent::"
msgstr ""

#: ../external/plone.app.testing/README.rst:832
#: ../external/plone.app.testing/docs/source/README.rst:832
msgid "To make an assertion against an attribute or method of this object::"
msgstr ""

#: ../external/plone.app.testing/README.rst:836
#: ../external/plone.app.testing/docs/source/README.rst:836
msgid "To modify the object::"
msgstr ""

#: ../external/plone.app.testing/README.rst:840
#: ../external/plone.app.testing/docs/source/README.rst:840
msgid "To add another item inside the folder f1::"
msgstr ""

#: ../external/plone.app.testing/README.rst:845
#: ../external/plone.app.testing/docs/source/README.rst:845
msgid "To check if an object is in a container::"
msgstr ""

#: ../external/plone.app.testing/README.rst:849
#: ../external/plone.app.testing/docs/source/README.rst:849
msgid "To delete an object from a container:"
msgstr ""

#: ../external/plone.app.testing/README.rst:851
#: ../external/plone.app.testing/docs/source/README.rst:851
msgid "del portal['f1']"
msgstr ""

#: ../external/plone.app.testing/README.rst:853
#: ../external/plone.app.testing/docs/source/README.rst:853
msgid "There is no content or workflows installed by default. You can enable workflows::"
msgstr ""

#: ../external/plone.app.testing/README.rst:858
#: ../external/plone.app.testing/docs/source/README.rst:858
msgid "Searching"
msgstr ""

#: ../external/plone.app.testing/README.rst:860
#: ../external/plone.app.testing/docs/source/README.rst:860
msgid "To obtain the ``portal_catalog`` tool::"
msgstr ""

#: ../external/plone.app.testing/README.rst:866
#: ../external/plone.app.testing/docs/source/README.rst:866
msgid "To search the catalog::"
msgstr ""

#: ../external/plone.app.testing/README.rst:870
#: ../external/plone.app.testing/docs/source/README.rst:870
msgid "Keyword arguments are search parameters. The result is a lazy list. You can call ``len()`` on it to get the number of search results, or iterate through it. The items in the list are catalog brains. They have attributes that correspond to the \"metadata\" columns configured for the catalog, e.g. ``Title``, ``Description``, etc. Note that these are simple attributes (not methods), and contain the value of the corresponding attribute or method from the source object at the time the object was cataloged (i.e. they are not necessarily up to date)."
msgstr ""

#: ../external/plone.app.testing/README.rst:879
#: ../external/plone.app.testing/docs/source/README.rst:879
msgid "To make assertions against the search results::"
msgstr ""

#: ../external/plone.app.testing/README.rst:889
#: ../external/plone.app.testing/docs/source/README.rst:889
msgid "To get the path of a given item in the search results::"
msgstr ""

#: ../external/plone.app.testing/README.rst:893
#: ../external/plone.app.testing/docs/source/README.rst:893
msgid "To get an absolute URL::"
msgstr ""

#: ../external/plone.app.testing/README.rst:897
#: ../external/plone.app.testing/docs/source/README.rst:897
msgid "To get the original object::"
msgstr ""

#: ../external/plone.app.testing/README.rst:901
#: ../external/plone.app.testing/docs/source/README.rst:901
msgid "To re-index an object d1 so that its catalog information is up to date::"
msgstr ""

#: ../external/plone.app.testing/README.rst:908
#: ../external/plone.app.testing/docs/source/README.rst:908
msgid "To create a new user::"
msgstr ""

#: ../external/plone.app.testing/README.rst:916
#: ../external/plone.app.testing/docs/source/README.rst:916
msgid "The arguments are the username (which will also be the user id), the password, a list of roles, and a list of domains (rarely used)."
msgstr ""

#: ../external/plone.app.testing/README.rst:919
#: ../external/plone.app.testing/docs/source/README.rst:919
msgid "To make a particular user active (\"logged in\") in the integration testing environment use the ``login`` method and pass it the username::"
msgstr ""

#: ../external/plone.app.testing/README.rst:926
#: ../external/plone.app.testing/docs/source/README.rst:926
msgid "To log out (become anonymous)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:932
#: ../external/plone.app.testing/docs/source/README.rst:932
msgid "To obtain the current user::"
msgstr ""

#: ../external/plone.app.testing/README.rst:938
#: ../external/plone.app.testing/docs/source/README.rst:938
msgid "To obtain a user by name::"
msgstr ""

#: ../external/plone.app.testing/README.rst:942
#: ../external/plone.app.testing/docs/source/README.rst:942
msgid "Or by user id (id and username are often the same, but can differ in real-world scenarios)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:947
#: ../external/plone.app.testing/docs/source/README.rst:947
msgid "To get the user's user name::"
msgstr ""

#: ../external/plone.app.testing/README.rst:951
#: ../external/plone.app.testing/docs/source/README.rst:951
msgid "To get the user's id::"
msgstr ""

#: ../external/plone.app.testing/README.rst:956
#: ../external/plone.app.testing/docs/source/README.rst:956
msgid "Permissions and roles"
msgstr ""

#: ../external/plone.app.testing/README.rst:958
#: ../external/plone.app.testing/docs/source/README.rst:958
msgid "To get a user's roles in a particular context (taking local roles into account)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:967
#: ../external/plone.app.testing/docs/source/README.rst:967
msgid "To change the test user's roles::"
msgstr ""

#: ../external/plone.app.testing/README.rst:974
#: ../external/plone.app.testing/docs/source/README.rst:974
msgid "Pass a different user name to change the roles of another user."
msgstr ""

#: ../external/plone.app.testing/README.rst:976
#: ../external/plone.app.testing/docs/source/README.rst:976
msgid "To grant local roles to a user in the folder f1::"
msgstr ""

#: ../external/plone.app.testing/README.rst:980
#: ../external/plone.app.testing/docs/source/README.rst:980
msgid "To check the local roles of a given user in the folder 'f1'::"
msgstr ""

#: ../external/plone.app.testing/README.rst:984
#: ../external/plone.app.testing/docs/source/README.rst:984
msgid "To grant the 'View' permission to the roles 'Member' and 'Manager' in the portal root without acquiring additional roles from its parents::"
msgstr ""

#: ../external/plone.app.testing/README.rst:989
#: ../external/plone.app.testing/docs/source/README.rst:989
msgid "This method can also be invoked on a folder or individual content item."
msgstr ""

#: ../external/plone.app.testing/README.rst:991
#: ../external/plone.app.testing/docs/source/README.rst:991
msgid "To assert which roles have the permission 'View' in the context of the portal::"
msgstr ""

#: ../external/plone.app.testing/README.rst:997
#: ../external/plone.app.testing/docs/source/README.rst:997
msgid "To assert which permissions have been granted to the 'Reviewer' role in the context of the portal::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1003
#: ../external/plone.app.testing/docs/source/README.rst:1003
msgid "To add a new role::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1007
#: ../external/plone.app.testing/docs/source/README.rst:1007
msgid "This can now be assigned to users globally (using the ``setRoles`` helper) or locally (using ``manage_setLocalRoles()``)."
msgstr ""

#: ../external/plone.app.testing/README.rst:1010
#: ../external/plone.app.testing/docs/source/README.rst:1010
msgid "To assert which roles are available in a given context::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1017
#: ../external/plone.app.testing/docs/source/README.rst:1017
msgid "To set the default workflow chain::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1025
#: ../external/plone.app.testing/docs/source/README.rst:1025
msgid "In Plone, most chains contain only one workflow, but the ``portal_workflow`` tool supports longer chains, where an item is subject to more than one workflow simultaneously."
msgstr ""

#: ../external/plone.app.testing/README.rst:1029
#: ../external/plone.app.testing/docs/source/README.rst:1029
msgid "To set a multi-workflow chain, separate workflow names by commas."
msgstr ""

#: ../external/plone.app.testing/README.rst:1031
#: ../external/plone.app.testing/docs/source/README.rst:1031
msgid "To get the default workflow chain::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1035
#: ../external/plone.app.testing/docs/source/README.rst:1035
msgid "To set the workflow chain for the 'Document' type::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1039
#: ../external/plone.app.testing/docs/source/README.rst:1039
msgid "You can pass multiple type names to set multiple chains at once. To set a multi-workflow chain, separate workflow names by commas. To indicate that a type should use the default workflow, use the special chain name '(Default)'."
msgstr ""

#: ../external/plone.app.testing/README.rst:1043
#: ../external/plone.app.testing/docs/source/README.rst:1043
msgid "To get the workflow chain for the portal type 'Document'::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1051
#: ../external/plone.app.testing/docs/source/README.rst:1051
msgid "To get the current workflow chain for the content object f1::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1055
#: ../external/plone.app.testing/docs/source/README.rst:1055
msgid "To update all permissions after changing the workflow::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1059
#: ../external/plone.app.testing/docs/source/README.rst:1059
msgid "To change the workflow state of the content object f1 by invoking the transaction 'publish'::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1064
#: ../external/plone.app.testing/docs/source/README.rst:1064
msgid "Note that this performs an explicit permission check, so if the current user doesn't have permission to perform this workflow action, you may get an error indicating the action is not available. If so, use ``login()`` or ``setRoles()`` to ensure the current user is able to change the workflow state."
msgstr ""

#: ../external/plone.app.testing/README.rst:1070
#: ../external/plone.app.testing/docs/source/README.rst:1070
msgid "To check the current workflow state of the content object f1::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1077
#: ../external/plone.app.testing/docs/source/README.rst:1077
msgid "To set the value of a property on the portal root::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1081
#: ../external/plone.app.testing/docs/source/README.rst:1081
msgid "To assert the value of a property on the portal root::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1085
#: ../external/plone.app.testing/docs/source/README.rst:1085
msgid "To change the value of a property in a property sheet in the ``portal_properties`` tool::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1095
#: ../external/plone.app.testing/docs/source/README.rst:1095
msgid "To assert the value of a property in a property sheet in the ``portal_properties`` tool::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1101
#: ../external/plone.app.testing/docs/source/README.rst:1101
msgid "Installing products and extension profiles"
msgstr ""

#: ../external/plone.app.testing/README.rst:1103
#: ../external/plone.app.testing/docs/source/README.rst:1103
msgid "To apply a particular extension profile::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1109
#: ../external/plone.app.testing/docs/source/README.rst:1109
msgid "This is the preferred method of installing a product's configuration."
msgstr ""

#: ../external/plone.app.testing/README.rst:1111
#: ../external/plone.app.testing/docs/source/README.rst:1111
msgid "To install an add-on product into the Plone site using the ``portal_quickinstaller`` tool::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1118
#: ../external/plone.app.testing/docs/source/README.rst:1118
msgid "To re-install a product using the quick-installer::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1122
#: ../external/plone.app.testing/docs/source/README.rst:1122
msgid "Note that both of these assume the product's ZCML has been loaded, which is usually done during layer setup. See the layer examples above for more details on how to do that."
msgstr ""

#: ../external/plone.app.testing/README.rst:1126
#: ../external/plone.app.testing/docs/source/README.rst:1126
msgid "When writing a product that has an installation extension profile, it is often desirable to write tests that inspect the state of the site after the profile has been applied. Some of the more common such tests are shown below."
msgstr ""

#: ../external/plone.app.testing/README.rst:1130
#: ../external/plone.app.testing/docs/source/README.rst:1130
msgid "To verify that a product has been installed (e.g. as a dependency via ``metadata.xml``)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1138
#: ../external/plone.app.testing/docs/source/README.rst:1138
msgid "To verify that a particular content type has been installed (e.g. via ``types.xml``)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1145
#: ../external/plone.app.testing/docs/source/README.rst:1145
msgid "To verify that a new catalog index has been installed (e.g. via ``catalog.xml``)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1152
#: ../external/plone.app.testing/docs/source/README.rst:1152
msgid "To verify that a new catalog metadata column has been added (e.g. via ``catalog.xml``)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1157
#: ../external/plone.app.testing/docs/source/README.rst:1157
msgid "To verify that a new workflow has been installed (e.g. via ``workflows.xml``)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1164
#: ../external/plone.app.testing/docs/source/README.rst:1164
msgid "To verify that a new workflow has been assigned to a type (e.g. via ``workflows.xml``)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1169
#: ../external/plone.app.testing/docs/source/README.rst:1169
msgid "To verify that a new workflow has been set as the default (e.g. via ``workflows.xml``)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1174
#: ../external/plone.app.testing/docs/source/README.rst:1174
msgid "To test the value of a property in the ``portal_properties`` tool (e.g. set via ``propertiestool.xml``):::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1182
#: ../external/plone.app.testing/docs/source/README.rst:1182
msgid "To verify that a stylesheet has been installed in the ``portal_css`` tool (e.g. via ``cssregistry.xml``)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1189
#: ../external/plone.app.testing/docs/source/README.rst:1189
msgid "To verify that a JavaScript resource has been installed in the ``portal_javascripts`` tool (e.g. via ``jsregistry.xml``)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1196
#: ../external/plone.app.testing/docs/source/README.rst:1196
msgid "To verify that a new role has been added (e.g. via ``rolemap.xml``)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1200
#: ../external/plone.app.testing/docs/source/README.rst:1200
msgid "To verify that a permission has been granted to a given set of roles (e.g. via ``rolemap.xml``)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1207
#: ../external/plone.app.testing/docs/source/README.rst:1207
msgid "Traversal"
msgstr ""

#: ../external/plone.app.testing/README.rst:1209
#: ../external/plone.app.testing/docs/source/README.rst:1209
msgid "To traverse to a view, page template or other resource, use ``restrictedTraverse()`` with a relative path::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1214
#: ../external/plone.app.testing/docs/source/README.rst:1214
msgid "The return value is a view object, page template object, or other resource. It may be invoked to obtain an actual response (see below)."
msgstr ""

#: ../external/plone.app.testing/README.rst:1217
#: ../external/plone.app.testing/docs/source/README.rst:1217
msgid "``restrictedTraverse()`` performs an explicit security check, and so may raise ``Unauthorized`` if the current test user does not have permission to view the given resource. If you don't want that, you can use::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1223
#: ../external/plone.app.testing/docs/source/README.rst:1223
msgid "You can call this on a folder or other content item as well, to traverse from that starting point, e.g. this is equivalent to the first example above::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1229
#: ../external/plone.app.testing/docs/source/README.rst:1229
msgid "Note that this traversal will not take ``IPublishTraverse`` adapters into account, and you cannot pass query string parameters. In fact, ``restrictedTraverse()`` and ``unrestrictedTraverse()`` implement the type of traversal that happens with path expressions in TAL, which is similar, but not identical to URL traversal."
msgstr ""

#: ../external/plone.app.testing/README.rst:1235
#: ../external/plone.app.testing/docs/source/README.rst:1235
msgid "To look up a view manually::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1241
#: ../external/plone.app.testing/docs/source/README.rst:1241
msgid "Note that the name here should not include the ``@@`` prefix."
msgstr ""

#: ../external/plone.app.testing/README.rst:1243
#: ../external/plone.app.testing/docs/source/README.rst:1243
msgid "To simulate an ``IPublishTraverse`` adapter call, presuming the view implements ``IPublishTraverse``::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1248
#: ../external/plone.app.testing/docs/source/README.rst:1248
msgid "Or, if the ``IPublishTraverse`` adapter is separate from the view::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1255
#: ../external/plone.app.testing/docs/source/README.rst:1255
msgid "To simulate a form submission or query string parameters::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1262
#: ../external/plone.app.testing/docs/source/README.rst:1262
msgid "The ``form`` dictionary contains the marshalled request. That is, if you are simulating a query string parameter or posted form variable that uses a marshaller like ``:int`` (e.g. ``age:int`` in the example above), the value in the ``form`` dictionary should be marshalled (an int instead of a string, in the example above), and the name should be the base name (``age`` instead of ``age:int``)."
msgstr ""

#: ../external/plone.app.testing/README.rst:1269
#: ../external/plone.app.testing/docs/source/README.rst:1269
msgid "To invoke a view and obtain the response body as a string::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1276
#: ../external/plone.app.testing/docs/source/README.rst:1276
msgid "Please note that this approach is not perfect. In particular, the request is will not have the right URL or path information. If your view depends on this, you can fake it by setting the relevant keys in the request, e.g.::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1283
#: ../external/plone.app.testing/docs/source/README.rst:1283
msgid "To inspect the state of the request (e.g. after a view has been invoked)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1287
#: ../external/plone.app.testing/docs/source/README.rst:1287
msgid "To inspect response headers (e.g. after a view has been invoked)::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1294
#: ../external/plone.app.testing/docs/source/README.rst:1294
msgid "Simulating browser interaction"
msgstr ""

#: ../external/plone.app.testing/README.rst:1296
#: ../external/plone.app.testing/docs/source/README.rst:1296
msgid "End-to-end functional tests can use `zope.testbrowser`_ to simulate user interaction. This acts as a web browser, connecting to Zope via a special channel, making requests and obtaining responses."
msgstr ""

#: ../external/plone.app.testing/README.rst:1300
#: ../external/plone.app.testing/docs/source/README.rst:1300
msgid "**Note:** zope.testbrowser runs entirely in Python, and does not simulate a JavaScript engine."
msgstr ""

#: ../external/plone.app.testing/README.rst:1303
#: ../external/plone.app.testing/docs/source/README.rst:1303
msgid "Note that to use ``zope.testbrowser``, you need to use one of the functional testing layers, e.g. ``PLONE_FUNCTIONAL_TESTING``, or another layer instantiated with the ``FunctionalTesting`` class."
msgstr ""

#: ../external/plone.app.testing/README.rst:1307
#: ../external/plone.app.testing/docs/source/README.rst:1307
msgid "If you want to create some initial content, you can do so either in a layer, or in the test itself, before invoking the test browser client. In the latter case, you need to commit the transaction before it becomes available, e.g.::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1323
#: ../external/plone.app.testing/docs/source/README.rst:1323
msgid "To obtain a new test browser client::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1330
#: ../external/plone.app.testing/docs/source/README.rst:1330
msgid "To open a given URL::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1335
#: ../external/plone.app.testing/docs/source/README.rst:1335
msgid "To inspect the response::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1339
#: ../external/plone.app.testing/docs/source/README.rst:1339
msgid "To inspect response headers::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1343
#: ../external/plone.app.testing/docs/source/README.rst:1343
msgid "To follow a link::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1347
#: ../external/plone.app.testing/docs/source/README.rst:1347
msgid "This gets a link by its text. To get a link by HTML id::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1351
#: ../external/plone.app.testing/docs/source/README.rst:1351
msgid "To verify the current URL::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1355
#: ../external/plone.app.testing/docs/source/README.rst:1355
msgid "To set a form control value::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1359
#: ../external/plone.app.testing/docs/source/README.rst:1359
msgid "This gets the control by its associated label. To get a control by its form variable name::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1364
#: ../external/plone.app.testing/docs/source/README.rst:1364
msgid "See the `zope.testbrowser`_ documentation for more details on how to select and manipulate various types of controls."
msgstr ""

#: ../external/plone.app.testing/README.rst:1367
#: ../external/plone.app.testing/docs/source/README.rst:1367
msgid "To submit a form by clicking a button::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1371
#: ../external/plone.app.testing/docs/source/README.rst:1371
msgid "Again, this uses the label to find the control. To use the form variable name::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1376
#: ../external/plone.app.testing/docs/source/README.rst:1376
msgid "To simulate HTTP BASIC authentication and remain logged in for all requests::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1383
#: ../external/plone.app.testing/docs/source/README.rst:1383
msgid "To simulate logging in via the login form::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1390
#: ../external/plone.app.testing/docs/source/README.rst:1390
msgid "To simulate logging out::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1395
#: ../external/plone.app.testing/docs/source/README.rst:1395
msgid "Debugging tips"
msgstr ""

#: ../external/plone.app.testing/README.rst:1397
#: ../external/plone.app.testing/docs/source/README.rst:1397
msgid "By default, only HTTP error codes (e.g. 500 Server Side Error) are shown when an error occurs on the server. To see more details, set ``handleErrors`` to False::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1403
#: ../external/plone.app.testing/docs/source/README.rst:1403
msgid "To inspect the error log and obtain a full traceback of the latest entry::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1410
#: ../external/plone.app.testing/docs/source/README.rst:1410
msgid "To save the current response to an HTML file::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1414
#: ../external/plone.app.testing/docs/source/README.rst:1414
msgid "You can now open this file and use tools like Firebug to inspect the structure of the page. You should remove the file afterwards."
msgstr ""

#: ../external/plone.app.testing/README.rst:1418
#: ../external/plone.app.testing/docs/source/README.rst:1418
msgid "Comparison with ZopeTestCase/PloneTestCase"
msgstr ""

#: ../external/plone.app.testing/README.rst:1420
#: ../external/plone.app.testing/docs/source/README.rst:1420
msgid "`plone.testing`_ and ``plone.app.testing`` have in part evolved from ``ZopeTestCase``, which ships with Zope 2 in the ``Testing`` package, and `Products.PloneTestCase`_, which ships with Plone and is used by Plone itself as well as numerous add-on products."
msgstr ""

#: ../external/plone.app.testing/README.rst:1425
#: ../external/plone.app.testing/docs/source/README.rst:1425
msgid "If you are familiar with ``ZopeTestCase`` and ``PloneTestCase``, the concepts of these package should be familiar to you. However, there are some important differences to bear in mind."
msgstr ""

#: ../external/plone.app.testing/README.rst:1429
#: ../external/plone.app.testing/docs/source/README.rst:1429
msgid "``plone.testing`` and ``plone.app.testing`` are unburdened by the legacy support that ``ZopeTestCase`` and ``PloneTestCase`` have to include. This makes them smaller and easier to understand and maintain."
msgstr ""

#: ../external/plone.app.testing/README.rst:1433
#: ../external/plone.app.testing/docs/source/README.rst:1433
msgid "Conversely, ``plone.testing`` only works with Python 2.6 and Zope 2.12 and later. ``plone.app.testing`` only works with Plone 4 and later. If you need to write tests that run against older versions of Plone, you'll need to use ``PloneTestCase``."
msgstr ""

#: ../external/plone.app.testing/README.rst:1438
#: ../external/plone.app.testing/docs/source/README.rst:1438
msgid "``ZopeTestCase``/``PloneTestCase`` were written before layers were available as a setup mechanism. ``plone.testing`` is very layer-oriented."
msgstr ""

#: ../external/plone.app.testing/README.rst:1441
#: ../external/plone.app.testing/docs/source/README.rst:1441
msgid "``PloneTestCase`` provides a base class, also called ``PloneTestCase``, which you must use, as it performs setup and tear-down. ``plone.testing`` moves shared state to layers and layer resources, and does not impose any particular base class for tests. This does sometimes mean a little more typing (e.g. ``self.layer['portal']`` vs. ``self.portal``), but it makes it much easier to control and re-use test fixtures. It also makes your test code simpler and more explicit."
msgstr ""

#: ../external/plone.app.testing/README.rst:1449
#: ../external/plone.app.testing/docs/source/README.rst:1449
msgid "``ZopeTestCase`` has an ``installProduct()`` function and a corresponding ``installPackage()`` function. `plone.testing`_ has only an ``installProduct()``, which can configure any kind of Zope 2 product (i.e. packages in the ``Products.*`` namespace, old-style products in a special ``Products`` folder, or packages in any namespace that have had their ZCML loaded and which include a ``<five:registerPackage />`` directive in their configuration). Note that you must pass a full dotted name to this function, even for \"old-style\" products in the ``Products.*`` namespace, e.g. ``Products.LinguaPlone`` instead of ``LinguaPlone``."
msgstr ""

#: ../external/plone.app.testing/README.rst:1459
#: ../external/plone.app.testing/docs/source/README.rst:1459
msgid "On setup, ``PloneTestCase`` will load Zope 2's default ``site.zcml``. This in turn will load all ZCML for all packages in the ``Products.*`` namespace. ``plone.testing`` does not do this (and you are strongly encouraged from doing it yourself), because it is easy to accidentally include packages in your fixture that you didn't intend to be there (and which can actually change the fixture substantially). You should load your package's ZCML explicitly. See the `plone.testing`_ documentation for details."
msgstr ""

#: ../external/plone.app.testing/README.rst:1467
#: ../external/plone.app.testing/docs/source/README.rst:1467
msgid "When using ``PloneTestCase``, any package that has been loaded onto ``sys.path`` and which defines the ``z3c.autoinclude.plugin:plone`` entry point will be loaded via `z3c.autoinclude`_'s plugin mechanism. This loading is explicitly disabled, for the same reasons that the ``Products.*`` auto- loading is. You should load your packages' configuration explicitly."
msgstr ""

#: ../external/plone.app.testing/README.rst:1473
#: ../external/plone.app.testing/docs/source/README.rst:1473
msgid "``PloneTestCase`` sets up a basic fixture that has member folder enabled, and in which the test user's member folder is available as ``self.folder``. The ``plone_workflow`` workflow is also installed as the default. ``plone.app.testing`` takes a more minimalist approach. To create a test folder owned by the test user that is similar to ``self.folder`` in a ``PloneTestCase``, you can do::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1497
#: ../external/plone.app.testing/docs/source/README.rst:1497
msgid "You could of course do this type of setup in your own layer and expose it as a resource instead."
msgstr ""

#: ../external/plone.app.testing/README.rst:1500
#: ../external/plone.app.testing/docs/source/README.rst:1500
msgid "To use `zope.testbrowser`_ with ``PloneTestCase``, you should use its ``FunctionalTestCase`` as a base class, and then use the following pattern::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1506
#: ../external/plone.app.testing/docs/source/README.rst:1506
msgid "The equivalent pattern in ``plone.app.testing`` is to use the ``FunctionalTesting`` test lifecycle layer (see example above), and then use::"
msgstr ""

#: ../external/plone.app.testing/README.rst:1513
#: ../external/plone.app.testing/docs/source/README.rst:1513
msgid "Also note that if you have made changes to the fixture prior to calling ``browser.open()``, they will *not* be visible until you perform an explicit commit. See the ``zope.testbrowser`` examples above for details."
msgstr ""

#: ../external/plone.app.testing/docs/source/index.rst:7
msgid "Welcome to plone.app.testing's documentation!"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:2
msgid "Views"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:5
msgid "Test view registration"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:7
msgid "Test if view has been properly registered::"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:20
msgid "Test with getMultiAdapter"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:22
#: ../external/plone.app.testing/docs/source/views.rst:36
#: ../external/plone.app.testing/docs/source/views.rst:46
#: ../external/plone.app.testing/docs/source/views.rst:59
#: ../external/plone.app.testing/docs/source/views.rst:70
#: ../external/plone.app.testing/docs/source/views.rst:82
#: ../external/plone.app.testing/docs/source/views.rst:90
#: ../external/plone.app.testing/docs/source/views.rst:114
#: ../external/plone.app.testing/docs/source/views.rst:167
#: ../external/plone.app.testing/docs/source/views.rst:188
#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:16
#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:35
msgid "Test::"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:34
msgid "Test with restrictedTraverse"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:44
msgid "Test view with parameter"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:57
msgid "Test with restrictedTraverse and parameter"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:68
msgid "Test if view is protected"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:80
msgid "Test if object exists in folder"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:88
msgid "Test Redirect"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:112
msgid "Test View HTML Output"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:122
#: ../external/tutorial.todoapp/docs/chapter_0.rst:115
#: ../external/tutorial.todoapp/docs/chapter_2.rst:263
#: ../external/tutorial.todoapp/docs/chapter_3.rst:167
#: ../external/tutorial.todoapp/docs/chapter_4.rst:183
msgid "Troubleshooting"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:124
msgid "KeyError: 'ACTUAL_URL'::"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:142
msgid "ComponentLookupError"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:144
msgid "If a view can not be looked up on a particular context, Plone will raise a ComponentLookupError (because views are multi-adapters), e.g.::"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:149
msgid "This can be solved for instance by providing a browser layer that has been missing::"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:160
msgid "AttributeError: @@plone_portal_state"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:165
msgid "Test View Methods"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:186
msgid "View Status Messages"
msgstr ""

#: ../external/plone.app.testing/docs/source/views.rst:204
msgid "View Class::"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:2
msgid "Simulating browser interaction with zope.testbrowser"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:5
msgid "Input"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:7
#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:45
#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:76
msgid "todo"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:10
msgid "Text Area"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:12
#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:28
msgid "HTML::"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:21
msgid "Radio Buttons"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:23
msgid "self.browser.getControl(name='form.widgets.city:list').value = ['Berlin']"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:26
msgid "Checkboxes"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:43
msgid "Select"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:49
msgid "Links"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:51
msgid "self.browser.getLink('Publish').click()"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:55
msgid "Buttons"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:57
msgid "self.browser.getControl('Save').click()"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:61
msgid "Image Upload"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:63
msgid "self.browser.getLink('Image').click() self.browser.getControl(name='form.widgets.title')\\"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:65
msgid ".value = \"My image\""
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:66
msgid "self.browser.getControl(name='form.widgets.description')\\"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:67
msgid ".value = \"This is my image.\""
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:68
msgid "image_path = os.path.join(os.path.dirname(__file__), \"image.png\") image_ctl = self.browser.getControl(name='form.widgets.image') image_ctl.add_file(open(image_path), 'image/png', 'image.png') self.browser.getControl('Save').click()"
msgstr ""

#: ../external/plone.app.testing/docs/source/zope-testbrowser.rst:74
msgid "File Upload"
msgstr ""

#: ../external/plone.app.theming/README.rst:1
msgid "This package offers a simple way to develop and deploy Plone themes using the Diazo theming engine. If you are not familiar with Diazo, check out the `Diazo documentation <http://diazo.org>`_."
msgstr ""

#: ../external/plone.app.theming/README.rst:5
msgid "This version of ``plone.app.theming`` ships with Plone version 4.3 or later. It comes with a user guide, reproduced below, available through the theming control panel."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:2
msgid "plone.app.theming manual"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:4
msgid "This guide provides an overview of Diazo theming in Plone versions 4.3 and higher."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:0
msgid "Contents"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:12
msgid "In `Plone <http://plone.org>`_ versions 4.3 and higher you can edit your website theme through web browser in Plone's site setup control panel. Only HTML, CSS and little XML knowledge needed as the prerequisitements. This guide explains how to use this feature of Plone."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:17
msgid "See `introduction video to plone.app.theming <https://vimeo.com/42564510>`_."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:20
msgid "What is a Diazo theme?"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:22
msgid "A \"theme\" makes a website (in this case, one powered by Plone) take on a particular look and feel."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:25
msgid "*Diazo* (formerly known as XDV) is a technology that can be used to theme websites. It is not specific to Plone per se, but has been created by the Plone community and, as of Plone 4.3, provides the default way to apply a theme to a Plone site. You can learn more about Diazo at http://diazo.org."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:30
msgid "Diazo themes may be a little different to themes you have created in other systems, and indeed to themes you may have created for earlier versions of Plone. A Diazo theme is really about transforming some content - in this case the output from \"vanilla\" Plone - into a different set of HTML markup by applying a set of rules to combine a static HTML mock-up of the end result you want with the dynamic content coming from Plone."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:37
msgid "In comparison, the previous way to theme a Plone site (like the way many other content management systems are themed) relies on selectively overriding the templates and scripts that Plone uses to build a page with custom versions that produce different HTML markup. The latter approach can be more powerful, certainly, but also requires much deeper knowledge of Plone's internals and command of server-side technologies such as Zope Page Templates and even Python. Diazo themes, by contrast, are easy to understand for web designers and non- developers alike."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:46
msgid "A Diazo theme consists of three elements:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:48
msgid "One or more HTML mockups, also referred to as *theme* files, that represent the desired look and feel."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:51
msgid "These will contain placeholders for content that is to be provided by the Plone content management system. Mockups usually reference CSS, JavaScript and image files by relative path. The most common way to create a theme is to use desktop software like Dreamweaver or a text editor to create the relevant markup, styles and scripts, and test the theme locally in a web browser."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:56
msgid "The *content* that is being themed. In this case, that is the output from Plone."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:58
msgid "A *rules file*, which defines how the placeholders in the theme (i.e. the HTML mockup) should be replaced by relevant markup in the content."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:61
msgid "The rules file uses XML syntax (similar to HTML). Here is a very simple example::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:76
msgid "Here, we are replacing the contents (child nodes) of a placeholder element with HTML id ``main`` in the theme file (``theme.html``, found in the same directory as the ``rules.xml`` file, as referenced by the ``<theme />`` rule) with the contents (children) of the element with the HTML id ``content`` in the markup generated by Plone."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:82
msgid "When this theme is applied, the result will look very much like the static HTML file ``theme.html`` (and its referenced CSS, JavaScript and image files), except the placeholder that is identified by the node in the theme with id ``main`` will be filled by Plone's main content area."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:87
msgid "Plone ships with an example theme called, appropriately, *Example theme*, which uses the venerable `Twitter Bootstrap <http://twitter.github.com/bootstrap/>`_ to build a simple yet functional theme exposing most of Plone's core functionality. You are advised to study it - in particular the ``rules.xml`` file - to learn more about how Diazo themes work."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:94
msgid "Using the control panel"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:96
msgid "After installation of the *Diazo theme support* package in a Plone site, the *Theming* control panel will appear in Plone's *Site setup*."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:99
msgid "The main tab of this control panel, *Themes*, will show all available themes, with buttons to activate/deactivate, modify, copy or delete each, as well as buttons to create new themes or bring up this help text."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:103
msgid "Click on a theme preview image to open a preview of that theme in a new tab or window. The preview is navigable, but form submissions and some advanced features will not work."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:108
msgid "Selecting a theme"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:110
msgid "To apply an existing theme, simply click the *Activate* button underneath the theme preview. The currently active theme will be highlighted in yellow. If you deactivate the currently active theme, no Diazo theme will be applied, i.e. \"vanilla\" Plone theming will apply."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:115
msgid "*Note*: The *Theming* control panel is never theemd, ensuring that you can always deactivate an errant theme that could render the control panel unusable. Thus, you may not see any difference immediately after enabling a theme. Simply navigate to another page in the Plone site, though, and you should see the theme applied."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:122
msgid "Creating a new theme"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:124
msgid "New themes can be created in one of two ways:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:126
msgid "Click the *New theme* button at the top of the *Themes* tab in the *Theming* control panel and enter a title and description in the form that appears. A bare-bones theme will be created, and you will be taken to the *Modify theme* screen (see below), where you can edit or create theme and rules files."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:130
msgid "Click the *Copy* button underneath any existing theme and enter a title and description in the form that appears. A new theme will be created as a copy of the existing theme, and you will be taken to the *Modify theme* (see below), where you can edit or create theme and rules files."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:136
msgid "Uploading an existing theme"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:138
msgid "Themes can be distributed as Zip files, containing the HTML mockup and rules file. To download an existing theme, click the *Download* button underneath the theme on the *Themes* tab of the *Theming* control panel."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:142
msgid "To upload such a Zip file into another site, use the *Upload Zip file* button on the *Themes* tab of the *Theming* control panel. You can choose whether or not to replace any existing theme with the same name (based on the name of the top-level directory contained within the Zip file)."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:147
msgid "You can also upload a Zip file of a static HTML mockup that does not contain a rules file, such as a design provided by a Plone-agnostic web designer."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:150
msgid "In this case, a basic ``rules.xml`` file will be added for you to start building up a theme from using the *Modify theme* screen (see below). The generated rules file will assume the main HTML mockup file is called ``index.html``, but you can change this in ``rules.xml``."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:155
msgid "Once you have successfully uploaded a theme Zip file, you will be taken to the *Modify theme* screen (see below), where you can edit or create theme files."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:158
msgid "*Hint:* If you get an error message like \"The uploaded file does not contain a valid theme archive\", this usually means that you have uploaded a Zip file that contains multiple files and folders, rather than a single top level folder with all the theme resources in it. This could happen if you compressed a theme or HTML mockup by adding its files and folders directly a Zip archive, rather than compressing the directory in which they were found. To fix this, simply unzip the archive on your computer into a new directory, move up a level, and compress this directory on its own into a new Zip file, which you can then upload."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:169
msgid "Modifying the theme"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:171
msgid "You can modify a theme by clicking *Modify theme* underneath a theme in the *Themes* tab of the *Theming* control panel. This screen is also launched automatically when you create or upload a new theme."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:175
msgid "*Note:* Only themes created or uploaded through the *Theming* control panel can be modified through Plone. Themes installed by third-party add-ons or distributed on the filesystem cannot, although changes made on the filesystem will be reflected immediately if Zope is running in debug mode. To modify a filesystem theme, you can copy it to a new in-Plone theme by clicking the *Copy* button underneath the theme in the *Theming* control panel."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:182
msgid "The *Modify theme* screen initially shows a file manager, with a file tree on the left and an editor on the right. Click on a file in the file tree to open an editor or preview: HTML, CSS, JavaScript and other text files can be edited directly through the editor. Other files (e.g. images) will be rendered as a preview."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:188
msgid "*Note:* The advanced editor with syntax highlighting is not available in Microsoft Internet Explorer."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:191
msgid "Click *New folder* to create a new folder. You can also right-click on a folder in the file tree to bring up this action."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:194
msgid "Click *New file* to create a new text file. You can also right-click on a folder in the file tree to bring up this action."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:197
msgid "Click *Upload file* to upload a file from your computer. You can also right- click on a folder in the file tree to bring up this action."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:200
msgid "Click *Preview theme* to preview the theme as it will be applied with the mockup and rules as currently saved. The preview is navigable, but forms and certain advanced features will not work."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:204
msgid "To save the file currently being edited, click the *Save file* button, or use the keyboard shortcut ``Ctrl+S`` (Windows/Linux) or ``Cmd+S`` (Mac)."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:207
msgid "To rename or delete a file or folder, right-click on it in the file tree and select the appropriate action."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:211
msgid "The theme inspector"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:213
msgid "The theme inspector provides an advanced interface for discovering and building up the rules of a Diazo theme. It can be launched by clicking the *Show inspectors* button on the *Modify theme* screen for in-Plone themes, or by clicking the *Inspect theme* button underneath a filesystem theme on the *Themes* tab of the *Theming* control panel."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:219
msgid "The theme inspector consists of two panels:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:221
msgid "The *HTML mockup*. If there are several HTML files in the theme, you can switch between them using the drop-down list underneath the *HTML mockup* panel."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:223
msgid "The *Unthemed content*. This shows Plone without any theme applied."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:225
msgid "Either panel can be maximised by clicking the arrows icon at the top right of either."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:228
msgid "The *HTML mockups* and *Unthemed content* panels can be switch to source view, showing their underlying HTML markup, by clicking the tags icon at the top right of either."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:232
msgid "As you hover over elements in the *HTML mockup* or *Unthemed content* panels, you will see:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:235
msgid "An outline showing the element under the cursor."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:236
msgid "A CSS or XPath selector in the status bar at the bottom if the panel which would uniquely identify this element in a Diazo rule."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:239
msgid "Click on an element or press ``Enter`` whilst hovering oveer an element to select it. The most recently selected element in each panel is shown in the bottom right of the relevant status bar."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:243
msgid "Press ``Esc`` whilst hovering over an element to select its parent. This is useful when trying to select \"invisible\" container elements. Press ``Enter`` to save this selection."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:247
msgid "The contents of the *HTML mockup* or (more commonly) *Unthemed content* panels can be navigated, for example to get to a content page that requires specific theme rules, by disabling the inspector. Use the toggle switches at the bottom right of the relevant panel to enable or disable the selector."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:253
msgid "The rule builder"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:255
msgid "Click the *Build rule* button near the top of the *Modify theme* or *Inspect theme* screen to launch an interactive rule building wizard. You will be asked which type of rule to build, and then prompted to select the relevant elements in the *HTML mockup* and/or *Unthemed content* panels as required. By default, this will use any saved selections, unless you untick the *Use selected elements* box on the first page if the wizard."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:262
msgid "Once the wizard completes, you will be shown the generated rule. You can edit this if you wish. If you click *Insert*, the newly generated rule will be inserted into the ``rules.xml`` editor at or near your current cursor position. You can move it around or edit it further as you wish."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:267
msgid "Click *Preview theme* to preview the theme in a new tab or window. Don't forget to save the ``rules.xml`` file if you have made changes."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:270
msgid "*Note*: In readonly mode, you can build rules and inspect the HTML mockup and theme, but not change the ``rules.xml`` file. In this case, the *Insert* button of the rule builder (see below) will not be available either."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:274
msgid "*Note:* The ability to insert rules from the *Build rule* wizard are not available in Microsoft Internet Explorer, although you will be given the option to copy the rule to the clipboard when using this browser."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:279
msgid "Advanced settings"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:281
msgid "The *Theming* control panel also contains a tab named *Advanced settings*. Here be dragons."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:284
msgid "The *Advanced setings* tab is divided into two areas. The first, *Theme details*, contains the underlying settings that are modified when a theme is applied from the *Themes* control panel. These are:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:288
msgid "Whether or not Diazo themes are enabled at all."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:289
msgid "The path to the rules file, conventionally called ``rules.xml``, either relative to the Plone site root or as an absolute path to an external server."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:292
msgid "The prefix to apply when turning relative paths in themes (e.g. references to images in an ``<img />`` tag's ``src`` attribute) into absolute ones at rendering time."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:295
msgid "The HTML ``DOCTYPE`` to apply to the rendered output, if different to the default ``XHTML 1.0 Transitional``."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:297
msgid "Whether or not to allow theme resources (likes ``rules.xml``) to be read from the network. Disabling this gives a modest performance boost."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:299
msgid "A list of host names for which a theme is never applied. Most commonly, this contains ``127.0.0.1``, allowing you to view an unthemed site through ``http://127.0.0.1:8080`` and a themed one at ``http://localhost:8080`` during development, say."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:303
msgid "A list of theme parameters and the TALES expressions to generate them (see below)."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:306
msgid "The second, *Theme base*, controls the presentation of the unthemed content, and apply even if no Diazo theme is being applied. These are the settings that used to be found in the *Themes* control panel in previous versions of Plone."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:313
msgid "The remainder of this guide contains reference materials useful for theme builders."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:317
msgid "Deploying and testing themes"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:319
msgid "To build and test a theme, you must first create a static HTML mockup of the look and feel you want, and then build a rules file to describe how Plone's content maps to the placeholders in this mockup."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:323
msgid "The mockup can be created anywhere using whatever tool you feel most comfortable building web pages in. To simplify integration with Plone, you are recommended to make sure it uses relative links for resources like CSS, JavaScript and image files, so that it will render properly when opened in a web browser from a local file. Plone will convert these relative links to the appropriate absolute paths automatically, ensuring the theme works no matter which URL the user is viewing when the theme is applied to a Plone site."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:331
msgid "There are several ways to get the theme into Plone:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:333
msgid "On the filesystem"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:335
msgid "If you used an installer or a standard \"buildout\" to set up your Plone site, you should have a directory called ``resources`` in the root of your Plone installation (this is created using the ``resources`` option to the buildout recipe ``plone.recipe.zope2instance``. See http://pypi.python.org/pypi/plone.recipe.zope2instance for more details.)"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:341
msgid "You can find (or create) a ``theme`` directory inside this directory, which is used to contain themes. Each theme needs its own directory with a unique name. Create one (e.g. ``resources/theme/mytheme``) and put your HTML files and any references resources inside this directory. You can use subdirectories if you wish, but you are recommended to keep the basic theme HTML files at the top of the theme directory."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:348
msgid "You will also need a rules file called ``rules.xml`` inside this directory. If you haven't got one yet, start with an empty one::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:362
msgid "Provided you are running Zope in debug mode (e.g. you start it up with ``bin/instance fg``), changes to the theme and rules should take effect immediately. You can preview or enable the theme through the *Themes* control panel, and then iteratively modify the ``rules.xml`` file or the theme mockup as you wish."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:370
msgid "If you prefer (or do not have filesystem access), you can create themes entirely through the Plone control panel, either by duplicating an existing theme, or starting from scratch with a near-empty theme."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:374
#: ../external/plone.app.theming/docs/index.rst:384
msgid "See the instructions on using the control panel above for more details."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:376
msgid "Once a theme has been created, you can modify it through the *Theming* control panel. See above for more details."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:379
msgid "As a zip file"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:381
msgid "Themes can be downloaded from Plone as Zip files, which can then be uploaded into other sites."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:386
msgid "In fact, you can create valid theme zip archives by compressing a theme directory on the filesystem using a standard compression tool such as *7-Zip* or *Winzip* (for Windows) or the built-in *Compress* action in the Mac OS X Finder. Just make sure you compress exactly one folder that contains all the theme files and the ``rules.xml`` file. (Do not compress the contents of the folder directly: when unpacked, the zip file should produce exactly one folder which in turn contains all the relevant files)."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:394
msgid "In a Python package (programmers only)"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:396
msgid "If you are creating a Python package containing Plone customisations that you intend to install into your site, you can let it register a theme for installation into the site."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:400
msgid "To do this, place a directory called e.g. ``theme`` at the top of the package, next to the Zope ``configure.zcml`` file, and add a ``<plone:static />`` declaration to the ``configure.zcml`` file::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:416
msgid "Notice the declaration of the ``plone`` namespace at the root ``<configure />`` element. Place the theme files and the ``rules.xml`` file into the ``theme`` directory."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:420
msgid "If your package has a GenericSetup profile, you can automatically enable the theme upon installation of this profile by adding a ``theme.xml`` file in the ``profiles/default`` directory, containing e.g.::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:430
msgid "The manifest file"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:432
msgid "It is possible to give additional information about a theme by placing a file called ``manifest.cfg`` next to the ``rules.xml`` file at the top of a theme directory."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:436
msgid "This file may look like this::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:442
msgid "As shown here, the manifest file can be used to provide a more user friendly title and a longer description for the theme, for use in the control panel. Only the ``[theme]`` header is required - all other keys are optional."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:446
msgid "You can also set::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:450
msgid "to use a different rule file name than ``rules.xml`` (you should provide a URL or relative path)."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:453
msgid "To change the absolute path prefix (see *Advanced settings*), use::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:457
msgid "To employ a ``DOCTYPE`` in the themed content other than ``XHTML 1.0 Transitional``, add e.g.::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:462
msgid "To provide a user-friendly preview of your theme in the *Theming* control panel, add::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:467
msgid "Here, ``preview.png`` is an image file relative to the location of the ``manifest.cfg`` file."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:470
msgid "Extensions to the Diazo theming engine can add support for additional blocks of configurable parameters."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:474
msgid "Rules syntax"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:476
msgid "The following is a short summary of the Diazo rules syntax. See http://diazo.org for more details and further examples."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:480
msgid "Selectors"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:482
msgid "Each rule is represented by an XML tag that operates on one or more HTML elements in the content and/or theme. The elements to operate on are indicated using attributes of the rules known as *selectors*."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:486
msgid "The easiest way to select elements is to use a CSS expression selector, such as ``css:content=\"#content\"`` or ``css:theme=\"#main .content\"``. Any valid CSS 3 expression (including pseudo-selectors like ``:first-child`` may be used."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:490
msgid "The standard selectors, ``css:theme`` and ``css:content``, operate on the element(s) that are matched. If you want to operate on the children of the matched element instead, use ``css:theme-children=\"...\"`` or ``css:content-children=\"...\"`` instead."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:495
msgid "If you cannot construct a suitable CSS 3 expression, you can use XPath expressions such as ``content=\"/head/link\"`` or ``theme=\"//div[@id='main']\"`` (note the lack of a ``css:`` prefix when using XPath expressions). The two approaches are equivalent, and you can mix and match freely, but you cannot have e.g. both a ``css:theme`` and a ``theme`` attribute on a single rule. To operate on children of a node selected with an XPath expression, use ``theme-children=\"...\"`` or ``content-children=\"...\"``."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:503
msgid "You can learn more about XPath at http://www.w3schools.com/xpath/default.asp."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:506
msgid "Conditions"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:508
msgid "By default, every rule is executed, though rules that do not match any elements will of course do nothing. You can make a rule, set of rules or theme reference (see below) conditional upon an element appearing in the content by adding an attribute to the rule like ``css:if-content=\"#some-element\"`` (to use an XPath expression instead, drop the ``css:`` prefix). If no elements match the expression, the rule is ignored."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:515
msgid "**Tip:** if a ``<replace />`` rule matches an element in the theme but not in the content, the theme node will be dropped (replaced with nothing). If you do not want this behavior and you are unsure if the content will contain the relevant element(s), you can use ``css:if-content`` conditional rule. Since this is a common scenario, there is a shortcut: ``css:if-content=\"\"`` means \"use the expression from the ``css:content`` attribute\"."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:522
msgid "Similarly, you can construct a condition based on the path of the current request by using an attribute like ``if-path=\"/news\"`` (note that there is no ``css:if-path`` ). If the path starts with a slash, it will match from the root of the Plone site. If it ends with a slash, it will match to the end of the URL. You can set an absolute path by using a leading and a trailing slash."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:528
msgid "Finally, you can use arbitrary XPath expressions against any defined variable using an attribute like ``if=\"$host = 'localhost'\"`` . By default, the variables ``url`` , ``scheme`` , ``host`` and ``base`` are available, representing the current URL. Themes may define additional variables in their manifests."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:534
msgid "Available rules"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:536
msgid "The various rule types are summarized below."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:547
msgid "Wraps a set of rules. Must be used as the root element of the rules file. Nested ``<rules />`` can be used with a *condition* to apply a single condition to a set of rules."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:551
msgid "When used as the root element of the rules file, the various XML namespaces must be declared::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:562
msgid "``theme`` and ``notheme``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:570
msgid "Choose the theme file to be used. The ``href`` is a path relative to the rules file. If multiple ``<theme />`` elements are present, at most one may be given without a condition. The first theme with a condition that is true will be used, with the unconditional theme, if any, used as a fallback."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:575
msgid "``<notheme />`` can be used to specify a condition under which no theme should be used. ``<notheme />`` takes precedence over ``<theme />``."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:578
msgid "**Tip:**  To ensure you do not accidentally style non-Plone pages, add a condition like ``css:if-content=\"#visual-portal-wrapper\"`` to the last theme listed, and do not have any unconditional themes."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:583
msgid "``replace``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:592
msgid "Replaces the matched element(s) in the theme with the matched element(s) from the content."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:596
msgid "``before`` and ``after``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:610
msgid "Inserts the matched element(s) from the content before or after the matched element(s) in the theme. By using ``theme-children`` , you can insert the matched content element(s) as the first (prepend) or last (append) element(s) inside the matched theme element(s)."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:616
msgid "``drop`` and ``strip``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:626
msgid "Remove element(s) from the theme or content. Note that unlike most other rules, a ``<drop />`` or ``<strip />`` rule can operate on the ``theme`` or ``content`` , but not both. ``<drop />`` removes the matched element(s) and any children, whereas ``<strip />`` removes the matched element(s), but leaves any children in place."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:632
msgid "``<drop />`` may be given a whitespace-separated list of ``attributes`` to drop. In this case, the matched element(s) themselves will not be removed. Use ``attributes=\"*\"`` to drop all attributes."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:637
msgid "``merge`` and ``copy``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:653
msgid "These rules operate on attributes. ``<merge />`` will add the contents of the named attribute(s) in the theme to the value(s) of any existing attributes with the same name(s) in the content, separated by whitespace. It is mainly used to merge CSS classes."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:658
msgid "``<copy />`` will copy attributes from the matched element(s) in the content to the matched element(s) in the theme, fully replacing any attributes with the same name that may already be in the theme."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:662
msgid "The ``attributes`` attribute can contain a whitespace-separated list of attributes, or the special value ``*`` to operate on all attributes of the matched element."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:667
msgid "Advanced modification"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:669
msgid "Instead of selecting markup to insert into the theme from the content, you can place markup directly into the rules file, as child nodes of the relevant rule element::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:679
msgid "This also works on the content, allowing you to modify it on the fly before any rules are applied::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:688
msgid "In addition to including static HTML in this manner, you can use XSLT instructions that operate on the content. You can even use ``css:`` selectors directly in the XSLT.::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:701
msgid "Rules may operate on content that is fetched from somewhere other than the current page being rendered by Plone, by using the ``href`` attribute to specify a path of a resource relative to the root of the Plone site::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:713
msgid "Theme parameters"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:715
msgid "It is possible to pass arbitrary parameters to your theme, which can be referenced as variables in XPath expressions. Parameters can be set in Plone's theming control panel, and may be imported from a ``manifest.cfg`` file."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:719
msgid "For example, you could have a parameter ``mode`` that could be set to the string ``live`` or ``test``. In your rules, you could do something like this to insert a warning when you are on the test server::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:727
msgid "You could even use the parameter value directly, e.g.::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:733
msgid "The following parameters are always available to Plone themes:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:735
msgid "``scheme``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:736
msgid "The scheme portion of the inbound URL, usually ``http`` or ``https``."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:737
msgid "``host``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:738
msgid "The hostname in the inbound URL."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:740
msgid "The path segment of the inbound URL. This will not include any virtual hosting tokens, i.e. it is the path the end user sees."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:743
msgid "``base``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:743
msgid "The Zope base url (the ``BASE1`` request variable)."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:745
msgid "You can add additional parameters through the control panel, using TALES expressions. Parameters are listed on the *Advanced* tab, one per line, in the form ``<name> = <expression>``."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:749
msgid "For example, if you want to avoid theming any pages that are loaded by Plone's overlays, you can make use of the ``ajax_load`` request parameter that they set. Your rules file might include::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:755
msgid "To add this parameter as well as the ``mode`` parameter outlined earlier, you could add the following in the control panel::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:761
msgid "The right hand side is a TALES expression. It *must* evaluate to a string, integer, float, boolean or ``None``: lists, dicts and objects are not supported. ``python:``, ``string:`` and path expressions work as they do in Zope Page Templates."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:766
msgid "The following variables are available when constructing these TALES expressions:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:768
msgid "``context``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:769
msgid "The context of the current request, usually a content object."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:770
msgid "``request``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:771
msgid "The current request."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:773
msgid "The portal root object."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:775
msgid "``context_state``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:775
msgid "The ``@@plone_context_state`` view, from which you can look up additional values such as the context's URL or default view."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:780
msgid "``portal_state``"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:778
msgid "The ``@@plone_portal_state`` view, form which you can look up additional values such as the navigation root URL or whether or not the current user is logged in."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:782
msgid "See ``plone.app.layout`` for details about the ``@@plone_context_state`` and ``@@plone_portal_state`` views."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:785
msgid "Theme parameters are usually integral to a theme, and will therefore be set based on a theme's manifest when a theme is imported or enabled. This is done using the ``[theme:parameters]`` section in the ``manifest.cfg`` file. For example::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:799
msgid "Theme debugging"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:801
msgid "When Zope is in development mode (e.g. running in the foreground in a console with ``bin/instance fg``), the theme will be re-compiled on each request. In non-development mode, it is compiled once when first accessed, and then only re- compiled the control panel values are changed."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:806
msgid "Also, in development mode, it is possible to temporarily disable the theme by appending a query string parameter ``diazo.off=1``. For example::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:811
msgid "Finally, you can get an overlay containing your rules, annotated with how many times the conditions matched both the theme and the document. Green means the condition matched, red means it didn't. The entire rule tag will be green (i.e. it had an effect) so long as all conditions within are green."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:816
msgid "To enable this, append ``diazo.debug=1``. For example::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:820
msgid "The parameter is ignored in non-development mode."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:823
msgid "Commonly used rules"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:825
msgid "The following recipes illustrate rules commonly used in building Plone themes:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:827
msgid "To copy the page title::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:831
msgid "To copy the ``<base />`` tag (necessary for Plone's links to work)::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:835
msgid "If there is no ``<base />`` tag in the theme, you can do:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:837
msgid "<before css:theme-children=\"head\" css:content=\"base\" />"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:839
msgid "To drop all styles and JavaScript resources from the theme and copy them from Plone's ``portal_css`` tool instead::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:849
msgid "To copy Plone's JavaScript resources::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:854
msgid "To copy the class of the ``<body />`` tag (necessary for certain Plone JavaScript functions and styles to work properly)::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:861
msgid "Advanced: Using portal_css to manage your CSS"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:863
msgid "Plone's \"resource registries\", including the ``portal_css`` tool, can be used to manage CSS stylesheets. This offers several advantages over simply linking to your stylesheets in the template, such as:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:867
msgid "Detailed control over the ordering of stylesheets"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:868
msgid "Merging of stylesheets to reduce the number of downloads required to render your page"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:870
msgid "On-the-fly stylesheet compression (e.g. whitespace removal)"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:871
msgid "The ability to include or exclude a stylesheet based on an expression"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:873
msgid "It is usually desirable (and sometimes completely necessary) to leave the theme file untouched, but you can still use ``portal_css`` to manage your stylesheets. The trick is to:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:877
msgid "Register your theme's styles with Plone's ``portal_css`` tool (this is normally best done when you ship a theme in a Python package - there is currently no way to automate this for a theme imported from a Zip file or created through the web)"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:881
msgid "Drop the theme's styles with a rule, and then"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:882
msgid "Include all styles from Plone"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:884
msgid "For example, you could add the following rules::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:892
msgid "The use of an \"or\" expression for the content in the ``after />`` rule means that the relative ordering of link and style elements is maintained."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:895
msgid "To register stylesheets upon product installation using GenericSetup, use the ``cssregistry.xml`` import step in your GenericSetup ``profiles/default`` directory::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:919
msgid "There is one important caveat, however. Your stylesheet may include relative URL references of the following form:"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:922
msgid "background-image: url(../images/bg.jpg);"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:924
msgid "If your stylesheet lives in a resource directory (e.g. it is registered in ``portal_css`` with the id ``++theme++my.theme/css/styles.css``), this will work fine so long as the registry (and Zope) is in debug mode. The relative URL will be resolved by the browser to ``++theme++my.theme/images/bg.jpg``."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:930
msgid "However, you may find that the relative URL breaks when the registry is put into production mode. This is because resource merging also changes the URL of the stylesheet to be something like::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:936
msgid "To correct for this, you must set the ``applyPrefix`` flag to ``true`` when installing your CSS resource using ``cssregistry.xml``. There is a corresponding flag in the ``portal_css`` user interface."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:940
msgid "It is sometimes useful to show some of Plone's CSS in the styled site. You can achieve this by using an Diazo ``<after />`` rule or similar to copy the CSS from Plone's generated ``<head />`` into the theme. You can use the ``portal_css`` tool to turn off the style sheets you do not want."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:945
msgid "However, if you also want the site to be usable in non-themed mode (e.g. on a separate URL), you may want to have a larger set of styles enabled when Diazo is not used. To make this easier, you can use the following expressions as conditions in the ``portal_css`` tool (and ``portal_javascripts`` if relevant), in ``portal_actions``, in page templates, and other places that use TAL expression syntax::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:954
msgid "This expression will return True if Diazo is currently enabled, in which case an HTTP header \"X-Theme-Enabled\" will be set."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:957
msgid "If you later deploy the theme to a fronting web server such as nginx, you can set the same request header there to get the same effect, even if ``plone.app.theming`` is uninstalled."
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:961
msgid "Use::"
msgstr ""

#: ../external/plone.app.theming/docs/index.rst:965
msgid "to 'hide' a style sheet from the themed site."
msgstr ""

#: ../external/tutorial.todoapp/README.rst:3
#: ../external/tutorial.todoapp/docs/README.rst:3
#: ../external/tutorial.todoapp/docs/README.rst:3
msgid "Plone Todo list application tutorial"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:5
#: ../external/tutorial.todoapp/docs/README.rst:5
#: ../external/tutorial.todoapp/docs/README.rst:5
msgid "`Plone 4.3 <http://plone.org>`_"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:6
#: ../external/tutorial.todoapp/docs/README.rst:6
#: ../external/tutorial.todoapp/docs/README.rst:6
msgid "https://github.com/collective/tutorial.todoapp/issues"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:7
#: ../external/tutorial.todoapp/docs/README.rst:7
#: ../external/tutorial.todoapp/docs/README.rst:7
msgid "https://github.com/collective/tutorial.todoapp"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:8
#: ../external/tutorial.todoapp/docs/README.rst:8
#: ../external/tutorial.todoapp/docs/README.rst:8
msgid "http://tutorialtodoapp.readthedocs.org/"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:0
#: ../external/tutorial.todoapp/docs/README.rst:0
#: ../external/tutorial.todoapp/docs/README.rst:0
msgid "You will learn to:"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:17
#: ../external/tutorial.todoapp/docs/README.rst:17
#: ../external/tutorial.todoapp/docs/README.rst:17
msgid "create custom content-types Through-The-Web"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:18
#: ../external/tutorial.todoapp/docs/README.rst:18
#: ../external/tutorial.todoapp/docs/README.rst:18
msgid "create and apply custom workflows"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:19
#: ../external/tutorial.todoapp/docs/README.rst:19
#: ../external/tutorial.todoapp/docs/README.rst:19
msgid "create custom listings"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:20
#: ../external/tutorial.todoapp/docs/README.rst:20
#: ../external/tutorial.todoapp/docs/README.rst:20
msgid "dump your changes into a filesytem package to future-proof them"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:21
#: ../external/tutorial.todoapp/docs/README.rst:21
#: ../external/tutorial.todoapp/docs/README.rst:21
msgid "write tests for your filesystem package"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:0
#: ../external/tutorial.todoapp/docs/README.rst:0
#: ../external/tutorial.todoapp/docs/README.rst:0
msgid "Summary"
msgstr ""

#: ../external/tutorial.todoapp/README.rst:25
#: ../external/tutorial.todoapp/docs/README.rst:25
#: ../external/tutorial.todoapp/docs/README.rst:25
msgid "It’s a fact - Plone has a lot of complicated features. That doesn’t mean Plone is hard for everything! This is a simple tutorial that anyone can follow to get a simple Todo list application running inside of Plone. Would you want to deploy Plone for just a Todo list in real life? Probably not. You can however learn several simple, fast concepts that will get you most of the way there. Feeling like you don’t understand something completely or the terminology is getting to you? Sit back, relax, and finish the tutorial. If in the end things still aren’t clear, please give feedback and we’ll look at what we could do better."
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:5
msgid "Changelog"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:8
msgid "1.1 (2013-07-04)"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:10
msgid "Instructions for preparing the environment on various OSes. [ielectric, zupo]"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:13
msgid "Proof-reading the tutorial text. [ielectric, zupo]"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:16
msgid "Use latest best practices from bobtemplates.niteoweb. [zupo]"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:19
msgid "Use Plone 4.3. [zupo]"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:24
msgid "1.0 (2012-09-11)"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:26
msgid "Acted as guinea pigs and went through the entire tutorial slowly and thoroughly. [matejc, plamut]"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:30
msgid "AJAXifying the @@todo view. [eleddy]"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:33
msgid "The @@todo BrowserView for listing Todo Items. [zupo]"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:36
msgid "Tests for GenericSetup exports of content-type and workflow. [zupo]"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:39
msgid "TTW part of the tutorial, loads of screenshots. [eleddy]"
msgstr ""

#: ../external/tutorial.todoapp/docs/HISTORY.rst:42
msgid "Skeleton. [zupo]"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:0
#: ../external/tutorial.todoapp/docs/chapter_1.rst:0
#: ../external/tutorial.todoapp/docs/chapter_2.rst:0
#: ../external/tutorial.todoapp/docs/chapter_3.rst:0
#: ../external/tutorial.todoapp/docs/chapter_4.rst:0
#: ../external/tutorial.todoapp/docs/index.rst:0
msgid "WARNING: If you are reading this on GitHub, DON'T! Read it on ReadTheDocs:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:0
msgid "http://tutorialtodoapp.readthedocs.org/en/latest/prelude.html so you have"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:0
#: ../external/tutorial.todoapp/docs/index.rst:0
msgid "working references and proper formatting."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:15
msgid "You have Git installed and vaguely know how to use it."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:16
msgid "You are working with Python 2.6 or 2.7"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:17
msgid "You have already installed (listed names are for Ubuntu/Debian, should be similar for your distribution): `python-setuptools`, `python-virtualenv`, `zlib1g-dev`, `libxslt1-dev` and `libxml2-dev`."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:20
msgid "For Ubuntu/Debian users it may be worthwhile to install build-essential (sudo apt-get install build-essential) to make sure you have necessary build tools."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:23
msgid "Sorry Windows users, but you'll have to translate as usual from n*x to Windows-ese."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:31
msgid "Tutorial Setup"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:33
msgid "Since this is a tutorial on how to be a developer, there will always be a little bit of setup. There are many ways that this could be done and integrated with the `Plone Unified Installer <https://plone.org/documentation/manual/installing-plone/installing-on-linux-unix-bsd/what-is-the-unified-installer>`_, but those are not covered here. It is possible though to use this tutorial in the context of the Unified Installer by just installing the source skeleton."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:40
msgid "Using Git, checkout the project code for this tutorial. Then run ``make`` to prepare the development environment. There are sometimes problems on Mac and Linux machines with pre-installed versions of Python. If you run into issues, please see :ref:`troubleshooting`::"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:51
msgid "This will take your system python interpreter. If you wish to use a custom one, run it like `make python=/usr/local/bin/python2.7`"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:56
msgid "Whenever you are stuck with a broken environment and want to start over, run ``make clean`` followed by ``make``. This will remove everything but your source files and your database, and then continue to rebuild the entire environment."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:63
msgid "Running ``make`` also generates this documentation for you locally and runs all tests. See ``Makefile`` for other commands you have available, such as ``make docs`` and ``make tests``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:68
msgid "Before starting the Plone instance, lets activate our virtualenv. For more information on virtualenv check :ref:`virtualenv`::"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:72
msgid "Next up, start the Plone instance::"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:76
msgid "Open up your browser and navigate to ``http://localhost:8080/``"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:77
msgid "Click 'Create a New Plone Site'. The default username and password is ``admin:admin``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:80
msgid "Change the `name` and `id` if you wish, but keep in mind that for this tutorial we will assume that the name of the site is ``Plone`` and the Plone instance is located at ``http://localhost:8080/Plone``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:87
msgid "Under `Add-ons`, make sure to check ``Dexterity Content Types`` and ``tutorial.todoapp`` then click ``Create Plone Site``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:93
msgid "There, your Plone site is created and you can continue with the tutorial."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:98
msgid "Woot! Let's go."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:106
msgid "Virtualenv"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:108
msgid "virtualenv is a tool to create isolated Python environments. `virtualenv documentation <http://www.virtualenv.org/en/latest/>`_."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:117
msgid "Sometimes setting up development environment gives you lemons. There are various ways to go around that."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:120
msgid "In case you don't have correct Python version or your system Python environment is broken (yes, I'm looking to you OS X), `buildout.python` gives you get out of jail free card. To install it, see the `install docs <https://github.com/collective/buildout.python/blob/master/docs/INSTALL.txt>`_. Then use `buildout.python/python-2.7/bin/python bootstrap.py --distribute` step as in `Tutorial Setup` section and so on."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_0.rst:127
msgid "If everything fails, it's time to use a virtual machine. See `install steps <https://github.com/plone/coredev.vagrant#installation>`_ to prepare and try again with :ref:`tutorial_setup` section."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:0
msgid "http://tutorialtodoapp.readthedocs.org/en/latest/chapter_1.html so you"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:0
#: ../external/tutorial.todoapp/docs/chapter_2.rst:0
#: ../external/tutorial.todoapp/docs/chapter_3.rst:0
#: ../external/tutorial.todoapp/docs/chapter_4.rst:0
msgid "have working references and proper formatting."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:13
msgid "Chapter 1: Through-The-Web"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:16
msgid "Getting Started with Content Types"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:18
msgid "If you don't know what a content type is, don't worry! Sit back, relax, and do the tutorial! I'll save the mumbo jumbo definitions for another day. In this first part, we will make a Todo list without touching any code. It won't be fancy, but it will give you a good idea of how things work in Plone."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:23
msgid "The way Plone handles content is a little different than your average relational database driven framework, so if you don't understand something right away, sit back, relax, and finish the tutorial."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:27
msgid "Generally speaking, content-types are just that: types of content. By default, in Plone you get the News Item content-type, the Event content-type and so on. So if you add a content item that is of Event type, you are using the Event content-type. In our case, we will create a new content-type that will represent a Todo Item."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:35
msgid "Create a New Content Type"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:37
msgid "First we need to create a new content type to represent an item on our Todo list. This will be a type with one field, that which needs to be done."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:40
msgid "Navigate to `site setup` as shown below, or just enter ``http://localhost:8080/Plone/@@overview-controlpanel`` in your browser. This is where you can configure Plone for happy fun time."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:47
msgid "Now comes the fun part. We want to create our own type `Through-The-Web` aka. `TTW`. This type will be a Todo Item. Let’s click `Dexterity Content Types` (or go directly to ``http://localhost:8080/Plone/@@dexterity-types``)."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:55
msgid "Create a Todo List Item by clicking ``Add New Content Type``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:60
msgid "Fill in the fields as seen below and then click ``Add``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:65
msgid "Now you will see that there is a new type to play with. There are two important things we need to do here: we need to adjust some `behaviors`, and add some `fields`. Let’s look at behaviors first."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:72
msgid "By default, all Plone content-types have `Dublin Core <http://en.wikipedia.org/wiki/Dublin_Core>`_ metadata enabled (you may know it as ``title`` and ``description``. We don’t need this for our über simple Todo list item. Uncheck ``Dublin Core metadata`` and then click ``Save``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:80
msgid "Next we need to add some fields. Because this type is so simple, we will add just one field, but feel free to go CRAZY. Start by going back to the ``Fields`` tab and clicking ``Add new field...``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:87
msgid "Add a field called ``Todo``, or anything else you want. But! Note that it's very important that the `Short Name` field value is ``title``. By using this key short name, we make sure that all Todo Items are searchable from smart search. Update the field as seen below and click ``Add``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:95
msgid "You will see that a new field has been added to your content type. If you are feeling adventuresome, click on the settings tab next to the field to set other properties, or just see what’s available."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:104
msgid "Trying out the Todo Item content-type"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:106
msgid "Now it's time to reap the rewards of all of your effort. Let's put all of our Todo Items in one particular folder so that we can have collections of items throughout the site. For this tutorial, we will be putting everything in the root of the site so it's easy to debug."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:111
msgid "From the root, add a new folder called ``TODO list``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:119
msgid "Add a new `Todo Item` to the new `Todo` folder."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:127
#: ../external/tutorial.todoapp/docs/chapter_3.rst:116
msgid "Celebrate!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:132
msgid "You may be wondering about earlier, when we asked you to make sure that the `short name` for the Todo Item was called ``title``. The time has come to let you in on a little secret. Calling the short name either ``title`` or ``description`` will automatically add that text to the livesearch menu. WHAT?!? I know! When life gives you lemonade, spike it with vodka and enjoy liberally! You can now search for your Todo Items in Live Search."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:142
msgid "But wait a minute... This todo item is marked ``private``, and that doesn't really make sense. It's a good thing Plone has an easy solution for that. In the next section, we will go over the basics of that magical, mystical word: `workflow`."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:149
msgid "Getting Started with Workflows"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:151
msgid "So what is a workflow? It is a mechanism to control the flow of a content item through various states in time. Most commonly, and by default in Plone, you deal with a `publication` workflow. For example: A writer writes up a News Item and submits it for review. Then the in-house reviewing team goes through the text and publishes the News Item so it is public for the entire world to see."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:158
msgid "The Todo Item we added in the last section is marked as ``private`` because by default all new Plone content items are assigned a workflow called ``simple_publication_workflow``. I know what you are thinking: simple publication whodie whatie grble gobble??!?! Just like before, let's bypass trying to explain what that means and just fix it. Relax, enjoy, and finish the tutorial!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:165
msgid "Todo Items really have 2 states that we are interested in: `open` and `complete`. Let's make that happen."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:168
msgid "Head over to the ZMI at ``http://localhost:8080/Plone/manage_main``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:169
msgid "In the ZMI, open the ``portal_workflow`` tool."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:174
msgid "On this page, we see all content-types in our portal `mapped` to a workflow. Our new type, Todo Item, is mapped to ``(Default)``. You can see right below that the default is ``Simple Publication Workflow``. This is just too complex for our little Todo Item."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:182
msgid "So let's create a new one that suites our needs perfectly! Click the ``contents`` tab at the top of the page to get a listing of all the available workflows."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:189
msgid "You can poke around here all you like, but the details of each one of these workflows are better left to another tutorial. When in doubt, you can always come back to these workflows to see examples of how things can be done. Onwards and upwards!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:194
msgid "Let's create a new workflow for our Todo Items and call it ``todo_item_workflow``. We will make a new workflow by copying and customising one of the workflows that are already there. Duplicate the ``one_state_workflow``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:202
msgid "Rename the copied workflow to ``todo_item_workflow``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:210
msgid "You will be spit back out to the workflow contents page. Click the workflow to start editing."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:216
msgid "Let's update the name of the workflow so we don't double take later on."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:222
msgid "Workflow is something that takes time to get used to if you have never encountered the concept. The best analogy in our case is to a car. The car engine has two simple states: `on` and `off`. To transition from on to off and vice versa, it needs some action from the driver. The same for our TODO items. They have two states: `open` and `completed`. In order to get them from `open` to `completed`, the user needs to click something. Don't understand yet? Relax, sit back, and finish the tutorial."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:230
msgid "Lets start by adding our base states. We will call them `open` and `complete`. From the edit workflow screen, click on the ``States`` tab."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:236
msgid "Delete the currently listed state."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:242
msgid "Add two states with the ids ``open`` and ``completed``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:250
msgid "Next lets add `transitions`. They will take the TODO item from `open` to `completed` and vice versa (in case a user wants to revert an item back to `open`). Click on the ``Transitions`` tab."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:257
msgid "Add two transitions: `complete` and `reopen`. When a user `completes` a task, it will move into the `completed` state. When a user `reopens` a task, it will go back to the `open` state."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:264
msgid "Let's add a few details to these new transitions. Let's start with `complete`. Click on ``complete`` to edit the transition."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:270
msgid "First add a title so you remember later what this does. Description is optional but adding one will help you keep your thoughts clear and remind the `future you` what the `today you` is thinking. The destination state should be set to ``completed``. We also want to make sure that only people with mega permissions, or the creator of the todo item itself, can change the state so we add ``Modify portal content`` to the ``Permissions`` box."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:277
msgid "All this means nothing if we don't give the user a chance to change the state. Next to ``Display in actions box``, we can set the title for what will be displayed in the workflow drop down box of the item (where `Pending`, `Reject`, etc. where earlier). Let's call it ``Complete``. Last but not least, we need to add the URL that the action points to. I could make this tutorial 100 years long and explain why you have to do this, but accept that it has to be done, relax, and follow this formula:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:289
msgid "where `X` is the id of the transition. So for this case, in the URL box, you will add"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:299
msgid "Double check everything and click ``Save``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:301
msgid "If your brain isn't hurting yet it will be soon. Go back to the transitions listing."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:311
msgid "Let's update the `reopen` transition and update in a similar manner. This time, the destination state is ``open``, and following the formula above, the URL is ``%(content_url)s/content_status_modify?workflow_action=reopen``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:318
msgid "Now we have 2 states and 2 transitions, but they aren't 100% linked together ... yet. Go back to the workflow listing, click the ``States`` tab and then click on ``completed`` to edit the state."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:328
msgid "Add a title, since this is what users see in the top right corner of the TODO items, and then check ``reopen`` as a possible transition. This means that when a TODO item is completed, it will only allow the user to reopen it (and not re-complete it, for example). In the same respect, open the ``open`` transition, add a title, and mark ``complete`` as a possible transition."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:341
msgid "When we create a new TODO item, we need to tell Plone what the first state is. Go back to the workflow states listing, and make ``open`` the initial state."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:348
msgid "And that's it! Almost... Last but not least, we need to assign our new workflow to our TODO item type. Go back to the main workflow screen."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:354
msgid "Instead of mapping to the ``(Default)`` workflow, we are going to map to the id of our new workflow, ``todo_item_workflow``, and then click ``Change``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:357
msgid "If you already have TODO items in your site, you MUST click ``Update Security Settings`` to update the workflow for the items. Instead of going into gross detail about why this is the case, just sit back, relax, finish the tutorial, and remember to click this button any time you make changes (yes! you can continue to change and update your workflows!)."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:366
msgid "Could the time have arrived? Time to try it out? YES! Go to your ``Todo`` folder and add a new TODO Item. Validate that the workflow works as expected. By toggling between the states."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_1.rst:373
msgid "Congrats! You have now passed `Plone Workflow 101`. Next we will transition from developing through the web (TTW) to developing on the filesystem."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:0
msgid "http://tutorialtodoapp.readthedocs.org/en/latest/chapter_2.html so you"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:13
msgid "Chapter 2: Filesystem package"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:15
msgid "Alright! In Chapter 1 you got your content-type and your workflow hooked up and running. You're now ready for the next step: pushing your changes to a filesystem-based package and into a version control system."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:19
msgid "Now, why would you even want to do that? Here's a couple of reasons:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:22
msgid "**Tracking of changes**"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:24
msgid "The most obvious one: when you store the configuration of your content-type and your workflow in a `VCS <http://en.wikipedia.org/wiki/Revision_control>`_, you can track how they changed over time. It's useful to be able to look back a few months and see how your files changed."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:29
msgid "**Distribution to other developers**"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:31
msgid "If you are working in a team you have two ways of distributing your work: either write up a guide on what needs to be clicked for someone to come to the state you are currently at (slow, manual and error-prone) OR you export your configuration and the other developer simply imports it (fast, consistent)."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:37
msgid "**Tests**"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:39
msgid "Last, but the most important one, having your configuration exported to a filesystem package allows you to write tests for it. When your test runner spins up a Plone site to run tests against, it needs to have the same content-type and workflow that you configured TTW. And importing configuration is by far the easiest way to give the test runner just that."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:47
msgid "Package skeleton"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:49
msgid "Let's start by creating a package skeleton. Since writing things up from scratch kinda sucks, use this tutorial as your skeleton."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:54
msgid "Exporting configuration"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:57
msgid "Exporting Todo Item content-type"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:59
msgid "Navigate back to the dexterity content type panel or go directly to ``http://localhost:8080/Plone/@@dexterity-types``"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:62
msgid "Check the TODO item and then click on export type profile to download the type. If you don't check anything, it won't do anything and there is currently no error message so don't be surprised."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:69
msgid "This will start a download to your machine. Navigate to the download directory and unzip the contents of the file that was downloaded. Here is an example of what it will look like:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:76
msgid "We need to take types.xml and the types folder, and save it in our base product. You can use your finder or explorer to drag and drop, or use the command line. I'll use command line as an example but feel free to improvise. You want to move the files into your default product profile. What's a profile? Don't worry about it. Sit back, relax, and finish the tutorial. You will move the files into"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:89
msgid "There is a bug in Plone 4.3 that makes the import process brake when parsing XMLs that the export tool exports. To make it work we need to remove the `comment` line from ``types.xml``:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:98
msgid "Anytime you perform some sort of configuration export from Plone to a custom product, you will put the XML files in the profiles/default folder. Every time you make changes to your types, you should re-export and save into the same location. Now, when the next person installs the add-on, they wil have the type already there!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:107
msgid "Before we continue we need to tell Plone that whenever we install `tutorial.todoapp` we want it to also pull in the Dexterity package, so our content type is working happily. We do that by adding the following lines to ``profiles/default/metadata.xml``, inside the ``<metadata>`` tag."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:120
msgid "Exporting todo_item_workflow"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:122
msgid "Exporting a workflow is very similar to exporting a Dexterity type. It just takes a little bit more navigating and a trip to the ZMI. To export the workflow, navigate to the root of the ZMI by gong to ``http://localhost:8080/Plone/manage_main``. From there, head into the `portal_setup` tool:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:131
msgid "WARNING: The following User Interface is not recommended for children under 18."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:133
msgid "In the `portal_setup` tool, click on the export tab."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:138
msgid "There are a LOT of things that you can export here, but that is for a different tutorial. For now, find export item #27 called ``Workflow Tool``, check the box to the left. Then scroll all the way to the bottom and ``Export selected steps``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:146
msgid "Just like the Dexterity content type, you will want to untar the downloaded folder, and move into your default profile folder."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:149
msgid "In that download you should have a file called ``workflows.xml`` and a folder called ``workflows`` like below. You will move both of them to the default profile."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:156
msgid "Place all of these files in your profile at"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:162
msgid "Now, this export exported the entire configuration for all workflows in your site. But you are only interested in the ``todo_item_workflow`` configuration and you don't want to change configuration for other workflows. So, first, remove all other workflow definitions (XML files)."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:177
msgid "Secondly, remove all non-todoitem-related stuff from ``workflows.xml``. In the end the file should look like this:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:192
msgid "And you are done! Congratulations on the birth of your new product!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:196
#: ../external/tutorial.todoapp/docs/chapter_3.rst:125
#: ../external/tutorial.todoapp/docs/chapter_4.rst:149
msgid "Tests"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:198
msgid "Alright, tests! Considered a pain and a nuisance by some but loved by all who do it. If you want your code to be solid and your site to be stable, tests are a great way to get there."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:202
msgid "The package you have on your filesystem is already configured to give you a test-runner so you can immediately go and run it -- obviously you have no tests, but at least you try if your test runner works."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:211
msgid "Note: you do *NOT* need to stop your Plone instance in order to run tests. They will peacefully co-exist."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:214
msgid "Good, the next thing to do is to add tests. Go to `tutorial.todoapp repo on GitHub <https://github.com/collective/tutorial.todoapp/>`_ and copy/paste (or download) all files from the ``src/tutorial/todoapp/tests`` folder to your local ``src/tutorial/todoapp/tests`` folder. You can also get the tests with git:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:225
msgid "This folder will contain your test files:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:227
msgid "**test_setup.py**"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:229
msgid "This module contains tests that check if your package was successfully installed and configured. Tests in here are concerned with XML files you have in the ``profiles/default`` folder."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:233
msgid "**test_todo_item.py**"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:235
msgid "And finally a module that contains tests for your custom content-type."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:237
msgid "We will not go into details of what each test does as we believe the test code and its comments are in themselves informative and we will rather encourage you to go through all tests, try to understand what they do, maybe change something and see what happens, etc."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:242
msgid "Remember that you run tests with ``make tests`` and you should get an output that looks somewhat like this:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:260
msgid "Also, remember that whenever you run ``make`` your tests are gonna be run too."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_2.rst:265
msgid "If something goes wrong you can always go to GitHub and see how the `code for chapter 2 <https://github.com/collective/tutorial.todoapp/tree/chapter2>`_ should look like and compare this to what you have on your local machine."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:0
#: ../external/tutorial.todoapp/docs/chapter_4.rst:0
msgid "http://tutorialtodoapp.readthedocs.org/en/latest/chapter_3.html so you"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:13
msgid "Chapter 3: Custom View"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:15
msgid "In this chapter you will learn how to add a custom view -- in our case a listing of Todo Items."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:19
msgid "View class"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:21
msgid "Let's start by adding the view class. You can go to `tutorial.todoapp repo on GitHub <https://github.com/collective/tutorial.todoapp/>`_ and copy over code from ``src/tutorial/todoapp/todo.py`` to your local computer or just use git:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:31
msgid "We also need to tell Plone to display this view in the `display` drop-down menu for Folders so we will later be able to set our view as a default display view for our Todo folder. Let's do that by using git to get a version of ``Folder.xml`` and put it in ``src/tutorial/todoapp/profiles/default/types``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:42
msgid "View template"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:44
msgid "Now that we have a class we can also add the template. Go to `tutorial.todoapp repo on GitHub <https://github.com/collective/tutorial.todoapp/>`_ and copy over code from ``src/tutorial/todoapp/templates/todo.pt`` to your local computer or, again, use git."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:53
msgid "The template uses the ZPT syntax, `read more about it here <http://wiki.zope.org/ZPT/TutorialPart1>`_."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:59
msgid "The template displays different icons for different workflow states of your Todo Items. We need to add these icons to your package:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:62
msgid "Download ``open.png`` and ``completed.png`` from GitHub (they are in ``src/tutorial/todoapp/static``) into a new folder on your local computer: ``src/tutorial/todoapp/static``. You can use git again if you don't like manual work."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:71
msgid "Tell Zope that this ``static`` folder contains static resources (icons, CCS files, JavaScript files, etc.) by adding the following lines to ``src/tutorial/todoapp/configure.zcml`` inside the ``<configure`` tag:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:83
msgid "After restarting your Zope server, files in your ``static`` folder will be available on a standard URL: ``http://localhost:8080/Plone/++resource++tutorial.todoapp/<filename>``"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:89
msgid "Try it out"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:91
msgid "Because the XML configuration of our product has change, we need to reinstall the product. This is accomplished by ``deactivating`` and ``reactivating`` the product. Navigate to the add-ons manager or go directly to ``http://localhost:8080/Plone/@@overview-controlpanel``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:99
msgid "Deactivate the tutorial.todoapp product, and then reactivate it."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:107
msgid "Note that every time you make a change to the xml files, by exporting or manual edit, you must reactivate the product for the changes to take effect!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:110
msgid "Now, we apply the new view to the folder holding our todo items. Navigate to the folder you created in chapter 1, and update the display."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:121
msgid "If the de-activate / activate does not work you may need to restart Plone instance to see the changes."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:127
msgid "Cool, so you have verified that your code works through the browser and it's time to add tests to make sure your code keeps on working in the future."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:130
msgid "First add the following snippet to ``test_setup.py`` to verify that your Folders have the ``todo`` view on the `Display` drop-down menu."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:156
msgid "If you haven't already downloaded it, add a new test module: ``test_todo_view.py``. Download it from GitHub, put and it in your ``tests`` folder and run tests. Feel free to fiddle around with it to see what it does. As always, you can use git to get the file."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_3.rst:169
msgid "If something goes wrong you can always go to GitHub and see how the `code for chapter 3 <https://github.com/collective/tutorial.todoapp/tree/chapter3>`_ should look like and compare this to what you have on your local machine."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:13
msgid "Chapter 4: Bling-bling"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:15
msgid "As a reward for making it all the way to the end, we will help you add some fancy features to your project, otherwise known as bling and that means having to write JavaScript. Fortunately Plone comes with jQuery so we can easily integrate."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:20
msgid "The final part of this tutorial will allow users to check and un-check items on their todo list  without having to load a new page request. Note that by developing the functionality in this order, 100% of the functionality of the application remains working even when javascript is disabled. Win!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:27
msgid "AJAX view"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:29
msgid "Before we add front-end bling, we need some code that can handle these requests coming in. Let's create a simple view that will update the object in context to a new state. Go to GitHub and copy the code for ``WorkflowTransition`` class in ``todo.py``. This class represents a view that our AJAX code will call. You can also get the code with git, however note that now we are checking out code from master, as Chapter 4 is the last chapter and its code is in the master branch."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:41
msgid "Take a look at the ``WorkflowTransition`` class and comments around the code. There are a couple of things to point out specific to this setup:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:48
msgid "Tells us that this view should be called in the context of a Dexterity Container item. So if you try to go to this view from the portal root or anywhere in the site that is not a Dexterity item, Plone will return a 404 - not found error. By default all Dexterity types that you create TTW are based on the Dexterity Container base class."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:58
msgid "This tells us on which URL the view will be available on. In this case, on ``<url_to_plone_content_object>/update_workflow``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:65
msgid "``render`` is a special function that must be used. It is where all of the code must go when used with grok directives. This is the main block of code that will be executed."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:73
msgid "``self.request`` is set by the base class, and anything based on BrowserView will have access to this variable. All of GET/POST parameters will be stored in ``self.request.form``."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:83
msgid "When working with JSON, it's not *required* to set the header content type, but when used with certain jQuery calls it is expected to have the header set correctly. If you don't set this, it will sometimes work and sometimes not. Get used to setting it!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:88
msgid "Additionally, we return the result serialized as json by default. For making and testing JSON web service calls, keep in mind that they should do exactly one thing and no more. This makes it easy to integrate with Javascript and VERY easy to test. We'll see later on how easy it is to test this view."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:93
msgid "Furthermore, before taking the plunge to wire up JavaScript, go directly to the url and test the change. For example, if you have an item at ``http://localhost:8080/Plone/todo-list/go-to-the-bathroom``, you can test the view by appending the view name and GET variables to the end of the item's url. However, you first need to restart your Zope first, so your Python files get reloaded!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:111
msgid "For extra clarity: if you are not an expert in python, plone, AND javascript, I highly recommend integrating bling bling in the following order:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:114
msgid "Write base view and **passing** test cases"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:115
msgid "Test views in browser"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:116
msgid "Make ajax interactive"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:118
msgid "Starting with bling from the start will only bring you pain."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:122
msgid "Custom JavaScript"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:124
msgid "Now that we know the ``update_workflow`` view is working, let's add some AJAX handling on the top of it. Checkout the Javascript file and a JavaScript registry file into your working directory:"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:133
msgid "``jsregistry.xml`` contains all configuration needed to tell Plone how it should register and use our JavaScript. It has a lot of options that are pretty self explanatory (if you think like a machine)."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:141
msgid "Trying it out!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:143
msgid "Holy moley you made it! Restart Zope (to reload Python files), reactivate the product (to reimport XML files), do a hard reload in your web browser (to clear any caches) and check out your todo list. The todo items should toggle between complete and incomplete without the page reloading. Sweet!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:151
msgid "As always, let's add tests!  First add the following snippet to ``test_setup`` to verify that your JavaScript is registered in Plone."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:165
msgid "Lastly, add a new test module: ``test_workflow.py``. Download it from GitHub, put and it in your ``tests`` folder and run tests. Then fiddle around with it to see what it does. As always, you can use git to get the file."
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:175
msgid "The end"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:177
msgid "This concludes the Todo app in Plone tutorial. Congratulations! Now it's time to checkout other tutorials and documentation available on `developer.plone.org <http://developer.plone.org>`_!"
msgstr ""

#: ../external/tutorial.todoapp/docs/chapter_4.rst:185
msgid "If something goes wrong you can always go to GitHub and see how the `code in master <https://github.com/collective/tutorial.todoapp/>`_ should look like and compare this to what you have on your local machine."
msgstr ""

#: ../external/tutorial.todoapp/docs/index.rst:0
msgid "http://tutorialtodoapp.readthedocs.org/en/latest/index.html so you have"
msgstr ""

#: ../external/tutorial.todoapp/docs/index.rst:15
msgid "The Tutorial"
msgstr ""

#: ../external/tutorial.todoapp/docs/index.rst:28
msgid "Developer Documentation"
msgstr ""

#: ../external/tutorial.todoapp/docs/index.rst:30
msgid "Information on how to contribute to this tutorial. Note that all code should follow `plone.api code conventions <http://ploneapi.readthedocs.org/en/latest/contribute/conventions.html>`_."
msgstr ""

#: ../external/tutorial.todoapp/docs/release.rst:10
msgid "Releasing a new version of `tutorial.todoapp` involves the following steps:"
msgstr ""

#: ../external/tutorial.todoapp/docs/release.rst:21
msgid "Before every release make sure that:"
msgstr ""

#: ../external/tutorial.todoapp/docs/release.rst:23
msgid "You have documented your changes in the ``HISTORY.rst`` file."
msgstr ""

#: ../external/tutorial.todoapp/docs/release.rst:25
msgid "You have modified the version identifier in ``setup.py`` to reflect the new release."
msgstr ""

#: ../external/tutorial.todoapp/docs/release.rst:28
msgid "You have confirmed that the package description (generated from ``README.rst`` and others) renders correctly by running ``bin/longtest``."
msgstr ""

#: ../external/tutorial.todoapp/docs/release.rst:31
msgid "You have committed all changes to the git repository and pushed them upstream."
msgstr ""

#: ../external/tutorial.todoapp/docs/release.rst:34
msgid "You have the working directory checked out at the revision you wish to release."
msgstr ""

#: ../external/tutorial.todoapp/docs/release.rst:41
msgid "For help with releasing we use ``jarn.mkreleaser``. It's listed as a dependency in ``setup.py`` and should already be installed in your local bin:"
msgstr ""

#: ../external/tutorial.todoapp/docs/release.rst:49
msgid "In order to push packages to PyPI you need to have the appropriate access rights to the package on PyPI and you need to configure your PyPI credentials in the ``~/.pypirc`` file, e.g.::"
msgstr ""

#: ../external/tutorial.todoapp/docs/release.rst:65
msgid "In the following example we are releasing version 0.1 of `tutorial.todoapp`. The package has been prepared so that ``setup.py`` contains the version ``0.1``, this change has been committed to git and all changes have been pushed upstream to GitHub:"
msgstr ""

