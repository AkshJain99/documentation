# SOME DESCRIPTIVE TITLE.
# Copyright (C) The Plone Foundation
# This file is distributed under the same license as the Plone Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Documentation ['5', '4', '3']\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-09-05 16:00+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../manage/deploying/backup.rst:3
msgid "Backing up your Plone deployment"
msgstr ""

#: ../manage/deploying/backup.rst:5
#: ../manage/deploying/caching/index.rst:5
#: ../manage/deploying/caching/varnish3.rst:5
#: ../manage/deploying/caching/varnish4.rst:5
#: ../manage/deploying/copy.rst:5
#: ../manage/deploying/front-end/apache.rst:5
#: ../manage/deploying/front-end/index.rst:5
#: ../manage/deploying/front-end/nginx.rst:5
#: ../manage/deploying/index.rst:5
#: ../manage/deploying/production/index.rst:5
#: ../manage/deploying/production/ubuntu_production.rst:5
#: ../manage/deploying/testing_tuning/performance/caching.rst:7
#: ../manage/deploying/testing_tuning/performance/decorators.rst:5
#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:7
#: ../manage/deploying/testing_tuning/performance/tips.rst:7
#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:5
#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:5
#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:5
#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:5
#: ../manage/deploying/zope.rst:5
#: ../manage/installing/hotfixes.rst:5
#: ../manage/installing/installation.rst:5
#: ../manage/installing/requirements.rst:5
#: ../manage/troubleshooting/basic.rst:5
#: ../manage/troubleshooting/buildout.rst:5
#: ../manage/troubleshooting/exceptions.rst:5
#: ../manage/troubleshooting/images.rst:5
#: ../manage/troubleshooting/manual-remove-utility.rst:6
#: ../manage/troubleshooting/transactions.rst:5
#: ../manage/upgrading/addon_upgrade.rst:5
#: ../manage/upgrading/index.rst:5
#: ../manage/upgrading/intro.rst:5
#: ../manage/upgrading/non_buildout_based_upgrade.rst:5
#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:5
#: ../manage/upgrading/plone4_minor_upgrade.rst:6
#: ../manage/upgrading/preparations.rst:5
#: ../manage/upgrading/troubleshooting.rst:5
#: ../manage/upgrading/version_specific_migration/index.rst:5
#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:6
msgid "Description"
msgstr ""

#: ../manage/deploying/backup.rst:7
msgid "Strategies for backing up operating Plone installations."
msgstr ""

#: ../manage/deploying/backup.rst:11
msgid "A guide to determining what to back up and how to back it up and restore it safely."
msgstr ""

#: ../manage/deploying/backup.rst:15
#: ../manage/deploying/caching/varnish3.rst:15
#: ../manage/deploying/caching/varnish4.rst:16
#: ../manage/deploying/copy.rst:13
#: ../manage/deploying/front-end/apache.rst:12
#: ../manage/deploying/front-end/nginx.rst:12
#: ../manage/deploying/intro.rst:3
#: ../manage/deploying/production/restarts.rst:8
#: ../manage/deploying/production/ubuntu_production.rst:12
#: ../manage/deploying/testing_tuning/performance/caching.rst:13
#: ../manage/deploying/testing_tuning/performance/decorators.rst:13
#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:13
#: ../manage/deploying/testing_tuning/performance/ramcache.rst:8
#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:12
#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:14
#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:12
#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:13
#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:8
#: ../manage/deploying/wsgi.rst:8
#: ../manage/deploying/zope.rst:16
#: ../manage/installing/installation.rst:28
#: ../manage/installing/installing_addons.rst:10
#: ../manage/troubleshooting/buildout.rst:13
#: ../manage/troubleshooting/transactions.rst:12
#: ../manage/upgrading/intro.rst:3
msgid "Introduction"
msgstr ""

#: ../manage/deploying/backup.rst:17
msgid "The key rules of backing up a working system are probably:"
msgstr ""

#: ../manage/deploying/backup.rst:19
msgid "Back up everything"
msgstr ""

#: ../manage/deploying/backup.rst:21
msgid "Maintain multiple generations of backup"
msgstr ""

#: ../manage/deploying/backup.rst:23
msgid "Test restoring your backups"
msgstr ""

#: ../manage/deploying/backup.rst:27
msgid "This guide assumes that you are already doing this for your system as a whole, and will only cover the considerations specific to Plone. When we say we are assuming you're already doing this for the system as a whole, what we mean is that your system backup mechanisms - rsync, bakula, whatever - are already backing up the directories into which you've installed Plone."
msgstr ""

#: ../manage/deploying/backup.rst:34
msgid "So, your buildout and buildout caches are already backed up, and you've tested the restore process. So, your remaining consideration is making sure that Plone's database files are adequately backed up and recoverable."
msgstr ""

#: ../manage/deploying/backup.rst:39
msgid "Objects in motion"
msgstr ""

#: ../manage/deploying/backup.rst:41
msgid "Objects in motion tend to remain in motion. Objects that are in motion are difficult or impossible to back up accurately."
msgstr ""

#: ../manage/deploying/backup.rst:44
msgid "Translation: Plone is a long-lived process that is constantly changing its content database. The largest of these files, the Data.fs filestorage which contains everything except Binary Large OBjects (BLOBs), is always open for writing. The BLOB storage, a potentially very complex file hierarchy, is constantly changing and must be referentially synchronized to the filestorage."
msgstr ""

#: ../manage/deploying/backup.rst:50
msgid "This means that most system backup schemes are incapable of making useful backups of the content database while it's in use. We assume you don't want to stop your Plone site just to backup, so you need to add procedures to make sure you have useful backups of Plone's data. (We assume that you know that the same thing is true of your relational database storage. If not, get to studying!)"
msgstr ""

#: ../manage/deploying/backup.rst:58
msgid "Where's my data?"
msgstr ""

#: ../manage/deploying/backup.rst:60
msgid "Your Plone instance installation will contain a ./var directory (in the same directory as buildout.cfg) that contains the frequently changing data files for the instance. Much of what's in ./var, though, is not your actual content database. Rather, it's log, process id, and socket files."
msgstr ""

#: ../manage/deploying/backup.rst:65
msgid "The directories that actually contain content data are:"
msgstr ""

#: ../manage/deploying/backup.rst:67
msgid "./var/filestorage"
msgstr ""

#: ../manage/deploying/backup.rst:69
msgid "This is where Zope Object Database filestorage is maintained. Unless you've multiple storages or have changed the name, the key file is Data.fs. It's typically a large file and contains everything except BLOBS."
msgstr ""

#: ../manage/deploying/backup.rst:74
msgid "The other files in filestorage, with extensions like .index, .lock, .old, .tmp are ephemeral, and will be recreated by Zope if they're absent."
msgstr ""

#: ../manage/deploying/backup.rst:77
msgid "./var/blobstorage"
msgstr ""

#: ../manage/deploying/backup.rst:79
msgid "This directory contains a very deeply nested directory hierarchy that, in turn, contains the BLOBs of your database: PDFs, image files, office automation files and such."
msgstr ""

#: ../manage/deploying/backup.rst:83
msgid "The key thing to know about filestorage and blobstorage is that they are maintained synchronously. The filestorage has references to BLOBs in the blobstorage. If the two storages are not perfectly synchronized, you'll get errors."
msgstr ""

#: ../manage/deploying/backup.rst:89
msgid "collective.recipe.backup"
msgstr ""

#: ../manage/deploying/backup.rst:91
msgid "`collective.recipe.backup <https://pypi.python.org/pypi/collective.recipe.backup>`_ is a well-maintained and well-supported recipe for solving the \"objects in motion\" problem for a live Plone database. It makes it easy to both back up and restore the object database. The recipe is basically a sophisticated wrapper around ``repozo``, a Zope database backup tool, and ``rsync``, the common file synchronization tool."
msgstr ""

#: ../manage/deploying/backup.rst:100
msgid "Big thanks to Reinout van Rees, Maurits van Rees and community helpers for creating and maintaining collective.recipe.backup. We all owe them drinks of their choice."
msgstr ""

#: ../manage/deploying/backup.rst:104
msgid "If you're using any of Plone's installation kits, collective.recipe.backup is included in your install. If not, you may add it to your buildout by adding a ``backup`` part:"
msgstr ""

#: ../manage/deploying/backup.rst:119
msgid "There are several useful option settings for the recipe, all set by adding configuration information. All are documented on `the PyPI page <https://pypi.python.org/pypi/collective.recipe.backup>`_. Perhaps the most useful is the ``location`` option, which sets the destination for backup files:"
msgstr ""

#: ../manage/deploying/backup.rst:132
msgid "If this is unspecified, the backup destination is the buildout var directory. The backup destination, though, may be any reliably attached location - including another partition, drive or network storage."
msgstr ""

#: ../manage/deploying/backup.rst:137
msgid "Operation"
msgstr ""

#: ../manage/deploying/backup.rst:139
msgid "Once you've run buildout, you'll have ``bin/backup`` and ``bin/restore`` scripts in your buildout. Since all options are set via buildout, there are few command-line options, and operation is generally as simple as using the bare commands. ``bin/restore`` will accept a date-time argument if you're keeping multiple backups. See the docs for details."
msgstr ""

#: ../manage/deploying/backup.rst:145
msgid "Backup operations may be run without stopping Plone. Restore operations require that you stop Plone, then restart after the restore is complete."
msgstr ""

#: ../manage/deploying/backup.rst:148
msgid "``bin/backup`` is commonly included in a cron table for regular operation. Make sure you test backup/restore before relying on it."
msgstr ""

#: ../manage/deploying/backup.rst:152
msgid "Incremental backups"
msgstr ""

#: ../manage/deploying/backup.rst:154
msgid "collective.recipe.backup offers both incremental and full backup and will maintain multiple generations of backups. Tune these to meet your needs."
msgstr ""

#: ../manage/deploying/backup.rst:157
msgid "When incremental backup is enabled, doing a database packing operation will automatically cause the next backup to be a full backup."
msgstr ""

#: ../manage/deploying/backup.rst:160
msgid "If your backup continuity needs are extreme, your incremental backup may be equally extreme. There are Plone installations where incremental backups are run every few minutes."
msgstr ""

#: ../manage/deploying/caching/index.rst:3
msgid "Guide to Caching"
msgstr ""

#: ../manage/deploying/caching/index.rst:7
msgid "Caching strategies to improve performance."
msgstr ""

#: ../manage/deploying/caching/index.rst:9
#: ../manage/deploying/front-end/index.rst:9
#: ../manage/deploying/index.rst:11
#: ../manage/deploying/production/index.rst:9
#: ../manage/upgrading/index.rst:9
msgid "This guide particularly focuses on `Unix-like <https://en.wikipedia.org/wiki/Unix-like>`_ environments, though the stack discussion may be useful to everyone."
msgstr ""

#: ../manage/deploying/caching/index.rst:14
msgid "Any dynamically generated website with a non-trivial number of visitors, will benefit from ``caching``, where resources (like text, images, CSS, javascripts) that are used for multiple visitors are stored in a way that is really fast to retrieve, so that the (often complicated) back-end server doesn't have to generate those resources for every visitor."
msgstr ""

#: ../manage/deploying/caching/index.rst:16
msgid "Plone is no exception to that. Caching in Plone is a two-step process for most larger sites. There is an add-on called ``plone.app.caching`` that is shipped with Plone. On its own, it will already speed up response time quite dramatically. You simply have to enable it, use the default values provided, and you will have a faster site."
msgstr ""

#: ../manage/deploying/caching/index.rst:22
msgid "You can also tweak the settings to get better performance. There is always a little trade-off to be made here, so-called 'strong' caching will be faster, but it may mean that visitors get older content. So, it is usually best to set up 'strong' caching for things that don't change often, like CSS and javascript files, and 'weak' caching for actual texts. You can also 'invalidate' content automatically when you update a piece of content, so that the front-end server knows it has to get a fresh copy when you edit a piece of content."
msgstr ""

#: ../manage/deploying/caching/index.rst:26
msgid "But plone.app.caching works even better together with a dedicated front-end cache, a program that is specialized in doing this work. These days, the favourite and recommended program for that is called \"Varnish\"."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:3
msgid "Varnish 3.x"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:7
msgid "Varnish is a caching front-end server. This document has notes on how to use Varnish with Plone. If you're using Varnish 4.x, then you want to look into :doc:`Varnish 4.x </manage/deploying/caching/varnish4>`"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:17
#: ../manage/deploying/caching/varnish4.rst:18
msgid "This chapter contains information about using the Varnish caching proxy with Plone."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:19
#: ../manage/deploying/caching/varnish4.rst:21
msgid "http://varnish-cache.org/"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:21
#: ../manage/deploying/caching/varnish4.rst:23
msgid "To use Varnish with Plone"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:23
#: ../manage/deploying/caching/varnish4.rst:25
msgid "Learn how to install and configure Varnish"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:25
#: ../manage/deploying/caching/varnish4.rst:27
msgid "Add Plone virtual hosting rule to the default varnish configuration"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:29
msgid "Some of these examples were written for Varnish 2.x. Varnish 3.x (Jun 2011) has radically altered syntax of VCL language and command line tools, so you might need to adapt the examples a bit."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:33
#: ../manage/deploying/caching/varnish4.rst:34
#: ../manage/installing/installation.rst:3
msgid "Installation"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:35
#: ../manage/deploying/caching/varnish4.rst:36
msgid "The suggest method to install Varnish is to use your OS package manager."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:37
#: ../manage/deploying/caching/varnish4.rst:38
msgid "You can install using packages (RPM/DEB) - consult your operating system instructions."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:39
#: ../manage/deploying/caching/varnish4.rst:40
msgid "For more up to date packages for Debian you could check: https://www.varnish-cache.org/installation/debian"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:41
#: ../manage/deploying/caching/varnish4.rst:44
msgid "You can install backports"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:43
#: ../manage/deploying/caching/varnish4.rst:46
msgid "You can install using buildout"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:45
#: ../manage/deploying/caching/varnish4.rst:48
msgid "Buildout examples"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:47
#: ../manage/deploying/caching/varnish4.rst:50
msgid "https://pypi.python.org/pypi/plone.recipe.varnish"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:50
#: ../manage/deploying/caching/varnish4.rst:53
msgid "Management console"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:53
#: ../manage/deploying/caching/varnish4.rst:56
msgid "``varnishadm``"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:55
#: ../manage/deploying/caching/varnish4.rst:58
msgid "You can access Varnish admin console on your server by::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:60
#: ../manage/deploying/caching/varnish4.rst:63
msgid "(Ubuntu/Debian installation)"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:63
#: ../manage/deploying/caching/varnish4.rst:66
msgid "Telnet console"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:65
#: ../manage/deploying/caching/varnish4.rst:68
msgid "The telnet management console is available on some configurations where ``varnishadm`` cannot be used. The functionality is the same."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:68
#: ../manage/deploying/caching/varnish3.rst:182
#: ../manage/deploying/caching/varnish3.rst:316
#: ../manage/deploying/caching/varnish3.rst:633
#: ../manage/deploying/caching/varnish4.rst:71
#: ../manage/deploying/caching/varnish4.rst:203
#: ../manage/deploying/caching/varnish4.rst:646
#: ../manage/deploying/front-end/apache.rst:368
#: ../manage/deploying/front-end/nginx.rst:308
#: ../manage/deploying/testing_tuning/performance/decorators.rst:38
#: ../manage/deploying/testing_tuning/performance/decorators.rst:116
#: ../manage/deploying/testing_tuning/performance/ramcache.rst:55
#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:57
#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:128
#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:139
#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:152
#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:168
#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:179
#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:247
#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:261
#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:360
#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:62
#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:82
#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:53
#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:75
#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:221
#: ../manage/troubleshooting/buildout.rst:82
#: ../manage/troubleshooting/buildout.rst:152
#: ../manage/troubleshooting/buildout.rst:266
#: ../manage/troubleshooting/buildout.rst:549
#: ../manage/troubleshooting/buildout.rst:577
#: ../manage/troubleshooting/buildout.rst:625
#: ../manage/troubleshooting/exceptions.rst:527
#: ../manage/troubleshooting/exceptions.rst:964
#: ../manage/troubleshooting/images.rst:117
#: ../manage/troubleshooting/unicode.rst:38
#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:22
#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:142
msgid "Example::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:76
#: ../manage/deploying/caching/varnish4.rst:79
msgid "Port number depends on your Varnish settings."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:78
#: ../manage/deploying/caching/varnish3.rst:488
#: ../manage/deploying/caching/varnish3.rst:512
#: ../manage/deploying/caching/varnish3.rst:618
#: ../manage/deploying/caching/varnish4.rst:82
#: ../manage/deploying/caching/varnish4.rst:501
#: ../manage/deploying/caching/varnish4.rst:513
#: ../manage/deploying/caching/varnish4.rst:636
#: ../manage/deploying/caching/varnish4.rst:683
#: ../manage/deploying/front-end/nginx.rst:271
#: ../manage/deploying/front-end/nginx.rst:319
#: ../manage/deploying/front-end/nginx.rst:579
#: ../manage/deploying/zope.rst:57
#: ../manage/deploying/zope.rst:189
#: ../manage/troubleshooting/basic.rst:152
#: ../manage/troubleshooting/buildout.rst:156
#: ../manage/troubleshooting/transactions.rst:233
#: ../manage/troubleshooting/transactions.rst:254
msgid "More info"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:80
#: ../manage/deploying/caching/varnish3.rst:144
#: ../manage/deploying/caching/varnish4.rst:84
#: ../manage/deploying/caching/varnish4.rst:151
msgid "http://opensourcehacker.com/2013/02/07/varnish-shell-singleliners-reload-config-purge-cache-and-test-hits/"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:83
#: ../manage/deploying/caching/varnish4.rst:87
msgid "Quit console"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:85
#: ../manage/deploying/caching/varnish4.rst:89
msgid "Quit command::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:90
#: ../manage/deploying/caching/varnish4.rst:94
msgid "Purging the cache"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:92
#: ../manage/deploying/caching/varnish4.rst:96
msgid "This will remove all entries from the Varnish cache::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:98
#: ../manage/deploying/caching/varnish4.rst:105
msgid "Loading new VCL to live Varnish"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:100
#: ../manage/deploying/caching/varnish4.rst:107
msgid "More often than not, it is beneficial to load new configuration without bringing the cache down for maintenance. Using this method also checks the new VCL for syntax errors before activating it. Logging in to Varnish CLI requires the ``varnishadm`` tool, the address of the management interface, and the secret file for authentication."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:104
#: ../manage/deploying/caching/varnish4.rst:111
msgid "See the ``varnishadm`` man-page for details."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:106
#: ../manage/deploying/caching/varnish4.rst:113
msgid "Opening a new CLI connection to the Varnish console, in a buildout-based Varnish installation::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:110
#: ../manage/deploying/caching/varnish4.rst:117
msgid "Port 8088 is defined in ``buildout.cfg``::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:115
#: ../manage/deploying/caching/varnish4.rst:122
msgid "Opening a new CLI connection to the Varnish console, in a system-wide Varnish installation on Ubuntu/Debian::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:119
#: ../manage/deploying/caching/varnish4.rst:126
msgid "You can dynamically load and parse a new VCL config file to memory::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:123
#: ../manage/deploying/caching/varnish4.rst:130
msgid "For example::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:127
#: ../manage/deploying/caching/varnish4.rst:134
msgid "... or ... ::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:132
#: ../manage/deploying/caching/varnish4.rst:139
msgid "``vcl.load`` will load and compile the new configuration. Compilation will fail and report on syntax errors. Now that the new configuration has been loaded, it can be activated with::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:140
#: ../manage/deploying/caching/varnish4.rst:147
msgid "Varnish remembers ``<name>`` in ``vcl.load``, so every time you need to reload your config you need to invent a new name for vcl.load / vcl.use command pair."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:142
#: ../manage/deploying/caching/varnish4.rst:149
#: ../manage/deploying/front-end/apache.rst:360
msgid "See"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:147
#: ../manage/deploying/caching/varnish4.rst:154
msgid "Logs"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:149
#: ../manage/deploying/caching/varnish4.rst:156
msgid "To see a real-time log dump (in a system-wide Varnish configuration)::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:153
#: ../manage/deploying/caching/varnish4.rst:160
msgid "By default, Varnish does not log to any file and keeps the log only in memory. If you want to extract Apache-like logs from varnish, you need to use the ``varnishncsa`` utility."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:157
#: ../manage/deploying/caching/varnish4.rst:164
msgid "Stats"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:159
#: ../manage/deploying/caching/varnish4.rst:166
msgid "Check live \"top-like\" Varnish statistics::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:163
#: ../manage/deploying/caching/varnish4.rst:170
msgid "Use the admin console to print stats for you::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:175
#: ../manage/deploying/caching/varnish4.rst:193
msgid "Virtual hosting proxy rule"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:178
msgid "Varnish 3.x example"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:180
msgid "An example with two separate Plone installations (Zope standalone mode) behind Varnish 3.x HTTP 80 port."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:307
msgid "Varnish 2.x example"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:309
msgid "When Varnish has been set-up you need to include Plone virtual hosting rule in its configuration file."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:311
msgid "If you want to map Varnish backend directly to Plone-as-a-virtualhost (i.e. Zope's VirtualHostMonster is used to map site name to Plone site instance id) use ``req.url`` mutating."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:313
msgid "The following maps the Plone site id *plonecommunity* to the *plonecommunity.mobi* domain. Plone is a single Zope instance, running on port 9999."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:336
#: ../manage/deploying/caching/varnish4.rst:356
msgid "Varnishd port and IP address to listen"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:338
msgid "You give IP address(s) and ports to Varnish to listen to on the ``varnishd`` command line using -a switch."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:340
msgid "Edit ``/etc/default/varnish``::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:349
msgid "Cached and editor subdomains"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:351
#: ../manage/deploying/caching/varnish4.rst:370
msgid "You can provide an uncached version of the site for editors:"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:353
#: ../manage/deploying/caching/varnish4.rst:372
msgid "http://serverfault.com/questions/297541/varnish-cached-and-non-cached-subdomains/297547#297547"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:356
#: ../manage/deploying/caching/varnish4.rst:375
msgid "Varnish and I18N"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:358
#: ../manage/deploying/caching/varnish4.rst:377
msgid "For older sites using LinguaPlone see `cache issues related to LinguaPlone <http://docs.plone.org/4/en/develop/plone/i18n/cache.html>`_."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:361
#: ../manage/deploying/caching/varnish4.rst:380
msgid "Sanitizing cookies"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:363
#: ../manage/deploying/caching/varnish4.rst:382
msgid "Any cookie set on the server side (session cookie) or on the client-side (e.g. Google Analytics Javascript cookies) is poison for caching the anonymous visitor content."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:365
#: ../manage/deploying/caching/varnish4.rst:384
msgid "HTTP caching needs to deal with both HTTP request and response cookie handling"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:367
#: ../manage/deploying/caching/varnish4.rst:386
msgid "HTTP request *Cookie* header. The browser sending HTTP request with ``Cookie`` header confuses Varnish cache look-up. This header can be set by Javascript also, not just by the server. ``Cookie`` can be preprocessed in varnish's ``vcl_recv`` step."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:370
msgid "HTTP response ``Set-Cookie`` header. This sets a server-side cookie. If your server is setting cookies Varnish does not cache these responses by default. Howerver, this might be desirable behavior if e.g. multi-lingual content is served from one URL with language cookies. ``Set-Cookie`` can be post-processed in varnish's ``vcl_fetch`` step."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:376
#: ../manage/deploying/caching/varnish4.rst:399
msgid "Example of removing all Plone-related cookies, besides ones dealing with the logged in users (content authors)::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:412
msgid "The snippet for stripping out non-Plone cookies comes from http://www.phase2technology.com/node/1218/"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:415
msgid "That article notes that \"this processing occurs only between Varnish and the backend [...]; the client, typically a user's browser, still has all the cookies.  Nothing is happening to the client's original request.\" While it's true that the browser still has the cookies, they never reach the backend and are therefor ignored."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:419
msgid "Another example how to purge Google cookies only and allow other cookies by default::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:434
#: ../manage/deploying/caching/varnish4.rst:454
msgid "Debugging cookie issues"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:436
#: ../manage/deploying/caching/varnish4.rst:456
msgid "Use the following snippet to set a HTTP response debug header to see what the backend server sees as cookie after ``vcl_recv`` clean-up regexes::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:455
#: ../manage/deploying/caching/varnish4.rst:476
msgid "And then test with ``wget``::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:480
#: ../manage/deploying/caching/varnish4.rst:506
msgid "Plone Language cookie (I18N_LANGUAGE)"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:482
#: ../manage/deploying/caching/varnish4.rst:508
msgid "This cookie could be removed in ``vcl_fetch`` response post-processing (how?). However, a better solution is to disable this cookie in the backend itself: in this case in Plone's ``portal_languages`` tool. Disable it by :guilabel:`Use cookie for manual override` setting in ``portal_languages``."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:490
#: ../manage/deploying/caching/varnish4.rst:515
msgid ":doc:`Plone cookies documentation </develop/plone/sessions/cookies>`"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:492
msgid "https://www.varnish-cache.org/trac/wiki/VCLExampleCacheCookies"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:494
msgid "https://www.varnish-cache.org/trac/wiki/VCLExampleRemovingSomeCookies"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:496
msgid "https://www.varnish-cache.org/docs/3.0/tutorial/cookies.html"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:499
#: ../manage/deploying/caching/varnish4.rst:520
msgid "Do not cache error pages"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:501
#: ../manage/deploying/caching/varnish4.rst:522
msgid "You can make sure that Varnish does not accidentally cache error pages. E.g. it would cache front page when the site is down::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:514
msgid "https://www.varnish-cache.org/lists/pipermail/varnish-misc/2010-February/003774.html"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:517
#: ../manage/deploying/caching/varnish4.rst:539
msgid "Custom and full cache purges"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:519
#: ../manage/deploying/caching/varnish4.rst:541
msgid "Below is an example how to create an action to purge the whole Varnish cache."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:521
#: ../manage/deploying/caching/varnish4.rst:543
msgid "First you need to allow ``HTTP PURGE`` request in ``default.vcl`` from ``localhost``. We'll create a special ``PURGE`` command which takes URLs to be purged out of the cache in a special header::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:548
#: ../manage/deploying/caching/varnish4.rst:565
msgid "Then let's create a Plone view which will make a request from Plone to Varnish (``upstream localhost:80``) and issue the ``PURGE`` command. We do this using the `Requests <https://pypi.python.org/pypi/requests>`_ Python library."
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:551
#: ../manage/deploying/caching/varnish4.rst:568
#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:114
msgid "Example view code::"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:606
#: ../manage/deploying/caching/varnish4.rst:623
#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:265
#: ../manage/troubleshooting/transactions.rst:221
msgid "Registering the view in ZCML:"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:620
msgid "https://www.varnish-cache.org/docs/3.0/tutorial/purging.html"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:622
msgid "https://www.varnish-cache.org/trac/wiki/BackendConditionalRequests"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:624
msgid "http://kristianlyng.wordpress.com/2010/02/02/varnish-purges/"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:628
#: ../manage/deploying/caching/varnish4.rst:641
msgid "Round-robin balancing"
msgstr ""

#: ../manage/deploying/caching/varnish3.rst:630
#: ../manage/deploying/caching/varnish4.rst:643
msgid "Varnish can do round-robin load balancing internally. Use this if you want to distribute CPU-intensive load between several ZEO front end client instances, each listening on its own port."
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:3
msgid "Varnish 4.x"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:7
msgid "Varnish is a caching front-end server. This document has notes on how to use Varnish with Plone. If you're using Varnish 2.x or 3.x, then you want to look into :doc:`Varnish 3.x </manage/deploying/caching/varnish3>`"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:31
msgid "After a radically change of VCL language in Varnish 3.x (Jun 2011), again we had radical changes in the Varnish 4.x (Apr 2014) syntax of VCL language and command line tools."
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:42
msgid "For more up to date packages for RedHat (RPM Based) you could check: https://www.varnish-cache.org/installation/redhat"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:100
msgid "Or remove all entries of JPG from the Varnish cache::"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:196
msgid "Varnish 4.x example"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:198
msgid "Varnish 4.x has been released, almost three years after the release of Varnish 3.0 in June 2011. The backend fetching parts of VCL again have changed in Varnish 4."
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:201
msgid "An example with two separate Plone installations (Zope standalone mode) behind Varnish 4.x HTTP 80 port."
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:353
msgid "For VCL examples Varnish 2.x or 3.x, you will want to look into :doc:`Varnish 3.x </manage/deploying/caching/varnish3>`"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:358
msgid "You give IP address(s) and ports for Varnish to listen to on the ``varnishd`` command line using -a switch. Edit ``/etc/default/varnish``::"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:368
msgid "Cached and editor sub domains"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:391
msgid "HTTP response ``Set-Cookie`` header. This sets a server-side cookie. If your server is setting cookies Varnish does not cache these responses by default. However, this might be desirable behavior if e.g. multi-lingual content is served from one URL with language cookies. ``Set-Cookie`` can be post-processed in varnish's ``vcl_fetch`` step."
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:439
msgid "An example how to purge Google cookies only and allow other cookies by default::"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:503
msgid "https://www.varnish-software.com/blog/adding-headers-gain-insight-vcl"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:517
msgid "https://www.varnish-cache.org/docs/4.0/users-guide/increasing-your-hitrate.html#cookies"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:638
msgid "https://www.varnish-cache.org/docs/4.0/users-guide/purging.html"
msgstr ""

#: ../manage/deploying/caching/varnish4.rst:685
msgid "https://www.varnish-cache.org/docs/trunk/users-guide/vcl-backends.html"
msgstr ""

#: ../manage/deploying/copy.rst:3
msgid "Copying a Plone site"
msgstr ""

#: ../manage/deploying/copy.rst:7
msgid "Quick instructions on how to create a copy of a Plone installation."
msgstr ""

#: ../manage/deploying/copy.rst:15
msgid "These instructions tell you the basics of creating a duplicate of Plone site for testing or back-up"
msgstr ""

#: ../manage/deploying/copy.rst:20
#: ../manage/troubleshooting/manual-remove-utility.rst:44
msgid "Prerequisites"
msgstr ""

#: ../manage/deploying/copy.rst:22
msgid "Ability to use file system manager to copy files from/to the remote server"
msgstr ""

#: ../manage/deploying/copy.rst:24
msgid "Ability to use the command line"
msgstr ""

#: ../manage/deploying/copy.rst:28
msgid "Plone site contents"
msgstr ""

#: ../manage/deploying/copy.rst:30
msgid "In order to copy a Plone site the following must be copied"
msgstr ""

#: ../manage/deploying/copy.rst:32
msgid "**buildout.cfg** - defines your site package configuration"
msgstr ""

#: ../manage/deploying/copy.rst:33
msgid "**src folder** - all add-ons you have developed yourself"
msgstr ""

#: ../manage/deploying/copy.rst:34
msgid "**var/filestorage/Data.fs** - ZODB database of your site"
msgstr ""

#: ../manage/deploying/copy.rst:35
msgid "**var/blobstorage** folder which contains file-like objects of ZODB database (BLOBs)"
msgstr ""

#: ../manage/deploying/copy.rst:39
msgid "BLOB storage is supported from Plone 4.x onwards. Older Plone installations do not have this folder."
msgstr ""

#: ../manage/deploying/copy.rst:43
msgid "Other folders (eggs, downloads, parts) etc. are generated by buildout command and may be left empty."
msgstr ""

#: ../manage/deploying/copy.rst:48
msgid "Copying and bootstrapping a Plone site to a new computer"
msgstr ""

#: ../manage/deploying/copy.rst:50
msgid "Create a new site in the destination using Plone installer and make sure you can log-in to the site with temporary admin account"
msgstr ""

#: ../manage/deploying/copy.rst:51
msgid "Copy var/filestorage/Data.fs from the old system to the new system - note that admin password is stored in Data.fs and the password given during the creation of a new site is no longer effective after Data.fs copy"
msgstr ""

#: ../manage/deploying/copy.rst:52
msgid "Copy blobs from the old system to the new system by copying var/blobstorage/ folder"
msgstr ""

#: ../manage/deploying/copy.rst:53
msgid "Copy src/ folder from the old system if you have any custom development code there"
msgstr ""

#: ../manage/deploying/copy.rst:54
msgid "Copy buildout.cfg and other .cfg files"
msgstr ""

#: ../manage/deploying/copy.rst:57
msgid "Rerun buildout in order to automatically re-download and configure all Python packages needed to run the site"
msgstr ""

#: ../manage/deploying/copy.rst:56
msgid "python bootstrap.py to make the buildout use new local Python interpreter"
msgstr ""

#: ../manage/deploying/copy.rst:57
msgid "Then bin/buildout to regenerate parts/ folder"
msgstr ""

#: ../manage/deploying/copy.rst:60
msgid "Copying site data in UNIX environment"
msgstr ""

#: ../manage/deploying/copy.rst:62
msgid "Below are example UNIX commands to copy a Plone site data from a computer to another over SCP/SSH connection. The actual username and folder locations depend on your system configuration."
msgstr ""

#: ../manage/deploying/copy.rst:66
msgid "Note: a copy of the Plone site configuration must already exist on the target computer. These instructions are only for copying / back-uping site data."
msgstr ""

#: ../manage/deploying/copy.rst:69
msgid "This operation can be perfomed on a running system - Data.fs is append only file and you will simply lose transactions which happened during the copying of the end of the file."
msgstr ""

#: ../manage/deploying/copy.rst:73
msgid "Copy local to remote"
msgstr ""

#: ../manage/deploying/copy.rst:75
msgid "Run this command in your buildout Plone installation."
msgstr ""

#: ../manage/deploying/copy.rst:77
msgid "Copy Data.fs database:"
msgstr ""

#: ../manage/deploying/copy.rst:79
msgid "scp -C -o CompressionLevel=9 var/filestorage/Data.fs plone@server.com:/srv/plone/site/var/filestorage"
msgstr ""

#: ../manage/deploying/copy.rst:82
msgid "Copy BLOB files using rsync"
msgstr ""

#: ../manage/deploying/copy.rst:84
msgid "BLOB files contain file and image data uploaded to your site. Since the actual content of file rarely changes after upload, rsync can synchronize only changed files using -a (archive) flag."
msgstr ""

#: ../manage/deploying/copy.rst:88
msgid "rsync -av --compress-level=9 var/blobstorage plone@server.com:/srv/plone/site/var"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:3
msgid "Apache"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:7
msgid "Tips and guides for hosting Plone with Apache web server."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:14
msgid "Here are useful information and snippets when hosting Plone behind Apache."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:17
msgid "Installing Apache front-end for Plone"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:19
msgid "Apache runs on port 80. Plone runs on port 8080. Apache accepts all HTTP traffic to your internet domain."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:22
msgid "Here are quick instructions for Ubuntu / Debian."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:24
msgid "Install required software::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:33
msgid "Add virtual host config file ``/etc/apache2/sites-enabled/yoursite.conf``. Assuming *Plone* is your site id in Zope Management Interface (capital lettering do matter) and your domain name is ``yoursite.com`` (note with or without www matters, see below)::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:73
msgid "Eventually you have one virtual host configuration file per one domain on your server."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:75
msgid "Restart apache::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:80
msgid "Check that Plone responds::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:84
msgid "Check that Apache responds::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:88
msgid "If everything is good then your Plone site properly configured using Apache front-end."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:90
#: ../manage/deploying/front-end/nginx.rst:122
msgid "Content Security Policy (CSP) prevents a wide range of attacks, including cross-site scripting and other cross-site injections, but the CSP header setting may require careful tuning. To enable it, replace the Content-Security-Policy-Report-Only by Content-Security-Policy. The example above works with Plone 4.x (including TinyMCE) but it very wide. You may need to adjust it if you want to make CSP more restrictive or use additional Plone Products. For more information, see"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:99
#: ../manage/deploying/front-end/nginx.rst:131
msgid "http://www.w3.org/TR/CSP/"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:101
msgid "For an SSL configuration, just modify the rewrite rule from::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:105
msgid "to::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:109
msgid "Inside an SSL-enabled Apache virtual host definition."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:112
msgid "Apache and Plone guide (old)"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:117
msgid "Procedure to restart Apache in production environment"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:119
msgid "You might share the same Apache web server across several production sites. You don't want to hinder the performance of the other sites when doing Apache configuration changes to one site."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:123
msgid "The correct procedure to restart Apache is (on Ubuntu/Debian Linux)"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:135
msgid "www-redirects"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:137
msgid "If you wish to force people to use your site with or without www prefix you can use the rules below. Note that setting this kind of rule is very useful from the search engine optimization point of view also."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:141
msgid "Example in <VirtualHost> section to redirect www.site.com -> site.com::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:156
msgid "Example in <VirtualHost> section to redirect site.com -> www.site.com::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:170
msgid "Redirecting all the pages to the root of a new site:"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:172
msgid "RewriteEngine On RewriteRule (.*) http://www.newsite.com [L,R=302]"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:176
msgid "Migration redirects"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:178
msgid "To redirect traffic from all pages permanently (301) to the landing page of a new site::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:184
msgid "Proxying other site under Plone URI space"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:186
msgid "The following rule can be used to put a static web site to sit in the same URI space with Plone. Put these rules **before** VirtualHost ProxyPass."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:189
msgid "Examples::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:195
msgid "Reverse proxy host"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:197
msgid "By default, host name is correctly delivered from Apache to Plone. Otherwise you might see all your HTTP requests coming from localhost, Apache."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:200
msgid "You need::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:204
#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:396
msgid "For more information, see"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:206
msgid "http://macadames.wordpress.com/2009/05/23/some-deliverance-tips/"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:209
msgid "Redirecting certain URIs to old site"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:211
msgid "This is useful if you migrate to a Plone from some legacy technology and you still need to have some part of the URI space to point to the old server."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:215
msgid "Create alternative domain name for the existing old site (e.g. www2)"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:217
msgid "Modify Apache configuration so that URLs still being used are redirected to the old server with alternative name, Put in this rewrite"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:227
msgid "Virtual hosting Apache configuration generator"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:229
msgid "http://betabug.ch/zope/witch"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:233
msgid "Caching images"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:235
msgid "You can force caching of content types on apache"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:238
msgid "First you need to enable Apache modules::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:242
msgid "On Debian this is::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:246
msgid "Then you can add to your virtual host configuration::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:256
msgid "Then install go to *Cache Configration* (Plone 4.1+) and configure `the caching options <https://pypi.python.org/pypi/plone.app.caching>`_."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:260
msgid "Unsetting language cookie for media content"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:262
msgid "Media like content can confuse and break language selector on multilingual sites."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:264
msgid "By default, Plone sets I18N_LANGUAGE cookie on"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:266
msgid "All page requests"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:268
msgid "All ATImage requests"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:270
msgid "Even if images are often language neutral, they still set I18N_LANGUAGE cookie on HTTP response. This is problematic if image gets cached and the user switches the language using the language selector. This happens when you enforce caching using Apache level rules (instead of using Products.CacheSetup or similar product). The user browsers received cached HTTP response image for the image and it contains Set-Cookie: I18N_LANGUAGE header for the wrong language -> browser language choice by cookie is reset."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:278
msgid "A workaround is to force language cookie off from media like content::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:296
msgid "Testing cache headers"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:298
msgid "Use UNIX *wget* command. -S flag will display request headers."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:300
msgid "Remember to do different request for HTML, CSS, JS and image payloads - the cache rules might not be the same."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:302
msgid "HTTP example::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:324
msgid "HTTPS example::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:331
msgid "Flushing cache"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:333
msgid "Manually cleaning Apache disk cache::"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:340
msgid "Custom 500 internal error page"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:342
msgid "To make you look more pro when you update the server or Plone goes down"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:344
msgid "https://httpd.apache.org/docs/2.2/custom-error.html"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:347
msgid "Load balanced Apache virtual host configuration"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:349
msgid "This complex config example includes"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:351
msgid "HTTPS and SSL certificate set-up"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:353
msgid "Load balancing using ZEO front-ends and Apache load balancer module"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:355
msgid "Apache disk cache. This should provide static resource caching w/HTTPS support if you are using plone.app.caching."
msgstr ""

#: ../manage/deploying/front-end/apache.rst:358
msgid "https://httpd.apache.org/docs/2.2/caching.html"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:362
msgid "http://stackoverflow.com/questions/5650716/are-sticky-sessions-needed-when-load-balancing-plone-3-3-5"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:364
msgid "More information about how to set a sticky session cookie if you need to support Zope sessions in your code"
msgstr ""

#: ../manage/deploying/front-end/apache.rst:366
msgid "http://opensourcehacker.com/2011/04/15/sticky-session-load-balancing-with-apache-and-mod_balancer-on-ubuntu-linux/"
msgstr ""

#: ../manage/deploying/front-end/index.rst:3
msgid "Frontend Webserver"
msgstr ""

#: ../manage/deploying/front-end/index.rst:7
msgid "How to configure the most popular Frontend servers."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:3
msgid "Nginx"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:7
msgid "Using the nginx web server to host Plone sites"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:14
msgid "Nginx is an modern alternative server to Apache."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:16
msgid "It acts as a proxy server and load balancer in front of Zope."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:17
msgid "It handles rewrite rules."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:18
msgid "It handles HTTPS."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:21
msgid "Minimal Nginx front end configuration for Plone on Ubuntu/Debian Linux"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:23
msgid "This is a minimal configuration to run nginx on Ubuntu/Debian in front of a Plone site.  These instructions are *not* for configurations where one uses the buildout configuration tool to build a static Nginx server."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:27
msgid "Plone will by default be served on port 8080."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:29
msgid "We use :term:`VirtualHostMonster` to pass the original protocol and hostname to Plone. VirtualHostMonster provides a way to rewrite the request path."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:33
msgid "We also need to rewrite the request path, because you want to site be served from port 80 root (/), but Plone sites are nested in the Zope application server as paths */site1*, */site2* etc."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:37
msgid "You don't need to configure VirtualHostMonster in Plone/Zope in any way, because all the installers will automatically install one for you. Nginx configuration is all you need to touch."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:41
msgid "The URL passed to VirtualHostMonster is the URL Plone uses to construct links in the template (``portal_url`` in the code, also used by content ``absolute_url()`` method). If your site loads without CSS styles usually it is a sign that VirtualHostMonster URL is incorrectly written -- Plone uses the URL to link stylesheets also."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:47
msgid "Plone itself contains a mini web server (Medusa) which serves the requests from port 8080 -- Nginx acts simple as a HTTP proxy between Medusa and outgoing port 80 traffic.  Nginx does not spawn Plone process or anything like that, but Plone processes are externally controlled, usually by buildout-created ``bin/instance`` and ``bin/plonectl`` commands, or by a ``supervisor`` instance."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:54
msgid "Create file ``/etc/nginx/sites-available/yoursite.conf`` with contents::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:93
msgid "Then enable the site by creating a symbolic link::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:99
msgid "See that your nginx configuration is valid::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:107
msgid "Alternatively your system might not provide ``configtest`` command and then you can test config with::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:112
msgid "If the config was OK then restart::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:116
#: ../manage/deploying/testing_tuning/performance/caching.rst:216
#: ../manage/deploying/testing_tuning/performance/ramcache.rst:213
#: ../manage/deploying/testing_tuning/performance/tips.rst:132
#: ../manage/deploying/zope.rst:600
#: ../manage/deploying/zope.rst:656
#: ../manage/troubleshooting/buildout.rst:258
msgid "More info:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:118
msgid "http://wiki.mediatemple.net/w/%28ve%29:Configure_virtual_hosts_with_Nginx_on_Ubuntu"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:120
#: ../manage/deploying/front-end/nginx.rst:593
msgid "http://www.starzel.de/blog/securing-plone-sites-with-https-and-nginx"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:134
msgid "Buildout and recipe"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:136
msgid "If, and only if, you cannot use a platform install of nginx you may use the recipe and buildout example below to get started."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:138
msgid "http://www.martinaspeli.net/articles/an-uber-buildout-for-a-production-plone-server"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:140
msgid "https://pypi.python.org/pypi/gocept.nginx"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:142
msgid "A buildout will download, install and configure nginx from scratch. The buildout file contains an nginx configuration which can use template variables from ``buildout.cfg`` itself."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:146
msgid "When you change the configuration of nginx in buildout you probably don't want to rerun the whole buildout, but only the nginx part of it::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:152
msgid "Config test"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:154
msgid "Assuming you have a buildout nginx section called ``balancer``::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:163
msgid "Deployment configuration"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:165
msgid "`gocept.nginx <https://pypi.python.org/pypi/gocept.nginx/>`_ supports a special deployment configuration where you manually configure all directories. One important reason why you might wish to do this, is to change the location of the ``pid`` file. Normally this file would be created in ``parts``, which is deleted and recreated when you re-run buildout. This interferes with reliably restarting nginx, since the pid file may have been deleted since startup. In this case, you need to manually kill nginx to get things back on track."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:174
msgid "Example deployment configuration in ``production.cfg``::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:196
msgid "Install this part::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:200
msgid "Then you can use the following cycle to update the configuration::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:212
msgid "Manually killing nginx"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:214
msgid "You have lost ``PID`` file, or the recorded ``PID`` does not match the real ``PID`` any longer.  Use buildout's starter script as a search key:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:241
msgid "Debugging nginx"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:243
msgid "Set nginx logging to debug mode::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:248
msgid "www-redirect"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:250
msgid "Below is an example how to do a basic *yourdomain.com -> www.yourdomain.com* redirect."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:253
msgid "Put the following in your ``gocept.nginx`` configuration::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:264
msgid "Hosts are configured in a separate buildout section::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:273
msgid "https://stackoverflow.com/questions/7947030/nginx-no-www-to-www-and-www-to-no-www"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:276
msgid "Permanent redirect"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:278
msgid "Below is an example redirect rule::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:289
msgid "Nginx location match evaluation rules are not always top-down. You can add more specific matches after location /."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:293
msgid "Cleaning up query string"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:295
msgid "By default, nginx includes all trailing ``HTTP GET`` query parameters in the redirect.  You can disable this behavior by adding a trailing ?::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:303
msgid "Matching incoming query string"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:305
msgid "The ``location`` directive does not support query strings.  Use the ``if`` directive from the HTTP rewrite module."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:321
msgid "nginx location matching rules"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:323
msgid "http://wiki.nginx.org/NginxHttpCoreModule#location"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:325
msgid "nginx redirect module docs"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:327
msgid "http://wiki.nginx.org/NginxHttpRewriteModule"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:329
msgid "More info on nginx redirects"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:331
msgid "http://scott.yang.id.au/2007/04/do-you-need-permalink-redirect/"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:338
msgid "Make nginx aware where the request came from"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:340
msgid "If you set up nginx to run in front of Zope, and set up a virtual host with it like this::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:351
msgid "Zope will always get the request from ``127.0.0.1:8080`` and not from the actual host, due to the redirection. To solve this problem correct your configuration to be like this::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:368
msgid "PHP with nginx and PHP-FPM"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:370
msgid "If you are coming from Apache world, you may be used to the scenario where Apache handles all php-related stuff. With nginx, it's a bit different: nginx does not automatically spawn FCGI processes, so you must start them separately. In fact, FCGI is a lot like proxying, which means that PHP-FPM will run as a separate server and all we need to do is to forward the request to it."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:377
msgid "A detailed tutorial on how to set it all up, configure and run it can be found here:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:380
msgid "http://alasdoo.com/2010/12/xdv-plone-and-phpbb-under-one-nginx-roof/"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:384
msgid "SSI: server-side include"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:386
msgid "In order to include external content in a page (XDV), we must set up nginx to make these includes for us. For including external content we will use the SSI (server-side include) method, which means that on each request nginx will get the needed external content, put it in place and only then return the response. Here is a configuration that sets up the filtering and turns on SSI for a specific location::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:454
msgid "Session affinity"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:456
msgid "If you intend to use nginx for session balancing between ZEO processes, you need to be aware of session affinity.  By default, ZEO processes don't share session data. If you have site functionality which stores user-specific data on the server, let's say an ecommerce site shopping cart, you must always redirect users to the same ZEO client process or they will have 1/number of processes chance to see the orignal data."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:463
msgid "Make sure that your :doc:`Zope session cookie </develop/plone/sessions/cookies>` are not cleared by any front-end server (nginx, Varnish)."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:467
msgid "By using IP addresses"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:469
msgid "This is the most reliable way. nginx will balance each incoming request to a front end client by the request's source IP address."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:472
msgid "This method is reliable as long as nginx can correctly extract IP address from the configuration."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:475
msgid "http://wiki.nginx.org/NginxHttpUpstreamModule#ip_hash"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:478
msgid "By using cookies"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:480
msgid "These instructions assume you are installing nginx via buildout."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:482
msgid "`Nginx sticky sessions module <http://nginx-sticky-module.googlecode.com/files/nginx-sticky-module-1.0-rc2.tar.gz>`_"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:484
msgid "Manually extract ``nginx-sticky-module`` under ``src``:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:491
msgid "Then add it to the ``nginx-build`` part in buildout:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:500
msgid "Now test reinstalling nginx in buildout:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:507
msgid "See that it compiles without errors. Here is the line of compiling sticky:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:517
msgid "Now add ``sticky`` to the load-balancer section of nginx config:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:534
msgid "Reinstall nginx balancer configs and start-up scripts:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:540
msgid "Make sure that the generated configuration is ok:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:546
msgid "Restart nginx:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:552
msgid "Check that some (non-anonymous) page has the ``route`` cookie set:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:576
msgid "Now test it by doing session-related activity and see that your shopping cart is not \"lost\"."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:581
msgid "http://code.google.com/p/nginx-sticky-module/source/browse/trunk/README"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:584
msgid "http://nathanvangheem.com/news/nginx-with-built-in-load-balancing-and-caching"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:588
msgid "Securing Plone-Sites with https and nginx"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:590
msgid "For instructions how to use SSL for all authenticated traffic see this blog-post:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:596
msgid "Setting log files"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:598
msgid "nginx.conf example::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:613
msgid "Proxy Caching"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:615
msgid "Nginx can do rudimentary proxy caching. It may be good enough for your needs. Turn on proxy caching by adding to your nginx.conf or a separate conf.d/proxy_cache.conf::"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:642
msgid "Create a /var/www/cache directory owned by your nginx user (usually www-data)."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:644
msgid "Limitations:"
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:646
msgid "Nginx does not support the vary header. That's why we use proxy_cache_bypass to turn off the cache for all authenticated users."
msgstr ""

#: ../manage/deploying/front-end/nginx.rst:649
msgid "Nginx does not support the s-maxage cache-control directive. Only max-age. This means that moderate caching will do nothing. However, strong caching works and will cause all your static resources and registry items to be cached. Don't underestimate how valuable that is."
msgstr ""

#: ../manage/deploying/index.rst:3
msgid "Guide to deploying and installing Plone in production"
msgstr ""

#: ../manage/deploying/index.rst:7
msgid "A guide to the Plone deployment stack, including load balancing, proxy caching, server preparation, backups, log rotation, and process control."
msgstr ""

#: ../manage/deploying/intro.rst:6
msgid "The purpose of this guide; its audience and assumptions"
msgstr ""

#: ../manage/deploying/intro.rst:8
msgid "This guide is an overview of how to set up Plone and its supporting software stack for production purposes on one of the popular Unix work-alike operating systems."
msgstr ""

#: ../manage/deploying/intro.rst:12
msgid "We’ll cover platform preparation and basic considerations for installation of Plone itself. We’ll also go into common setups of the other parts of the deployment stack needed for real-life deployment:"
msgstr ""

#: ../manage/deploying/intro.rst:16
msgid "A general-purpose web server to handle URL rewriting and integration with other web components;"
msgstr ""

#: ../manage/deploying/intro.rst:18
msgid "Load balancing;"
msgstr ""

#: ../manage/deploying/intro.rst:19
msgid "Server-side caching;"
msgstr ""

#: ../manage/deploying/intro.rst:20
msgid "Backup;"
msgstr ""

#: ../manage/deploying/intro.rst:21
msgid "Log rotation;"
msgstr ""

#: ../manage/deploying/intro.rst:22
#: ../manage/deploying/packing.rst:2
msgid "Database packing"
msgstr ""

#: ../manage/deploying/intro.rst:24
msgid "We won't cover the details of installation or actual tool setup. Those are better covered in the :doc:`Installation </manage/installing/installation>` and other :doc:`Hosting </manage/deploying/index>` guides."
msgstr ""

#: ../manage/deploying/intro.rst:29
msgid "And, what about Windows?"
msgstr ""

#: ../manage/deploying/intro.rst:31
msgid "Production deployment for Windows is typically very different from that on Unix-like systems. While some parts of the common open-source stack are available on Windows (Apache, for example), it's more common to integrate using tools like IIS that are often already in use in the enterprise. If your shop is committed to a Microsoft stack, this document won't be of much use to you. However, if you're on a Windows server, but open to using the (very often superior) open-source alternatives to non-Microsoft application components, the stack and tools discussion here may be very useful."
msgstr ""

#: ../manage/deploying/intro.rst:41
msgid "Audience"
msgstr ""

#: ../manage/deploying/intro.rst:43
msgid "There is one audience for this document: system administrators who wish to deploy Plone for a production server. We assume that you know how to install and configure your operating system, including its package manager or port collection, file system, user permissions, firewalls, backup and logging mechanisms."
msgstr ""

#: ../manage/deploying/intro.rst:49
msgid "You should be able to use the command-line shell and able to translate between the file paths and hostnames used in examples and the ones you’ll be using on your deployed server."
msgstr ""

#: ../manage/deploying/intro.rst:53
msgid "You’ll need root access (or sudo privileges) adequate to install packages, create users and set up cron jobs."
msgstr ""

#: ../manage/deploying/intro.rst:56
msgid "The instructions below have been tested with clean OS platforms created on commodity cloud servers."
msgstr ""

#: ../manage/deploying/intro.rst:60
msgid "Assumptions"
msgstr ""

#: ../manage/deploying/intro.rst:62
msgid "We’ll be describing base-level production deployments that will meet many, but not all needs. And we’ll be using the most commonly used and widely supported tools for the stack. Tools like Apache, Nginx, haproxy and rsync."
msgstr ""

#: ../manage/deploying/intro.rst:66
msgid "You may have other needs (like integration with LDAP or a relational database) or wish to use other tools (Apache Traffic Server, Varnish, squid …). That’s fine, and there are many good documents elsewhere in the plone.org documentation section that cover these needs and tools."
msgstr ""

#: ../manage/deploying/intro.rst:72
msgid "Security considerations"
msgstr ""

#: ../manage/deploying/intro.rst:74
msgid "The approaches we describe here are practical for many Internet and Intranet servers. However, they should be considered a baseline and may not meet your security needs. Plone can be deployed in chroot jails or OpenSolaris zones or with much more compartmentalized process and file ownership if your application requires a greater degree of protection."
msgstr ""

#: ../manage/deploying/logs.rst:2
msgid "Logs and log rotation"
msgstr ""

#: ../manage/deploying/logs.rst:4
msgid "Plone and Zope maintain a variety of log files. As with all log files, you need to rotate your logs or your server will die from lack of storage. Log rotation is a process of maintaining a set of historical log files while periodically starting the current log file anew."
msgstr ""

#: ../manage/deploying/logs.rst:10
msgid "Log types and locations"
msgstr ""

#: ../manage/deploying/logs.rst:12
msgid "The buildout recipes that set up ZEO server and client components allow you to set the names and location of your log files. We'll describe below the common names and locations. If this doesn't match your situation, check your buildout's zeoserver and zope2instance sections."
msgstr ""

#: ../manage/deploying/logs.rst:18
msgid "ZEO server log"
msgstr ""

#: ../manage/deploying/logs.rst:20
msgid "A ZEO server only maintains one log file, which records starts, stops and client connections. Unless you are having difficulties with ZEO client connections, this file is uninformative. It also typically grows very slowly - so slowly that you may never need to rotate it."
msgstr ""

#: ../manage/deploying/logs.rst:25
msgid "The ZEO server log for a cluster will typically be found under your buildout directory at var/zeoserver/zeoserver.log."
msgstr ""

#: ../manage/deploying/logs.rst:29
msgid "Client logs"
msgstr ""

#: ../manage/deploying/logs.rst:31
msgid "Client logs are much more interesting and grow more rapidly. There are two kinds of client logs, and each of your clients will maintain both:"
msgstr ""

#: ../manage/deploying/logs.rst:34
msgid "Access logs"
msgstr ""

#: ../manage/deploying/logs.rst:36
msgid "A record of HTTP, WebDAV, and - if it's turned on - ftp accesses to the client. This resembles traditional web-server log files. Typical location of a client's access log is var/client#/Z2.log."
msgstr ""

#: ../manage/deploying/logs.rst:40
msgid "Event logs"
msgstr ""

#: ../manage/deploying/logs.rst:42
msgid "Startup, shutdown and error messages. Event logs need attention so that errors are quickly discovered. Typical location of a client's event log is var/client#/event.log."
msgstr ""

#: ../manage/deploying/logs.rst:47
msgid "Log levels"
msgstr ""

#: ../manage/deploying/logs.rst:49
msgid "You may set the verbosity level of access and event logs via the zope2instance sections for your clients. This isn't very useful for event logs, but can be very useful for access logs. The default verbosity level for access logs - WARN - creates an entry for every HTTP access. If you are recording HTTP accesses via your proxy server, you may change the access logging level to \"ERROR\" and dramatically slow the rate at which your access logs grow::"
msgstr ""

#: ../manage/deploying/logs.rst:62
msgid "Don't turn down the access log level until you've had a chance to tune up your proxy cache. Seeing which requests make it through to the ZEO client is very useful information when checking caching and load balancing."
msgstr ""

#: ../manage/deploying/logs.rst:67
msgid "Client log rotation"
msgstr ""

#: ../manage/deploying/logs.rst:69
msgid "The basic option here is between using the ZEO client log rotation mechanisms built into Zope and using external mechanisms - such as the log-rotation facilities available on your server."
msgstr ""

#: ../manage/deploying/logs.rst:74
msgid "Plone 4.2.2+"
msgstr ""

#: ../manage/deploying/logs.rst:76
msgid "Plone 4.2.2+ allows you to set a simple size-based mechanism for client log rotation."
msgstr ""

#: ../manage/deploying/logs.rst:79
msgid "The mechanism actually is built into Zope 2.12+ (used in Plone 4.0+), but there was no easy way to use it in a buildout until release 4.2.5 of plone.recipe.zope2instance. That recipe version ships with Plone 4.2.2+. We'll describe later a not-as easy mechanism for earlier 4.x series releases of Plone."
msgstr ""

#: ../manage/deploying/logs.rst:85
msgid "For Plone 4.2.2+, just add configuration settings like these to your buildout's zope2instance sections::"
msgstr ""

#: ../manage/deploying/logs.rst:96
msgid "This will maintain five generations of event logs of maximum five megabytes in size and 10 generations of 20 megabyte access logs."
msgstr ""

#: ../manage/deploying/logs.rst:99
msgid "For earlier versions of Plone in the 4.x series, you may use a custom log setup command to pass parameters to Zope::"
msgstr ""

#: ../manage/deploying/logs.rst:117
msgid "Other log rotation mechanisms"
msgstr ""

#: ../manage/deploying/logs.rst:119
msgid "Unix-ish systems have several log rotation mechanisms available. Two common ones are ``newsyslog`` and ``logrotate``. Both are well-documented. The critical thing you need to know for each is how to signal Zope that a log rotation has occurred, forcing it to reopen the log file. Zope will do this if you send the client process a USR2 signal."
msgstr ""

#: ../manage/deploying/logs.rst:125
msgid "For example, with logrotate, you can rotate a client's logs with a configuration like::"
msgstr ""

#: ../manage/deploying/logs.rst:140
msgid "Error alerts"
msgstr ""

#: ../manage/deploying/logs.rst:142
msgid "Zope can email access log error messages. As with other logging instructions, this is done with an addition to client zope2instance sections of your buildout::"
msgstr ""

#: ../manage/deploying/logs.rst:159
msgid "For complete detail on configuration, see the `mailinglogger documentation <http://packages.python.org/mailinglogger/mailinglogger.html>`_."
msgstr ""

#: ../manage/deploying/packing.rst:4
msgid "Packing is a vital regular maintenance procedure"
msgstr ""

#: ../manage/deploying/packing.rst:6
msgid "The Plone database does not automatically prune deleted content. You must periodically pack the database to reclaim space."
msgstr ""

#: ../manage/deploying/packing.rst:9
msgid "Zope's object database does not immediately remove objects when they are deleted. Instead, they are just marked inactive. This has advantages: it supplies a knowledgeable administrator with the ability to undo transactions on an emergency basis. However, this means that the disk space consumed by your object database will grow with every transaction."
msgstr ""

#: ../manage/deploying/packing.rst:15
msgid "*Packing* the database reclaims the space previously consumed by deleted objects. You *must* periodically pack your database, or it will eventually consume all available disk space. Fortunately, packing is an easy and reliable operation. It also may be done while the system is live."
msgstr ""

#: ../manage/deploying/packing.rst:21
msgid "Setting up packing"
msgstr ""

#: ../manage/deploying/packing.rst:23
msgid "On a development or testing installation, packing will be an infrequent need. You may initiate a packing operation via the Zope Management Interface Control Panel. It will allow you to set the number of days of transactions you wish to keep in the undo stack."
msgstr ""

#: ../manage/deploying/packing.rst:28
msgid "On a production system, you should pack the database via a command-line utility: bin/zeopack in your buildout directory."
msgstr ""

#: ../manage/deploying/packing.rst:31
msgid "*zeopack* is installed automatically by the plone.recipe.zeoserver recipe that generates the zeoserver (database server component)."
msgstr ""

#: ../manage/deploying/packing.rst:34
msgid "You may set packing options for zeopack by setting attributes in the zeoserver part of your buildout. For example::"
msgstr ""

#: ../manage/deploying/packing.rst:42
msgid "Will (after buildout is run), cause bin/zeopack to conserve three days of undo history during the pack operation."
msgstr ""

#: ../manage/deploying/packing.rst:45
msgid "Other options include:"
msgstr ""

#: ../manage/deploying/packing.rst:47
msgid "pack-gc"
msgstr ""

#: ../manage/deploying/packing.rst:49
msgid "Can be set to false to disable garbage collection as part of the pack. Defaults to true."
msgstr ""

#: ../manage/deploying/packing.rst:52
msgid "pack-keep-old"
msgstr ""

#: ../manage/deploying/packing.rst:54
msgid "Can be set to false to disable the creation of \\*.fs.old files before the pack is run. Defaults to true."
msgstr ""

#: ../manage/deploying/packing.rst:57
msgid "pack-user"
msgstr ""

#: ../manage/deploying/packing.rst:59
msgid "If the ZEO server uses authentication, this is the username used by the zeopack script to connect to the ZEO server."
msgstr ""

#: ../manage/deploying/packing.rst:62
msgid "pack-password"
msgstr ""

#: ../manage/deploying/packing.rst:64
msgid "If the ZEO server uses authentication, this is the password used by the zeopack script to connect to the ZEO server."
msgstr ""

#: ../manage/deploying/packing.rst:68
msgid "The packing operation"
msgstr ""

#: ../manage/deploying/packing.rst:70
msgid "Expect the packing operation to be time-consuming and for the time to grow on a linear basis with the size of your object database."
msgstr ""

#: ../manage/deploying/packing.rst:74
msgid "Disk-space considerations"
msgstr ""

#: ../manage/deploying/packing.rst:76
msgid "The packing operation will (unless you force this off) copy the existing database before it begins packing. This means that a packing operation will consume up-to twice the space currently occupied by your object database. (Pre-existing .old files are overwritten, so at least it doesn't get worse.)"
msgstr ""

#: ../manage/deploying/packing.rst:82
msgid "Regular scheduling of packing operations"
msgstr ""

#: ../manage/deploying/packing.rst:84
msgid "Database packing is typically run as an automated (cron) job. The cron job may be set up in the system cron table, or in the Plone users."
msgstr ""

#: ../manage/deploying/packing.rst:87
msgid "Disk packing is an extremely disk-intensive operation. It is best to schedule it to occur when your monitoring indicates that disk usage is usually low."
msgstr ""

#: ../manage/deploying/preparing.rst:2
msgid "Preparing the Server"
msgstr ""

#: ../manage/deploying/preparing.rst:5
msgid "Preparing to install Plone"
msgstr ""

#: ../manage/deploying/preparing.rst:7
msgid "Plone and Zope are generally not available via platform package or port systems. So, you can’t say “apt-get install plone” to add it to a Debian server. (There are packages and ports out there, if you search hard enough to find them. But don’t do it: they’ve generally had a poor record for maintenance.)"
msgstr ""

#: ../manage/deploying/preparing.rst:13
msgid "This means that you typically need to build Plone (compiling source code to binary components) on your target server. Binary installers for Plone are available for Windows and OS X, but not for Linux and BSD systems. And, the OS X binary installer isn’t really meant for production use - though it’s great for theme and add-on development and testing."
msgstr ""

#: ../manage/deploying/preparing.rst:19
msgid "A build environment for Plone requires two sets of components:"
msgstr ""

#: ../manage/deploying/preparing.rst:21
msgid "The GNU compiler kit and supporting components"
msgstr ""

#: ../manage/deploying/preparing.rst:22
msgid "The development versions of system libraries required by Plone. The libraries themselves are in common use, and often included in standard distributions. But, we need the development header files."
msgstr ""

#: ../manage/deploying/preparing.rst:27
msgid "It's generally best to install as many of these components as you can via platform packages or ports. That way, you'll be able to use your platform's automated mechanisms to keep these up-to-date, particularly with security fixes."
msgstr ""

#: ../manage/deploying/preparing.rst:33
msgid "System python?"
msgstr ""

#: ../manage/deploying/preparing.rst:35
msgid "Plone's Unified Installer will install a suitable Python for you. However, you may wish to use your system's Python if it meets Plone's requirements. Plone 4.0 and 4.1 require Python 2.6. Plone 4.2+ will work with Python 2.6 or 2.7."
msgstr ""

#: ../manage/deploying/preparing.rst:40
msgid "If you choose to use the system Python, you'll want to use virtualenv to create a virtual Python environment to isolate the Zope/Plone install from system Python packages. The Unified Installer will automatically do this for you. If you're not using the Unified Installer, learn to use virtualenv."
msgstr ""

#: ../manage/deploying/preparing.rst:46
msgid "Basic build components"
msgstr ""

#: ../manage/deploying/preparing.rst:48
msgid "All installs will require the basic GNU build and archive tools: gcc, g++, gmake, gnu tar, gunzip, bunzip2 and patch."
msgstr ""

#: ../manage/deploying/preparing.rst:51
msgid "On Debian/Ubuntu systems, this requirement will be taken care of by installing build-essential. On RPM systems (RedHat, Fedora, CentOS), you'll need the gcc-c++ (installs most everything needed as a dependency) and patch RPMs."
msgstr ""

#: ../manage/deploying/preparing.rst:56
msgid "On Arch Linux you'll need base-devel (installs most everything needed as a dependency)."
msgstr ""

#: ../manage/deploying/preparing.rst:60
msgid "System Python"
msgstr ""

#: ../manage/deploying/preparing.rst:62
msgid "If you're using your system's Python, you will need to install the Python development headers so that you'll be able to build new Python components. On Debian/Ubuntu systems, this is usually the python-dev package. Port installs will automatically include the required python.h requirement as part of their build process."
msgstr ""

#: ../manage/deploying/preparing.rst:68
msgid "If you're using your system Python, you will not need the readline and libssl development packages mentioned below. The required libraries should already be linked to your Python."
msgstr ""

#: ../manage/deploying/preparing.rst:73
msgid "System libraries"
msgstr ""

#: ../manage/deploying/preparing.rst:75
msgid "For any install, the development versions of:"
msgstr ""

#: ../manage/deploying/preparing.rst:77
msgid "libssl"
msgstr ""

#: ../manage/deploying/preparing.rst:78
msgid "libz"
msgstr ""

#: ../manage/deploying/preparing.rst:79
msgid "libjpeg"
msgstr ""

#: ../manage/deploying/preparing.rst:80
msgid "readline"
msgstr ""

#: ../manage/deploying/preparing.rst:81
msgid "libxml2/libxslt"
msgstr ""

#: ../manage/deploying/preparing.rst:83
msgid "If you're using the System Python, add:"
msgstr ""

#: ../manage/deploying/preparing.rst:85
msgid "build-essential (gcc/make tools)"
msgstr ""

#: ../manage/deploying/preparing.rst:86
#: ../manage/deploying/preparing.rst:120
msgid "python-dev"
msgstr ""

#: ../manage/deploying/preparing.rst:88
msgid "Without the system Python (Unified Installer builds Python):"
msgstr ""

#: ../manage/deploying/preparing.rst:90
msgid "build-essential (gcc/make)"
msgstr ""

#: ../manage/deploying/preparing.rst:93
#: ../manage/installing/requirements.rst:85
msgid "Optional libraries"
msgstr ""

#: ../manage/deploying/preparing.rst:95
#: ../manage/installing/requirements.rst:87
msgid "If Plone can find utilities that convert various document formats to text, it will include them in the site index. To get PDFs and common office automation formats indexed, add:"
msgstr ""

#: ../manage/deploying/preparing.rst:99
#: ../manage/installing/requirements.rst:89
msgid "poppler-utils (PDFs)"
msgstr ""

#: ../manage/deploying/preparing.rst:100
#: ../manage/installing/requirements.rst:90
msgid "wv (office docs)"
msgstr ""

#: ../manage/deploying/preparing.rst:102
msgid "Development versions are not needed for these."
msgstr ""

#: ../manage/deploying/preparing.rst:106
msgid "Platform notes"
msgstr ""

#: ../manage/deploying/preparing.rst:109
msgid "Debian/Ubuntu"
msgstr ""

#: ../manage/deploying/preparing.rst:111
msgid "Use ``apt-get install``. The matching package names are:"
msgstr ""

#: ../manage/deploying/preparing.rst:113
msgid "build-essential"
msgstr ""

#: ../manage/deploying/preparing.rst:114
msgid "libssl-dev"
msgstr ""

#: ../manage/deploying/preparing.rst:115
msgid "libz-dev"
msgstr ""

#: ../manage/deploying/preparing.rst:116
msgid "libjpeg-dev"
msgstr ""

#: ../manage/deploying/preparing.rst:117
msgid "libreadline-dev"
msgstr ""

#: ../manage/deploying/preparing.rst:118
msgid "libxml2-dev"
msgstr ""

#: ../manage/deploying/preparing.rst:119
msgid "libxslt-dev"
msgstr ""

#: ../manage/deploying/preparing.rst:123
msgid "Fedora/CentOS"
msgstr ""

#: ../manage/deploying/preparing.rst:125
msgid "Using ``yum install``:"
msgstr ""

#: ../manage/deploying/preparing.rst:127
msgid "gcc-c++ patch openssl-devel libjpeg-devel libxslt-devel readline-devel make which python-devel"
msgstr ""

#: ../manage/deploying/preparing.rst:138
msgid "OpenSUSE"
msgstr ""

#: ../manage/deploying/preparing.rst:140
msgid "Using ``zypper in``"
msgstr ""

#: ../manage/deploying/preparing.rst:142
msgid "gcc-c++"
msgstr ""

#: ../manage/deploying/preparing.rst:143
msgid "make"
msgstr ""

#: ../manage/deploying/preparing.rst:144
msgid "readline-devel"
msgstr ""

#: ../manage/deploying/preparing.rst:145
msgid "libjpeg-devel"
msgstr ""

#: ../manage/deploying/preparing.rst:146
msgid "zlib-devel"
msgstr ""

#: ../manage/deploying/preparing.rst:147
msgid "patch"
msgstr ""

#: ../manage/deploying/preparing.rst:148
msgid "libopenssl-devel"
msgstr ""

#: ../manage/deploying/preparing.rst:149
msgid "libexpat-devel"
msgstr ""

#: ../manage/deploying/preparing.rst:150
msgid "man"
msgstr ""

#: ../manage/deploying/preparing.rst:152
msgid "--build-python will be needed as the system Python 2.7 is missing many standard modules."
msgstr ""

#: ../manage/deploying/preparing.rst:156
msgid "Arch Linux"
msgstr ""

#: ../manage/deploying/preparing.rst:158
msgid "Using ``pacman -S``"
msgstr ""

#: ../manage/deploying/preparing.rst:160
msgid "base-devel"
msgstr ""

#: ../manage/deploying/preparing.rst:161
msgid "libxml2"
msgstr ""

#: ../manage/deploying/preparing.rst:162
msgid "libxslt"
msgstr ""

#: ../manage/deploying/preparing.rst:163
msgid "libjpeg-turbo"
msgstr ""

#: ../manage/deploying/preparing.rst:164
msgid "openssl"
msgstr ""

#: ../manage/deploying/preparing.rst:167
msgid "OS X"
msgstr ""

#: ../manage/deploying/preparing.rst:169
msgid "Installing XCode and activating the optional command-line utilities will give you the basic GNU tools environment you need to install Plone with the Unified Installer. You may also use MacPorts (the BSD ports mechanism, tailored to OS X) to install libjpeg, libxslt and readline. If you do, remember to keep your ports up-to-date, as Apple's updates won't do it for you."
msgstr ""

#: ../manage/deploying/preparing.rst:177
msgid "Creating a Plone user"
msgstr ""

#: ../manage/deploying/preparing.rst:179
msgid "While testing or developing for Plone, you may have just used an installation in a home directory, owned by yourself. That is not suitable for a production environment. Plone's security record is generally excellent, however there have been - and probably will be again in the future - vulnerabilities that allow an attacker to execute arbitrary commands with the privileges of the process owner. To reduce this kind of risk, Plone - and all other processes that allow Internet connections - should be run with user identities that have the minimum privileges necessary to maintain their data and write logs."
msgstr ""

#: ../manage/deploying/preparing.rst:188
msgid "In a Unix-workalike environment, the most common way of accomplishing this is to create a special user identity under which you will run Plone/Zope. That user identity should ideally have no shell, no login rights, and write permissions adequate only to change files in its ./var directory."
msgstr ""

#: ../manage/deploying/preparing.rst:193
msgid "The ideal is hard to achieve, but it's a good start to create an unprivileged \"plone\" user, then use \"sudo -u plone command\" to install Plone and run buildout. This is basically what the Unified Installer will do for you if you run its install program via sudo. The installer uses root privileges to create a \"plone\" user (if one doesn't exist), then drops them before running buildout."
msgstr ""

#: ../manage/deploying/preparing.rst:200
msgid "Don't run buildout as root!"
msgstr ""

#: ../manage/deploying/preparing.rst:202
msgid "Don't use bare \"sudo\" or a root login to run buildout. Buildout fetches components from the Python Package Index and other repositories. As part of package installation, it necessarily executes code in the setup.py file of each package."
msgstr ""

#: ../manage/deploying/processes.rst:2
msgid "Starting, stopping and restarting"
msgstr ""

#: ../manage/deploying/processes.rst:4
msgid "If you're using a stand-alone Zope/Plone installation (not a ZEO cluster), starting and stopping Plone is easy. A production ZEO cluster deployment adds some complexity because you'll now be controlling several process: a ZEO server and several ZEO clients."
msgstr ""

#: ../manage/deploying/processes.rst:9
msgid "If you check the \"bin\" directory of your buildout after building a cluster, you'll find control commands for the server and each client. They're typically named zeoserver, client1, client2, client#. You can do a quick start with the command sequence::"
msgstr ""

#: ../manage/deploying/processes.rst:20
msgid "If you've set all this up with the Unified Installer, you'll have a convenience controller script named \"plonectl\" that will start all your components with one command::"
msgstr ""

#: ../manage/deploying/processes.rst:27
msgid "Each \"start\" command will run the program in \"daemon\" mode: after a few startup messages, the program will disconnect from the console and run in the background."
msgstr ""

#: ../manage/deploying/processes.rst:31
msgid "The daemon mode start will write a process ID (pid) file in your buildout's \"var\" directory; that pid may be used to control the background process. It's automatically used by \"stop\" and \"restart\" commands."
msgstr ""

#: ../manage/deploying/processes.rst:36
msgid "Starting and stopping Plone with the server"
msgstr ""

#: ../manage/deploying/processes.rst:38
msgid "You can start and stop Plone with your server by adding an init.d (Linux and other sys v heritage systems) or rc.d (BSD heritage) script that accepts start and stop commands."
msgstr ""

#: ../manage/deploying/processes.rst:42
msgid "The Unified Installer has an init_scripts directory that contains sample initialization/stop scripts for several platforms. If you didn't use that installer, you may find the scripts on `github <https://github.com/plone/Installers-UnifiedInstaller/blob/master/init_scripts>`_."
msgstr ""

#: ../manage/deploying/processes.rst:48
msgid "Process control with Supervisor"
msgstr ""

#: ../manage/deploying/processes.rst:50
msgid "A much better alternative to custom init scripts is to use a process-control system like `Supervisor <http://supervisord.org/>`_. Supervisor is well-known by the Plone community, and you should have no trouble getting community support for it. It's available as a package or port on most Linux and BSD systems (look for supervisor, supervisord or supervisor-python). Installing the port or package will typically activate supervisor. You then just add the Zope/Plone commands to the supervisor configuration file."
msgstr ""

#: ../manage/deploying/processes.rst:58
msgid "Process-control system's like supervisor typically require the controlled application to run in foreground or console mode. Don't confuse this with the Zope/Plone \"fg\" command, which runs the application in debug mode (which is *very* slow). Instead, use \"console\" for clients. Use \"fg\" for the zeoserver; it doesn't have the \"console\" command, but its performance is unhindered."
msgstr ""

#: ../manage/deploying/processes.rst:65
msgid "Here's a sample program-configuration stanza for supervisor, controlling both a ZEO server and client::"
msgstr ""

#: ../manage/deploying/processes.rst:80
msgid "Note the \"stopwaitsecs\" setting. When trying to stop a program, supervisor will ordinarily wait 10 seconds before trying aggressive measures to terminate the process. Since it's entirely possible for a ZEO client to take longer than this to stop gracefully, we increase the grace period."
msgstr ""

#: ../manage/deploying/processes.rst:85
msgid "When running a ZEO cluster through a process-control system such as supervisor, you should always use the system's own control mechanisms (supervisorctl for supervisor) to start, stop, and status-check cluster components."
msgstr ""

#: ../manage/deploying/processes.rst:91
msgid "Cluster restarts"
msgstr ""

#: ../manage/deploying/processes.rst:93
msgid "Using multiple ZEO clients and a load balancer makes it possible to eliminate downtime due to ZEO client restarts. There are many reasons why you might need to restart clients, the most common being that you have added or updated an add-on product. (You should, of course, have tested the new or updated package on a staging server.)"
msgstr ""

#: ../manage/deploying/processes.rst:99
msgid "The basic procedure is simple: just restart your clients one at a time with a pause between each restart. This is usually scripted."
msgstr ""

#: ../manage/deploying/processes.rst:102
msgid "Load balancers, however, may raise issues. If your load balancer does not automatically handle temporary node downtime, you'll need to add to your client restart recipe a mechanism to mark clients as in down or maintenance mode, then mark them \"up\" again after a delay."
msgstr ""

#: ../manage/deploying/processes.rst:107
msgid "If your load balancer does handle client downtime, you may still need to make sure that it doesn't decide the client is \"up\" too early. Zope instances have a \"fast listen\" mode that causes them to accept HTTP requests very early in the startup process -- many seconds before they can actually furnish a response. This may lead your load balancer to diagnose the client as \"up\" and include it in the cluster. This can lead to some very slow responses. To improve the situation, turn off the \"fast listen\" mode in your client setup::"
msgstr ""

#: ../manage/deploying/processes.rst:122
msgid "If you are unable to tolerate slow responses during restarts, even this may not be good enough. Even after a Zope client is able to respond to requests, its first few page renderings will be slow while client database caches are primed. When speed sensitivity is this important, you'll want to add to your restart script a command-line request (via wget or curl) for a few sample pages. Do this after client restart and before marking the client \"up\" in the cluster. This is not commonly required."
msgstr ""

#: ../manage/deploying/production/index.rst:3
msgid "Production"
msgstr ""

#: ../manage/deploying/production/index.rst:7
msgid "Hints for Plone in production."
msgstr ""

#: ../manage/deploying/production/restarts.rst:3
msgid "Automatic Plone (re)starts"
msgstr ""

#: ../manage/deploying/production/restarts.rst:10
msgid "Tips on how to automatically start Plone on server boot."
msgstr ""

#: ../manage/deploying/production/restarts.rst:12
msgid "This manual assumes, that you are installed Plone via the Unified-Installer as ``root install`` if you did a different install, please addjust the examples below for your own needs, the user as which you are running Plone maybe different for example."
msgstr ""

#: ../manage/deploying/production/restarts.rst:15
msgid "plonectl script"
msgstr ""

#: ../manage/deploying/production/restarts.rst:17
msgid "The general-purpose ``plonectl`` control command for Plone installations is:"
msgstr ""

#: ../manage/deploying/production/restarts.rst:23
msgid "``yourbuildoutfolder`` is the topmost folder of your Plone installation. It will always contain a buildout.cfg file and a bin directory."
msgstr ""

#: ../manage/deploying/production/restarts.rst:26
msgid "The ``plonectl`` command is a convenience script that controls standalone or cluster configurations. In a standalone installation, this will restart the ``instance`` part. In a ZEO cluster install it will restart the zeoserver and client parts."
msgstr ""

#: ../manage/deploying/production/restarts.rst:30
msgid "If you have installed Plone in production mode, the Plone server components are meant to be run as a special user, usually ``plone_daemon``. (In older versions, this was typically ``plone``.) In this case, the start, stop and restart commands are:"
msgstr ""

#: ../manage/deploying/production/restarts.rst:44
msgid "Starting on boot"
msgstr ""

#: ../manage/deploying/production/restarts.rst:46
msgid "It is best practice to start Plone service if the server is rebooted. This way your site will automatically recover from power loss etc."
msgstr ""

#: ../manage/deploying/production/restarts.rst:49
msgid "On a Linux or BSD system, you have two major alternatives to arrange automatic starting for a production install:"
msgstr ""

#: ../manage/deploying/production/restarts.rst:51
msgid "A process-control system, like supervisor."
msgstr ""

#: ../manage/deploying/production/restarts.rst:53
msgid "Through init.d (BSD rc.d) scripts."
msgstr ""

#: ../manage/deploying/production/restarts.rst:56
msgid "Using supervisor"
msgstr ""

#: ../manage/deploying/production/restarts.rst:58
msgid "`supervisor <http://supervisord.org/>`_ is a general-purpose process-control system that is well-known and highly recommended in the Plone community."
msgstr ""

#: ../manage/deploying/production/restarts.rst:60
msgid "Process-control systems generally run their controlled programs as subprocesses. This means that the controlled program must not detach itself from the console (daemonize)."
msgstr ""

#: ../manage/deploying/production/restarts.rst:63
msgid "Zope/Plone's \"start\" command does not work for this purpose. Instead use ``console``. Do not use ``fg`` which turns on debug switches that will dramatically slow your site."
msgstr ""

#: ../manage/deploying/production/restarts.rst:67
msgid "Supervisor is well-documented, easy to set up, and included as an instalable package with popular Linux and BSD distributions."
msgstr ""

#: ../manage/deploying/production/restarts.rst:70
msgid "Debian LSBInitScripts"
msgstr ""

#: ../manage/deploying/production/restarts.rst:72
msgid "Short documentation about how to make an Init Script LSB"
msgstr ""

#: ../manage/deploying/production/restarts.rst:74
msgid "This example will start a plone site on boot::"
msgstr ""

#: ../manage/deploying/production/restarts.rst:94
msgid "Save this script as ``start_plone.sh`` in /etc/init.d and make it executable."
msgstr ""

#: ../manage/deploying/production/restarts.rst:96
msgid "add the script to dependency-based booting::"
msgstr ""

#: ../manage/deploying/production/restarts.rst:100
msgid "Where ``start_plone.sh`` is an executable init script placed in /etc/init.d, insserv will produce no output if everything went OK. Examine the error code in $? if you want to be sure."
msgstr ""

#: ../manage/deploying/production/restarts.rst:103
msgid "This another example (/etc/init.d/plone)::"
msgstr ""

#: ../manage/deploying/production/restarts.rst:180
msgid "Make sure to read:"
msgstr ""

#: ../manage/deploying/production/restarts.rst:182
msgid "http://wiki.debian.org/LSBInitScripts"
msgstr ""

#: ../manage/deploying/production/restarts.rst:185
msgid "Upstart"
msgstr ""

#: ../manage/deploying/production/restarts.rst:186
msgid "Upstart is an event-based replacement for the /sbin/init daemon which handles starting of tasks and services during boot, stopping them during shutdown and supervising them while the system is running. It was originally developed for the Ubuntu distribution, but is intended to be suitable for deployment in all Linux distributions as a replacement for the venerable System-V init."
msgstr ""

#: ../manage/deploying/production/restarts.rst:189
msgid "Example of a *plone.conf* file in */etc/init/* -> */etc/init/plone.conf*::"
msgstr ""

#: ../manage/deploying/production/restarts.rst:207
msgid "Make sure to read: http://upstart.ubuntu.com/"
msgstr ""

#: ../manage/deploying/production/restarts.rst:209
msgid "Also check the original source of this sample file: http://chrigl.de/blogentries/my-plone-configuration"
msgstr ""

#: ../manage/deploying/production/restarts.rst:211
msgid "The above sample has not been extensively tested and is intended for use with in a zeocluster configuration. To use the above sample for a normal (non-root) user installation, replace the last line with:"
msgstr ""

#: ../manage/deploying/production/restarts.rst:214
msgid "exec /home/$USERID/Plone/plonectl start"
msgstr ""

#: ../manage/deploying/production/restarts.rst:217
msgid "Systemd"
msgstr ""

#: ../manage/deploying/production/restarts.rst:218
msgid "Create services file *plone.service* in */etc/systemd/system*::"
msgstr ""

#: ../manage/deploying/production/restarts.rst:233
msgid "Make systemd take notice of it::"
msgstr ""

#: ../manage/deploying/production/restarts.rst:237
msgid "Activate a service immediately::"
msgstr ""

#: ../manage/deploying/production/restarts.rst:241
msgid "Check status of service::"
msgstr ""

#: ../manage/deploying/production/restarts.rst:245
msgid "Enable a service to be started on bootup::"
msgstr ""

#: ../manage/deploying/production/restarts.rst:249
msgid "More detailed log information::"
msgstr ""

#: ../manage/deploying/production/restarts.rst:253
msgid "Make sure to read: http://www.freedesktop.org/wiki/Software/systemd/"
msgstr ""

#: ../manage/deploying/production/restarts.rst:257
msgid "Crontab"
msgstr ""

#: ../manage/deploying/production/restarts.rst:259
msgid "These instructions apply for Debian-based Linuxes."
msgstr ""

#: ../manage/deploying/production/restarts.rst:261
msgid "Example crontab of *yourploneuser*::"
msgstr ""

#: ../manage/deploying/production/restarts.rst:266
msgid "``rc.local`` script"
msgstr ""

#: ../manage/deploying/production/restarts.rst:268
msgid "For Debian-based Linuxes, add the following line to the ``/etc/rc.local`` script:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:3
msgid "Tutorial: Installing Plone for Production on Ubuntu"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:7
msgid "A step-by-step guide to installing Plone 5.x on a recent Ubuntu LTS [14.04] server installation."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:14
msgid "This tutorial walks you step-by-step through a minimum responsible installation of Plone for production on a recent Ubuntu LTS server."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:16
msgid "The installation includes Plone itself; nginx for a reverse-proxy; a send-only mail-transfer agent; and firewall rules. We'll set Plone to start with server startup and will add cron jobs to periodically pack the database and create snapshot backups."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:18
msgid "This minimal install will work for production for a smaller Plone site, and will provide a good base for scaling up for a larger site."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:21
msgid "Requirements"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:23
msgid "A clean installation of a recent Ubuntu server. The tutorial has been tested on cloud and virtual box servers. The install described here will run in 512 MB RAM. More RAM will be needed for larger or busy sites."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:25
msgid "A hostname for the new site. You or your DNS admin should have already created a hostname (e.g., www.yoursite.com) and a host record pointing to the new server."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:27
msgid "Unix command-line and basic system administrator skills. You should know how to use `ssh` to create a terminal session with your new server. You should know how to use `vi` or some other terminal editor."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:29
msgid "An Internet connection."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:32
msgid "Step 1: Platform preparation"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:34
msgid "Get to the point where you can ssh to the server as a non-root user and use `sudo` to gain root permissions."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:36
msgid "First step with any new server is to update the already installed system libraries:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:43
msgid "Then, install the platform's build kit, nginx, and supervisor:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:50
msgid "Step 2: Install Plone"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:52
msgid "Check `http://plone.org/products/plone <http://plone.org/products/plone>`_. Follow the `Download` link to get to the latest release. Copy the URL for the `Unified Installer`. Substitute that URL below:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:58
msgid "Unpack, change into the unpack directory and run the installer:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:66
msgid "This will install Plone to /usr/local/Plone. There are installer options to put it elsewhere. Run `./install.sh`` with no arguments to get options."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:70
msgid "Note that this is `root` installation. The installer will create special system users to build and run Plone."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:74
msgid "This creates a `zeo` installation with two Plone clients. We will only connect one of those clients to the Internet. The other will be reserved for debugging and administrator access. If you know this is a larger site and wish to use load balancing, you may create more clients with the `--clients=##` command-line argument to create more clients. They're also easy to add later."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:76
msgid "If you hit an \"lxml\" error during installation (ie the log shows \"Error: Couldn't install: lxml 2.3.6\") you may need additional libraries. Take a look at http://plone.org/documentation/manual/installing-plone/installing-on-linux-unix-bsd/debian-libraries"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:79
msgid "When the install completes, you'll be shown the preset administrative password. Record it. If you lose it, you may see it again:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:86
msgid "Step 3: Set Plone to start with the server"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:88
msgid "We're going to use `supervisor` to start Plone with the server. To do so, we'll create a supervisor configuration file:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:94
msgid "Specify that supervisor should start the database server and client1 automatically::"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:107
msgid "When that file is saved you're set to start on server start. To start immediately, tell supervisor about the new components:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:123
msgid "Step 4: Create a Plone site"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:125
msgid "At this point, you should be able to open a web browser and point it to port 8080 on your new server. Do so, and use your administrative password to create a Plone site with the id \"Plone\". (Feel free to use a different ID, just remember it below when you set up virtual hosting rules.)"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:128
msgid "Step 5: Set up virtual hosting"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:130
msgid "We're going to use nginx as a reverse proxy. Virtual hosting will be established by rewrite rules. You need two bits of information: 1) the hostname you want to use (for which DNS records should already be set up); 2) the id of the Plone site you created."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:132
msgid "We'll set up nginx by adding a new configuration file:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:138
#: ../manage/deploying/production/ubuntu_production.rst:195
msgid "Add the contents::"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:160
#: ../manage/deploying/production/ubuntu_production.rst:199
msgid "And save."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:164
msgid "The `location ~* manage_` rule will deny access to most of the Zope Management interface. (You'll get to that by bypassing nginx.)"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:168
msgid "The second server stanza sets up an automatic redirect that will transfer requests for the bare hostname to its `www.` form. You may not want or need that."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:170
msgid "Enable the new nginx site configuration:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:177
msgid "And, tell nginx to reload the configuration:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:184
msgid "Try out your virtual hosting."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:187
msgid "Step 6: Set up packing and backup"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:189
msgid "We want the Zope database to be packed weekly. We'll do so by setting up a `cron` job:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:203
msgid "Pick a time when your system can take some extra load. Don't use the day/time above."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:205
msgid "Let's also create a daily snapshot of the database:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:211
msgid "Add the contents below, adjust the time, and save::"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:217
msgid "This snapshot will give you a stable copy of the database at a particular time. You'll need a separate strategy to backup the server's file system, including the snapshot."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:220
msgid "Step 7: Add a send-only Mail Transfer Agent"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:222
msgid "You don't need this step if you have an MTA on another server, or are using a mail-send service. If you don't have that available, this step will create a localhost, port 25, MTA that you may use with Plone's mail setup."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:224
msgid "We're going to use Postfix. There are lots of alternatives."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:226
msgid "Add the Postfix package and edit its main configuration file:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:233
msgid "Change the bottom section to turn off general mail in::"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:246
msgid "Tell postfix to restart:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:253
msgid "Step 8: Set up a firewall"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:255
msgid "You *must* set up a firewall. But, you may be handling that outside the system, for example via AWS security groups."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:257
msgid "If you want to use a software firewall on the machine, you may use `ufw` to simplify rule setup."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:268
msgid "This blocks everything but SSH and HTTP."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:270
msgid "So, you may be wondering, how do you do Zope Management Interface administration? SSH port forwarding will allow you to build a temporary encrypted tunnel from your workstation to the server."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:273
msgid "Execute on your workstation the command:"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:279
msgid "Now, ask for http://localhost:8080/ in your workstation web browser, and you'll be looking at the ZMI root."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:282
msgid "Scaling up"
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:284
msgid "This installation will do well on a minimum server configuration (512MB RAM). If you've a larger site, buy more memory and set up reverse-proxy caching and load balancing."
msgstr ""

#: ../manage/deploying/production/ubuntu_production.rst:287
msgid ":doc:`Deploying and installing Plone in production </manage/deploying/index>` is a good introduction to scaling topics."
msgstr ""

#: ../manage/deploying/stack.rst:2
msgid "Background: the stack"
msgstr ""

#: ../manage/deploying/stack.rst:4
msgid "Many integrators arrive at Plone after previously working with PHP applications. They are used to using Apache with modPHP and an SQL server. This common application-server software stack is often deployed from the start on a pre-configured server, and installation of a PHP application may require little more than unpacking a set of files to a particular point in the file system."
msgstr ""

#: ../manage/deploying/stack.rst:11
msgid "The Plone application is a different animal. It runs on its own application server (Zope), and in common installations uses the Zope Object Database (ZODB) rather than an SQL database. It is nearly always deployed in conjunction with other tools, like web servers (e.g., Apache or Nginx), load balancers (like haproxy), and reverse-proxy caches (like varnish or squid). This is what we’ll be discussing in this guide."
msgstr ""

#: ../manage/deploying/stack.rst:18
msgid "It is actually possible to deploy Plone/Zope as a stand-alone web server. If you do a simple “standalone” installation of Plone, you will end up with a working web server answering requests on port 8080 (which may be changed)."
msgstr ""

#: ../manage/deploying/stack.rst:26
msgid "While there are production servers doing just this (typically changing the listening port from 8080 to 80), it’s uncommon. It’s much more common to put a general-purpose web server like Apache or Nginx between Plone and the Internet:"
msgstr ""

#: ../manage/deploying/stack.rst:35
msgid "In this stack, it’s the general-purpose web server that is connected to well-known Internet ports. Apache or Nginx answers those request and forwards them to Plone. It does so by proxying the requests."
msgstr ""

#: ../manage/deploying/stack.rst:39
msgid "If Plone/Zope has a built-in web server, why do you need another?"
msgstr ""

#: ../manage/deploying/stack.rst:41
msgid "You may wish to use Zope and Plone as part of a hybrid system with other best of breed components providing parts of your web site. For example, Plone is not really meant for the kind of database applications that require a relational solution. A good, general-purpose web server like Apache or Nginx serves as a great mechanism for dispatching different requests to different, best-of-breed components. They’re also great for quickly serving static resources."
msgstr ""

#: ../manage/deploying/stack.rst:49
msgid "Even in the simplest installation, it’s usually desirable to do some URL rewriting to map URLs to data in different ways. This is nearly mandatory when building a hybrid system."
msgstr ""

#: ../manage/deploying/stack.rst:53
msgid "Plone does not have built-in SSL support. A general-purpose web server will have a hardened SSL layer and a mechanism for handling certificates."
msgstr ""

#: ../manage/deploying/stack.rst:56
msgid "You may wish to solve authentication and logging problems at a shared, higher level."
msgstr ""

#: ../manage/deploying/stack.rst:63
msgid "Zope + Web Server + Web Apps"
msgstr ""

#: ../manage/deploying/stack.rst:66
msgid "Load balancing"
msgstr ""

#: ../manage/deploying/stack.rst:68
msgid "The deployment above may meet your needs for light-traffic sites. Its principle limitation is that it will make use of only a single processor and file system to render Plone pages."
msgstr ""

#: ../manage/deploying/stack.rst:72
msgid "The Zope application server allows us to divide the chores of rendering web pages (very CPU-intensive) from those of maintaining the file-system database. Further, we may have as many page rendering clients as we wish, all using a single database server."
msgstr ""

#: ../manage/deploying/stack.rst:77
msgid "The components of this mechanism, Zope Enterprise Objects (ZEO) are:"
msgstr ""

#: ../manage/deploying/stack.rst:82
msgid "ZEO Clients"
msgstr ""

#: ../manage/deploying/stack.rst:80
msgid "Web servers in themselves, which answer requests for pages, gather page component objects from the database server, render pages and return them to the requestor."
msgstr ""

#: ../manage/deploying/stack.rst:86
msgid "ZEO Server"
msgstr ""

#: ../manage/deploying/stack.rst:85
msgid "Handles read/write requests for the object database from ZEO Clients. Not HTTP servers, and not meant to be visible to the Internet."
msgstr ""

#: ../manage/deploying/stack.rst:92
msgid "ZEO Cluster"
msgstr ""

#: ../manage/deploying/stack.rst:94
msgid "It is typical in a high-demand server situation to deploy as many ZEO clients as you have CPU cores available. More is not useful (except for a spare, debug client). ZEO clients are generally CPU/RAM-intensive. The ZEO server is a heavy disk-system user."
msgstr ""

#: ../manage/deploying/stack.rst:99
msgid "For multiple ZEO clients to be actually useful, you need a load-balancing front-end to distribute requests among the clients. The load balancer receives http requests and proxies them among a pool of ZEO clients."
msgstr ""

#: ../manage/deploying/stack.rst:107
msgid "ZEO Cluster with Load Balancer"
msgstr ""

#: ../manage/deploying/stack.rst:109
msgid "Apache and Nginx have built-in load-management capabilities, which can allow you to combine those two layers of the stack. A dedicated load balancer like `haproxy <http://haproxy.1wt.eu/>`_ offers better features for distributing load among clients and for checking and maintaining status."
msgstr ""

#: ../manage/deploying/stack.rst:115
msgid "How many ZEO clients, how much memory?"
msgstr ""

#: ../manage/deploying/stack.rst:117
msgid "It's typical to allocate roughly one ZEO client for every processor core you have available. However, there are lots of trade-offs, and many clients will eat RAM rapidly. :doc:`About Instances, Threads and RAM consumption </manage/deploying/testing_tuning/performance/instancesthreads>` is a good guide to the issues involved."
msgstr ""

#: ../manage/deploying/stack.rst:123
msgid "Sticky sessions"
msgstr ""

#: ../manage/deploying/stack.rst:125
msgid "As a rule of thumb, you'll tend to get better performance if you can direct requests from the same browser client to the same Zope instance (ZEO client). That's because the memory cache of the ZEO-client is more likely to be loaded with information useful for rendering requests from that source. The effect can be particularly strong for logged-in users."
msgstr ""

#: ../manage/deploying/stack.rst:131
msgid "This is not a firm rule, though. The more memory allocated to ZEO client caches, the smaller the effect. Also, if a large portion of your traffic is from search engines, benefits will be negligible. (In extreme cases, it may even be desirable to direct all your search engine traffic to the same ZEO client so that their atypical behavior doesn't spoil limited cache memory with infrequently requested pages.)"
msgstr ""

#: ../manage/deploying/stack.rst:138
msgid "Most load balancers have some sort of mechanism for causing traffic from a single source to stick to a single ZEO client. The simplest schemes use IP addresses; cookies may also be used."
msgstr ""

#: ../manage/deploying/stack.rst:143
msgid "Connections and queues"
msgstr ""

#: ../manage/deploying/stack.rst:145
msgid "A versatile load balancer like haproxy will give you fine-grained control over the queuing of connections to ZEO client back-end servers. A factor to take into account is that ZEO clients will always accept connections - even when all threads are busy. Given that requests take dramatically different amount of times to render and return, this may result in some clients having queued connections when other clients are free."
msgstr ""

#: ../manage/deploying/stack.rst:152
msgid "The general solution for this is to set the maximum connections per back-end ZEO client to roughly the number of threads they serve. For haproxy, this is the maxconn setting for the listen directive. This is only a rule of thumb. ZEO clients actually spawn threads as needed to return blobs, and are very efficient at that. So, how severely you limit connections per client should depend on your balance of page to blob serves."
msgstr ""

#: ../manage/deploying/stack.rst:160
msgid "Server-side HTTP caching"
msgstr ""

#: ../manage/deploying/stack.rst:162
msgid "When a web browser requests and receives a web resource, it silently saves the page or graphic in a local disk cache in case it may be needed later. This saves the expense of downloading the resource again."
msgstr ""

#: ../manage/deploying/stack.rst:166
msgid "A server-side HTTP cache does much the same thing. After Plone renders a resource, which may be a very expensive process, it saves the rendered resource in case it should be requested again soon."
msgstr ""

#: ../manage/deploying/stack.rst:170
msgid "With a caching reverse proxy in place, our delivery stack looks like:"
msgstr ""

#: ../manage/deploying/stack.rst:176
msgid "ZEO Cluster with Server-Side Caching"
msgstr ""

#: ../manage/deploying/stack.rst:178
msgid "As with load balancing, Apache and Nginx have built-in proxy caching abilities. If those are inadequate, Varnish or Squid are often used."
msgstr ""

#: ../manage/deploying/stack.rst:181
msgid "Nothing is simple about caching. There is always a trade off between currency of delivered data and the performance of the cache layer. Cache tuning for truly busy sites requires extensive measurement and experimentation, often with business decisions about the expense of currency loss vs enhanced servers."
msgstr ""

#: ../manage/deploying/stack.rst:188
msgid "Caching setup in Plone"
msgstr ""

#: ../manage/deploying/stack.rst:190
msgid "In their basic outlines, browser and server-side caching work the same way. The browser or the server caches resources against the possibility that they may be needed again soon. But, how does the caching agent make the decision about how long to store a resource? Or, if it should be stored at all?"
msgstr ""

#: ../manage/deploying/stack.rst:195
msgid "Generally, these decisions are made on the basis of caching hints that are in the HTTP response headers. The web server, or Plone, may indicate that a resource should not be cached at all, that it may be safely cached for a certain period of time, or that the caching agent should revalidate the resource by asking the server if it's changed."
msgstr ""

#: ../manage/deploying/stack.rst:201
msgid "Out of the box, Plone is very conservative. It assumes that currency is critical, and only tells the caching agent to store resources like icons. You may tune this up considerably by installing the *HTTP Caching* add on via the Plone control panel, then using the * caching* configlet to set cache rules."
msgstr ""

#: ../manage/deploying/stack.rst:207
msgid "The *HTTP Caching* add on is shipped with Plone, but not activated. So, you don't need to add it to your buildout packages. Just activate it and go. By the way, the package that does the work is ``plone.app.caching``, and that's how it's often discussed."
msgstr ""

#: ../manage/deploying/stack.rst:213
msgid "Caching settings"
msgstr ""

#: ../manage/deploying/stack.rst:215
msgid "**Import settings**"
msgstr ""

#: ../manage/deploying/stack.rst:217
msgid "This is actually the place to start if you're new to cache settings. Set a basic profile by making a choice from this menu. Then use ``Change settings`` to refine it to your needs."
msgstr ""

#: ../manage/deploying/stack.rst:222
msgid "**Global settings:**"
msgstr ""

#: ../manage/deploying/stack.rst:227
msgid "Enable caching"
msgstr ""

#: ../manage/deploying/stack.rst:225
msgid "Turn this on, and you'll get some immediate improvement in cache efficacy -- including browser caches. Tune it up for your particular needs with the other panes in this configuration panel."
msgstr ""

#: ../manage/deploying/stack.rst:239
msgid "Enable GZip compression"
msgstr ""

#: ../manage/deploying/stack.rst:230
msgid "GZip compression is one of those rare total wins. Turning it on will cause Plone to compress most text resources before transmitting them. All modern browsers know how to uncompress them. You'll save bandwidth and speed up your effective page delivery for a tiny hit on CPU load."
msgstr ""

#: ../manage/deploying/stack.rst:235
msgid "Why wouldn't you turn on Gzip compression? The best reason is because you may wish to instead handle this via your web server (nginx/Apache) or reverse proxy. Threading issues tend to be much better handled by a good proxy than by Zope/Plone. Also, the same gzip settings can handle Zope/Plone and other web apps."
msgstr ""

#: ../manage/deploying/stack.rst:241
msgid "**Caching Proxies**"
msgstr ""

#: ../manage/deploying/stack.rst:243
msgid "Think of this as the Varnish/Squid settings page, as it's mainly concerned with cache purging, which is typically not supported by web server proxy caches."
msgstr ""

#: ../manage/deploying/stack.rst:247
msgid "Cache purging is when an application server sends a message to a proxy cache to tell it that a resource needs refreshing. Cache purging is generally only desirable when you're using more aggressive caching rules. If you are not setting rules to cache pages and other dynamic content, you don't need to worry about cache purging."
msgstr ""

#: ../manage/deploying/stack.rst:253
msgid "Caching dynamic resources like pages and trying to purge them on change is the dark, difficult side of caching. It's safest for items like files and images; hardest for the kind of complex, composite pages that are Plone's specialty."
msgstr ""

#: ../manage/deploying/stack.rst:258
msgid "Turn purging off and avoid aggressive caching unless you're prepared to monitor, experiment and measure."
msgstr ""

#: ../manage/deploying/stack.rst:261
msgid "Purge settings are extremely dependent on your proxy cache setup."
msgstr ""

#: ../manage/deploying/stack.rst:263
msgid "**In-memory cache**"
msgstr ""

#: ../manage/deploying/stack.rst:265
msgid "Here you are offered a simple tradeoff. Memory for speed. Allocate more memory to the in-memory cache and pages are served faster. Allocate less and they're rendered more frequently. Just don't cache so much that your server starts using swap space for Zope processes."
msgstr ""

#: ../manage/deploying/stack.rst:270
msgid "**Caching operations / Detailed settings**"
msgstr ""

#: ../manage/deploying/stack.rst:272
msgid "This is where you attach caching rules to resource types, and refine the caching rules. In general, stick with one of the profile settings (from **Import settings**) unless you're prepared to immerse yourself in caching detail."
msgstr ""

#: ../manage/deploying/testing_tuning/index.rst:2
msgid "Testing & Tuning Plone"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:3
msgid "Caching rules"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:9
msgid "How to program front end caching server (Varnish, Apache) to cache the content from Plone site and thus make it faster."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:15
msgid "Plone caching is configured using the `plone.app.caching <https://pypi.python.org/pypi/plone.app.caching>`_ add-on. It supplies a web user interface for cache configuration and default caching rules for Plone."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:20
msgid "Using only the web user interface, ``plone.app.caching`` is very flexible already.  This document mainly deals how you can combine ``plone.app.caching`` with your custom code."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:24
msgid "Internally ``plone.app.caching`` uses `z3c.caching <https://pypi.python.org/pypi/z3c.caching/>`_ which defines programming level ZCML directives to create your cache rules."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:28
msgid "``plone.app.caching`` does both:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:30
msgid "front end caching server support, and"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:32
msgid "in-memory cache in Zope."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:34
msgid "``plone.app.caching`` also defines default rules for various Plone out-of-the-box content views and item. See:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:37
msgid "https://github.com/plone/plone.app.caching/blob/master/plone/app/caching/caching.zcml"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:39
msgid "The caching operations (strong, moderate, weak) are defined in Python code itself, as they have quite tricky conditions. You can find the default operations here:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:43
msgid "https://github.com/plone/plone.app.caching/blob/master/plone/app/caching/operations/default.py"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:47
msgid "You usually don't need to override the operation classes itself. ``plone.app.caching`` provides web UI to override parameters, like timeout, for each rule, on the *Detailed settings* tab in cache control panel (Create per-ruleset parameters link)."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:54
msgid "Plone 3 has its own, older, caching mechanisms."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:58
msgid "Setting per-view cache rules"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:60
msgid "Here is an example how you can define a cache rules for your custom view class.  In this example we want to cache our site front page in Varnish, because is is very complex, and wakes up a lot of ZODB objects. The front page is programmed using :doc:`BrowserView </develop/plone/views/browserviews>`."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:65
msgid "Our front page is subject to moderate changes as new content comes in, but the changes are not time critical, so we define a one hour timeout for caching the front page."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:71
msgid "Currently, setting caching rules for view classes is not supported through the web, but using ZCML or Python is the way to go."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:74
msgid "In our case we are also using \"a dummy cache\" which does not provide purging through Plone |---| the only way to purge the front-end proxy is to do it from the Varnish control panel.  But that is OK, because if something bad ends up being cached, it will be gone in one hour."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:79
msgid "Here is our ``configure.zcml`` for our custom add-on ``browser`` package:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:110
msgid "After defining the rule and checking that the rule appears in the caching control panel, we'll:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:113
msgid "assign *Moderate caching* operation to *Homepage*;"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:115
msgid "on the *Detailed settings* tab we'll use the *Create per-ruleset* command to override timeout to be 1h instead of default 24h for *Homepage*."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:120
msgid "Do not enable the Zope RAM cache for page templates. Somehow, at some point, you will end up having some bad page HTML in Zope's internal cache and you have no idea how to clear it."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:126
msgid "If you are testing the rule on a local computer first, remember to re-do caching control panels in the production environment, as they are stored in the database."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:131
msgid "Testing the rule"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:133
msgid "First, we'll test the rule on our local development computer to make sure that it loads;"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:136
msgid "then we'll test the rule in the production environment with Varnish to see that Varnish picks up ``Expires`` header"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:141
msgid "To test ``plone.app.caching`` rules you need to run the site in production mode (not in the foreground).  Otherwise ``plone.app.caching`` is disabled."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:145
msgid "Here is an example showing how to test loading the page using the ``wget`` UNIX command-line utility (discard the retrieved document and print the HTTP response headers)::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:151
msgid "The output looks like this::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:171
msgid "We see that ``X-Cache-Operation`` and ``X-Cache-Rule`` from ``plone.app.caching`` debug info are present, so we know that it is setting HTTP headers correctly, so that the front end server (Varnish) will receive the appropriate directives."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:176
msgid "After deploying the change in the production environment, we'll check Varnish is picking up the rule. We fetch the page twice: first run is *cold* (not yet cached), the second run should be cached::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:183
msgid "The output::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:206
msgid "We'll see that you have **two** numbers on line from Varnish::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:210
msgid "These are Varnish internal timestamps: when the request was pulled to the cache and when it was served. If you see only one number on subsequent requests it means that Varnish is not caching the request (because it's fetching the page from Plone every time). If you see two numbers you know it is OK (and you can feel the speed)."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:218
msgid "http://stackoverflow.com/questions/6170962/plone-app-caching-for-front-page-only"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:221
msgid "Creating a \"cache forever\" view"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:223
msgid "You might create views which generate or produce resources (images, JS, CSS) in-fly. If you refer this views always through content unique URL you can cache the view result forever."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:227
msgid "This can be done"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:229
msgid "Using blob._p_mtime, or similar, to get the modified timestamp of the related content item. All persistent ZODB objects have _p_mtime"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:232
msgid "Setting *plone.stableResource* ruleset on the view"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:234
msgid "Related ZCML"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:260
msgid "Related view code:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:300
msgid "When we refer to the view in ``<img src>`` we use modified time parameter:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/caching.rst:323
msgid "Related ZCML registration:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:3
msgid "Cache decorators"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:7
msgid "How to use the Python decorator pattern to cache the result values of your computationally expensive method calls."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:15
msgid "Cache decorators are convenient methods caching of function return values."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:17
msgid "Use them like this::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:26
msgid "Cache decorators do not work with methods or functions that use generators (``yield``). The cache will end up storing an empty value."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:30
msgid "The `plone.memoize <https://pypi.python.org/pypi/plone.memoize>`_ package offers helpful function decorators to cache return values."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:33
msgid "See also :doc:`using memcached backend for memoizers </manage/deploying/testing_tuning/performance/ramcache>`."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:36
msgid "Cache result for process lifecycle"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:55
msgid "Timeout caches"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:57
msgid "The @ram.cache decorator takes a function argument and calls it to get a value. So long as that value is unchanged, the cached result of the decorated function is returned. This makes it easy to set a timeout cache::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:69
msgid "time.time() returns the time in seconds as a floating point number. \"//\" is Python's integer division. So, the result of ``time() // (60 * 60)`` only changes once an hour. ``args`` passed are ignored."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:75
msgid "Caching per request"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:77
msgid "This pattern shows how to avoid recalculating the same value repeatedly during the lifecycle of an HTTP request."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:81
msgid "Caching on BrowserViews"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:83
msgid "This is useful if the same view/utility is going to be called many times from different places during the same HTTP request."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:86
msgid "The `plone.memoize.view <https://github.com/plone/plone.memoize/blob/master/plone/memoize/view.txt>`_ package provides necessary decorators for ``BrowserView``-based classes."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:110
msgid "Caching on Archetypes accessors"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:112
msgid "If you have a custom :doc:`Archetypes accessor method </develop/plone/content/archetypes/fields>`, you can avoid recalculating it during the request processing."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:136
msgid "Caching using global HTTP request"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:138
msgid "This example uses the `five.globalrequest package <https://pypi.python.org/pypi/five.globalrequest>`_ for caching. Values are stored on the thread-local ``HTTPRequest`` object which lasts for the transaction lifecycle::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:173
msgid "Testing memoized methods inside browser views"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:175
msgid "While testing browser views memoized methods you could find out that calling a method multiple times inside a test could result in getting the same result over and over, no mater what the parameters are, because you have the same context and request inside the test and the result is being cached."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:180
msgid "One approach to by-pass this is to put your code logic inside a private method while memoizing a public method with the same name that only calls the private one:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:203
msgid "In your tests you can call the private method to avoid memoization."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:207
#: ../manage/deploying/testing_tuning/performance/ramcache.rst:220
msgid "Other resources"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:209
msgid "`plone.memoize source code <https://github.com/plone/plone.memoize/blob/master/plone/memoize/>`_"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/decorators.rst:211
#: ../manage/deploying/testing_tuning/performance/ramcache.rst:224
msgid "`zope.app.cache source code <http://svn.zope.org/zope.app.cache/trunk/src/zope/app/cache/>`_"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/index.rst:3
msgid "Performance and tuning"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/index.rst:5
msgid "Tips how to optimize your Plone code for maximum performance."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:3
msgid "About Instances and Threads, Performance and RAM consumption"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:9
msgid "Understanding how instances-per-core, threads-per-instance and ZODB-caches are influencing performance."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:15
msgid "In a usal production Zope/Plone setup there are some tunings possible. So you googled a bit and found that, for a certain size of site, you need more than one Zope-instance and use `HAproxy`_ or `Pound`_ to load-balance between them. Then you may ask yourself: How many instances do I need? Next you see there is value \"threads per instance\" and wonder about the different recommendations: Only one thread or two, or four? And how does it effect memory usage?"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:24
msgid "Rule Of The Thumb"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:26
msgid "A good **rule-of-the-thumb** for a common setup was and still is: **two instances per core, two threads per instance, adjust the number of objects in the ZODB cache to a number that your memory is used.**"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:30
msgid "**But attention!** If your setup gets more complex, if you have several logged in users or only anonymous users, if you use official, fancy, specific or home-grown add-ons: This rule may not apply."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:34
msgid "In this case you need to figure out yourself. It's more important to understand the mechanism behind than sticking to a rule."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:37
msgid "With recent, faster hardware and the (sometimes odd) behaviour of virtual machines (which can be very very different dependent on the kind of VM) this needs slight or major adjustment."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:42
msgid "Theory"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:49
msgid "Threads:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:45
msgid "A Zope instance is running a pool of threads. It queues an incoming request and dispatches it to a free thread. If no thread is free the request remains in the queue and is dispatched when a thread was freed. If all threads are used by long-running request-to-response cycles this may block such simple tasks as publishing a tiny icon."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:56
msgid "Database-Connection-Pool and its Cache:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:52
msgid "Once a thread runs, it requests a ZODB database connection from the connection pool. It locks the connection so no other thread can use it. The connection pool opens a new connection if all existing connections are already in use. If the request-to-response cycle is finished and the thread is freed the connection is released back to the pool."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:67
msgid "Memory Cache:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:59
msgid "Each connection has its own memory cache. The file-system cache is shared by all connections. Each cache can have the configured number of objects in memory. Having them in memory is important, because they are unpickled if loaded from the DB - and the process of unpickling is still expensive."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:64
msgid "An instance may never get enough load so that all available threads are used concurrently. In this case you may find in the ZMI (Zope-root -> Control_Panel -> Database -> Main DB) that there are only 2 connections, but you have 4 threads. That's because there were never 4 connections used in parallel."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:82
msgid "Instances and memory:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:70
msgid "An instance creates only a minimal memory usage overhead. If you have two instances with each 2 threads or one with 4 threads and all threads are used in both cases it wont make much a difference (~15-20MB overhead per instance at time of writing)."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:75
msgid "Now while Plone is running for some time another significant (but compared to ZODB cache low) amount of consumed RAM is used for RAM-caching inside Zope (i.e. with plone.memoize). RAM-cache is shared by all threads but not between instances. To optimize ram-caching in a multi-instance environment \"memcached\" may be used to optimize memory cache and cache-usage and reduce an instances memory footprint."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:82
msgid "But anyway, most memory is used (in a common setup) to cache the ZODB."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:90
msgid "Python GIL - global interpreter lock:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:85
msgid "Well yes, the GIL is mentioned here. In a threaded environment such as Zope is it has an impact on performance. But it is low and python was optimized over the years, also Zope has a lot of I/O which reduces the GIL impact. A good and important optimization is to set the right check interval for your machine. With `jarn.checkinterval`_ there's a good and simple to use tool to test for the right value."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:93
msgid "Practice"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:95
msgid "All theory is gray. But what does this mean for your setup if the rule-of-thumb above does not apply?"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:98
msgid "Get measurements! First of all you need to check yourself what happens on your machine(s), go and learn how to use `Munin`_ (with `munin.zope`_), HAproxy (or Pound), [tool of your choice here]. After that you'll get graphs of RAM, CPU, and load and some zope related values. HAproxy or Pound may mark a node as down because all threads were blocked by long running requests, identify these requests, `collective.stats`_ helps here."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:105
msgid "More instances or more threads? This question is asked often. And can not be answered without knowing more about the Plone system. We can divide it roughly into four kinds of systems:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:109
msgid "Only or almost logged in users,"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:110
msgid "Only or almost only anonymous visitors,"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:111
msgid "Mixed with many users and lots of hardware behind,"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:112
msgid "Mixed with few users and low-budget hardware."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:114
msgid "If you deal with logged in users there is no easy way to cache html-pages (highly recommended anyway for all static items) in a reverse proxy cache (i.e. `Varnish`_) in front of Plone. So Zope has much more work rendering pages. To render pages, objects need to be loaded form the database. Loading is expensive. If an object is already in the DB RAM cache it decreases the time to render a page significantly. So in a setup with lots of logged in users we need to take care almost all objects are loaded already. Each thread fetches a connection from the pool, each connection has its cache. If a user now requests a page it is first logged in and zope need a bunch of objects for this from the ZODB. Also other user specific information is loaded. Then user may operate in an intranet within a specific area, so these objects also need to be loaded. If we now have i.e 1 instance with 5 threads we have up to 5 pools (5 caches). All objects of interest are loaded in worst case 5 times. If there's 1 instance with 1 thread (1 cache) data is loaded only once. But if there is only one instance with one thread a browser shooting at the web-server with lots of requests at one time fills up the request queue of the instance and may time out soon. Also a second user may want to access data at the same time, but the only thread is blocked and the CPU idles. So the best is to stick users in a load-balancer (bind it to the __ac cookie) to 1 instance with 2 threads (also this can be adjusted dependent on your setup, test it yourself). Provide as much instances as you can (memory-consumption and cpu-usage will stop you). In such a setup usage of `memcached`_ is highly encouraged."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:137
msgid "If you have almost all anonymous users it is much easier. You can provide less instances (here rule-of-thumb 2 per core applies in most cases) and increase threads. Too many threads are not good, because of the GIL. You need to find the number yourself, it depends much on hardware. Here - w/o memcached configured - good results can be expected, because memory cache is used efficient. Increase objects per connection cache until your memory-consumption stops you and look always at your CPU usage."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:145
msgid "In large mixed environments with enough budget for hardware it is easy: Divide your environment in two, one for logged in users, one for anonymous - so above applies."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/instancesthreads.rst:149
msgid "In smaller mixed environments with less hardware behind you need to find your own balance. A good way is configuring your load balancer to stick logged-in users to one or two distinct instances. If there are more users this is kind of tricky and may take some time to figure out a good setup. So this is the most difficult setup."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:3
msgid "RAM cache"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:10
msgid "The RAM cache is a Zope facility to create custom in-process caches."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:13
msgid "Using memcached backend"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:15
msgid "By default, Zope uses an in-process memory cache. It is possible to replace this with ``memcached``."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:18
msgid "Advantages:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:20
msgid "All front-end clients share the cache."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:22
msgid "Cache survives over a client restart."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:25
msgid "Memoizers"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:27
msgid "Memoize's RAM cache can be replaced with a ``memcached`` backend with the following snippet."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:30
msgid "See the set-up for the https://plone.org/ site as an example:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:32
msgid "https://github.com/plone/Products.PloneOrg/blob/master/src/Products/PloneOrg/caching.py"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:35
msgid "RAM Cache"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:37
msgid "The RAM cache is used e.g. as a rendered template cache backend."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:39
msgid "You can add ``MemcachedManager`` to your Zope setup, and replace the RamCache instance in the ZMI with a new instance of ``MemcachedManager`` (keep the id the same)."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:43
msgid "https://pypi.python.org/pypi/Products.MemcachedManager"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:46
msgid "Using custom RAM cache"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:48
msgid "You want to use a custom cache if you think cache size or saturation will pose problems."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:51
msgid "The following advanced example shows how to enhance existing content type text and description accessors by performing HTML transformations and caching the result in a custom RAM cache."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:161
msgid "ZCacheable"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:163
msgid "``ZCacheable`` is an ancient Zope design pattern for caching.  It allows persistent objects that are subclasses of ``OFS.Cacheable`` to have the cache backend configured externally."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:167
msgid "The cache type (cache id) in use is stored :doc:`persistently </develop/plone/persistency/persistent>` per cache user object, but the cache can be created at runtime (RAM cache) or externally (``memcached``) depending on the situation."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:174
msgid "Do not use ``ZCacheable`` in new code."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:176
msgid "It takes optional backends which must be explicitly set::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:184
msgid "The ``RAMCache`` above is per thread. You cannot clear this cache for all ZEO clients easily."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:187
msgid "Some hints:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:189
msgid "It is enabled per persistent object::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:197
msgid "Get known cache backends::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:202
msgid "Disabling it (persistent change)::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:215
msgid "https://github.com/zopefoundation/Zope/blob/master/src/OFS/Cache.py"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:217
msgid "https://github.com/plone/plone.app.ldap/blob/master/plone/app/ldap/ploneldap/util.py"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/ramcache.rst:222
msgid "`plone.memoize source code <https://github.com/plone/plone.memoize/blob/master/plone/memoize/>`_."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:3
msgid "Performance tips"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:9
msgid "Tips for Plone performance tuning and making your add-on product and customizations faster."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:13
msgid "Profiling Plone"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:15
msgid "https://pypi.python.org/pypi/collective.profiler/"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:18
msgid "Optimizing ZEO and threads"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:20
msgid "For multicore systems, which basically all production systems nowadays are, you might want to optimize Python threading vs. processes. You may also tune how many Python interpreter instructions are run before doing green thread switches in the interpreter."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:25
msgid "https://mail.zope.org/pipermail/zodb-dev/2010-December/013897.html"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:28
msgid "Debugging slow threads in production"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:30
msgid "https://pypi.python.org/pypi/Products.LongRequestLogger"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:33
msgid "Memcached as session storage"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:35
msgid "Storing sessions in ZEO/ZODB does not scale well, since they are very prone to raise ``ConflictErrors`` if there is considerable load on the system."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:38
msgid "Memcached provides a more scalable session backend."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:40
msgid "For more information, see `lovely.session add-on product <https://pypi.python.org/pypi/lovely.session/0.2.2>`_."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:44
msgid "Input/output performance of the server"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:46
msgid "http://plope.com/Members/chrism/iostat_debugging"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:48
msgid "Summary::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:55
msgid "Tuning complex configurations"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:57
msgid "http://www.lovelysystems.com/the-decathlon-of-computer-science/"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:60
msgid "Reducing memory usage"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:62
msgid "These tips are especially critical when running Plone on low-memory virtual private server (VPS). But using the memory tips below, and some filesystem and operating system tweaks, it is also perfectly possible to run Plone on an ARM-based Android stick, or a Raspberry Pi. See http://polyester.github.io/"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:67
msgid "Disable extra languages"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:69
msgid "Add ``PTS_LANGUAGES`` to ``buildout.cfg`` to declare which .po files are loaded on the start-up::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:77
msgid "Upgrade DateTime"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:79
msgid "DateTime 3.x and higher use significant less memory than older versions. Pinning it to 3.0.3 (4.x not tested yet) has no known side effects on all Plone 4.1.x and 4.2.x sites, but can give up to a 20-25% reduction in memory use on lower-end hardware/virtualmachines."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:84
msgid "Large files"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:86
msgid "How to offload blob processing from Zope:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:88
msgid "http://www.slideshare.net/Jazkarta/large-files-without-the-trials"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:92
msgid "Sessions and performance"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:94
msgid "Write transactions much worse performance-wise than read transactions."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:96
msgid "By default, every login is a write transaction. Also, Plone needs to update the logged-in user's session timestamp once in a while to keep the session active."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:100
msgid "With a high amount of users, you may start seeing many ``ConflictErrors`` (read conflicts) with ZODB."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:103
msgid "There are some tricks you can use here:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:105
msgid "http://plone.293351.n2.nabble.com/the-mysterious-case-of-the-zope-sessions-that-shouldn-t-tp5731395p5731395.html"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:107
msgid "https://pypi.python.org/pypi/collective.beaker/"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:110
msgid "ZServer thread count"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:112
msgid "This specifies how many requests one ZEO front-end client (ZServer) can handle."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:115
msgid "The default set by buildout default is 2."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:117
msgid "Adjust it::"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:124
msgid "Find good value by doing performance testing for your site."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:128
msgid "Increasing thread count is useful if your Plone site does server-to-server traffic and your Plone site needs to wait for the other end, thus blocking Zope threads."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:134
#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:57
msgid "https://pypi.python.org/pypi/plone.recipe.zope2instance"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:137
msgid "XSendFile"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:139
msgid "XSendFile is an enhancement over HTTP front end proxy protocol which allows offloading of file uploads and downloads to the front end web server."
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:142
msgid "More info for Plone support:"
msgstr ""

#: ../manage/deploying/testing_tuning/performance/tips.rst:144
msgid "https://github.com/collective/collective.xsendfile"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/boilerplate_tests.rst:3
msgid "Boilerplate tests"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/boilerplate_tests.rst:5
msgid "These are test snippets useful for common use cases."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/boilerplate_tests.rst:8
msgid "See https://plone.org/documentation/manual/developer-manual/testing/writing-a-plonetestcase-unit-integration-test to learn about PloneTestCase helper methods."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/boilerplate_tests.rst:12
msgid "Test portal title::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/boilerplate_tests.rst:18
msgid "Test if view is protected::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/boilerplate_tests.rst:27
msgid "Test if object exists in folder::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/boilerplate_tests.rst:33
msgid "Javascript registered::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/boilerplate_tests.rst:41
msgid "CSS registered::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/boilerplate_tests.rst:49
msgid "Test that a certain skin layer is present in portal_skins::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:3
msgid "Clean uninstall"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:7
msgid "How to test that your Plone add-on uninstalls cleanly"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:14
msgid "Clean uninstall means that removing your add-on does not leave Plone site to broken state. Sometimes damage might not be noticed immediately, causing great frustration for the users."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:17
msgid "Clean uninstall procedure is"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:19
msgid "Use ``Add on installer`` to uninstall any add-ons. This MUST remove all add-on Python objects from the site ZODB database"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:22
msgid "Remove eggs from the buildout, rerun buildout"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:24
msgid "If there are any Python objects, which classes come from the removed egg, around the site cannot be exported or imported anymore. Also, Plone upgrade might fail."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:29
msgid "Clean uninstall test procedure"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:31
msgid "Manual procedure"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:33
msgid "Create a Plone site from buildout, with your add-on egg present"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:35
msgid "Install your add-on"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:37
msgid "Play around with add-on to make sure it stores all its data (settings, local utilities, annotations, etc.)"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:40
msgid "Uninstall add-on"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:42
msgid "Export Plone site through ZMI as zexp"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:44
msgid "Create another Plone site from vanilla buildout (no any add-ons installed)"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:46
msgid "Import .zexp"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:48
msgid "If .zexp does not contain any objects from your add-on egg, which is missing in vanilla Plone installation, your add-on installs cleanly"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:52
msgid "Example unit test"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/clean_uninstall.rst:54
msgid "This code shows how to test that certain :doc`annotations </components/annotations>` are correctly cleaned."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:3
msgid "Doctests"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:5
msgid "Doctests are way to do tests with interactive Python interpreter."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:7
msgid "https://plone.org/documentation/tutorial/testing/doctests"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:10
msgid "Doctests and pdb"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:12
msgid "Python debugger (pdb) works little differently when invoked from doctests."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:14
msgid "Your locals stack frame is not what you might expect and refers to doctests internals::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:19
msgid "Corrective action is to go one level up in the stack::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:30
msgid "Interlude"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:32
msgid "Interlude is a Python package, which you can use to start an interactive Python shell from doctests, bypassing the limitations described above."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:35
msgid "Just depend on 'interlude' and pass it via the globs dict to the doctest or import it from there::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:41
msgid "When the testrunner passes interact, you'll get an interactive Python prompt."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:43
msgid "For more information see: https://pypi.python.org/pypi/interlude"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:47
msgid "Get fields from browser"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:49
msgid "The most common operation when using a doctest is filling fields of a form::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:53
msgid "One common problem with this is that you can get an ``LookupError: name ...``. If there is a typo, or the field does not exist, etc etc."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/doctests.rst:56
msgid "A quick way to see which fields exist on the current browser helps a lot while debugging test failures::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/error_log.rst:3
msgid "Site error log service"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/error_log.rst:5
msgid "Plone sites contain error log service which is located as *error_log* in the site root. It logs site exceptions and makes the tracebacks accessible from Plone control panel and ZMI."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/error_log.rst:8
msgid "The service is somewhat archaic and can log exceptions only, not plain error messages."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/error_log.rst:12
msgid "Example how to add exceptions to error log"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/error_log.rst:0
#: ../manage/troubleshooting/exceptions.rst:0
#: ../manage/troubleshooting/exceptions.rst:0
#: ../manage/troubleshooting/exceptions.rst:0
msgid "Todo"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/error_log.rst:14
msgid "Complete \"Example how to add exceptions to error log\""
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:3
msgid "Functional testing"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:7
msgid "Functional testing tool allows you to use scripted browser to load pages from your site and fill in forms automatically."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:16
msgid "PloneTestCase product provides `FunctionalTestCase <https://github.com/plone/Products.PloneTestCase/blob/master/Products/PloneTestCase/PloneTestCase.py>`_ base class for functional testing. Unlike unit tests, functional tests simulate real HTTP requests with transaction life cycle."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:19
msgid "Functional tests has different transaction for each browser.open() request"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:21
msgid "Functional tests do traversing and can check e.g. for cookie based permissions"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:23
msgid "Unit test method is executed in a single transaction and this might make impossible to test cache related behavior"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:27
msgid "Test browser"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:29
msgid "Plone uses Products.Five.testbrowser as an browser emulator used in functional tests. It is based on zope.testbrowser package. You can find more information in the `zope.testbrowser docs home page <https://pypi.python.org/pypi/zope.testbrowser>`_. The API is described in `zope.testbrowser.interfaces (3.4 used by Plone 3) <http://svn.zope.org/zope.testbrowser/tags/3.4.2/src/zope/testbrowser/interfaces.py?rev=81337&view=markup>`_."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:35
msgid "There also exists old `zc.testbrowser <https://pypi.python.org/pypi/zc.testbrowser>`_, which is a different package with similar name."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:38
msgid "All code assumes here is is executed in unit test context where self.portal is your unit test site instance."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:41
msgid "Recording tests"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:43
msgid "You can record functional tests through the browser. Think it as a Microsoft Word macro recoder kind of thing."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:45
msgid "http://pyyou.wordpress.com/2008/04/11/how-to-install-zopetestrecorder-with-buildout/"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:47
msgid "https://pypi.python.org/pypi/zope.testrecorder"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:50
msgid "Functional test skeleton"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:52
msgid "First see collective.testlayer package which does some of the things described below"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:55
msgid "https://pypi.python.org/pypi/collective.testcaselayer"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:57
msgid "Example code::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:107
msgid "Preparing error logger"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:109
msgid "Since zope.testbrowser uses normal Plone paging mechanism, you won't get nice tracebacks to your console."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:111
msgid "The following snippet allows you to extract traceback data from site.error_log utility and print it to the console. Put it to your afterSetUp()::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:126
msgid "Opening an URL"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:137
msgid "Logging in"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:150
msgid "Logout"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:163
msgid "Showing the contents from the last request"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:165
msgid "After test browser has opened an URL its content can be read from browser.contents variable."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:173
msgid "Getting a form handler"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:175
msgid "You can use testbrowser ``getForm()`` to access different forms on a page."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:177
msgid "Form look-up is available by ``name`` or ``index``."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:184
msgid "Listing available form controls"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:186
msgid "You can do the following to know what content your form has eaten"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:188
msgid "the mechanize browser instance that is used through zope.testbrowser. zope.testbrowser internally uses a testbrowser provided by the mechanize package. The mechanize objects are saved in browser.mech_browser and as attributes on different other instances returned by zope.testbrowser. mechanize has a different, less convenient api, but also provides more options. To see a list of all controls in a for you can do e.g.::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:203
msgid "... or one-liner ...::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:207
msgid "the HTML page source code::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:213
msgid "Filling in a text field on  a page"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:215
msgid "You can manipulate ``value`` of various form input controls."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:217
msgid "Example how to submit Plone search page::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:237
msgid "Selecting a checkbox"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:239
msgid "Checkboxes are usually presented as name:list style names::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:245
msgid "Clicking a button"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:252
msgid "If you have a form instance, you can use the submit action. To click on the Button labeled \"Log in\" in the login form, you do::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:259
msgid "Checking Unauthorized response"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:291
msgid "Another example where test browser / Zope 2 publisher where invalidly handling Unauthorized exception::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:313
msgid "Checking a HTTP response header"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:315
msgid "Exaple:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:317
msgid "self.assertEqual(self.browser.headers[\"Content-type\"], 'application/octet-stream')"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:320
msgid "Checking HTTP exception"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:322
msgid "Example how to check for HTTP 500 Internal Server Error::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:338
msgid "Setting test browser headers"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:340
msgid "Headers must be passed to underlying PublisherMechanizeBrowser instance and test browser must be constructed based on this instance."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:345
msgid "When passing parameters to PublisherMechanizeBrowser.addheaders HTTP prefix will be automatically added to header name."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:349
msgid "Add header to browser"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:358
msgid "Setting user agent"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/functional_testing.rst:398
msgid "https://mail.zope.org/pipermail/zope3-users/2008-May/007871.html"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/index.rst:3
msgid "Testing and debugging"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/index.rst:5
msgid "This section contains tips how to test and debug your code."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:3
msgid "Logging"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:7
msgid "How to write log output from your Plone add-on program code"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:14
msgid "`Python logging package <http://docs.python.org/library/logging.html>`_ is used to log from Plone."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:17
msgid "Log file location"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:19
msgid "By default, logs go to ``var/log`` folder under buildout."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:21
msgid "If Zope instance is started in the foreground mode logs will be printed in the console (stdout)."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:24
msgid "Plone log filename varies depending on the installation mode (Zope, ZEO cluster). But for each instance there are two log files"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:27
msgid "Event logs (errors), normally called *instance.log*"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:29
msgid "HTTP request log (Apache compatible), normally called *Z2.log*"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:32
msgid "Viewing logs in real time"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:34
msgid "UNIX'y way for your terminal."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:36
msgid "Open error log viewer using ``tail`` command (print content from file end) and wait for further file writes"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:43
msgid "Press CTRL+C to abort."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:46
#: ../manage/deploying/zope.rst:72
msgid "Log level"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:48
msgid "Default log level is ``INFO``. To enable more verbose logging, edit ``buildout.cfg``,"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:50
msgid "Change log level by editing ``[instance]`` section ``event-log-level``::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:55
#: ../manage/deploying/zope.rst:176
#: ../manage/troubleshooting/buildout.rst:117
msgid "More information"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:60
msgid "Logging from Python code"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:75
msgid "Logging from page templates and RestrictedPython scripts"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:77
msgid "Python ``logging`` module doesn't provide Zope 2 security assertations and does not work in :doc:`RestrictedPython Python scripts </develop/plone/security/sandboxing>`."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:80
msgid "However, you can use ``context.plone_log()`` method logging in the sandboxed execution mode."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:87
msgid "Forcing log level and output"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:89
msgid "The following snippet forces the log level of Python logging for the duration of the process by modifying the root logger object::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:104
msgid "Temporarily capturing log output"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:106
msgid "You can capture Python logging output temporarily to a string buffer. This is useful if you want to use logging module to record the status of long running operations and later show to the end user, who does not have access to file system logs, how the operation proceeded."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:112
msgid "Below is an :doc:`BrowserView </develop/plone/views/browserviews>` code example."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:228
msgid "The related page template"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:278
msgid "transaction_note()"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:280
msgid "Leave a note on Zope's *History* tab."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/logging.rst:282
msgid "https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/utils.py#L382"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:3
msgid "Python debugging"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:7
msgid "Using Python command-line debugger (``pdb``) to debug Plone and Python applications."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:15
msgid "The Python debugger (``pdb``) is an interactive command-line debugger."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:17
msgid "It is very limited in functionality, but it will work in every environment and type of console. Plone also has through-the-web-browser PBD debugging add-on products."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:23
msgid "``pdb`` is not the same as the Python interactive shell. ``pdb`` allows you to step through the code, whilst the Python shell allows you just to inspect and manipulate objects."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:27
msgid "If you wish to play around with Zope in interactive Python shell or run scripts instead of debugging (exceptions), please read :doc:`Command line </develop/plone/misc/commandline>` documentation."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:31
msgid "See also"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:35
msgid "Using ``pdb``"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:40
msgid "# Go to your code and insert the statement ``import pdb; pdb.set_trace()`` at"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:38
msgid "the point where you want have a closer look.  Next time the code is run, the execution will stop there and you can examine the current context variables from a Python command prompt."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:43
msgid "# After you have added ``import pdb; pdb.set_trace()`` to your code, stop"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:43
msgid "Zope and start it in the foreground using the ``bin/instance fg`` command."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:47
msgid "# TextMate support for ``pdb`` can be found at"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:46
msgid "`https://pypi.python.org/pypi/PdbTextMateSupport/0.3 <https://pypi.python.org/pypi/PdbTextMateSupport/0.3>`_."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:51
msgid "# ``mr.freeze`` allows traces to be added without restarting:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:50
msgid "`https://pypi.python.org/pypi/mr.freeze <https://pypi.python.org/pypi/mr.freeze>`_."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:73
msgid "Pretty printing objects"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:110
msgid "Useful ``pdb`` commands"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:112
msgid "Just type the command and hit enter."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:115
msgid "``s``"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:115
msgid "step into, go into the function in the cursor"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:118
msgid "``n``"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:118
msgid "step over, execute the function under the cursor without stepping into it"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:121
msgid "``c``"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:121
msgid "continue, resume program"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:124
msgid "``w``"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:124
msgid "where am I? displays current location in stack trace"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:127
msgid "``b``"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:127
msgid "set breakpoint"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:130
msgid "``cl``"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:130
msgid "clear breakpoint"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:133
msgid "``bt``"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:133
msgid "print stack trace"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:136
msgid "``up``"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:136
msgid "go to the scope of the caller function"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:139
msgid "``pp``"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:139
msgid "pretty print object"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:143
msgid "``until``"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:142
msgid "Continue execution until the line with the line number greater than the current one is reached or when returning from current frame"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:147
msgid "The ``until`` command (or ``unt``) is available only on Plone 4.x or superior as it is a new feature provided by the ``pdb`` module under Python 2.6."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:153
msgid "Useful ``pdb`` snippets"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:155
msgid "Output object's class::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:159
msgid "Output object attributes and methods::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:163
msgid "Print local variables in the current function::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:167
msgid "Dumping incoming HTTP GET or HTTP POST::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:172
msgid "Executing code on the context of the current stack frame::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:184
msgid "The example above will modify the previous value of the variable ``my_tags`` in the current stack frame."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:189
msgid "Automatically start debugger when exception is raised (browser)"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:191
msgid "You can start interactive through-the-browser Python debugger when your site throws an exception."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:194
msgid "Instead of getting \"We're sorry there seems to be an error...\" page you get a pdb prompt which allows you to debug the exception. This is also known as post-mortem debugging."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:198
msgid "This can be achieved with ` `Products.PDBDebugMode`` add-on."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:200
msgid "https://pypi.python.org/pypi/Products.PDBDebugMode"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:205
msgid "PDBDebugMode is not safe to install on the production server due to sandbox security escape."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:210
msgid "Automatically start debugger when exception is raised (command line)"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:214
msgid "This cannot be directly applied to a web server, but works with command line scripts."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:219
msgid "This does not work with Zope web server launch as it forks a process."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:225
msgid "Hit ``c`` and ``enter`` to start the application. It keeps running, until an uncaught exception is raised. At this point, it falls back to the ``pdb`` debug prompt."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:230
#: ../manage/troubleshooting/basic.rst:135
#: ../manage/troubleshooting/images.rst:110
msgid "For more information see"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/pdb.rst:232
msgid "http://docs.python.org/library/pdb.html"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:3
msgid "Unit testing"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:10
msgid "Unit tests are automated tests created by the developer to ensure that the add-on product is intact in the current product configuration. Unit tests are regression tests and are designed to catch broken functionality over the code evolution."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:16
msgid "Running unit tests"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:18
msgid "Since Plone 4, it is recommended to use ``zc.testrunner``  to run the test suites.  You need to add it to your ``buildout.cfg``, so that the ``test`` command will be generated."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:35
msgid "Running tests for one package:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:41
msgid "Running tests for one test case:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:47
msgid "Running tests for two test cases:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:53
msgid "To drop into the pdb debugger after each test failure:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:59
msgid "To exclude tests:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:65
msgid "To list tests that will be run:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:71
msgid "The following will run tests for *all* Plone add-ons: useful to check whether you have a set of component that function well together:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:80
msgid "The test runner does not give an error if you supply invalid package and test case name.  Instead it just simply doesn't execute tests."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:83
#: ../manage/troubleshooting/buildout.rst:364
msgid "More information:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:85
msgid "https://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-3-x-to-4.0/updating-add-on-products-for-plone-4.0/no-longer-bin-instance-test-use-zc.recipe.testrunner"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:88
msgid "AttributeError: 'module' object has no attribute 'test_suite'"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:90
msgid "If you get the above error message there are two potential reasons:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:92
msgid "You have both a ``tests.py`` file and a ``tests`` folder."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:94
msgid "Old version: Zope version X unit test framework was updated not to need an explicit ``test_suite`` declaration in the ``test`` module any more. Instead, all subclasses of ``TestCase`` are automatically picked. However, this change is backwards incompatible."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:100
msgid "Test coverage"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:102
msgid "Zope test running can show how much of your code is covered by automatic tests:"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:105
msgid "https://pypi.python.org/pypi/plone.testing#coverage-reporting"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:108
msgid "Running tests against Python egg"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:110
msgid "You might need to add additional setup.py options to get your tests work"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:112
msgid "http://rpatterson.net/blog/running-tests-in-egg-buildouts"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:115
msgid "Creating unit tests"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:117
msgid "For any new test suites, you should be using `plone.app.testing`, your next step should be to `read the documentation </external/plone.app.testing/docs/source>`."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:120
msgid "You may come across `Products.PloneTestCase <https://pypi.python.org/pypi/Products.PloneTestCase>` in older code. Also interesting is `ZopeTestCase <http://www.zope.org/Members/shh/ZopeTestCaseWiki/ApiReference>`."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:124
msgid "Miscallaneous hints"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:127
msgid "Setting log level in unit tests"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:129
msgid "Many components use the ``DEBUG`` output level, while the default output level for unit testing is ``INFO``.  Import messages may go unnoticed during the unit test development."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:133
msgid "Add this to your unit test code::"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:143
msgid "Test outgoing email messages"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:145
msgid "The ``MailHost`` code has changed in Plone 4. For more detail about the changes please read the relevant section in the `Plone Upgrade Guide`_. According to that guide we can reuse some of the test code in ``Products.CMFPlone.tests``."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:152
msgid "Here's some example of a ``unittest.TestCase`` based on the excellent ``plone.app.testing`` framework. Adapt it to your own needs."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:237
msgid "Unit testing and the Zope component architecture"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:239
msgid "If you are dealing with the Zope component architecture at a low level in your unit tests, there are some things to remember, because the global site manager doesn't behave properly in unit tests."
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:243
msgid "See discussion: http://plone.293351.n2.nabble.com/PTC-global-components-bug-tp3413057p3413057.html"
msgstr ""

#: ../manage/deploying/testing_tuning/testing_and_debugging/unit_testing.rst:245
msgid "Below are examples how to run special ZCML snippets for your unit tests."
msgstr ""

#: ../manage/deploying/wsgi.rst:3
msgid "WSGI"
msgstr ""

#: ../manage/deploying/wsgi.rst:10
msgid "WSGI is Python standard for hosting Python web services."
msgstr ""

#: ../manage/deploying/wsgi.rst:12
msgid "https://wsgi.readthedocs.org/en/latest/"
msgstr ""

#: ../manage/deploying/wsgi.rst:14
msgid "http://repoze.org/"
msgstr ""

#: ../manage/deploying/wsgi.rst:18
msgid "Plone and WSGI"
msgstr ""

#: ../manage/deploying/wsgi.rst:20
msgid "Collection of inks about this topic, since this is a very special topic we also link to documentation about WSGI and Plone 4 for reference."
msgstr ""

#: ../manage/deploying/wsgi.rst:22
msgid "`Plone 4 with WSGI <http://comments.gmane.org/gmane.comp.web.zope.plone.devel/23886>`_"
msgstr ""

#: ../manage/deploying/wsgi.rst:24
msgid "`Plone 5 with WSGI <http://blog.toms-projekte.de/run-plone-with-wsgi.html>`_"
msgstr ""

#: ../manage/deploying/zope.rst:3
msgid "Zope Application Server"
msgstr ""

#: ../manage/deploying/zope.rst:7
msgid "Plone is usually run via the Zope application server. This document covers control and configuration of parts of the application server."
msgstr ""

#: ../manage/deploying/zope.rst:18
msgid "This page contains instructions how to configure Zope application server."
msgstr ""

#: ../manage/deploying/zope.rst:21
msgid "Zope control command"
msgstr ""

#: ../manage/deploying/zope.rst:23
msgid "The command for Zope tasks is ``bin/instance`` in buildout-based Plones (depending on how the part(s) for the Zope instance(s) was named in the buildout configuration file; here, it's ``instance``)."
msgstr ""

#: ../manage/deploying/zope.rst:27
msgid "List available commands::"
msgstr ""

#: ../manage/deploying/zope.rst:31
msgid "For older Plone releases, the command is ``zopectl``."
msgstr ""

#: ../manage/deploying/zope.rst:33
msgid "If you have installed a ZEO cluster, you may have multiple instances, typically named client1, client2 .... Substitute ``client#`` for ``instance`` below. The zeoserver part must be running before you may directly use a client command::"
msgstr ""

#: ../manage/deploying/zope.rst:41
msgid "Adding users from command-line (reset admin password)"
msgstr ""

#: ../manage/deploying/zope.rst:43
msgid "You need to do this when you forget the admin password or the database is damaged."
msgstr ""

#: ../manage/deploying/zope.rst:46
msgid "Add user with Zope Manager permissions::"
msgstr ""

#: ../manage/deploying/zope.rst:52
msgid "You need to stop the site first."
msgstr ""

#: ../manage/deploying/zope.rst:54
msgid "You also cannot override an existing ``admin`` user, so you probably want to add ``admin2``."
msgstr ""

#: ../manage/deploying/zope.rst:59
msgid "https://plone.org/documentation/faq/locked-out"
msgstr ""

#: ../manage/deploying/zope.rst:62
msgid "Timezone"
msgstr ""

#: ../manage/deploying/zope.rst:64
msgid "Add to the ``[instance]`` part in ``buildout.cfg``:"
msgstr ""

#: ../manage/deploying/zope.rst:74
msgid "The default log level in Zope is ``INFO``. This causes a lot of logging that is usually not needed."
msgstr ""

#: ../manage/deploying/zope.rst:77
msgid "To reduce the size of log files and improve performance, add the following to the ``[instance]`` part (the part(s) that specify your Zope instances) in ``buildout.cfg``:"
msgstr ""

#: ../manage/deploying/zope.rst:88
msgid "Creating additional debug instances"
msgstr ""

#: ../manage/deploying/zope.rst:90
msgid "You might want to keep your production ``buildout.cfg`` and development configuration in sync automatically as possible."
msgstr ""

#: ../manage/deploying/zope.rst:94
msgid "A good idea is to use the same ``buildout.cfg`` for every Plone environment. For conditional things, such as turning debug mode on, extend the buildout sections, which in turn create scripts to launch additional Zope clients in the ``bin/`` folder:"
msgstr ""

#: ../manage/deploying/zope.rst:126
msgid "And now you can start your **development** Zope as:"
msgstr ""

#: ../manage/deploying/zope.rst:132
msgid "And your main Zope instance stays in production mode:"
msgstr ""

#: ../manage/deploying/zope.rst:140
msgid "Starting Zope with the ``fg`` command forces it into debug mode, but does not change the log level."
msgstr ""

#: ../manage/deploying/zope.rst:144
msgid "Virtual hosting"
msgstr ""

#: ../manage/deploying/zope.rst:146
msgid "Zope has a component called Virtual Host Monster which does the virtual host mapping inside Zope. More information can be found in the `zope book <http://docs.zope.org/zope2/zope2book/VirtualHosting.html>`_"
msgstr ""

#: ../manage/deploying/zope.rst:150
msgid "Suppressing virtual host monster"
msgstr ""

#: ../manage/deploying/zope.rst:152
msgid "If you ever mess up your virtual hosting rules so that Zope locks you out of the management interface, you can add ``_SUPPRESS_ACCESSRULE`` to the URL to disable VirtualHostMonster."
msgstr ""

#: ../manage/deploying/zope.rst:158
msgid "Import and export"
msgstr ""

#: ../manage/deploying/zope.rst:160
msgid "Zope application server allows copying parts of the tree structure via import/export feature. The exported file is basically a Python pickle containing the chosen node and all child nodes."
msgstr ""

#: ../manage/deploying/zope.rst:165
msgid "Importable ``.zexp`` files must be placed on ``/parts/instance/import`` buildout folder on the server. If you are using  clustered ZEO set-up, always run imports through a specific front-end instance by using direct port access. Note that ``parts`` folder structure is pruned on each buildout run."
msgstr ""

#: ../manage/deploying/zope.rst:172
msgid "When files are placed on the server to correct folder, the :guilabel:`Import/Export` tab in the :term:`ZMI` will pick them up in the selection drop down. You do not need to restart Zope."
msgstr ""

#: ../manage/deploying/zope.rst:178
msgid "http://quintagroup.com/services/support/tutorials/import-export-plone/"
msgstr ""

#: ../manage/deploying/zope.rst:181
msgid "Regular database packing"
msgstr ""

#: ../manage/deploying/zope.rst:183
msgid "The append-only nature of the :doc:`ZODB </develop/plone/persistency/database>` makes the database grow continuously even if you only edit old information and don't add any new content. To make sure your server's hard disk does not fill up, you need to pack the ZODB automatically and regularly."
msgstr ""

#: ../manage/deploying/zope.rst:191
msgid "http://stackoverflow.com/questions/5300886/what-is-the-suggested-way-to-cron-automate-zodb-packs-for-a-production-plone-ins/"
msgstr ""

#: ../manage/deploying/zope.rst:194
msgid "Copying a remote site database"
msgstr ""

#: ../manage/deploying/zope.rst:196
msgid "Below is a UNIX shell script to copy a remote Plone site(s) database to your local computer. This is useful for synchronizing the development copy of a site from a live server."
msgstr ""

#: ../manage/deploying/zope.rst:200
msgid "``copy-plone-site.sh``"
msgstr ""

#: ../manage/deploying/zope.rst:247
msgid "Pack and copy big ``Data.fs``"
msgstr ""

#: ../manage/deploying/zope.rst:249
msgid "Pack ``Data.fs`` using the `pbzip2 <http://compression.ca/pbzip2/>`_, efficient multicore bzip2 compressor, before copying:"
msgstr ""

#: ../manage/deploying/zope.rst:265
msgid "Then copy to your own computer:"
msgstr ""

#: ../manage/deploying/zope.rst:271
msgid "... or using ``rsync`` which can resume:"
msgstr ""

#: ../manage/deploying/zope.rst:278
msgid "Creating a sanitized data drop"
msgstr ""

#: ../manage/deploying/zope.rst:280
msgid "A *sanitized* data drop is a Plone site where:"
msgstr ""

#: ../manage/deploying/zope.rst:282
msgid "all user passwords have been reset to one known one;"
msgstr ""

#: ../manage/deploying/zope.rst:284
msgid "all history information is deleted (packed), so that it does not contain anything sensitive;"
msgstr ""

#: ../manage/deploying/zope.rst:287
msgid "other possible sensitive data has been removed."
msgstr ""

#: ../manage/deploying/zope.rst:289
msgid "It should safe to give a sanitized copy to a third party."
msgstr ""

#: ../manage/deploying/zope.rst:291
msgid "Below is a sample script which will clean a Plone site in-place."
msgstr ""

#: ../manage/deploying/zope.rst:295
msgid "Because sensitive data varies depending on your site this script is just an example."
msgstr ""

#: ../manage/deploying/zope.rst:298
msgid "How to use:"
msgstr ""

#: ../manage/deploying/zope.rst:300
msgid "Create a temporary copy of your Plone site on your server, running on a different port."
msgstr ""

#: ../manage/deploying/zope.rst:303
msgid "Run the cleaner by entering the URL. It is useful to run the temporary copy in foreground to follow the progress."
msgstr ""

#: ../manage/deploying/zope.rst:306
msgid "Give the sanitized copy away."
msgstr ""

#: ../manage/deploying/zope.rst:308
msgid "This script has two options for purging data:"
msgstr ""

#: ../manage/deploying/zope.rst:310
msgid "*Safe purge* using the Plone API (slow, calls all event handlers)."
msgstr ""

#: ../manage/deploying/zope.rst:312
msgid "*Unsafe purge* by directly pruning data, rebuilding the catalog without triggering the event handlers."
msgstr ""

#: ../manage/deploying/zope.rst:315
msgid "The sample ``clean.py``:"
msgstr ""

#: ../manage/deploying/zope.rst:495
msgid "Example view registration in ZCML requiring admin privileges to run the cleaner:"
msgstr ""

#: ../manage/deploying/zope.rst:508
msgid "Log rotate"
msgstr ""

#: ../manage/deploying/zope.rst:510
msgid "Log rotation prevents log files from growing indefinitely by creating a new file for a certain timespan and dropping old files."
msgstr ""

#: ../manage/deploying/zope.rst:514
msgid "Basic Log rotation for buildout users"
msgstr ""

#: ../manage/deploying/zope.rst:516
msgid "If you are using buildout and the plone.recipe.zope2instance (>= 4.2.5) to create your zope installation, two parameters are available to enable log rotation. For example:"
msgstr ""

#: ../manage/deploying/zope.rst:520
msgid "event-log-max-size = 10mb"
msgstr ""

#: ../manage/deploying/zope.rst:522
msgid "event-log-old-files = 3"
msgstr ""

#: ../manage/deploying/zope.rst:524
msgid "This will rotate the event log when it reaches 10mb in size. It will retain a maximum of 3 files. Similar directives are also available for the access log."
msgstr ""

#: ../manage/deploying/zope.rst:527
msgid "access-log-max-size = 100mb"
msgstr ""

#: ../manage/deploying/zope.rst:529
msgid "access-log-old-files = 10"
msgstr ""

#: ../manage/deploying/zope.rst:532
msgid "Using the unix tool ''logrotate''"
msgstr ""

#: ../manage/deploying/zope.rst:534
msgid "You need to rotate Zope access and error logs, plus possible front-end web server logs. The latter is usually taken care of your operating system."
msgstr ""

#: ../manage/deploying/zope.rst:537
msgid "To set-up log rotation for Plone:"
msgstr ""

#: ../manage/deploying/zope.rst:539
msgid "Install ``logrotate`` on the system (if you don't already have one)."
msgstr ""

#: ../manage/deploying/zope.rst:541
msgid "You need to know the effective UNIX user as which Plone processes run."
msgstr ""

#: ../manage/deploying/zope.rst:543
msgid "Edit log rotation configuration files to include Plone log directories."
msgstr ""

#: ../manage/deploying/zope.rst:545
msgid "Do a test run."
msgstr ""

#: ../manage/deploying/zope.rst:547
msgid "To add a log rotation configuration file for Plone add a file ``/etc/logrotate.d/yoursite`` as root."
msgstr ""

#: ../manage/deploying/zope.rst:552
msgid "This recipe applies only for single-process Zope installs.  If you use ZEO clustering you need to do this little bit differently."
msgstr ""

#: ../manage/deploying/zope.rst:555
msgid "The file contains:"
msgstr ""

#: ../manage/deploying/zope.rst:582
msgid "Then do a test run of logrotate, as root:"
msgstr ""

#: ../manage/deploying/zope.rst:590
msgid "And if you want to see the results right away:"
msgstr ""

#: ../manage/deploying/zope.rst:597
msgid "In normal production, logrotate is added to your operating system *crontab* for daily runs automatically."
msgstr ""

#: ../manage/deploying/zope.rst:602
msgid "http://linuxers.org/howto/howto-use-logrotate-manage-log-files"
msgstr ""

#: ../manage/deploying/zope.rst:604
msgid "http://docs.zope.org/zope2/zope2book/MaintainingZope.html"
msgstr ""

#: ../manage/deploying/zope.rst:606
msgid "http://serverfault.com/questions/57993/how-to-use-wildcards-within-logrotate-configuration-files"
msgstr ""

#: ../manage/deploying/zope.rst:609
msgid "Log rotate and chroot"
msgstr ""

#: ../manage/deploying/zope.rst:611
msgid "``chroot``'ed environments don't usually get their own cron. In this case you can trigger the log rotate from the parent system."
msgstr ""

#: ../manage/deploying/zope.rst:614
msgid "Add in the parent ``/etc/cron.daily/yourchrootname-logrotate``"
msgstr ""

#: ../manage/deploying/zope.rst:622
msgid "Log rotate generation via buildout using UNIX logrotate command"
msgstr ""

#: ../manage/deploying/zope.rst:624
msgid "``buildout.cfg``:"
msgstr ""

#: ../manage/deploying/zope.rst:633
msgid "``templates/logrotate.conf``::"
msgstr ""

#: ../manage/deploying/zope.rst:658
msgid "http://stackoverflow.com/a/9437677/315168"
msgstr ""

#: ../manage/deploying/zope.rst:661
msgid "Log rotate on Windows"
msgstr ""

#: ../manage/deploying/zope.rst:663
msgid "Use ``iw.rotatezlogs``"
msgstr ""

#: ../manage/deploying/zope.rst:665
msgid "http://stackoverflow.com/a/9434150/315168"
msgstr ""

#: ../manage/deploying/zope.rst:668
msgid "Email notifications for errors"
msgstr ""

#: ../manage/deploying/zope.rst:670
msgid "Please see:"
msgstr ""

#: ../manage/deploying/zope.rst:672
msgid "http://stackoverflow.com/questions/5993334/error-notification-on-plone-4"
msgstr ""

#: ../manage/deploying/zope.rst:675
msgid "Adding multiple file storage mount points"
msgstr ""

#: ../manage/deploying/zope.rst:677
msgid "https://pypi.python.org/pypi/collective.recipe.filestorage"
msgstr ""

#: ../manage/index.rst:2
msgid "Installing, Managing and Updating Plone"
msgstr ""

#: ../manage/index.rst:14
msgid "Automating Plone Deployment"
msgstr ""

#: ../manage/installing/hotfixes.rst:3
msgid "Installing security updates"
msgstr ""

#: ../manage/installing/hotfixes.rst:7
msgid "How to install security hotfixes."
msgstr ""

#: ../manage/installing/hotfixes.rst:11
msgid "Where to find the latest information"
msgstr ""

#: ../manage/installing/hotfixes.rst:13
msgid "Every now and again, security updates (or 'hotfixes') are released. To keep your Plone site secure, you should install these when they come available."
msgstr ""

#: ../manage/installing/hotfixes.rst:16
msgid "Plone hotfixes are released after timely announcement from the Security Team."
msgstr ""

#: ../manage/installing/hotfixes.rst:18
msgid "To stay up to date, it is advisable when you are the administrator of a Plone site, to suscribe to the `Plone Announce mailing list <https://lists.sourceforge.net/lists/listinfo/plone-announce>`_"
msgstr ""

#: ../manage/installing/hotfixes.rst:20
msgid "This is a very low-volume list. Security updates are also announced via the plone.org website and other channels."
msgstr ""

#: ../manage/installing/hotfixes.rst:22
msgid "To see which Hotfixes should be applied against which Plone version, you can check `the security matrix at plone.org/security/hotfixes <https://plone.org/security/hotfixes/>`_"
msgstr ""

#: ../manage/installing/hotfixes.rst:24
msgid "When a new maintenance release is brought out, the previous Hotfixes are incorporated. So if you run Plone 4.3.3 or later, there is no need to install hotfixes. (state: May 2015. Do check the link above if reading at a later date)"
msgstr ""

#: ../manage/installing/hotfixes.rst:28
msgid "How to install"
msgstr ""

#: ../manage/installing/hotfixes.rst:30
msgid "Each security hotfix comes with installation instructions, but in general it is no different than installing :doc:`any other add-on <installing_addons>`"
msgstr ""

#: ../manage/installing/index.rst:2
msgid "Installing Plone"
msgstr ""

#: ../manage/installing/installation.rst:7
msgid "Installation instructions for Plone for various operating systems and situations."
msgstr ""

#: ../manage/installing/installation.rst:15
msgid "This is a draft for Plone 5 and still WIP, lots of stuff is not updated yet !!!"
msgstr ""

#: ../manage/installing/installation.rst:18
msgid "Todo: - update plone versions in commands below - update osx install - update windows install - mention virtualbox and vagrant - mention docker - more ?"
msgstr ""

#: ../manage/installing/installation.rst:30
msgid "This document covers the basics of installing Plone on popular operating systems. It will also point you to other documents for more complex or demanding installations."
msgstr ""

#: ../manage/installing/installation.rst:33
msgid "Plone runs as an application on the Zope application server. That server is installed automatically by the install process."
msgstr ""

#: ../manage/installing/installation.rst:37
msgid "We strongly advise against installing Plone via OS package or port. There is no .rpm, .deb, or BSD port that is supported by the Plone community. Plone dependencies can and should be installed via package or port -- but not Plone itself."
msgstr ""

#: ../manage/installing/installation.rst:40
msgid "Download Plone"
msgstr ""

#: ../manage/installing/installation.rst:42
msgid "Plone is available for Microsoft Windows, Mac OSX X, Linux and BSD operating systems."
msgstr ""

#: ../manage/installing/installation.rst:44
msgid "`Download the latest Plone release <http://plone.org/products/plone/latest_release>`_."
msgstr ""

#: ../manage/installing/installation.rst:46
msgid "Binary installers are available for Windows and OS X. Installation on Linux, BSD and other Unix workalikes requires a source code installation, made easy by our Unified Installer. \"Unified\" refers to its ability to install on most Unix workalikes."
msgstr ""

#: ../manage/installing/installation.rst:49
msgid "Plone installation requirements"
msgstr ""

#: ../manage/installing/installation.rst:51
msgid "See :doc:`Plone installation requirements <requirements>` for detailed requirements."
msgstr ""

#: ../manage/installing/installation.rst:53
msgid "You need at a dedicated or virtual private server (VPS) with 512 MB RAM available. Shared hosting is not supported unless the shared hosting company says Plone is good to go. See :doc:`Plone installation requirements <requirements>`."
msgstr ""

#: ../manage/installing/installation.rst:58
msgid "If you are installing for production - rather than testing or evaluation - review :doc:`Deploying and installing Plone in production </manage/deploying/production/index>` before installation."
msgstr ""

#: ../manage/installing/installation.rst:62
msgid "How to install Plone"
msgstr ""

#: ../manage/installing/installation.rst:64
msgid "Plone can run on all popular desktop or server operating systems, including Linux, OS X, BSD and Microsoft Windows."
msgstr ""

#: ../manage/installing/installation.rst:67
msgid "You can install Plone on a server for production usage"
msgstr ""

#: ../manage/installing/installation.rst:69
msgid "You can install Plone locally on your own computer for development and test drive"
msgstr ""

#: ../manage/installing/installation.rst:72
msgid "Ubuntu / Debian"
msgstr ""

#: ../manage/installing/installation.rst:74
msgid "We describe Ubuntu/Debian installation in detail as an example of installation on a common Unix workalike. The only difference for most other systems would be in package-manager commands and package names. See :doc:`Plone installation requirements <requirements>` for package names and commands on other platforms."
msgstr ""

#: ../manage/installing/installation.rst:77
msgid "Installing Plone using the Unified UNIX Installer"
msgstr ""

#: ../manage/installing/installation.rst:81
msgid "This is the recommended method for a *development or evaluation* installation of Plone on a Unix workalike. For a *production* installation, :doc:`Installing Plone for Production on Ubuntu </manage/deploying/production/ubuntu_production>` is a much better guide."
msgstr ""

#: ../manage/installing/installation.rst:85
msgid "This recipe is good for:"
msgstr ""

#: ../manage/installing/installation.rst:87
msgid "Plone development and testing on Ubuntu / Debian"
msgstr ""

#: ../manage/installing/installation.rst:89
msgid "Operating system installations where you have administrator (root) access. Note that root access is not strictly necessary as long as you have required software installed beforehand on the server, but this tutorial assumes you need to install the software yourself and you are the admin. If you don't have the ability to install system libraries, you'll need to get your sysadmin to do it for you. The libraries required are in common use."
msgstr ""

#: ../manage/installing/installation.rst:94
msgid "The resulting installation is self-contained, does not touch system files, and is safe to play with (no root/sudoing is needed)."
msgstr ""

#: ../manage/installing/installation.rst:98
msgid "If you are not familiar with UNIX operating system command line you might want to study this `Linux shell tutorial <http://linuxcommand.org/learning_the_shell.php>`_ first."
msgstr ""

#: ../manage/installing/installation.rst:102
msgid "For information on using this installation with more advanced production hosting environments and deployments, see the :doc:`deployment guide </manage/deploying/production/index>`."
msgstr ""

#: ../manage/installing/installation.rst:106
msgid "Instructions are tested for the *Ubuntu 14.04 Long Term Support* release."
msgstr ""

#: ../manage/installing/installation.rst:109
msgid "Install the operating system software and libraries needed to run Plone"
msgstr ""

#: ../manage/installing/installation.rst:115
msgid "You will probably also want these optional system packages (see `Plone manual for more information <http://plone.org/documentation/manual/installing-plone/installing-on-linux-unix-bsd/debian-libraries>`_):"
msgstr ""

#: ../manage/installing/installation.rst:123
msgid "**libreadline-dev** is only necessary if you wish to build your own python rather than use your system's python 2.7."
msgstr ""

#: ../manage/installing/installation.rst:125
msgid "If you're planning on developing with Plone, install git version control support::"
msgstr ""

#: ../manage/installing/installation.rst:131
msgid "If sudo command is not recognized or does not work you don't have administrator rights to Ubuntu / Debian operating system. Please contact your server vendor or consult the operating system support forum."
msgstr ""

#: ../manage/installing/installation.rst:136
msgid "For Ubuntu 12.04 you do not have to install **libz-dev**"
msgstr ""

#: ../manage/installing/installation.rst:140
msgid "Download the latest Plone unified installer"
msgstr ""

#: ../manage/installing/installation.rst:142
msgid "Download from `the plone.org download page <http://plone.org/download>`_ to your server using wget command. Curl also works. Substitute the latest version number for 5.0 in the instructions below."
msgstr ""

#: ../manage/installing/installation.rst:151
msgid "Run the Plone installer in standalone mode"
msgstr ""

#: ../manage/installing/installation.rst:166
msgid "install.sh has many options, use:"
msgstr ""

#: ../manage/installing/installation.rst:172
msgid "to discover them."
msgstr ""

#: ../manage/installing/installation.rst:174
msgid "The default admin credentials will be printed to the console. You can change this password after logging in to the Zope Management Interface."
msgstr ""

#: ../manage/installing/installation.rst:179
msgid "The password is also written down in the ``buildout.cfg`` file, but this setting is not effective after Plone has been started for the first time. Changing this setting does not do any good."
msgstr ""

#: ../manage/installing/installation.rst:184
msgid "Install the Plone developer tools"
msgstr ""

#: ../manage/installing/installation.rst:186
msgid "If you're using this Plone install for development, add the common development tool set."
msgstr ""

#: ../manage/installing/installation.rst:193
msgid "You'll need to add the \"-c develop.cfg\" again each time you run buildout, or you'll lose the extra development tools."
msgstr ""

#: ../manage/installing/installation.rst:196
msgid "Start Plone"
msgstr ""

#: ../manage/installing/installation.rst:198
msgid "If you're developing, start Plone in foreground mode for a test run (you'll see potential errors in the console):"
msgstr ""

#: ../manage/installing/installation.rst:205
msgid "When you start Plone in the foreground, it runs in debug mode, which is much slower than production mode since it reloads templates for every request."
msgstr ""

#: ../manage/installing/installation.rst:207
msgid "For evaluation, instead use:"
msgstr ""

#: ../manage/installing/installation.rst:214
msgid "Use"
msgstr ""

#: ../manage/installing/installation.rst:221
msgid "to stop the instance."
msgstr ""

#: ../manage/installing/installation.rst:223
msgid "By default, Plone will listen to port 8080 on available network interfaces. That may be changed by editing buildout.cfg and re-running buildout."
msgstr ""

#: ../manage/installing/installation.rst:227
msgid "You've got Plone"
msgstr ""

#: ../manage/installing/installation.rst:229
msgid "Now take a look at your Plone site by visiting the following address in your webbrowser::"
msgstr ""

#: ../manage/installing/installation.rst:233
msgid "The greeting page will let you create a new site. For this you need the login credentials printed to your terminal earlier, also available at ``~/Plone/zinstance/adminPassword.txt``."
msgstr ""

#: ../manage/installing/installation.rst:236
msgid "If everything is OK, press ``CTRL-C`` in the terminal to stop Plone if you're running in debug mode. Use the ``plonectl stop`` command if you didn't start in debug mode."
msgstr ""

#: ../manage/installing/installation.rst:238
msgid "If you have problems, please see the `help guidelines <http://plone.org/help>`_."
msgstr ""

#: ../manage/installing/installation.rst:240
msgid "For automatic start-up when your server boots up, init scripts, etc. please see the :doc:`deployment guide </manage/deploying/production/index>`."
msgstr ""

#: ../manage/installing/installation.rst:245
msgid "Installing Plone using RPMs, .dev, ... packages"
msgstr ""

#: ../manage/installing/installation.rst:247
msgid "Not supported by Plone community."
msgstr ""

#: ../manage/installing/installation.rst:249
msgid "(i.e. you're on your own, and don't say we didn't tell you.)"
msgstr ""

#: ../manage/installing/installation.rst:252
msgid "Microsoft Windows"
msgstr ""

#: ../manage/installing/installation.rst:255
msgid "Installing Plone on Windows"
msgstr ""

#: ../manage/installing/installation.rst:257
msgid "By far the easiest way to install on Windows is to use the binary installer provided on plone.org. This installation is adequate for Python development. It is very rare to need C language extensions."
msgstr ""

#: ../manage/installing/installation.rst:260
msgid "If you have needs beyond those met by the Windows Installer, read on."
msgstr ""

#: ../manage/installing/installation.rst:262
msgid "For Plone 4.1 and later, see these instructions:"
msgstr ""

#: ../manage/installing/installation.rst:264
msgid "https://docs.google.com/document/d/19-o6yYJWuvw7eyUiLs_b8br4C-Kb8RcyHcQSIf_4Pb4/edit"
msgstr ""

#: ../manage/installing/installation.rst:266
msgid "If you wish to develop Plone on Windows you need to set-up a working MingW environment (this can be somewhat painful if you aren't used to it)"
msgstr ""

#: ../manage/installing/installation.rst:271
msgid "OSX"
msgstr ""

#: ../manage/installing/installation.rst:274
msgid "Installing Plone using OSX binary installer"
msgstr ""

#: ../manage/installing/installation.rst:276
msgid "This is the recommended method if you want to try Plone for the first time."
msgstr ""

#: ../manage/installing/installation.rst:278
msgid "Please use the installer from the download page `<http://plone.org/products/plone/releases>`_."
msgstr ""

#: ../manage/installing/installation.rst:280
msgid "The binary installer is intended to provide an environment suitable for testing, evaluating, and developing theme and add-on packages. It will not give you the ability to add or develop components that require a C compiler. This is *very* rarely needed."
msgstr ""

#: ../manage/installing/installation.rst:285
msgid "Installing Plone from source on OS X"
msgstr ""

#: ../manage/installing/installation.rst:287
msgid "Installation via the Unified Installer or buildout is very similar to Unix. However, you will need to install a command-line build environment. To get a free build kit from Apple, do one of the following:"
msgstr ""

#: ../manage/installing/installation.rst:290
msgid "Download gcc and command-line tools from https://developer.apple.com/downloads/. This will require an Apple developer id."
msgstr ""

#: ../manage/installing/installation.rst:294
msgid "Install Xcode from the App Store. After installation, visit the Xcode app's preference panel to download the command-line tools."
msgstr ""

#: ../manage/installing/installation.rst:297
msgid "After either of these steps, you immediately should be able to install Plone using the Unified Installer."
msgstr ""

#: ../manage/installing/installation.rst:299
msgid "Proceed as with Linux."
msgstr ""

#: ../manage/installing/installation.rst:302
msgid "LibXML2/LibXSLT Versions"
msgstr ""

#: ../manage/installing/installation.rst:304
msgid "Don't worry about this if you're using an installer."
msgstr ""

#: ../manage/installing/installation.rst:307
msgid "Entering debug mode after installation"
msgstr ""

#: ../manage/installing/installation.rst:309
msgid "When you have Plone installed and want to start development you need do :doc:`enter debug mode </develop/plone/getstarted/debug_mode>`."
msgstr ""

#: ../manage/installing/installation.rst:313
msgid "Installer source code"
msgstr ""

#: ../manage/installing/installation.rst:315
msgid "https://github.com/plone/Installers-UnifiedInstaller"
msgstr ""

#: ../manage/installing/installing_addons.rst:3
msgid "Installing add-on packages using buildout"
msgstr ""

#: ../manage/installing/installing_addons.rst:12
msgid "Plone uses `Buildout <http://www.buildout.org/>`_ for installing add-on packages. See :doc:`installation instructions </manage/installing/installation>` for how to create a Plone installation suitable for development."
msgstr ""

#: ../manage/installing/installing_addons.rst:18
msgid "Discovering Plone add-ons and other python packages"
msgstr ""

#: ../manage/installing/installing_addons.rst:20
msgid "The `plone.org Products <https://plone.org/products>`_ is a directory of Plone add-on packages where a lot of add-on packages for Plone are listed."
msgstr ""

#: ../manage/installing/installing_addons.rst:24
msgid "A lot more packages can be found in the `PyPI (the Python Package index) <https://pypi.python.org>`_, although most of the packages might not be Plone specific."
msgstr ""

#: ../manage/installing/installing_addons.rst:30
msgid "Installing add-ons using buildout"
msgstr ""

#: ../manage/installing/installing_addons.rst:32
msgid "Add-on packages which are uploaded to `PyPI <https://pypi.python.org>`_ or `plone.org <https://plone.org/products>`_ as *egg* can be installed by buildout."
msgstr ""

#: ../manage/installing/installing_addons.rst:36
msgid "Edit your `buildout.cfg` file and add the add-on package to the list of eggs:"
msgstr ""

#: ../manage/installing/installing_addons.rst:50
msgid "The above example works for the buildout created by the unified installer. If you however have a custom buildout you might need to add the egg to the *eggs* list in the *[instance]* section rather than adding it in the *[buildout]* section."
msgstr ""

#: ../manage/installing/installing_addons.rst:56
msgid "For the changes to take effect you need to re-run buildout from your console:"
msgstr ""

#: ../manage/installing/installing_addons.rst:64
msgid "Restart your instance for the changes to take effect:"
msgstr ""

#: ../manage/installing/installing_addons.rst:72
msgid "Installing development version of add-on packages"
msgstr ""

#: ../manage/installing/installing_addons.rst:74
msgid "If you need to use the latest development version of an add-on package you can easily get the source in your development installation using the buildout extension `mr.developer <https://pypi.python.org/pypi/mr.developer>`_."
msgstr ""

#: ../manage/installing/installing_addons.rst:79
msgid "For managing the sources it is recommended to create a `sources.cfg` which you can include in your buildout."
msgstr ""

#: ../manage/installing/installing_addons.rst:92
msgid "Adding add-on package names to the **auto-checkout** list will make buildout check out the source to the `src` directory upon next buildout run."
msgstr ""

#: ../manage/installing/installing_addons.rst:98
msgid "It is not recommended to use `auto-checkout = *`, especially when you extend from a big list of sources, such as the plonesource.org list."
msgstr ""

#: ../manage/installing/installing_addons.rst:104
msgid "The `auto-checkout` option only checks out the source. It is also required to add the package to the `eggs` list for getting it installed, see above."
msgstr ""

#: ../manage/installing/installing_addons.rst:108
msgid "After creating a `sources.cfg` you need to make sure that it gets loaded by the `buildout.cfg`. This is done by adding it to the `extends` list in your `buildout.cfg`:"
msgstr ""

#: ../manage/installing/installing_addons.rst:120
msgid "As always: after modifying the buildout configuration you need to rerun buildout and restart your instance:"
msgstr ""

#: ../manage/installing/requirements.rst:3
msgid "Plone Installation Requirements"
msgstr ""

#: ../manage/installing/requirements.rst:7
msgid "Requirements for installing Plone. Details the tools and libraries (dependencies) required to install Plone."
msgstr ""

#: ../manage/installing/requirements.rst:15
msgid "Hosting requirements"
msgstr ""

#: ../manage/installing/requirements.rst:17
msgid "To run a Plone based web site on your own server you need:"
msgstr ""

#: ../manage/installing/requirements.rst:19
msgid "A server machine connected to Internet (public sites) or your intranet (company intranet sites);"
msgstr ""

#: ../manage/installing/requirements.rst:21
msgid "Remote console, like SSH access, for installing Plone. FTP is not enough."
msgstr ""

#: ../manage/installing/requirements.rst:23
msgid "Plone requires several system libraries. These need to be installed by a user with root access."
msgstr ""

#: ../manage/installing/requirements.rst:27
msgid "Operating system"
msgstr ""

#: ../manage/installing/requirements.rst:29
msgid "Plone has been successfully installed on:"
msgstr ""

#: ../manage/installing/requirements.rst:31
msgid "Windows"
msgstr ""

#: ../manage/installing/requirements.rst:33
msgid "Nearly every popular Linux distribution;"
msgstr ""

#: ../manage/installing/requirements.rst:35
msgid "Nearly every popular BSD distribution"
msgstr ""

#: ../manage/installing/requirements.rst:37
msgid "OS X (using our OS X installer or XCode)"
msgstr ""

#: ../manage/installing/requirements.rst:39
msgid "Solaris and several other proprietery \\*nix systems"
msgstr ""

#: ../manage/installing/requirements.rst:41
msgid "To install on Windows, it is strongly recommended to use the Plone Windows Installer. Otherwise, you will need `Cygwin <http://www.cygwin.com>`_ to provide a \\*nix build environment."
msgstr ""

#: ../manage/installing/requirements.rst:46
msgid "Hardware (or virtual environment) requirements"
msgstr ""

#: ../manage/installing/requirements.rst:48
msgid "The hardware requirements below give a rough estimation of the minimum hardware setup needed for a Plone server."
msgstr ""

#: ../manage/installing/requirements.rst:50
msgid "Add-on products and caching solutions may increase RAM requirements."
msgstr ""

#: ../manage/installing/requirements.rst:52
msgid "One Zope application server is able to run several Plone sites with the same software configuration. This lowers the requirements when hosting multiple sites on the same server."
msgstr ""

#: ../manage/installing/requirements.rst:55
msgid "Minimum requirements"
msgstr ""

#: ../manage/installing/requirements.rst:57
msgid "Minimum 256 MB RAM and 512 MB of swap space per Plone site"
msgstr ""

#: ../manage/installing/requirements.rst:59
msgid "Minimum 512 MB hard disk space"
msgstr ""

#: ../manage/installing/requirements.rst:62
msgid "Recommended"
msgstr ""

#: ../manage/installing/requirements.rst:64
msgid "2 GB or more RAM per Plone site"
msgstr ""

#: ../manage/installing/requirements.rst:66
msgid "40 GB or more hard disk space"
msgstr ""

#: ../manage/installing/requirements.rst:70
msgid "All Plone versions"
msgstr ""

#: ../manage/installing/requirements.rst:72
msgid "A complete GNU build kit including GCC including gcc, gmake, patch, tar, gunzip, bunzip2, wget."
msgstr ""

#: ../manage/installing/requirements.rst:75
msgid "Most required libraries listed below must be installed as development versions (dev)."
msgstr ""

#: ../manage/installing/requirements.rst:77
msgid "Tools and libraries marked with \"*\" are either included with the Unified Installer or automatically downloaded."
msgstr ""

#: ../manage/installing/requirements.rst:80
msgid "If you use your system Python, you should use Python's virtualenv to create an isolated virtual Python. System Pythons may use site libraries that will otherwise interfere with Zope/Plone."
msgstr ""

#: ../manage/installing/requirements.rst:92
msgid "These may be added after initial installation."
msgstr ""

#: ../manage/installing/requirements.rst:95
msgid "Plone 4.3 / 4.2"
msgstr ""

#: ../manage/installing/requirements.rst:98
#: ../manage/installing/requirements.rst:120
msgid "Python"
msgstr ""

#: ../manage/installing/requirements.rst:100
msgid "Python 2.7 (dev), built with support for expat (xml.parsers.expat), zlib and ssl. (Python XML support may be a separate package on some platforms.)*"
msgstr ""

#: ../manage/installing/requirements.rst:103
#: ../manage/installing/requirements.rst:125
msgid "virtualenv*"
msgstr ""

#: ../manage/installing/requirements.rst:106
#: ../manage/installing/requirements.rst:128
msgid "Libraries"
msgstr ""

#: ../manage/installing/requirements.rst:108
#: ../manage/installing/requirements.rst:130
msgid "libz (dev)"
msgstr ""

#: ../manage/installing/requirements.rst:109
#: ../manage/installing/requirements.rst:131
msgid "libjpeg (dev)*"
msgstr ""

#: ../manage/installing/requirements.rst:110
#: ../manage/installing/requirements.rst:132
msgid "readline (dev)*"
msgstr ""

#: ../manage/installing/requirements.rst:111
msgid "libexpat (dev)"
msgstr ""

#: ../manage/installing/requirements.rst:112
msgid "libssl or openssl (dev)"
msgstr ""

#: ../manage/installing/requirements.rst:113
msgid "libxml2 >= 2.7.8 (dev)*"
msgstr ""

#: ../manage/installing/requirements.rst:114
msgid "libxslt >= 1.1.26 (dev)*"
msgstr ""

#: ../manage/installing/requirements.rst:117
msgid "Plone 4.1"
msgstr ""

#: ../manage/installing/requirements.rst:122
msgid "Python 2.6 (dev), built with support for expat (xml.parsers.expat), zlib and ssl. (Python XML support may be a separate package on some platforms.)*"
msgstr ""

#: ../manage/installing/requirements.rst:136
msgid "Minimal build"
msgstr ""

#: ../manage/installing/requirements.rst:138
msgid "With complete requirements in place, a barebones Plone install may be created with a few steps. ``~/$`` is a system prompt."
msgstr ""

#: ../manage/installing/requirements.rst:169
msgid "This will start a long download and build process ..."
msgstr ""

#: ../manage/installing/requirements.rst:171
msgid "Errors like \"SyntaxError: (\"'return' outside function\"...\"\" may be ignored."
msgstr ""

#: ../manage/installing/requirements.rst:173
msgid "After it finished you can start Plone in foreground-mode with:"
msgstr ""

#: ../manage/installing/requirements.rst:179
msgid "You can stop it with ``ctrl + c``."
msgstr ""

#: ../manage/installing/requirements.rst:181
msgid "Start and stop this Plone-instance in production-mode like this;"
msgstr ""

#: ../manage/installing/requirements.rst:189
msgid "Plone will run on port 8080 and can be accessed via http://localhost:8080. Use login id \"admin\" and password \"admin\" for initial login so you can create a site."
msgstr ""

#: ../manage/installing/requirements.rst:192
msgid "This build would be adequate for a quick evaluation installation. For a production or development installation, use one of `Plone's installers <https://plone.org/products/plone>`_."
msgstr ""

#: ../manage/troubleshooting/basic.rst:3
msgid "Basic troubleshooting"
msgstr ""

#: ../manage/troubleshooting/basic.rst:7
msgid "Here is some info for basic Plone troubleshooting, especially with add-on modules-"
msgstr ""

#: ../manage/troubleshooting/basic.rst:12
msgid "Start Plone as foreground / debug mode"
msgstr ""

#: ../manage/troubleshooting/basic.rst:14
msgid "Plone runs on the top of Zope application service. Zope is a Python process and will appear as \"python .....\" in your task manager process list."
msgstr ""

#: ../manage/troubleshooting/basic.rst:17
msgid "Zope will report any problems with code when it is launched in foreground mode (attached to a terminal)."
msgstr ""

#: ../manage/troubleshooting/basic.rst:19
msgid "Basic command-line knowledge is needed in order to proceed"
msgstr ""

#: ../manage/troubleshooting/basic.rst:21
msgid "First stop Zope if it's running as a background process"
msgstr ""

#: ../manage/troubleshooting/basic.rst:23
msgid "On Windows: use Plone Control Panel or Windows Control Panel Services section to shutdown Plone first"
msgstr ""

#: ../manage/troubleshooting/basic.rst:25
msgid "On Linux: use /etc/init.d/plone stop or related command to shutdown Plone"
msgstr ""

#: ../manage/troubleshooting/basic.rst:27
msgid "Use the command"
msgstr ""

#: ../manage/troubleshooting/basic.rst:33
msgid "or Windows command-line command (note that Plone location may depend on where you installed it)"
msgstr ""

#: ../manage/troubleshooting/basic.rst:40
msgid "to start Plone."
msgstr ""

#: ../manage/troubleshooting/basic.rst:42
msgid "All errors will be printed into the terminal. The error is printed as Python *traceback*. It is important to copy-paste all lines of this traceback, not just the last line."
msgstr ""

#: ../manage/troubleshooting/basic.rst:46
msgid "If there is no start up error you will see the line"
msgstr ""

#: ../manage/troubleshooting/basic.rst:49
msgid "No such file or directory: 'zope.conf'"
msgstr ""

#: ../manage/troubleshooting/basic.rst:51
#: ../manage/troubleshooting/buildout.rst:130
msgid "Example:"
msgstr ""

#: ../manage/troubleshooting/basic.rst:58
msgid "This means that running ``bin/buildout`` script did not complete successfully. Re-run buildout and see what's wrong."
msgstr ""

#: ../manage/troubleshooting/basic.rst:62
msgid "Dropping into pdb"
msgstr ""

#: ../manage/troubleshooting/basic.rst:64
msgid "If you need to inspect start-up errors in Python's :doc:`debugger </manage/deploying/testing_tuning/testing_and_debugging/pdb>`."
msgstr ""

#: ../manage/troubleshooting/basic.rst:66
msgid "Activate Python configuration associated with your ``bin/instance`` script:"
msgstr ""

#: ../manage/troubleshooting/basic.rst:72
msgid "Start Plone pdb enabled:"
msgstr ""

#: ../manage/troubleshooting/basic.rst:79
msgid "Check if Plone is up and responds to requests"
msgstr ""

#: ../manage/troubleshooting/basic.rst:81
msgid "Enter to the computer running Plone (SSH in on UNIX)."
msgstr ""

#: ../manage/troubleshooting/basic.rst:83
msgid "Use ``telnet`` command to connect Plone port and see if you get valid HTTP response from Plone"
msgstr ""

#: ../manage/troubleshooting/basic.rst:89
msgid "Then do a human HTTP user agent simulation by typing::"
msgstr ""

#: ../manage/troubleshooting/basic.rst:93
msgid "Plone response looks like this::"
msgstr ""

#: ../manage/troubleshooting/basic.rst:114
msgid "If you get the answer from Plone (based on HTTP response headers) then Plone is running and you have problem elsewhere in your firewall/server/ front-end web server configuration."
msgstr ""

#: ../manage/troubleshooting/basic.rst:118
msgid "Consult your operating system manual for fixing your problem."
msgstr ""

#: ../manage/troubleshooting/basic.rst:121
msgid "Cleaning up bad add-on uninstalls"
msgstr ""

#: ../manage/troubleshooting/basic.rst:123
msgid "Many low quality Plone add-ons do not uninstall cleanly. You need to remove persistent objects from site database *after* add-on uninstall while *code is still in buildout*."
msgstr ""

#: ../manage/troubleshooting/basic.rst:127
msgid "Otherwise your Plone site may not"
msgstr ""

#: ../manage/troubleshooting/basic.rst:129
msgid "Pack properly"
msgstr ""

#: ../manage/troubleshooting/basic.rst:131
msgid "Start properly"
msgstr ""

#: ../manage/troubleshooting/basic.rst:133
msgid "Migrate to new version"
msgstr ""

#: ../manage/troubleshooting/basic.rst:137
#: ../manage/troubleshooting/exceptions.rst:1790
#: ../manage/troubleshooting/exceptions.rst:2101
msgid "https://plone.org/documentation/kb/manually-removing-local-persistent-utilities/"
msgstr ""

#: ../manage/troubleshooting/basic.rst:140
msgid "Not able to log in"
msgstr ""

#: ../manage/troubleshooting/basic.rst:142
msgid "It might happen that you start your instance with an empty database and you are not able to log in even if you are absolutely sure about your password. If you work on localhost throw away the localhost related cookies in your browser and restart."
msgstr ""

#: ../manage/troubleshooting/basic.rst:146
msgid "If you have lost the Zope Admin Password you can create an emergency user:"
msgstr ""

#: ../manage/troubleshooting/basic.rst:148
msgid "http://quintagroup.com/services/support/tutorials/zope-access"
msgstr ""

#: ../manage/troubleshooting/basic.rst:154
msgid ":doc:`common exceptions which you might encounter when starting Zope </manage/troubleshooting/exceptions>`"
msgstr ""

#: ../manage/troubleshooting/basic.rst:156
msgid "`Plone community support guidelines for asking help <https://plone.org/help>`_"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:3
msgid "Buildout troubleshooting"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:7
msgid "How to solve problems related to running buildout and some common exceptions you might encounter when running buildout for Plone."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:15
msgid "This document tells how to resolve buildout problems."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:18
msgid "Network errors and timeouts"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:20
msgid "The usual reason for download error or timeout is that either"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:22
msgid "``pypi.python.org`` server is down, or"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:23
msgid "one of ``plone.org`` servers is down, or"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:24
msgid "other Python package source server is down."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:26
msgid "Here are instructions how to deal with community servers down situations"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:28
msgid "http://jacobian.org/writing/when-pypi-goes-down/"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:30
msgid "Mirrors"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:32
msgid "http://www.pypi-mirrors.org/"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:36
msgid "Individual package failing outside PyPI"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:38
msgid "To figure out which file buildout tries to download, usually the only way is to use ``buildout -D`` pdb debug mode and step up in stack frames to see what is going on."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:44
msgid "parts/instance/etc/zope.conf: [Errno 2] No such file or directory"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:47
msgid "You see this error when trying to start Plone. This means that buildout did not complete correctly and did not generate configuration files."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:50
msgid "Rerun buildout and fix errors in ``buildout.cfg`` based on buildout command output."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:53
msgid "Buildout and SyntaxErrors"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:55
msgid "You may see ``SyntaxError`` exceptions when running buildout::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:59
msgid "They are harmless."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:61
msgid "The reason: Buildout uses a Python tool called ``setuptools`` internally to install the packages.  setuptools scans all ``.py`` files inside the Python package and assumes they are Python modules.  However, Plone has something called :doc:`RestrictedPython </develop/plone/security/sandboxing>`. RestrictedPython allows untrusted users to execute Python code in Plone (Python Scripts in the :term:`ZMI`).  RestrictedPython scripts use slightly modified Python syntax compared to plain Python modules."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:69
msgid "setuptools does not know which files are normal ``.py`` and which files are RestrictedPython and tries to interpret them all using standard Python syntax rules. Then it fails. However, setuptools only tries to scan files (`in order to see if they are zip-safe <https://pythonhosted.org/setuptools/easy_install.html#compressed-installation>`__) but still installs them correctly. No harm done."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:77
msgid "Version conflicts"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:79
msgid "Buildout gives you an error if there is a dependency shared by two components, and one of the components wants to have a different version of this dependency."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:91
msgid "If your buildout is fetching strange versions:"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:93
msgid "try running buildout in verbose mode: ``bin/buildout -vvv``"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:94
msgid "Use dumppickedversions (below)"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:95
msgid "Manually pin down version in the ``[versions]`` section of your buildout."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:97
msgid "Further reading:"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:99
msgid "http://maurits.vanrees.org/weblog/archive/2010/08/fake-version-pinning"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:101
msgid "http://www.uwosh.edu/ploneprojects/documentation/how-tos/how-to-use-buildout-to-pin-product-versions"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:104
msgid "Dump picked versions"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:106
msgid "This buildout extension will automatically dump picked Python egg versions to a file."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:109
msgid "Add to your ``buildout.cfg``:"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:119
msgid "`dumppickedversions <https://pypi.python.org/pypi/buildout.dumppickedversions>`_"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:122
msgid "Good-py service"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:124
msgid "Good-py contains some good known versions sets. These are most convenient to use if you are using complex configuration of add-ons that you are not familiar with."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:128
msgid "Some good-py configurations take a Plone version as a paremeter."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:140
msgid "Or:"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:150
msgid "Extracting version numbers from instance script"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:158
msgid "http://davidjb.com/blog/2011/06/extracting-a-buildout-versions-cfg-from-a-zope-instance-script/"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:161
msgid "Plone 3.1"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:163
msgid "Plone 3.1 and earlier are not eggified. Below are links how to keep Plone 3.1 and earlier buildouts running."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:166
msgid "See:"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:168
msgid "http://www.netsight.co.uk/blog/resurrecting-old-plone-3-buildouts"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:174
msgid "Common pindowns"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:176
msgid "Here is a pindown example from 2010/02:"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:197
msgid "Getting distribution for ``distribute``"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:199
msgid "You try to run buildout, but it is stuck in a loop::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:208
msgid "Your system-wide Distribute version is older than the latest release. Buildout tries to update it, but since system wide site-packages version overrides anything buildout can do, it is stuck in a loop."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:212
msgid "Fix: update Distribute in system-wide Python::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:238
msgid "UnknownExtra: zope.i18n 0.0 has no such extra feature 'zcml'"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:240
msgid "You get the following traceback when running buildout::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:254
msgid "You might be using an add-on meant for Plone 4 with Plone 3. Check if ``setup.py`` contains *Zope2* as a dependency. If it does, then you need to use earlier version of the add-on for your Plone 3 site."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:260
msgid "http://groups.google.com/group/singing-dancing/browse_thread/thread/331cdfe78cf371ed"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:264
msgid "We already have: zope.interface 4.0.3"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:279
msgid "Your system Python or virtualenv'd Python already has ``zope.interface`` library installed. A lot of Python software uses this library. However, the system version is wrong and cannot be overridden."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:282
msgid "Solutions."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:284
msgid "For virtualenv: ``rm -rf ~/code/plone-venv/lib/python2.7/site-packages/zope.interface-4.0.3-py2.7-macosx-10.8-x86_64.egg``"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:286
msgid "For system Python: You need to create a virtualenv'd Python and to use it to drive buildout, so that there is no conflict with ``zope.interface`` versions."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:290
msgid "We already have: zope.location 3.4.0"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:292
msgid "When running buildout, Plone 3.3.5::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:308
#: ../manage/troubleshooting/buildout.rst:594
msgid "Solution:"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:318
msgid "ImportError: No module named lxml"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:320
msgid "``lxml`` as a PyPi package dependency fails even though it is clearly installed."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:323
#: ../manage/troubleshooting/buildout.rst:606
msgid "Example traceback when running buildout::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:342
msgid "Solution: ensure lxml compilation happens before openxmllib is being compiled."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:345
msgid "For instance, if you are installing something like ``Products.OpenXml``, you will have likely included this egg under your Plone ``[instance]`` section of your buildout.  You should consider using something like ``collective.recipe.staticlxml`` to build lxml and to do this *before* this egg's installation is invoked. Like so in your ``buildout.cfg``:"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:366
msgid "http://www.niteoweb.com/blog/order-of-parts-when-compiling-lxml"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:368
msgid "http://plone.293351.n2.nabble.com/lxml-installs-but-Products-OpenXml-openxmllib-can-t-see-it-tp5565184p5565184.html"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:371
msgid "UnknownExtra: zope.i18n 3.4.0 has no such extra feature 'zcml'"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:373
msgid "Traceback::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:398
msgid "Solution: Check that you have the correct Dexteriry or XDV pindowns / Known Good Set of versions or whether you are using a Plone 4 extension in Plone 3.  For example: ``plone.reload`` 2.0 will raise this with a Plone 3.3 buildout, while ``plone.reload`` 1.5 will work with Plone 3.3."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:403
msgid "See Also: `UnknownExtra: zope.i18n 0.0 has no such extra feature 'zcml'`_"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:407
msgid "Can't run ``bootstrap.py`` - VersionConflict for ``zc.buildout``"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:409
msgid "Traceback when running ``python bootstrap.py``::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:427
msgid "Solution: update the ``zc.buildout`` installed in your system Python:"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:434
msgid "An error occurred when trying to install lxml - error: Setup script exited with error: command 'gcc' failed with exit status 1"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:436
msgid "Traceback when running buildout::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:449
msgid "Solution: install the ``libxml`` and ``libxslt`` development headers."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:451
msgid "On Ubuntu/Debian you could do this as follows:"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:459
msgid "VersionConflict: distribute 0.6.19"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:461
msgid "When running buildout you see something like this::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:469
msgid "Buildout uses the system-wide Distribute installation (``python-distribute`` or similar package, depends on your OS).  To fix this, you need to update system-wide distribution."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:473
msgid "It is preferred to do your Python + buildout installation in a :term:`virtualenv`, in order not to break your OS"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:476
msgid "Update Distribute (Plone universal installer, using supplied ``easy_install`` script):"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:483
msgid "Update Distribute (OSX/Ubuntu/Linux):"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:491
msgid "argparse 1.2.1"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:493
#: ../manage/troubleshooting/transactions.rst:471
msgid "If you get::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:501
msgid "Rerun ``bootstrap.py`` with the correct Python interpreter."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:505
msgid "``Error: Picked: <some.package> = <some.version>``"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:507
msgid "If you get something like this::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:523
msgid "This means that your buildout has \"allow picked versions\" set to false. You need to pin the version for the picked version (or turn on \"allow picked versions\")."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:528
msgid "Buildout error: ``Not a recognized archive type``"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:530
msgid "If you run across an error like this when running buildout::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:537
msgid "the error is likely stemming from an incorrect download of this egg. Check the given file to ensure that the file is correct (for instance, it is a non-zero length file or verifying the content using something like ``md5sum``) before delving deep into your Python install's workings. This error makes it look as if your Python install doesn't have support for this type of archive, but in fact it can be caused by a corrupt download."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:545
msgid "VersionConflict: zope.browserpage 3.9.0 requires 'zope.publisher>=3.8'."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:547
msgid "Plone 3.3.x package pindown problems."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:555
msgid "Plone 3.x problem. Pin plone.uuid to 1.0.0."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:557
msgid "For Plone 3.3.x You need to pindown::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:572
msgid "Distribute / setuptools tries to mess with system Python and Permission denied"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:574
msgid "When running ``bootsrap.py`` your buildout files because it tries to write to system-wide Python installation."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:596
msgid "`This bug has been fixed in Distiribute 0.6.27 <https://pypi.python.org/pypi/distribute/0.6.27#id2>`_ - make sure your system-wide Python uses this version or above::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:604
msgid "UnboundLocalError: local variable 'clients' referenced before assignment"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:619
msgid "Solution: Your buildout contains leftovers from the past. Remove ``clients`` variable in ``[unifiedinstaller]`` section."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:623
msgid "Couldn't install: BTrees 4.0.5"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:647
msgid "Plone 3.3.5 buildout ``fake-eggs`` is not working properly when you boostrap the buildout in a new environment."
msgstr ""

#: ../manage/troubleshooting/buildout.rst:650
msgid "Try install manually the core buildout part where you have ``fake-eggs`` defined::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:662
msgid "error: None"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:664
msgid "This means .tar.gz is corrupted::"
msgstr ""

#: ../manage/troubleshooting/buildout.rst:673
msgid "Buildout download cache is corrupted. Run ``bin/buildout -vvv`` for more info. Then do something like this::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:3
msgid "Exceptions and common tracebacks"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:7
msgid "Common Python exception traceback patterns you may encounter when working with Plone and possible solutions for them."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:10
msgid "Please see :doc:`this tutorial </manage/troubleshooting/basic>` for extracting Python tracebacks from your Plone logs."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:14
msgid "Add-on installer error: This object was originally created by a product that is no longer installed"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:16
#: ../manage/troubleshooting/exceptions.rst:45
#: ../manage/troubleshooting/exceptions.rst:68
#: ../manage/troubleshooting/exceptions.rst:83
#: ../manage/troubleshooting/exceptions.rst:113
#: ../manage/troubleshooting/exceptions.rst:139
#: ../manage/troubleshooting/exceptions.rst:181
#: ../manage/troubleshooting/exceptions.rst:226
#: ../manage/troubleshooting/exceptions.rst:245
#: ../manage/troubleshooting/exceptions.rst:273
#: ../manage/troubleshooting/exceptions.rst:314
#: ../manage/troubleshooting/exceptions.rst:392
#: ../manage/troubleshooting/exceptions.rst:419
#: ../manage/troubleshooting/exceptions.rst:449
#: ../manage/troubleshooting/exceptions.rst:479
#: ../manage/troubleshooting/exceptions.rst:516
#: ../manage/troubleshooting/exceptions.rst:535
#: ../manage/troubleshooting/exceptions.rst:572
#: ../manage/troubleshooting/exceptions.rst:619
#: ../manage/troubleshooting/exceptions.rst:654
#: ../manage/troubleshooting/exceptions.rst:703
#: ../manage/troubleshooting/exceptions.rst:725
#: ../manage/troubleshooting/exceptions.rst:746
#: ../manage/troubleshooting/exceptions.rst:778
#: ../manage/troubleshooting/exceptions.rst:847
#: ../manage/troubleshooting/exceptions.rst:878
#: ../manage/troubleshooting/exceptions.rst:928
#: ../manage/troubleshooting/exceptions.rst:997
#: ../manage/troubleshooting/exceptions.rst:1012
#: ../manage/troubleshooting/exceptions.rst:1095
#: ../manage/troubleshooting/exceptions.rst:1265
#: ../manage/troubleshooting/exceptions.rst:1429
#: ../manage/troubleshooting/exceptions.rst:1505
#: ../manage/troubleshooting/exceptions.rst:1547
#: ../manage/troubleshooting/exceptions.rst:1570
#: ../manage/troubleshooting/exceptions.rst:1634
#: ../manage/troubleshooting/exceptions.rst:1692
#: ../manage/troubleshooting/exceptions.rst:1721
#: ../manage/troubleshooting/exceptions.rst:1753
#: ../manage/troubleshooting/exceptions.rst:1797
#: ../manage/troubleshooting/exceptions.rst:1815
#: ../manage/troubleshooting/exceptions.rst:1852
#: ../manage/troubleshooting/exceptions.rst:1914
#: ../manage/troubleshooting/exceptions.rst:1993
#: ../manage/troubleshooting/exceptions.rst:2008
#: ../manage/troubleshooting/exceptions.rst:2076
#: ../manage/troubleshooting/exceptions.rst:2149
msgid "**Traceback**::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:34
msgid "**Reason**: Data.fs contains objects for which the code is not present. You have probably moved Data.fs or edited buildout.cfg."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:37
msgid "**Solution**: Check that eggs and zcml contain all necessary products in buildout.cfg."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:40
msgid "http://article.gmane.org/gmane.comp.web.zope.plone.setup/3232"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:43
msgid "Add-on installer error: too many values to unpack"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:58
msgid "**Condition**: When trying to install a plugin"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:60
msgid "**Reason**: You have run Data.fs with zope.component 3.5.1, but later downgraded / moved Data.fs."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:62
msgid "**Solution**: Pin zope.component to 3.5.1."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:66
msgid "Archetypes: TypeError: getattr(): attribute name must be string"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:77
msgid "**Reason**: You might have used something else besides string or translation string to define Archetypes widget name or description."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:81
msgid "AttributeError in setRoles due to workflow state transition"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:105
msgid "**Possible reasons**:"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:107
msgid "You are using AnnotationStorage but you forgot to declare atapi.ATFieldProperty in your class body"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:108
msgid "You are inhering schema in Archetypes, but you do not inherit the class itself"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:111
msgid "AttributeError: 'FilesystemResourceDirectory' object has no attribute 'absolute_url'"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:132
msgid "**Reason**: There is a not accessible filesystem resource declared in your diazo theme's html."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:134
msgid "**Solution**: Check that all js and css files are available."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:137
msgid "AttributeError: 'RelationList' object has no attribute 'source'"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:159
msgid "**Reason**: You're trying to use a relation field on your Dexterity-based content type but `plone.app.relationfield`_ is not installed."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:162
msgid "**Solution**: Follow the instructions on the Dexterity documentation as `relation support is no longer included by default`_."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:169
msgid "AttributeError: 'module' object has no attribute 'HTTPSConnection'"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:171
msgid "Python has not been compiled with HTTPS support."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:173
msgid "Try installing your Python, for example, using minitage."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:175
msgid "See :doc:`Python basics </develop/plone/getstarted/python>`."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:179
msgid "AttributeError: 'str' object has no attribute 'other' (Mixed zope.viewpagetemplate and Five.viewpagetemplate)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:210
msgid "Five ViewPageTemplate class file is slightly different than Zope 3's normal ViewPageTemplate file. In this case Five ViewPageTemplate was used, when Zope 3's normal ViewPageTemplate was expected."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:213
msgid "Another reason is that acquisition chain is not properly set-up in your custom views."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:215
msgid "Difference::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:219
msgid "vs.::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:224
msgid "AttributeError: 'wrapper_descriptor' object has no attribute 'im_func'"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:236
msgid "**Condition**: This exception happens when starting Plone"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:238
msgid "**Reason**: You are trying to use Python 2.6 with Plone 3"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:240
msgid "**Solution**: With Plone 3 you need to use Python 2.4."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:243
msgid "AttributeError: REQUEST in getObject"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:266
msgid "**Reason**: You are using command line script. getObject() fails for a catalog brain, because the actual object is gone. However, unrestrictedTraverse() does not handle this case gracefully."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:271
msgid "AttributeError: Schema"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:298
msgid "**Condition**: This error may comes when you try to view your custom content type"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:300
msgid "**Reason**: It is picking up Archetypes default view template for your Dexterity content type."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:302
msgid "Try if you can access your view by a directly calling it to by its name. E.g.::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:306
msgid "If it's working then it is wrong data in *portal_types*."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:308
msgid "Your content item might also be corrupted. It is trying to use dynamic view selector even if it's not supported. Try re-creating the particular content item."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:312
msgid "AttributeError: getPhysicalPath()"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:346
msgid "Another possible error is::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:350
msgid "This usually means that you should have used context.aq_inner when you have used context. absolute_url() tries to get the path to the object, but object parent is set to view (context.aq_parent) instead of real container object (context.aq_inner.aq_parent)."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:356
msgid "When setting a member attribute in BrowserView, the acquisition parent of objects changes to BrowserView instance. All member attributes receive ImplicitAcquisitionWrapper automatically."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:359
msgid "**Demonstration**"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:361
msgid "We try to set BrowserView member attribute defining_context to be some context object.::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:377
msgid "To get the real object (as it was before set was called) you can create a helper getter::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:390
msgid "AttributeError: type object 'IRAMCache' has no attribute '__iro__'"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:410
msgid "**Condition**: This error can happen when trying to open any page"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:412
msgid "**Reason**: You have probably imported a Data.fs using newer Plone/Zope version to old Plone, or package pindowns are incorrect. If you are copying a site try re-checking that source and target buildouts and package versions match."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:417
msgid "AttributeError: set_stripped_tags"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:436
#: ../manage/troubleshooting/exceptions.rst:466
msgid "**Condition**: This error may happen on saving changed settings in the HTML-Filtering controlpanel."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:438
#: ../manage/troubleshooting/exceptions.rst:468
msgid "possible cause:"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:440
#: ../manage/troubleshooting/exceptions.rst:470
msgid "You have migrated your Plone site from 3.3.5 to Plone 4.x"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:442
#: ../manage/troubleshooting/exceptions.rst:472
msgid "For some reason kupu library tool may not be removed in the upgrade step that removed kupu."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:444
#: ../manage/troubleshooting/exceptions.rst:474
msgid "**Solution**: Go to the ZMI and delete the kupu library tool manually."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:447
msgid "AttributeError: set_stripped_combinations"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:477
msgid "BadRequest: The id \"xxx\" is invalid - it is already in use."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:509
msgid "Not really sure why this happens."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:511
msgid "Try portal_catalog rebuild as a fix."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:514
msgid "ComponentLookupError: cmf.ManagePortal"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:522
msgid "**Condition**: This error may happen when starting Plone"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:524
msgid "This is a sign of changed loading order, starting from Plone 4.1. You need to explicitly include *CMFCore/permissions.zcml* in your *configuration.zcml*."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:533
msgid "Content status history won't render - traceback is content path reversed"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:567
msgid "No solution"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:570
msgid "ContentProviderLookupError: plone.htmlhead"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:597
msgid "This is not a bug in Zope. It is caused by trying to render a Plone page frame in an context which has not acquisition chain properly set up. Plone ``main_template.pt`` tries to look up viewlet managers by acquistion traversing to parent objects. ``plone.htmlhead`` is the first viewlet manager to be looked up like this, and it will fail firstly."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:603
msgid "Some possible causes:"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:605
msgid "You are trying to embed main_template inside form/view which is already rendered in main_template frame. Please see how to :doc:`embed forms and wrap forms manually </develop/plone/forms/z3c.form>`."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:608
msgid "You might be using wrong ViewPageTemplate import (Five vs. zope.pagetemplate - explained elsewhere in this documentation)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:610
msgid "Make sure that you call __of__() method for views and other objects you construct by hand which expects themselves to be in the acquisition chain (normally discovered by traversing)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:614
msgid "https://bugs.launchpad.net/zope2/+bug/176566"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:617
msgid "ERROR ZODB.Connection Couldn't load state for 0x00"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:643
msgid "**Condition**: This error can happen when you try to start Zope"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:645
msgid "**Reason**: Data.fs might have been damaged. You might be using blobs with Plone 3 and they don't work perfectly. . . . or a bunch other issues which generally mean that your day is screwed."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:649
msgid "http://plonechix.blogspot.com/2009/12/definitive-guide-to-poskeyerror.html"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:652
msgid "Error _restore_index() when starting instance / ZEO server"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:696
msgid "**Reason**: Data.fs.index is corrupted."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:698
msgid "**Solution**: Remove Data.fs.index file. The index will be rebuilt on the launch."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:701
msgid "Error: Incorrect padding"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:715
msgid "**Condition**: This error can happen when you try to access any Plone site URL"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:717
msgid "**Reason**: It means that your browser most likely tries to serve bad cookies / auth info to Zope."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:720
msgid "**Solution**: Clear browser cache, cookies, etc."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:723
msgid "Exception: Type name not specified in createObject"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:741
msgid "Complete"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:744
msgid "ExpatError: portlets.xml: unbound prefix"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:764
msgid "**Condition**: This error can happen while installing a new portlet portlets.xml"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:766
msgid "**Reason**: You have ``i18n:attributes=\"title; description\"`` in your portlets.xml."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:769
msgid "**Solution**: Remove it or declare the i18n namespace in XML like this::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:773
msgid "Similar applies for actions.xml, etc."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:776
msgid "IOError: [Errno url error] unknown url type: 'https'"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:790
msgid "**Reason**: Python and Python socket modules have not been compiled with SSL support."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:792
msgid "**Solution**: Make sure that you have SSL development libraries installed (Ubuntu/Debian example)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:798
msgid "Make sure that Python is built with SSL support"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:804
msgid "You can test Python after compilation::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:814
msgid "Also you might want try"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:821
msgid "ImportError: Couldn't import ZPublisherEventsBackport"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:823
msgid "The following traceback on instance start-up::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:835
msgid "**Reason**: plone.postpublicationhook 1.1 depends on new package, ZPublisherEventsBackport, for Plone 3.3."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:837
msgid "**Solution**: You eed to include them both in your buildout. You need to include both eggs::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:845
msgid "ImportError: Inappropriate file type for dynamic loading"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:861
msgid "**Condition**: When starting Zope"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:863
msgid "**Reason**: You probably have files lying over from wrong CPU architecture"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:865
msgid "Hand copied eggs between servers"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:867
msgid "Migrated OS to new version"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:869
msgid "You have several Python interpreters installed and you try to run Zope using the wrong interpreter (the one which the code is not compiled for)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:872
msgid "**Solution**: Delete /parts and /eggs buildout folders, run bootstrap, run buildout."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:876
msgid "ImportError: No module named PIL"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:916
msgid "**Reason**: Python Imaging Library is not properly installed. The default PIL package does not work nicely as egg."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:919
msgid "**Solution**: Remove all existing PIL eggs from buildout/eggs folder."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:921
msgid "Install PIL for your development Python environment::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:926
msgid "ImportError: No module named html"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:939
msgid "**Condition**: This error can happen when starting an instance"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:941
msgid "**Reason**: The system lxml version is too old"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:943
msgid "Let's see if we are getting too old system wide lxml installation::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:961
msgid "If we cannot fix the system lxml (your system software depends on it) the only workaround is to create virtualenv. We cannot force Python 2.6, 2.5 or 2.4 not to use system libraries."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:968
msgid "Include standalone lxml + libxml compilation in your ``buildout.cfg``::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:979
msgid "If there are exiting lxml builds in buildout be sure they are removed::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:983
msgid "Then as the non-root re-bootstrap the buildout using non-system wide Python::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:991
msgid "... and after this it should no longer pull the bad system lxml."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:995
msgid "ImportError: No module named pkgutil"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1007
msgid "If you are using Eclipse, ``idelauncher.py`` has been updated for Plone 4."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1010
msgid "Invalid or Duplicate property id"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1072
msgid "**Condition**: This exception can happen during Plone migration to the newer version"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1074
msgid "It is caused by a property (site setting) which already exists and migration tries to create it. The usual reason is that one has edited site settings in new Plone version before running the migration."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1077
msgid "Try remove violating property ids from the site_properties manually in Zope."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1079
msgid "Potential candidates to be removed:"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1081
msgid "enable_inline_editing"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1083
msgid "lock_on_ttw_edit (boolean)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1085
msgid "Potential candidates which need to be added manually:"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1087
msgid "redirect_links (boolean)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1090
msgid "http://www.mail-archive.com/setup@lists.plone.org/msg03988.html"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1093
msgid "InvalidInterface: Concrete attribute"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1104
msgid "**Condition**: Your ``zope.schema`` based schema breaks on Plone startup."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1106
msgid "**Reason**: You have extra comma in your schema. Like this:"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1120
msgid "Iteration over non-sequence in _normalizeargs"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1123
msgid "Case 1"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1125
msgid "The following log trace will appear when you try to render the site, but you can access ZMI normally::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1168
msgid "This usually means that you have copied Data.fs from another system, but you do not have identical add-on product configuration installed."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1172
msgid "traceback to the console similar to the following if you have started Zope process on foreground::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1204
msgid "notice the 'Could not import class' message."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1206
msgid "**Reason**: You do not have identical product configuration on the new server. Please install the missing products and site should work fine again."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1209
msgid "Please note that you can get a 'TypeError: iteration over non-sequence' exception in other contexts not related with missing products at all. Look for the 'Could not import class' message in your traceback."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1214
msgid "Case 2"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1216
msgid "Example traceback::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1255
msgid "Reason: You are trying to use Plone 4 (Zope 2.12) add-on on Plone 3 (Zope 2.10). Zope interface declarations have been changed."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1257
msgid "**Solution 1**: Pick the older version for the add-on which is known to work with Plone 3. Make sure that you delete all \"too eggs\" from ``eggs/`` and ``src/`` folders."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1260
msgid "**Solution 2**: Upgrade your site to Plone."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1263
msgid "LinguaPlone: ImportError: cannot import name permissions"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1279
msgid "This seems to be Plone 4 issue of some sort. Import Products.ATContentTypes before importing LinguagePlone."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1283
#: ../manage/troubleshooting/exceptions.rst:1284
msgid "https://plone.org/products/linguaplone/issues/253"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1288
msgid "The standard multilingual solution for Plone 5 is :doc:`plone.app.multilingual </external/plone.app.multilingual/README>`, which has upgrade steps from LinguaPlone."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1291
msgid "NameError: name 'test' is not defined"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1293
msgid "**Condition**: This exception occurs when you try to customize TAL page template code using test() function. test() function has been dropped in Zope 3 page templates. You should no longer use test() function anywhere."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1297
msgid "**Solution**: replace test() with common Python expression in your customized template."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1299
msgid "For example the orignal::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1303
msgid "would need to be written as::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1308
msgid "NotFound error (Page not found) when accessing @@manage-portlets"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1310
msgid "If you get *Page not found* error when accessing @@manage-portlets the first thing you need to do is to enable logging of NotFound exceptions in ZMI in error_log."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1313
msgid "After that reload @@manage-portlets."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1315
msgid "When you try to access @@manage-portlets an exception a NotFound exception is raised::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1374
msgid "This usually means that your site has an portlet assignment which code is not present anymore."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1376
msgid "In this case you can see that portlet type \"collective.easytemplate.TemplatedPortlet\" is missing."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1378
msgid "Ä Check that you include the corresponding product (collective.easytemplate) in eggs= section in buildout.cfg"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1380
msgid "Reinstall removed egg which has the code for the portlet"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1382
msgid "Check that you include the corresponding product (collective.easytemplate) in zcml= section in buildout.cfg"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1384
msgid "Make sure that portlet name is the same in ZCML and GenericSetup XML"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1386
msgid "Make sure you use <include package=\".portlets\" /> in your code"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1389
msgid "Manually removing the portlet"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1391
msgid "If you have a traceback like this::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1422
msgid "It usually means that there is a portlet in your content which product code has been removed."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1424
msgid "Reinstall the add-on providing the portlet, remove the portlet and then uninstall the add-on again."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1427
msgid "NotFound while accessing a BrowserView based view"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1437
msgid "**Condition**: You'll get a NotFound error when accessing view using view traverse notation, event though the view exist."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1440
msgid "Example URL::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1444
msgid "**Reason**: This is because there is an exception raised in your view's __init__() method. Views are Zope multi-adapters. Exception in multi-adapter factory method causes ComponentLookUpError. Zope 2 publisher translates this to NotFound error."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1450
msgid "**Solution**: * Put :doc:`pdb break statement </manage/deploying/testing_tuning/testing_and_debugging/pdb>` to the beginning of the __init__() method of your view. Then step through view code to see where the exception is raisen. * If your view does not have __init__() method, then copy the source code __init__() method to your view class from the first parent class which has a view"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1455
msgid "POSKeyError"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1457
msgid "POSKeyError is when the database has been unable to convert a reference to an object into the object itself It's a low level error usually caused by a corrupt or incomplete database."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1460
msgid "You did not copy blobs when you copied Data.fs"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1462
msgid "Your data is corrupted"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1464
msgid "Glitch in database (very unlikely)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1467
msgid "http://rpatterson.net/blog/poskeyerror-during-commit"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1470
msgid "PicklingError: Can't pickle <class 'collective.singing.async.IQueue'>: import of module collective.singing.async"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1472
msgid "Singing & Dancing add-on does not uninstall cleanly. Try this command-line script to get it fixed (not tested). Some parts may work, some not, depending on how messed up your site is."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1475
msgid "Note that you need to have S & D present in the buildout when running this and then you can remove it afterwards::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1503
msgid "RuntimeError: maximum recursion depth exceeded (Archetypes field problem)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1516
msgid "**Condition**: The following code will generate this error when you try to access the object::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1534
msgid "**Reason**: Schema fields using AttributeStorage (usually images, files) **cannot** have ATFieldProperty in the class::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1541
msgid "**Solution**: simply remove ATFieldProperty() declaration for the problematic field. You cannot access the field value anymore by calling *object.memberimage* but you need to call *object.getMemberimage()* instead."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1545
msgid "TraversalError with lots of tuples and lists (METAL problem)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1565
msgid "Some template tries to call macro inside another template and the macro is not defined in the target template."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1568
msgid "TraversalError(subject, name) in expressions"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1617
msgid "**Reason**: From line ``Products/PageTemplates/Expressions.py`` you can see the error comes from TAL templates. TAL templates are trying to execute path based expressions."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1620
msgid "If you can view this error through error_log the error_log traceback will contain information what expression causes the exception. However if this only happens with unit tests you can have something like::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1629
msgid "manually injected to ``zope.tales.expression`` module."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1632
msgid "TraversalError: @@standard_macros"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1670
msgid ":doc:`Wrapping is missing from your form object </develop/plone/forms/z3c.form>`."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1672
msgid "**Solution**: ::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1690
msgid "TraversalError: No traversable adapter found"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1712
msgid "This traceback is followed by long dump of template code internals."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1714
msgid "Usual cause: Some add-on product fails to initialize."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1716
msgid "**Solution**: Start Zope in foreground mode (bin/instance fg) to see which product fails."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1719
msgid "TypeError: 'ExtensionClass.ExtensionClass' object is not iterable"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1744
msgid "**Condition**: This error tends to happen after moving a Data.fs to a new instance that does not have the identical add-ons to the original instance."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1746
msgid "In this example traceback the missing add-on is Products.Carousel which provides the marker interface Products.Carousel.interfaces.ICarousel"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1748
msgid "**Solution**: Install the missing add-on(s)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1751
msgid "TypeError: 'NoneType' object is not callable during upgrade"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1770
msgid "**Condition**: This error can happen during add-on install run / site upgrade"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1772
msgid "**Reason**: This means that your site database contains installed add-on utility objects for which Python code is no longer present."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1775
msgid "More pointers for resolving the tool can be found using pdb::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1780
msgid "This happens when you have used Singing and Dancing news letter product. This add-on is problematic and does not uninstall cleanly."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1783
msgid "Reinstall Singing & Dancing"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1785
msgid "Uninstall Singing & Dancing"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1787
msgid "Hope your site works again"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1791
msgid "http://opensourcehacker.com/2011/06/01/plone-4-upgrade-results-and-steps/"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1792
msgid "https://pypi.python.org/pypi/wildcard.fixpersistentutilities"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1795
msgid "TypeError: argument of type 'NoneType' is not iterable"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1809
msgid "**Reason** Plone 3 > Plone 4 migration has not been run. Run the migration in *portal_migrations* under ZMI."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1813
msgid "TypeError: len() of unsized object in smtplib"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1844
msgid "**Reason**: Your SMTP password has been set empty. Please reset your SMTP password in *Mail* control panel."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1847
msgid "http://plone.293351.n2.nabble.com/Plone-3-3-5-sending-emails-len-of-unsized-object-error-NO-ESMTP-PASSWORD-tp5415484p5415484.html"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1850
msgid "Unauthorized: The object is marked as private"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1872
msgid "**Condition**:This error is raised when you try to access view functions or objects for a view, which you call manually from the code."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1875
msgid "**Reason**: View acquisition chain is not properly set up and the security manager cannot traverse acquisition chain parents to properly determine permissions."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1878
msgid "**Solution**: You need to use __of__() method to set-up the acquisition chain for the view::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1890
msgid "Unknown message (kss optimized for production mode) in Javascript console"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1892
msgid "This is a KSS error message. KSS is an technology used in Plone 3 and started to be phased out in Plone 4."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1895
msgid "**Possible causes**:"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1897
msgid "Problems with KSS files (see portal_kss registry)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1899
msgid "Browser bugs (Google around for the fixes)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1901
msgid "**Solution**:"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1903
msgid "Go to portal_kss"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1905
msgid "Remove are stale entries (missing files, marked on red)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1907
msgid "Also:"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1909
msgid "Put portal_kss for debug mode (in development environment)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1912
msgid "ValueError: Non-zero version length. Versions aren't supported."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1930
msgid "**Condition**: When trying to open any page"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1932
msgid "**Reason**: Most likely a corrupted Data.fs. Stop zeoserver. Recopy Data.fs. Recopy blobs."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1935
msgid "http://stackoverflow.com/questions/8387902/plone-upgrade-3-3-5-to-plone-4-1-2"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1936
msgid "https://mail.zope.org/pipermail/zodb-dev/2010-September/013620.html"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1939
msgid "Zope suddenly dies on OSX without a reason"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1941
msgid "Symptoms: you do a HTTP request to a Plone site running OSX. Zope quits without a reason."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1943
msgid "Reason: Infinite recursion is not properly handled by Python on OSX. This is because OSX C stack size is smaller than Python default stack size. The underlying Python interpreter dies before being able to raise stack size limit exception."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1947
msgid "**Solution**"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1949
msgid "Edit ``python-2.4/lib/python2.4/site.py`` or corresponding Python interpreter ``site.py`` file (Python site installation customization file)."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1952
msgid "Put in to the first code line::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1956
msgid "This will force smaller Python stack not exceeding native OSX C stack. You might want to test other values and report back the findings."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1960
msgid "http://blog.crowproductions.de/2008/12/14/a-buildout-to-tame-the-snake-pit/ (comments)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1963
msgid "from zopeskel.basic_namespace import BasicNamespace"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1965
msgid "When starting ZopeSkel::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1972
msgid "Or on paster with local commands::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1980
msgid "System-wide templer / paster / zopeskel installation is affecting your buildout installation."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1982
msgid "Remove system-wide installation::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1986
msgid "Re-run buildout."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1988
msgid "Enjoy."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1991
msgid "getUtility() fails: ComponentLookupError"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:1999
msgid "**Solution**: Make sure that your class object implements in the utility interface in the question::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2006
msgid "get_language: 'NoneType' object has no attribute 'getLocaleID'"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2067
msgid "Some sort of Products.CacheSetup related problem on Plone 3.3.x, hiding the real error. Zope component architecture loading has failed (you are missing critical bits). This is just the first entry where it tries to use an unloaded code."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2071
msgid "Start your instance on the foreground and you should see the actual error."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2074
msgid "importToolset: TypeError: 'NoneType' object is not callable"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2089
msgid "**Condition**: This happens when you try to install an add-on product through Add-ons configuration panel."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2092
msgid "**Reason**: You have leftovers from some old add-on installation (persistent tool) and Python egg code is no longer present for this tool."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2095
msgid "You should see a warning in logs giving you a hint when running add-on installer::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2099
msgid "**Solution**: see informatin below (Removing portal tools part)"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2103
msgid "Example: start site debug shell::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2107
msgid "Then run the script for your site id and problem tool id::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2123
msgid "In debug shell you can also check what all leftoverts toolset contains::"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2141
msgid "http://plone.293351.n2.nabble.com/importToolset-NoneType-object-is-not-callable-upon-product-install-td5553065.html"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2144
msgid "z3c.form based form updateWidgets() raises ComponentLookupError"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2147
msgid "Case: missing plone.app.z3cform migration"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2163
msgid "**Reason**: You are running Plone 4 with ``plone.app.directives`` form which does not open. The reason is that you most likely have old ``plone.app.z3cform`` installation which is not upgraded properly. In particular, the following layer is missing"
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2172
msgid "This enables ``z3c.form`` widgets on a Plone site."
msgstr ""

#: ../manage/troubleshooting/exceptions.rst:2174
msgid "**Solution**: *portal_setup* > *Import*. Choose profile *Plone z3cform support*. and import. The layer gets properly inserted to your site database."
msgstr ""

#: ../manage/troubleshooting/images.rst:3
msgid "Image troubleshooting"
msgstr ""

#: ../manage/troubleshooting/images.rst:7
msgid "Problems with imaging libraries, image loading and image scaling."
msgstr ""

#: ../manage/troubleshooting/images.rst:12
msgid "How to test see if your Python Imaging set-up works"
msgstr ""

#: ../manage/troubleshooting/images.rst:14
msgid "Example how to check if Python, Python Imaging Library (PIL) and libjpeg are correctly working together."
msgstr ""

#: ../manage/troubleshooting/images.rst:17
msgid "Get a sample image::"
msgstr ""

#: ../manage/troubleshooting/images.rst:21
msgid "Start Python with Zope libraries in PYTHONPATH or Plone debug shell (latter)::"
msgstr ""

#: ../manage/troubleshooting/images.rst:27
msgid "Run the following on the interactive Python prompt started above::"
msgstr ""

#: ../manage/troubleshooting/images.rst:36
msgid "No Python exceptions should be risen."
msgstr ""

#: ../manage/troubleshooting/images.rst:40
msgid "Images are not loading"
msgstr ""

#: ../manage/troubleshooting/images.rst:42
msgid "Plone is not loading images or resized images are not available is usually caused by broken PIL installation: PIL used by Python virtual machine driving Plone does not have proper native libraries (libjpeg) available to perform imaging operations."
msgstr ""

#: ../manage/troubleshooting/images.rst:46
msgid "If you run Zope on foreground you usually see errors like this::"
msgstr ""

#: ../manage/troubleshooting/images.rst:65
msgid "In the above case PYTHONPATH incorrectly tries to load Python 2.5 libraries, though Plone 3.x exclusively uses Python 2.4. In this case the proper fix is to clean-up damaged start up scripts in bin/ folder::"
msgstr ""

#: ../manage/troubleshooting/images.rst:74
msgid "This can be achieved by"
msgstr ""

#: ../manage/troubleshooting/images.rst:76
msgid "Removed all py2.5 eggs under eggs/ folder"
msgstr ""

#: ../manage/troubleshooting/images.rst:78
msgid "Removing setuptools egg which may contain references to Python 2.5"
msgstr ""

#: ../manage/troubleshooting/images.rst:80
msgid "Running bootstrap.py using python2.4"
msgstr ""

#: ../manage/troubleshooting/images.rst:82
msgid "Rerunning buildout after this"
msgstr ""

#: ../manage/troubleshooting/images.rst:84
msgid "For further debugging the problem you can start the particular Python interpreter and try to import _imaging yourself."
msgstr ""

#: ../manage/troubleshooting/images.rst:86
msgid "Run Python in verbose mode to print all imports (the example below has been shortened)::"
msgstr ""

#: ../manage/troubleshooting/images.rst:98
msgid "In this case we have a custom Python build based on `collective.buildout.python <http://blog.mfabrik.com/2010/07/16/easily-install-all-python-versions-under-linux-and-osx-using-collective-buildout-python/>`_ recipe. It will compile us a custom libjpeg version and should not use OS libjpeg::"
msgstr ""

#: ../manage/troubleshooting/images.rst:108
msgid "However, looks like this libjpeg does not end up in the OS LD_LIBRARY_PATH import list automatically."
msgstr ""

#: ../manage/troubleshooting/images.rst:112
msgid "http://permalink.gmane.org/gmane.comp.web.zope.plone.product-developers/4946"
msgstr ""

#: ../manage/troubleshooting/images.rst:115
msgid "IOError when scaling images on Plone 4"
msgstr ""

#: ../manage/troubleshooting/images.rst:130
msgid "This means that libjpeg setup is not working. See above to how to test your set-up."
msgstr ""

#: ../manage/troubleshooting/images.rst:133
msgid "Installing libraries on Ubuntu / Debian"
msgstr ""

#: ../manage/troubleshooting/images.rst:135
msgid "This applies if you are using system Python to run Plone. Version may vary so ``apt-cache search`` and ``grep`` commands are your friends::"
msgstr ""

#: ../manage/troubleshooting/images.rst:142
msgid "Forcing libjpeg path"
msgstr ""

#: ../manage/troubleshooting/images.rst:144
msgid "Try in buildout.cfg::"
msgstr ""

#: ../manage/troubleshooting/images.rst:153
msgid "libjpeg.so.8: cannot open shared object file: No such file or directory"
msgstr ""

#: ../manage/troubleshooting/images.rst:155
msgid "On Ubuntu you'll get this error when you try::"
msgstr ""

#: ../manage/troubleshooting/images.rst:160
msgid "Some tips"
msgstr ""

#: ../manage/troubleshooting/images.rst:162
msgid "http://stackoverflow.com/questions/5545580/pil-libjpeg-so-8-cannot-open-shared-object-file-no-such-file-or-directory"
msgstr ""

#: ../manage/troubleshooting/index.rst:2
#: ../manage/upgrading/troubleshooting.rst:3
msgid "Troubleshooting"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:3
msgid "Manually Removing Local Persistent Utilities"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:9
msgid "This document explains how you can manually remove local persistent utilities that were not properly removed from a product while uninstalling."
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:14
msgid "**Update**"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:16
msgid "There is now a useful tool available, `wildcard.fixpersistentutilities <https://pypi.python.org/pypi/wildcard.fixpersistentutilities>`_ ,  to address these issues TTW (Through The Web). I would suggest trying it before you go through this article."
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:20
msgid "Purpose"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:22
msgid "Occasionally you'll download and install a product in Plone that uses local persistent utilities. This usually seems pretty innocent in itself; however, it sometimes happens that when you uninstall the product and remove its egg from the file system, the utility is still registered. This will essentially break your instance unless you make the egg available again so the ZODB can reference the utilities during lookups. This how-to will explain how to remove these utilities manually."
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:28
msgid "Symptoms"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:30
msgid "You'll find zope throwing errors like this,"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:36
msgid "or"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:46
msgid "You will need appropriate access to the zope server in order to run the site in debug mode."
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:49
msgid "Step by step"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:51
msgid "First off, fire up the instance in debug mode"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:57
msgid "Get the site manager for your Plone instance. 'app' references the zope root."
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:65
msgid "Then you'll want to import the guilty utility's interface, unregister it and delete it. It should look somethings like this,"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:85
msgid "Now you need to commit your changes to the ZODB."
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:95
msgid "An Example"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:97
msgid "I found myself in this situation with the Singing and Dancing product so I'll just go through the code here to fix both a normal utility and named utility found in it."
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:147
msgid "Removing portal tools"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:149
msgid "If you still have problems (re)installing products after you removed the broken local persistent components, you probably have to clean the Portal setup tool.You probably see something like this in the error log :"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:166
msgid "References"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:168
msgid "I didn't by any means figure this all our on my own so please do not give me credit for it. Actually, most of this is shamelessly stolen. Thanks for the original fixers of the problem! Here are my references:"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:170
msgid "http://blog.fourdigits.nl/removing-a-persistent-local-utility"
msgstr ""

#: ../manage/troubleshooting/manual-remove-utility.rst:171
msgid "http://blog.fourdigits.nl/removing-a-persistent-local-utility-part-ii"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:3
msgid "Database and transactions troubleshooting"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:7
msgid "How to debug and fix ZODB database problems in Plone"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:14
msgid "This document contains information to fix and debug ZODB databases with Plone."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:17
msgid "BLOBs and POSKeyErrors"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:19
msgid "The `Plone CMS <https://plone.org>`_ from version 4.x onwards stores files and images uploaded to the `ZODB <http://www.zodb.org/>`_ as blob. They exist in a ``var/blobstorage`` folder structure on the file system, files being named after (opaque) persistent object ids. When using the default backend, the objects themselves, without file payload, are stored in an append-only database file called *filestorage* and usually the name of this file is ``Data.fs``."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:29
msgid "If you copy the Plone site database object data (``Data.fs``) and forget to copy the ``blobstorage`` folder(s), or if data gets out of the sync during the copy, various problems appear on the Plone site:"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:34
msgid "You cannot access a content item for which the a corresponding blob file is missing from the file system;"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:37
msgid "you cannot rebuild the ``portal_catalog`` indexes;"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:39
msgid "database packing may fail."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:41
msgid "Instead, you'll see something like this - an evil ``POSKeyError`` exception (POS referring to Persistent Object Storage)::"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:53
msgid "The proper solution to this problem is to:"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:55
msgid "Re-copy ``blobstorage`` folder;"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:57
msgid "restart Plone twice in foreground mode (sometimes a freshly copied blobstorage folder does not get picked up - some kind of timestamp issue?). Restarting ZEO clients once seems to be enough."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:62
msgid ":doc:`Copy a Plone site </manage/deploying/copy>`"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:64
msgid "However you may have failed. You may have damaged or lost your ``blobstorage`` forever. To get the Plone site to a working state, all content with bad BLOB data must be deleted (which usually entails losing some site images and uploaded files)."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:70
msgid "Below is Python code for a :doc:`BrowserView </develop/plone/views/browserviews>` which you can drop in to your own Plone. It creates an admin view which you can call directly via an URL. This code will walk through all the content on your Plone site and try to delete bad content items with BLOBs missing."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:75
msgid "The code handles both Archetypes and Dexterity subsystems' content types."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:79
msgid "Fixing Dexterity blobs with this code has never been tested - please feel free to update the code in collective.developermanual on GitHub if you find it not working properly."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:84
msgid "The code, ``fixblobs.py``::"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:235
msgid "http://stackoverflow.com/questions/8655675/cleaning-up-poskeyerror-no-blob-file-content-from-plone-site"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:237
msgid "https://pypi.python.org/pypi/experimental.gracefulblobmissing/"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:241
msgid "Transactions"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:243
msgid "Transactions are usually problematic only when many ZEO front-end clients are used."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:247
msgid "ConflictError"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:249
msgid "When the site gets more load, ``ConflictError``\\s start to occur. Zope tries to solve the situation by replaying HTTP requests for ``ConflictError``\\s and has a default threshold (3) of how many times the request is replayed."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:256
msgid "https://www.andreas-jung.com/contents/on-zodb-conflict-resolution"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:259
msgid "How to debug which object causes ``ConflictError``\\s"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:261
msgid "``ConflictError``\\s are caused by concurrent transactions trying to write to the same object(s) - usually ``portal_catalog``. They are harmless, but slow down badly coded sites. Plone will retry the HTTP request and transaction three times before giving up."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:266
msgid "The OID is visible in the ConflictError traceback."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:268
msgid "You can turn OID back to the corresponding Python object, as mentioned by A. Jung::"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:275
msgid "If every transaction appears as write transaction"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:277
msgid "If you are not careful, you may accidentally write code which turns all transactions to write transactions. This typically happens when you call some method without realizing that that method eventually modifies a persistent object, causing a database write."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:283
msgid "Symptoms:"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:285
msgid "Your Undo tab in ZMI will be full of entries, one added per page request."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:288
msgid "If you run the server in single Zope server mode, it is slow."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:290
msgid "If you run the server in ZEO mode you get the exceptions like one below. It may happen even with one user. This is because each page load requres more than one HTTP request: HTML load, image load, CSS load and so on. Browser makes many requests per page and those transactions are conflicting, because they are all write transactions."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:297
msgid "Traceback example::"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:316
msgid "How to debug it"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:318
msgid "Zope 2 doesn't have many well-documented ZODB debugging tools. Below is one snippet to examine the contents of the last transactions of an offline ``Data.fs`` file. It is an evolved version of `this original script <http://www.mail-archive.com/zodb-dev@zope.org/msg04387.html>`_."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:324
msgid "Do something on a badly behaving site."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:326
msgid "Stop Zope instance."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:328
msgid "Run the script below (``debug.py``) on the ``Data.fs`` file to see what objects have been changed."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:331
msgid "Guess the badly behaving code from the object class name."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:333
msgid "Example how to run the script for the last 30 transaction under a Zope egg environment using the ``zopepy`` script::"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:339
msgid "The following is obsolete with current Zope. FileIterator does not take a ``pos`` argument any more."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:342
msgid "Code for debug.py::"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:469
msgid "zeostorage Client has seen newer transactions than server"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:475
msgid ", you can fix it by removing ``cache-data.zec`` from ``parts/instace/var/``."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:479
msgid "Updating objects created by older code"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:481
msgid "In the course of development, classes may be renamed or moved. When an object is read from the ZODB, the class required to unpickle the serialized object is named in the pickle data. If this name cannot be imported, you have a broken object on your hands."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:486
msgid "In the Zope event log that will show up as, for example::"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:490
msgid "To make the object usable again, the reference needs to be updated to refer to a class that can instantiate this object. One tool that can help you with this is `zodbupdate <https://pypi.python.org/pypi/zodbupdate>`_"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:495
msgid "In this case, the ``ATSimpleStringCriterion`` class in question has moved from ``Products.ATContentTypes.types.criteria.ATSimpleStringCriterion`` to ``Products.ATContentTypes.criteria.simplestring``."
msgstr ""

#: ../manage/troubleshooting/transactions.rst:499
msgid "To make ``zodbupdate`` handle this, add a ``zodbupdate`` entry point to ``ATContentTypes``. Depending on your configuration, that may look like this:"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:509
msgid "Next, define ``rename_dict`` in the ``__init__.py`` of the named package, e.g.::"
msgstr ""

#: ../manage/troubleshooting/transactions.rst:521
msgid "As always, work on a copy of your data first, before working on the live site."
msgstr ""

#: ../manage/troubleshooting/unicode.rst:3
msgid "Unicode encoding and decoding"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:8
msgid "Introduction: Why unicode is difficult?"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:10
msgid "Python 2.x does not make a clear distinction between:"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:12
msgid "8-bit strings (byte data)"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:13
msgid "16-bit unicode strings (character data)"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:15
msgid "Developers use these two formats interchangeably, because it is so easy and Python does not warn you about this."
msgstr ""

#: ../manage/troubleshooting/unicode.rst:18
msgid "However, it will only work as long as the input does not encounter any international, non-ASCII, characters.  When 8-bit encoded string data and 16-bit raw Unicode string data gets mixed up, by being run through encoding first, really nasty things start to happen."
msgstr ""

#: ../manage/troubleshooting/unicode.rst:23
msgid "Read more:"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:26
msgid "http://evanjones.ca/python-utf8.html"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:29
msgid "safe_unicode()"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:31
msgid "Plone's core contains a helper function which allows you to safely decode strings to unicode without fear of UnicodeDecodeException. Use this in your own code to decode unicode in the cases you are not sure if the input is 8-bit bytestrings or real unicode strings."
msgstr ""

#: ../manage/troubleshooting/unicode.rst:36
msgid "https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/utils.py#L434"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:49
msgid "sys.setdefaultencoding()"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:51
msgid "Python has a **system-wide** setting to enforce encoding of all unicode input automatically to utf-8 when used as 8-bit string."
msgstr ""

#: ../manage/troubleshooting/unicode.rst:56
msgid "This is a wrong way to fix things and it will break other things. You have been warned."
msgstr ""

#: ../manage/troubleshooting/unicode.rst:59
msgid "http://tarekziade.wordpress.com/2008/01/08/syssetdefaultencoding-is-evil/"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:61
msgid "There is also ``sitecustomization.py`` trick to set ``sys.setdefaultencoding(\"utf-8\")`` on per-script basis"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:63
msgid "http://stackoverflow.com/a/7892892/315168"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:66
msgid "UnicodeEncodeError"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:68
msgid "``UnicodeEncodeError``: 'ascii' codec can't encode character u'\\xe4' in position 4: ordinal not in range(128)"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:70
msgid "This is usually because you are trying to output/store unicode data using outdated methods, e.g."
msgstr ""

#: ../manage/troubleshooting/unicode.rst:73
msgid "printing,"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:74
msgid "logging,"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:75
msgid "using 7-bit ids ..."
msgstr ""

#: ../manage/troubleshooting/unicode.rst:77
msgid "Instead of::"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:81
msgid "do::"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:85
msgid "Filtering example::"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:96
msgid "UnicodeDecodeError"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:98
msgid "http://wiki.python.org/moin/UnicodeDecodeError"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:102
msgid "http://pyref.infogami.com/__unicode__"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:105
msgid "Infamous non-breaking Unicode space \\\\xa0"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:107
msgid "Press CTRL+space / AltGr space on Linux to accidentally create it."
msgstr ""

#: ../manage/troubleshooting/unicode.rst:109
msgid "**You can't see it.** But it breaks everything."
msgstr ""

#: ../manage/troubleshooting/unicode.rst:112
msgid "How to fix"
msgstr ""

#: ../manage/troubleshooting/unicode.rst:114
msgid "Example to how to fix non-breaking space characters which have ended up in reStructuredText ``.txt`` files.  This is Unicode character code A0."
msgstr ""

#: ../manage/troubleshooting/unicode.rst:117
msgid "Example fix_wtf_space.py::"
msgstr ""

#: ../manage/upgrading/addon_upgrade.rst:3
msgid "Upgrade add-on products"
msgstr ""

#: ../manage/upgrading/addon_upgrade.rst:7
msgid "The steps to take to migrate your third party products"
msgstr ""

#: ../manage/upgrading/addon_upgrade.rst:9
#: ../manage/upgrading/non_buildout_based_upgrade.rst:19
msgid "Shut down your Plone server instance."
msgstr ""

#: ../manage/upgrading/addon_upgrade.rst:10
msgid "If you specified concrete versions of the third-party products in your *buildout.cfg* file (what is so-named \"pinning\"), like *Products.CacheSetup* = 1.0, update these references to point to the new versions. Without pinning, i.e. specifying only, for example, *Products.CacheSetup* and no version, buildout will pick the newest version of the products by default."
msgstr ""

#: ../manage/upgrading/addon_upgrade.rst:12
msgid "Run *bin/buildout*. Wait until all new software is downloaded and installed."
msgstr ""

#: ../manage/upgrading/addon_upgrade.rst:13
msgid "Start Plone again - your site may be inaccessible until we have performed the next step - don't panic :)"
msgstr ""

#: ../manage/upgrading/addon_upgrade.rst:14
msgid "Navigate to the quickinstaller in the ZMI, and reinstall or upgrade products if you can (products that support both your current and new version of Plone). Perform product-specific upgrade procedures (if any). You will find these in the documentation of each product."
msgstr ""

#: ../manage/upgrading/index.rst:3
msgid "Plone Upgrade Guide"
msgstr ""

#: ../manage/upgrading/index.rst:7
#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:8
msgid "Instructions and tips for upgrading to a newer Plone version."
msgstr ""

#: ../manage/upgrading/intro.rst:7
msgid "What we are talking about."
msgstr ""

#: ../manage/upgrading/intro.rst:13
msgid "What does it mean to upgrade Plone?"
msgstr ""

#: ../manage/upgrading/intro.rst:15
msgid "This document covers the procedures and issues involved in upgrading an existing Plone installation. This involves both the upgrading of the program set, and migration of the site itself."
msgstr ""

#: ../manage/upgrading/intro.rst:17
msgid "Generally, you will often see the word *migration* used as the word we use to describe the process of getting your Plone site from one version of a given component to a newer version. For most people, this means upgrading Plone to a newer release, for example from 2.5.x to 3.3.x."
msgstr ""

#: ../manage/upgrading/intro.rst:19
msgid "Migration is necessary because the internals of Plone sometimes change to support new functionality. When that's the case, the content which is stored in your Plone instance may not match what the new version of the software expects. Plone has a builtin tool that migrates existing content to the new structure."
msgstr ""

#: ../manage/upgrading/intro.rst:21
msgid "This guide describes migration in Plone, specifically how you upgrade between different versions."
msgstr ""

#: ../manage/upgrading/intro.rst:23
msgid "Before migrating you should read this entire document to understand the potential impact migrating will have on your Plone site. In particular, read everything in the *common problems and issues* section."
msgstr ""

#: ../manage/upgrading/intro.rst:25
msgid "The guide applies to all contemporary versions of Plone, and we have also included the older, unsupported versions for reference."
msgstr ""

#: ../manage/upgrading/intro.rst:29
msgid "A note about version numbering and terminology"
msgstr ""

#: ../manage/upgrading/intro.rst:31
msgid "Up until Plone 2.1, the policy was that each of our major releases would be incremented 0.1, like a standard framework policy. This caused some confusion and false expectations on how complex an upgrade would be, and have since changed this policy."
msgstr ""

#: ../manage/upgrading/intro.rst:33
msgid "Starting after the 2.5 release, we have moved to a policy that increases the version number to a .0 on every major release. This means that when we say a *major release*, we are referring to a x.0 release, whereas a minor release has the version numbering 2.5.x or 3.0.x."
msgstr ""

#: ../manage/upgrading/intro.rst:35
msgid "In addition to the general procedure there are :doc:`version-specific migration guides </manage/upgrading/version_specific_migration/index>`. These guides contain more specific instructions and valuable information that has been collected from real-life migration cases."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:3
msgid "Upgrading Non-Buildout-based Plone Instances"
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:7
msgid "How to upgrade versions of Plone that predate the use of buildout-based installers."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:9
msgid "**This document applies only to older Plone installations that do not use buildout.  Generally, this means Plone 1 - Plone 3.x, although some custom installations of Plone 3 can be buildout-based.  If you are using Plone 4, please see \":doc:`General procedure for Plone 4.x minor version upgrades with buildout. </manage/upgrading/plone4_minor_upgrade.rst>`\"**"
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:11
msgid "When upgrading to a newer release of Plone, it is important to run the content migration procedure, since internal structures in Plone might have changed since the last version. This is the general procedure for upgrading."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:14
msgid "Before you start upgrading anything, make sure you have a backup."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:16
msgid "The basic manual procedure is detailed below. If you are using the installers, you can skip the part about moving away directories and replacing them with the new ones (step 3-4) - it should be handled by the installer for you."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:18
msgid "Back up your entire Plone directory. If you're using WebDAV, make sure all objects are unlocked in Control Panel → WebDAV Lock Manager."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:20
msgid "Remove the Product directories you want to replace (ie. the ones in the package you downloaded)."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:21
msgid "Put in the new Product directories."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:22
msgid "Start Plone again - your site may be inaccessible until we have performed the next steps - don't panic :)"
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:23
msgid "Go to http://yoursite/manage (aka. the ZMI) and click portal_migrations"
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:24
msgid "Make sure you are on the Upgrade tab (in older versions, this tab is called Migrate) — it will state something like::"
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:29
msgid "This means that you have to run the upgrade procedure to be updated to 3.1.1."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:30
msgid "Click the Upgrade button. If you want to see what steps the upgrade would go through without making the actual changes, you can check the Dry Run option - this will do the exact same steps as a normal upgrade/migration will do, but not write anything to the database."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:32
msgid "The site will now be updated, this may take a while, depending on which versions you upgrade from/to. For example, the upgrade from Plone 2.0 to Plone 2.1 involves conversion and re-cataloging of all content in your site, so if you have a big site, this may take a while. Be patient."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:34
msgid "For those of you who wonder why we don't do this automatically, the reason is that we don't want to modify your data, and you should have the opportunity to back up the data before doing the upgrade."
msgstr ""

#: ../manage/upgrading/non_buildout_based_upgrade.rst:36
msgid "**For advanced/enterprise users:** It is normally possible to upgrade in-place (at least between minor versions) without any site downtime if you run ZEO and multiple load-balanced instances. See the ZEO documentation for more information if you need this."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:3
msgid "General advice on updating from a non-buildout to buildout-based installation"
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:7
msgid "Some hints for those stepping onto the buildout bandwagon."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:9
msgid "Beginning with Plone 3.2, we're no longer distributing Plone in the traditional tarballs (archive files) of Zope products. Instead, Plone is distributed as a set of Python Packages. These packages bear information about dependencies, and they generally provide us with a much better way of managing a complex web of Python, Zope and Plone components."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:11
msgid "Buildout, a sophisticated configuration management system from the creator of Zope, is now the recommended way for managing Plone installations. This poses a one-time challenge for folks upgrading from old to new-style installs. It should, though, make future updates much easier."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:13
msgid "The `Managing projects with Buildout <http://docs.plone/org/4/en/old-reference-manuals/buildout/index.html>` tutorial provides a great introduction to buildout and its use. Here, we'll just offer a few hints on making your move to buildout as painless as possible."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:15
msgid "Give up any idea of doing an in-place update. Many of us got into the habit with earlier versions of Plone of simply unpacking the tarball for a new version into the \"Products\" directory of the old install. That was never a good idea for a major version update, and it's just not feasible while trying to switch to buildout. The internal layout of the files has just changed too much. Changing to buildout will make it much easier, though, to upgrade in place in the future."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:16
msgid "Install a new, buildout-based Plone version to a different place than your old installation. Different path, different drive, different server, different hosting facility — whichever you need."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:17
msgid "Use a current Plone installer if available (all installers for 3.2+ are buildout-based):"
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:19
msgid "If you're using Linux/FreeBSD/\\*nix, please strongly consider using the Unified Installer. If you didn't like something about the way it worked for 2.x, please take a look again. It's a lot more versatile. It includes options to change target directory, do ZEO or stand-alone installs, and to use an already installed Python."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:20
msgid "If you're using Darwin on a production server, it's a good idea to install the XCode tools and use the Unified Installer. You'll want the versatility."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:21
msgid "If you're using OS X on a workstation, it's fine to use the OS X installer, which is meant to be convenient."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:22
msgid "If you're on Windows, use the Windows installer or prepare to learn a lot."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:24
msgid "If you don't want to use an installer, that's OK, but protect your system Python. Learn to use `virtualenv <https://pypi.python.org/pypi/virtualenv>`_, which will allow you to create isolated Python sandboxes. Install virtualenv first, create a sandbox, then use easy_install in the sandbox to install ZopeSkel. Follow the buildout tutorial's instructions for creating your buildout."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:25
msgid "Fire up your new installation and make sure it's working. Try it out with an empty database. If you're using it on the same server, you should adjust the ports first to make sure you're not trying to use the same TCP/IP ports. This is a common error. Look for the \"http-address\" address in your buildout.cfg file. If you've used the Unified or OS X installers, it's even easier as the ports settings are in the top of the file."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:26
msgid "Evaluate your add-on product list. Enumerate all the add-on Zope and Plone products installed on your own server. Divide the list into those that have egg (Python Package) updates available and those that don't."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:27
msgid "Copy the add-on products that don't have egg versions from the \"Products\" directory of the old install into the \"products\" directory (note the small \"p\") of your new install. Check ownership and permissions of the copied files (failure to do this is another common error)."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:28
msgid "Add the names of new, egg-based products to the \"[eggs]\" section of your buildout.cfg. Check the install instructions to see if they also need a ZCML slug specification. Re-run buildout to fetch and install the new eggs."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:29
msgid "Start your new install in foreground mode (bin/plonectl fg or bin/instance fg) to watch product loading and discover errors. Fix product problems until you have a clean start."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:30
msgid "Copy the Data.fs file from your old install's var directory to the new one's var/filestorage directory. Check ownership and permissions!"
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:31
msgid "Do the foreground start dance again. Solve problems."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:32
msgid "Go live."
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:35
msgid "A word on warnings"
msgstr ""

#: ../manage/upgrading/non_buildout_to_buildout_upgrade.rst:37
msgid "Whenever you run buildout and load new packages that have skin layers, you're likely to receive warnings indicating \"'return' outside function.\" Ignore them, they're harmless. The warnings are produced when Python attempts to compile skin-layer Python scripts, which do indeed contain 'return' outside of function, but run in a context in which this is OK."
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:4
msgid "Upgrading Plone 4 within 4.x.x series dot minor releases"
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:8
msgid "Steps for minor upgrades within the Plone 4 Major Release."
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:13
msgid "*Plone 4 uses buildout, which makes minor version upgrades very simple.*"
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:15
msgid "Plone 4.0 and above use buildout in its packaged installers. Among the many benefits of buildout is the fact that it makes minor Plone version upgrades extremely simple. Here is the general procedure, which is based on the buildout shipped with the Plone Unified Installer."
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:23
msgid "Before performing any Plone upgrade, you should always have a complete backup of your site. See the :doc:`Preparations </manage/upgrading/preparations>` section of this manual for more details."
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:26
msgid "In addition, you should check the :doc:`Version-specific migration tips </manage/upgrading/version_specific_migration/index>` section of this manual for any notes that may apply to the specific version upgrade you're about to perform."
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:29
msgid "**1) Edit your buildout.cfg file**"
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:31
msgid "Out of the box, Plone's Unified Installer includes a buildout.cfg (typically located at your-plone-directory/zinstance/buildout.cfg) file that contains the following parameter::"
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:38
msgid "This tells buildout to get all of its package versions from the included versions.cfg file.  Notice that there is another line, commented out, that points to dist.plone.org.  This location will always contain the most recent versions that comprise the latest release in the Plone 4.1 series.  (You can also replace 4.1-latest with 4.0-latest or 4.2-latest, or another other existing minor release in the 4.x series.)"
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:40
msgid "To upgrade your buildout to use the latest Plone 4.1.x release, comment out versions.cfg and uncomment the line pointing to dist.plone.org, so it looks like this::"
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:47
msgid "Save your changes."
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:49
msgid "**2) Stop Plone, Rerun Buildout, Restart Plone**"
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:51
msgid "Now that you've edited your buildout file, stop Plone (*bin/plonectl stop*), rerun buildout with the command::"
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:55
msgid "This may take a few minutes as Plone downloads new releases. When buildout finishes running, restart your Plone instance (*bin/plonectl start*)."
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:57
msgid "**3) Run Migration Script**"
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:59
msgid "Visit your Zope instance's ZMI (http://yoursite:8080). You will likely see a message prompting you to run Plone's migration script for each site in your instance, e.g."
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:61
msgid "``This site configuration is outdated and needs to be upgraded.``"
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:63
msgid "Click **Upgrade** button next to the site and the upgrade will run. Check the *Dry Run* checkbox if you want to test the migration before you execute it."
msgstr ""

#: ../manage/upgrading/plone4_minor_upgrade.rst:65
msgid "Voila! You've successfully upgraded your Plone site. Plone on!"
msgstr ""

#: ../manage/upgrading/preparations.rst:3
msgid "Preparations"
msgstr ""

#: ../manage/upgrading/preparations.rst:7
msgid "Things to do before you migrate Plone."
msgstr ""

#: ../manage/upgrading/preparations.rst:12
msgid "Gather information"
msgstr ""

#: ../manage/upgrading/preparations.rst:14
msgid "Read the \"What's new in...\" for your relevant plone version, and read the release notes. You'll find these in the CMFPlone directory of the distribution of the new version of Plone."
msgstr ""

#: ../manage/upgrading/preparations.rst:16
msgid "Check for dependencies"
msgstr ""

#: ../manage/upgrading/preparations.rst:18
msgid "Read the release notes for the Plone release you are upgrading to, in particular:"
msgstr ""

#: ../manage/upgrading/preparations.rst:20
msgid "What version of Python is required?"
msgstr ""

#: ../manage/upgrading/preparations.rst:21
msgid "What version of Zope is required?"
msgstr ""

#: ../manage/upgrading/preparations.rst:22
msgid "Do you need any new python libraries?"
msgstr ""

#: ../manage/upgrading/preparations.rst:24
msgid "Make sure all the add-on products you are using have updated to support the version of Plone you are upgrading to."
msgstr ""

#: ../manage/upgrading/preparations.rst:25
msgid "Start with the third-party products that are in use on your site. Verify that they have been updated or verified to work on the new version, and get them upgraded in your existing instance before you start the Plone/Zope/Python upgrade if possible."
msgstr ""

#: ../manage/upgrading/preparations.rst:27
msgid "If Zope depends on a newer version of Python, install the new version of Python first."
msgstr ""

#: ../manage/upgrading/preparations.rst:28
msgid "If the newer version of Plone depends on a newer version of Zope, you will need to install that before proceeding with the Plone upgrade."
msgstr ""

#: ../manage/upgrading/preparations.rst:30
msgid "NOTE: Zope has it's own migration guidelines, which you will find in the release notes of the version you are migrating to. If Plone is being upgraded at the same time as a Zope version, Plone will usually handle the Zope upgrade with its own migration script."
msgstr ""

#: ../manage/upgrading/preparations.rst:33
msgid "Read the following files in the CMFPlone directory of the distribution of the new version of Plone you want to update to:"
msgstr ""

#: ../manage/upgrading/preparations.rst:35
msgid "README.txt"
msgstr ""

#: ../manage/upgrading/preparations.rst:36
msgid "INSTALL.txt"
msgstr ""

#: ../manage/upgrading/preparations.rst:37
msgid "UPGRADE.txt (although this usually contains only the general procedure outlined above)"
msgstr ""

#: ../manage/upgrading/preparations.rst:39
msgid "These files are important because they may contain important last minute information and might be more specific than the relevant sections of this reference manual."
msgstr ""

#: ../manage/upgrading/preparations.rst:42
msgid "Back up your Plone site"
msgstr ""

#: ../manage/upgrading/preparations.rst:44
msgid "It's very important to back up your Plone site. You will find an excellent :doc:`how-to on backing up your Plone site here </manage/deploying/backup>`."
msgstr ""

#: ../manage/upgrading/preparations.rst:48
msgid "Setup a test environment to rehearse the upgrade"
msgstr ""

#: ../manage/upgrading/preparations.rst:50
msgid "Never work directly on your live site until you know that the upgrade was successful. Instead, create a test environment to rehearse the upgrade. Copy your instance into a new environment and upgrade the copy. This is a good way of working out your third party products and dependencies in preparation for the final upgrade of the live site!"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:7
msgid "What to do when a problem occurs during a Plone upgrade."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:11
msgid "When a problem occurs during the migration we recommend that you take the following steps."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:14
msgid "Check the log files"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:16
msgid "When a site error occurs, or Zope fails to start, there's probably an informative error message in Zope's log files. Locate `these log files <https://plone.org/documentation/faq/plone-logs>`_ and inspect instance.log. Ignore irrelevant warnings and search for words such as error, exception and traceback (case-insensitive)."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:20
msgid "When Zope doesn't start and there's no useful information in the log file, you can start Zope interactively and watch for error messages in the output:::"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:24
msgid "You may be able to find more information on the error messages in:"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:26
msgid "the :doc:`Version-specific migration tips </manage/upgrading/version_specific_migration/index>` for your version of Plone"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:27
msgid "the :doc:`Error References </appendices/error-reference>`"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:30
msgid "Test without customizations"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:32
msgid "When you have customized page templates or Python scripts, your changes may interfere with changes in the new version of Plone. It's important to rule out this possibility, since your customizations are unique to your site and no one on the planet will be able to help you solve it."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:35
msgid "Temporarily remove your customizations, for example by removing your layers from portal_skins, or by removing files from these layers on the file system. If the problem disappears, you'll need to double-check your customizations. It's usually best to copy the original files of the new version of Plone to your skin, and re-customize those."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:40
msgid "Test without products"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:42
msgid "Bugs or compatibility problems in products that you have installed may cause problems in Plone. Go to Site Setup > Add/Remove Products and remove (uninstall) all product that are not distributed with Plone. Remove the uninstalled products from the Products directory of your Zope instance."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:46
msgid "If the problem disappears, you'll need to doublecheck the offending product:"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:48
msgid "Does it support the new version of Plone, Zope and Python? Check the product's README.txt or other informational files or pages."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:50
msgid "Does the product require any additional migration procedures? Check the product's INSTALL.txt, UPGRADE.txt or other informational files or pages."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:52
msgid "Does the product install properly? Re-install it and check the install log."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:55
msgid "Test with a fresh Plone instance"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:57
msgid "Create a new Plone site with your new version of Plone. You don't need a new Zope instance, since you can add another Plone site in the root of Zope. If the problem does not occur in a fresh site, the cause of your problem is most likely a customization, an installed product or content that was not migrated properly."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:62
msgid "Make the problem reproducible"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:64
msgid "Before you go out and :doc:`ask for help </askforhelp>`, you should be able to describe your problem in such a way that others can reproduce it in their environment."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:66
msgid "Reduce the problem to the smallest possible domain. Eliminate products and customizations that are not part of the problem. This makes it easier for others to reproduce the problem and it increases your chances of meeting others with the same problem or even a solution. The more complex your story is, the more likely that it is unique to your situation and in-penetrable to others."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:72
msgid "Ask for help on a mailing list"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:74
msgid ":doc:`Ask for help </askforhelp>` on the `Plone setup list <https://plone.org/support>`_. Be sure to:"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:76
msgid "Provide relevant source code for your customizations that are part of the problem."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:77
msgid "Describe the exact configuration, software versions, migration history, error messages and so on."
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:80
msgid "Report a bug"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:82
msgid "Once you have investigated, analyzed, identified and confirmed the cause of your problem and you are convinced it's a bug (rather than an X-file), go to the appropriate bug tracker and report it:"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:84
msgid "Products: the README usually tells how to report bugs"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:85
msgid "`Plone Issue Tracker <https://github.com/plone/Products.CMFPlone/issues>`_"
msgstr ""

#: ../manage/upgrading/troubleshooting.rst:87
msgid "Do not use the bug trackers to ask for help. First analyze your problem and assert that it's a bug before you report it."
msgstr ""

#: ../manage/upgrading/version_specific_migration/index.rst:3
msgid "Version-specific migration procedures and tips"
msgstr ""

#: ../manage/upgrading/version_specific_migration/index.rst:7
msgid "In addition to the general procedure described in the previous sections, this section provides version-specific procedures and tips. If your migration does not involve a version pair specified here, then you may follow the general procedures alone."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:3
msgid "Upgrading Plone 4.x to 5.0"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:14
msgid "Changed imports and functions"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:18
msgid "Products.CMFPlone.interfaces.IFactoryTool"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:20
msgid "This is now moved to ATContentTypes."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:34
msgid "Archetypes"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:36
msgid "Plone 5 now uses dexterity as the content type engine instead of Archetypes."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:38
msgid "For packages that still use Archetypes, you'll need to install the ATContentTypes base package."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:41
msgid "In your package, in a setuphandler, the code might look something like this::"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:55
msgid "Resource Registry"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:57
msgid "Plone 5 introduces some new concepts, for some, with working with JavaScript in Plone. Plone 5 utilizes Asynchronous Module Definition (AMD) with `requirejs <http://requirejs.org/>`_. We chose AMD over other module loading implementations(like commonjs) because AMD can be used in non-compiled form in the browser. This way, someone can click \"development mode\" in the resource registry control panel and work with the non-compiled JavaScript files directly."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:59
msgid "Getting back on point, much of Plone's JavaScript was or still is using JavaScript in a non-AMD form. Scripts that expect JavaScript dependency scripts and objects to be globally available and not loaded synchronously will have a difficult time figuring out what is going on when upgrading to Plone 5."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:61
msgid "There are two scenarios where this will happen that we'll tackle in this post. 1) You have JavaScript registered in portal_javascripts that are not AMD compatible. 2) You have JavaScript included in the head tag of your theme and/or specific page templates that are not AMD compatible."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:65
msgid "1) Working with deprecated portal_javascripts"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:67
msgid "The deprecated resource registries(and portal_javascripts) has no concept of dependency management. It simply allowed you to specify an order in which JavaScript files should be included on your site. It also would combined and minify them for you in deployment mode."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:70
msgid "Registration changes"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:72
msgid "Prior to Plone 5, JavaScript files were added to the registry by using a `Generic Setup Profile <http://docs.plone.org/develop/addons/components/genericsetup.html>`_ and including a jsregistry.xml file to it. This would add your JavaScript to the registry, with some options and potentially set ordering."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:74
msgid "In Plone 5.0, Plone will still recognize these jsregistry.xml files. Plone tries to provide a shim for those that are stubborn to migrate. How it does this is by adding all jsregistry.xml JavaScripts into a \"plone-legacy\" Resource Registry bundle. This bundle simply includes a global jQuery object and includes the resources in sequential order after it."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:77
msgid "Old style jsregistry.xml"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:79
msgid "An old style Resource Registry would look like this::"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:90
msgid "To migrate this to Plone 5, resource registrations are all done in the `Configuration Registry <https://pypi.python.org/pypi/plone.app.registry>`_."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:93
msgid "New style with registry.xml"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:95
msgid "The new registration will look something like::"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:106
msgid "Notice how I've now added the deps property of \"jquery\". This is not necessary--I'm just giving an example that this script needs a global jquery available."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:108
msgid "This alone will not get your JavaScript included however. In order to modernize our JavaScript stack, Plone needed to make some changes with how it included JavaScript. All we've done so far is define a resource. In order for a resource to be included, it needs to be part of a bundle. A bundle defines a set of resources that should be compiled together and distributed to the browser. So you either need to add your resource to an existing bundle or create your own bundle."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:110
msgid "In this post, we'll describe the process of creating your own bundle. Again, we use registry.xml for configuration::"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:122
msgid "One important aspect here is the \"jscompilation\" settings. This defines the compiled resource used in production mode."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:126
msgid "But, it's a bit more work"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:128
msgid "Yes, we know. We tried very hard to figure out the easiest way to modernize Plone's JavaScript development stack. The old, sequential inclusion is not useful these days."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:130
msgid "That being said, adding resources, bundles and compiling them can all be done Through The Web(TTW) in the new Resource Registries configuration panel. That way you can turn on development mode, compile your resources and then copy that compiled version into your package for distribution and not need to know any newfangled nodejs technologies like grunt, gulp, bower, npm, etc."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:134
msgid "Updating non-AMD scripts"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:136
msgid "If you are not including your JavaScript in the Resource Registries and just need it to work alongside Plone's JavaScript because you're manually including the JavaScript files in one way or another(page templates, themes), there are a number of techniques available to read on the web that describe how to make your scripts conditionally work with AMD."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:138
msgid "For the sake of this post, I will describe one technique used in Plone core to fix the JavaScript. The change we'll be investigating can be seen with `in a commit to plone.app.registry <https://github.com/plone/plone.app.registry/commit/ad904f2d55ea6e45bb983f1fcc12ead7a191f50a>`_. plone.app.registry has a control panel that allows some ajax searching and modals for editing settings."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:140
msgid "To utilize the dependency management that AMD provides and have the javascript depend on jQuery, we can wrap the script in an AMD `require` function. This function allows you to define a set of dependencies and a function that takes as arguments, those dependencies you defined. After the dependencies are loaded, the function you defined is called."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:154
msgid "Here, the two dependencies we have are jQuery and the pattern registry. I will not get into the pattern registry as it's off topic for this discussion--it is basically a registry of JavaScript components. The necessity for using it here is with ajax calls and binding new DOM elements dynamically added to the page."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:156
msgid "Additionally, above this `require` call, I provide some backward compatible code that you can inspect. It's not necessary in this case but I added it to show how someone could make their script work when requirejs was available and when it was not."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:160
msgid "Caveats"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:163
msgid "Compilation"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:165
msgid "Prior to Plone 5, when a resource was changed or added to the javascript registry, the registry would automatically re-compile all your JavaScript files."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:167
msgid "In switching to AMD, the compile step is much more resource intensive. It takes so long, there is no way we could do this real-time. Additionally, it can not be done in Python."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:169
msgid "When changes are made to existing bundles, re-compilation will need to be done TTW in the Resource Registries control panel. There is a build button next to each bundle. For advanced users, compilation can be done using a tool like grunt in your development environment."
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:172
msgid "Conditional resources"
msgstr ""

#: ../manage/upgrading/version_specific_migration/p4x_to_p5x_upgrade.rst:174
msgid "In Plone 5, individual resources can not be conditionally added to every page. This is due to the way we build JavaScript with AMD. Only bundles can be conditionally included. So if you have a resource that needs to be conditionally included, it will likely need it's own bundle."
msgstr ""

