# SOME DESCRIPTIVE TITLE.
# Copyright (C) The Plone Foundation
# This file is distributed under the same license as the Plone Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Documentation ['5', '4', '3']\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-09-05 16:00+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../adapt-and-extend/basics.rst:2
msgid "Basic Changes (Look and Feel)"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:2
msgid "Change the Font Colors"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:4
msgid "How to change the font colors - a through-the-web approach."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:6
msgid "You'll be introduced to some very simple techniques here for through-the-web customizations of Plone's CSS."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:9
msgid "How to locate the styles you want to change"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:10
msgid "How to override these styles using the ploneCustom.css style sheet"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:12
msgid "In this case we'll change the color of page titles from black to turquoise."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:16
msgid "Before you start"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:18
msgid "For convenience, Plone themes often comprise a number of separate style sheets, but for speed and efficiency, in production mode, Plone has a mechanism (portal\\_css) for packaging these up into just one or two files."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:23
msgid "You'll need to disable this when making changes to your site or customizing CSS. So make sure you've followed the instructions on how to put your site into :doc:`debug mode </develop/plone/getstarted/debug_mode>`."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:28
msgid "Locating the styles you want to change"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:30
msgid "If you don't already have a page in your Plone site, add one, save it and inspect it in view mode."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:32
msgid "Use `Firebug <https://getfirebug.com/>`_ , or a similar tool, to locate the class name of the page title - in this case its h1.documentFirstHeading."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:37
msgid "Locating the ploneCustom.css style sheet"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:39
msgid "As a matter of course, the last style sheet to load on every Plone page is ploneCustom.css. You'll see this if you inspect the HTML head tag of your page using Firebug. If you dig further, you'll probably find that this style sheet is completely empty. By the rules of precedence in the CSS Cascade, any styles in this sheet will override styles specified in the preceding sheets. So you have a \"blank sheet\" here for your own customizations."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:47
msgid "The trick now is to locate this file, so that you can make it available for editing."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:50
msgid "To make life easier for yourself, you might like to open a second tab or browser window at this point - you can then quickly switch back to the first tab to see your changes."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:54
msgid "Go to Site Setup > Zope Management Interface and click portal\\_skins"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:56
msgid "Use the Find option in the tabs across the top to locate ploneCustom.css:"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:59
msgid "Type *ploneCustom.css* in the \"with ids:\" box and click Find"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:60
msgid "You may get more than one result, it doesn't matter which you choose to click on, however best practice is to choose the one flagged with the red asterisk."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:65
msgid "Customizing and Editing ploneCustom.css"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:67
msgid "When you click on ploneCustom.css you'll find that you can't edit it. The next stage is to put the ploneCustom.css in a place where it can be edited. You'll see a Customize option just above the grey text area, click the Customize button and you'll find that the style sheet has been automatically copied to portal\\_skins/custom."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:73
msgid "You're now free to edit the file as you like. To change the color of our page titles, add:"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:82
msgid "and save."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:84
msgid "If you've installed Plone 4 with the Sunburst theme, the ploneCustom.css comes with a number of commented out pre-packaged styles that you might like to experiment with. You can override the layout styles to a fixed width and alter the colors of the links."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:90
msgid "Rolling back your changes"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:92
msgid "You've got a couple of options for reverting back to the original CSS:"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:94
msgid "comment out your styles in the ploneCustom.css - the usual CSS commenting syntax applies"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:97
msgid "delete (or, if you want to keep a note of what you did, rename) your version of ploneCustom.css, you'll find it here:"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:100
msgid "Site Setup > Zope Management Interface > portal\\_skins > custom"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:101
msgid "you can choose the delete or rename options - try renaming to ploneCustom.css.old"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:103
msgid "you can then go back to the beginning of the process of locating and customizing ploneCustom.css"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:107
#: ../adapt-and-extend/change-the-logo.rst:53
msgid "Further Information"
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:109
msgid "You've actually encountered two types of customization here."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:111
msgid "The first is a standard method of using order of precedence - the Cascade - to overwrite CSS styles as they reach the browser."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:113
msgid "The second is a Plone/Zope specific method of overriding the style sheets themselves by dropping them into the custom folder of portal\\_skins. This method can also be used for templates and other resources and is explained in more :doc:`depth in the section on Skin Layers </adapt-and-extend/theming/templates_css/skin_layers>` in this manual."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:120
msgid "More advanced techniques, including incorporating your own style sheets into a theme product, are covered later in this manual."
msgstr ""

#: ../adapt-and-extend/change-the-font-colors.rst:123
msgid "You can find out more about how the CSS Registry (portal\\_css) packages up the style sheets to deliver them to the page in the :doc:`Templates and Components to Page </adapt-and-extend/theming/templates_css/index>` section of this manual."
msgstr ""

#: ../adapt-and-extend/change-the-logo.rst:2
msgid "Change the Logo"
msgstr ""

#: ../adapt-and-extend/change-the-logo.rst:6
msgid "How to substitute the standard Plone logo with your own logo - a through-the-web approach."
msgstr ""

#: ../adapt-and-extend/change-the-logo.rst:11
msgid "The Basics"
msgstr ""

#: ../adapt-and-extend/change-the-logo.rst:13
msgid "In Plone 5, the logo can be changed TTW in the @@site-controlpanel."
msgstr ""

#: ../adapt-and-extend/change-the-logo.rst:17
msgid "1. Changing the Image in the Site control panel"
msgstr ""

#: ../adapt-and-extend/change-the-logo.rst:19
msgid "Since Plone 5 you can directly change the logo in the Site control panel. Just upload your custom logo image with the Site logo field."
msgstr ""

#: ../adapt-and-extend/change-the-logo.rst:47
msgid "3. Changing the HTML"
msgstr ""

#: ../adapt-and-extend/change-the-logo.rst:49
msgid "To change the HTML of the logo part you can use Diazo to just copy the src and href of the logo elements and put them in your custom HTML in your static HTML Theme. For further information's about Diazo please have a look at the Diazo documentation in :doc:`Theming Plone </adapt-and-extend/theming/index>`."
msgstr ""

#: ../adapt-and-extend/change-the-logo.rst:55
msgid "There are further How Tos in the Logo section of the Plone documentation dealing with more advanced customization methods."
msgstr ""

#: ../adapt-and-extend/change-the-logo.rst:56
msgid "More guidance on TAL and ZPT can be found in the ZPT tutorial."
msgstr ""

#: ../adapt-and-extend/change-the-logo.rst:57
msgid "If you want to transfer your changes to the file system in your own theme product, then proceed to the :doc:`viewlets overview section </develop/plone/views/viewlets>`."
msgstr ""

#: ../adapt-and-extend/config/add_ons.rst:2
msgid "Add-ons"
msgstr ""

#: ../adapt-and-extend/config/index.rst:2
msgid "Configuration and Control panel"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:2
msgid "Mail Configuration"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:4
msgid "Completing this configuration allows your Plone site to send email. If the mail settings are not configured properly, you will not be able to receive form submissions via email from your site."
msgstr ""

#: ../adapt-and-extend/config/mail.rst:8
msgid "Using localhost for email"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:10
msgid "One common way to configure mail for your Plone site is to use a mail server on the same machine that is hosting Plone. To do this, you'll first need to configure a mail server, like `Postfix <http://www.postfix.org/BASIC_CONFIGURATION_README.html>`_."
msgstr ""

#: ../adapt-and-extend/config/mail.rst:13
msgid "**SMTP Server:** localhost"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:14
msgid "**SMTP Port:** 25"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:15
msgid "**ESMTP Username:** Leave this blank"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:16
msgid "**ESMTP Password:** Leave this blank"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:17
#: ../adapt-and-extend/config/mail.rst:30
msgid "**Site 'From' Name:** [This will appear as the \"From\" address name]"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:18
msgid "**Site 'From' Address:** [emailaddress]@[yourdomain]"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:21
msgid "Using an external host"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:23
msgid "The following settings are an example of how you can configure your site to use your Gmail address. You can also use any external mail server, such as your business or institution email (you can get your SMTP settings from your in-house IT department)."
msgstr ""

#: ../adapt-and-extend/config/mail.rst:26
msgid "**SMTP Server:** smtp.gmail.com"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:27
msgid "**SMTP Port:** 587"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:28
msgid "**ESMTP Username:** [username]@gmail.com"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:29
msgid "**ESMTP Password:** [Your Gmail Password]"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:31
msgid "**Site 'From' Address:** [Your Gmail Address]"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:36
msgid "Testing the Configuration"
msgstr ""

#: ../adapt-and-extend/config/mail.rst:38
msgid "You can test the configuration by clicking the \"Save and send test e-mail\" button at the bottom of the form. You should receive an email from the email address you specified with the subject \"Test email from Plone.\""
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:3
msgid "Enabling HTML embed codes"
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:5
#: ../adapt-and-extend/theming/quick_test.rst:5
#: ../adapt-and-extend/theming/resources.rst:5
#: ../adapt-and-extend/theming/templates_css/css.rst:5
#: ../adapt-and-extend/theming/templates_css/resourcefolders.rst:5
#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:5
#: ../adapt-and-extend/theming/templates_css/template_basics.rst:5
msgid "Description"
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:7
msgid "Normally, Plone will not allow you to paste the code necessary to embed videos, slideshows or music players from popular websites such as Flickr, YouTube, Google Maps and MySpace. Learn how to adjust the HTML filtering to allow this content."
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:11
msgid "Important security note"
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:13
msgid "Making these configuration changes has serious security implications for your site. Plone filters out the tags that are used for HTML embedding for a good reason: they can be abused by your site users to create privilege escalation attacks. If you have untrusted people allowed to create content on your Plone site, then a malicious person could create some \"nasty\" Javascript in some content, then trick a person with Admin rights into viewing that content. That \"nasty\" Javascript can now do HTTP requests to interact with the Plone site with the full Admin rights granted to the trusted user."
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:21
msgid "*Bottom line: do not use this technique to enable embeddable content in your Plone site unless you are certain that you absolutely trust all users who are allowed to create content in your site.*"
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:24
msgid "Plone 4"
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:26
msgid "In Plone 4, there are two steps you need to take in order to easily embed content:"
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:28
msgid "First, go to Site Setup>TinyMCE Visual Editor then click on the Toolbar tab."
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:30
msgid "Enable the checkbox next to \"Insert/edit Media\""
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:31
#: ../adapt-and-extend/config/safe-html.rst:39
msgid "Scroll down to the bottom of the screen and click \"Save\""
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:34
msgid "Then, go to Site Setup>HTML Filtering"
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:36
msgid "Remove \"Object\" and \"Embed\" from the \"Nasty Tags\" list"
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:37
msgid "Remove \"Object\" and \"Param\" from the \"Stripped Tags\" list"
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:38
msgid "Add \"Embed\" and \"iframe\" to the \"Custom Tags\" list"
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:42
msgid "With these changes made, you should be able to click newly-added \"Embed Media\" button in the TinyMCE toolbar.  You can paste in the URL of a YouTube video, and TinyMCE will do the rest for you!"
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:44
msgid "For a Flickr slideshow, and most other embeds, switch into HTML editing mode and paste in the raw embed code."
msgstr ""

#: ../adapt-and-extend/config/safe-html.rst:48
msgid "To allow completely arbitrary HTML codes, see `David Glick's blogpost <http://glicksoftware.com/blog/disable-html-filtering>`_"
msgstr ""

#: ../adapt-and-extend/config/site.rst:2
msgid "Site-Configuration"
msgstr ""

#: ../adapt-and-extend/config/templating.rst:2
msgid "Templating"
msgstr ""

#: ../adapt-and-extend/config/templating.rst:4
msgid "TinyMCE in Plone 5 is adapted to allow templating engine for its content."
msgstr ""

#: ../adapt-and-extend/config/templating.rst:6
msgid "Right now parametrized templates are not implemented."
msgstr ""

#: ../adapt-and-extend/config/templating.rst:9
msgid "How to enable it"
msgstr ""

#: ../adapt-and-extend/config/templating.rst:11
msgid "On Control Panel -> TinyMCE -> Toolbar -> custom plugins add::"
msgstr ""

#: ../adapt-and-extend/config/templating.rst:15
msgid "On Control Panel -> TinyMCE -> Toolbar -> toolbar::"
msgstr ""

#: ../adapt-and-extend/config/templating.rst:20
msgid "How to configure which templates are available"
msgstr ""

#: ../adapt-and-extend/config/templating.rst:22
msgid "For each template we need a file available on the browser, we assume for this example to use a diazo file at ++theme+example/templates/template.html with the content::"
msgstr ""

#: ../adapt-and-extend/config/templating.rst:39
msgid "In order to define it::"
msgstr ""

#: ../adapt-and-extend/custom-ct/index.rst:2
msgid "Custom Content-Types"
msgstr ""

#: ../adapt-and-extend/custom-ct/index.rst:4
msgid "The recommended way to develop new custom content-types is by using :term:`Dexterity`. You'll find the full manual here."
msgstr ""

#: ../adapt-and-extend/custom-ct/index.rst:11
msgid "Up until Plone 4.1, the standard way was to use :term:`Archetypes`. You can still develop using Archetypes, and they will remain functional. For any **new** development, Dexterity is strongly recommended."
msgstr ""

#: ../adapt-and-extend/custom-ct/index.rst:15
msgid "The Archetypes reference manual will remain available at the `Plone 4 documentention <http://docs.plone.org/4/en/old-reference-manuals/archetypes/index.html>`_"
msgstr ""

#: ../adapt-and-extend/index.rst:2
msgid "Adapting & Extending Plone"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:2
msgid "Installing Add-ons"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:4
msgid "quick instructions"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:6
msgid "These instructions cover add-on installation process for Plone 3.3.x and 4 installation."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:9
#: ../adapt-and-extend/theming/deliverance.rst:8
#: ../adapt-and-extend/theming/templates_css/css.rst:13
#: ../adapt-and-extend/theming/templates_css/resourcefolders.rst:13
#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:14
#: ../adapt-and-extend/theming/templates_css/template_basics.rst:14
#: ../adapt-and-extend/theming/theme_product.rst:6
msgid "Introduction"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:11
msgid "This page covers add-on installation instructions for Plone 4 and Plone 3.3.x systems. Legacy systems are not covered in these instructions."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:14
msgid "Prerequisitements"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:16
msgid "What you need to know in order to install add-ons for Plone"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:18
msgid "How to use command line of your operating system. This is a hard requirement - you cannot achieve your goal unless you know how to interact with the command line. Here are basics tutorials for `Windows <http://www.hacking-tutorial.com/tips-and-tricks/16-steps-tutorial-basic-command-prompt/>`_ and `Linux <http://linuxcommand.org/learning_the_shell.php>`_"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:19
msgid "Working with plain text based configuration files and editing them with a text editor like Notepad"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:20
msgid "First create a :doc:`development / back-up copy </manage/deploying/copy>` of your site. Never install to the working production server directly, without first testing the add-on on a test instance."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:24
msgid "Background"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:26
msgid "Since Plone 3, Plone installations are managed using :term:`Buildout`. Plone add-ons are distributed as Python modules, also known as eggs."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:28
msgid "the `Plone product <https://plone.org/products>`_ download area contains popular add-ons for Plone"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:29
msgid "Add-on file downloads are hosted on the `PyPi Python package repository <https://pypi.python.org/pypi>`_ - along with tons of other Python software"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:30
msgid "the buildout.cfg file in your Plone configuration defines which add-ons are available for your sites to install in Site Setup > Add-ons control panel"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:31
msgid "the bin/buildout command (or bin/buildout.exe on Windows) in your Plone installation reads buildout.cfg and automatically downloads required packages when run - you do not need to download any Plone add-ons manually"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:32
msgid "Plone site setup -> Add ons control panel defines which add-ons are installed for the current Plone site (remember, there can be many Plone sites on a single Zope application server)"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:36
msgid "Plone add-ons, though Python eggs, must be installed through buildout as only buildout will regenerate the config files reflecting newly downloaded and installed eggs. Other Python installation tools like easy_install and pip do not apply in a Plone context."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:39
msgid "Finding add-ons"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:41
msgid "Browse the `plone.org product area <https://plone.org/products>`_ or `search on PyPi <https://pypi.python.org/pypi?:action=search&term=plone&submit=search>`_ for possible add-ons."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:43
msgid "When you find a suitable add-on you must note down its Python package name. Quite often, this is in the form of a name with a dot in it. For example, for the add-on PloneFormGe  the package id is Products.PloneFormGen. The id is visible in the PyPi page URL if it is not mentioned anywhere else. Capitalization is important here!"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:45
msgid "Before proceeding make sure that the add-on is compatible with your Plone version. If you cannot find this information on the package page please contact the add-on author."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:48
msgid "Downloading and configuring an add-on package for Plone"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:50
msgid "Please do not directly test new add-ons on your production site. Instead, have a development copy of the site around where you can safely test the add-ons. Before proceeding to the production environment, always take a back up copy of your Plone site."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:52
msgid "Edit the file buildout.cfg in your Plone folder with a text editor. Find line"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:62
msgid "There you can include your package in the  list."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:74
msgid "Some older Plone add-ons (released before Plone 3.3.x) also require you to add add-on package name to zcml= section in buildout.cfg. As a a rule of the thumb, all add-ons released since  the second half of 2010 should no longer require this."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:76
msgid "After the buildout.cfg has been changed run command buildout from the command line. The buildout command reads buildout.cfg and download the packages defined in the eggs section and makes them available for Plone."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:78
msgid "Note: Run buildout from command line using the instructions below. You don't double click buildout.exe."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:82
msgid "On UNIX"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:90
msgid "On Windows (for Plone 4.1)"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:98
msgid "If buildout fails please see the :doc:`troubleshooting buildout </manage/troubleshooting/buildout>` section."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:101
msgid "Downloading and configuring add-on package from github"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:103
msgid "Sometimes you need the newest version of an add-on, this is only suggested for experienced developers or for testing purposes. See :doc:`this section</manage/installing/installing_addons>`"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:108
msgid "Further help"
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:110
msgid "More detailed instructions for installing Plone add-ons are available for dealing with legacy systems."
msgstr ""

#: ../adapt-and-extend/install_add_ons.rst:112
msgid "Please visit the  :doc:`help asking guidelines</askforhelp>` and `Plone support <https://plone.org/support>`_ options page to find further help if these instructions are not enough. Also, contact the add-on author, as listed on Plone product page, to ask specific instructions regarding a particular add-on."
msgstr ""

#: ../adapt-and-extend/theming/barceloneta.rst:3
msgid "Barceloneta theme"
msgstr ""

#: ../adapt-and-extend/theming/barceloneta.rst:5
msgid "Barceloneta is a complete diazo theme."
msgstr ""

#: ../adapt-and-extend/theming/barceloneta.rst:8
msgid "Structure"
msgstr ""

#: ../adapt-and-extend/theming/barceloneta.rst:10
#: ../adapt-and-extend/theming/barceloneta.rst:15
#: ../adapt-and-extend/theming/resources.rst:361
#: ../adapt-and-extend/theming/resources.rst:369
#: ../adapt-and-extend/theming/resources.rst:375
#: ../adapt-and-extend/theming/resources.rst:381
#: ../adapt-and-extend/theming/resources.rst:390
msgid "TODO"
msgstr ""

#: ../adapt-and-extend/theming/barceloneta.rst:13
msgid "How to customize"
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:3
msgid "Deliverance"
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:10
msgid "This page contains info for using Deliverance theming proxy with Plone."
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:13
msgid "What is Deliverance"
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:15
msgid "Deliverance moves items from your Plone site into placeholders in your theme, without touching the Plone site or the theme."
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:17
msgid "Deliverance is a universal tool to theme HTML, applying a consistent style to applications and static files regardless of how they are implemented and with what technology."
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:19
msgid "Deliverance extracts pieces of content from your Plone site generated output and puts those into named placeholders in the theme's resulting template."
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:21
msgid "This is accomplished without touching the Plone site or the theme that is used within the Plone itself."
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:23
msgid "Some of the benefits:"
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:25
msgid "A designer can create a Plone theme without any specific knowledge of Plone's specific technology"
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:27
msgid "A single theme can apply to multiple back-end web applications regardless of what platform they were developed for"
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:31
msgid "Full Documentation on Deliverance"
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:33
msgid "Read `Deliverance Documentation <http://pythonhosted.org/Deliverance>`_."
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:35
msgid "An *older* `Deliverance tutorial <http://docs.plone.org/4/en/adapt-and-extend/theming/deliverance.html>`_ is available in the 'theming' documentation of Plone 4."
msgstr ""

#: ../adapt-and-extend/theming/deliverance.rst:37
msgid "Full slides are `available <http://www.slideshare.net/Jazkarta/deliverance-plone-theming-without-the-learning-curve-from-plone-symposium-east-2009>`_."
msgstr ""

#: ../adapt-and-extend/theming/index.rst:2
msgid "Theming Plone"
msgstr ""

#: ../adapt-and-extend/theming/index.rst:4
msgid "Intro"
msgstr ""

#: ../adapt-and-extend/theming/index.rst:6
msgid "The current best-practice way to theme a Plone site is by using an engine called \"Diazo\". This allows designers to design a theme in just plain, flat HTML, CSS (and javascript, if wanted) and then to hook that into the Plone backend to fill it with sophisticated content."
msgstr ""

#: ../adapt-and-extend/theming/index.rst:9
msgid "The easiest way to do this is to use \"plone.app.theming\". But if you need to integrate Plone with other back-end servers, legacy systems, or any webservice, you can use Diazo to all combine it in a unified look & feel."
msgstr ""

#: ../adapt-and-extend/theming/index.rst:32
msgid "An older (Plone 4.2) quick guide which may help to understand Diazo better:"
msgstr ""

#: ../adapt-and-extend/theming/index.rst:40
msgid "Using Diazo is also possible as a standalone service. That makes it possible to include several back-end applications under one 'look'"
msgstr ""

#: ../adapt-and-extend/theming/index.rst:47
msgid "General information on the stylesheets and other resources in Plone"
msgstr ""

#: ../adapt-and-extend/theming/index.rst:56
msgid "Up to version 4.1, Plone was using an older style of theming. Using that is not considered *best practice* anymore. See `older versions of these docs <http://docs.plone.org/4/en/adapt-and-extend/theming/old_style_theming.html>`_ if you need the information."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:3
msgid "Quick Test Recipe"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:7
msgid "Diazo is the system used to implement Plone themes. As of Plone 4.2, Plone ships with all the 'machinery' required to get started with Diazo based theme creation. This recipe is designed to get you started quickly."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:12
msgid "The goal of this recipe is to help you confirm that everything is working. The theme resources for this recipe are hosted on a github page (http://pigeonflight.github.io)."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:17
msgid "Ingredients"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:19
msgid "You will need to have the following:"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:21
msgid "Administrative access to a working copy of Plone 4.2 or (Plone 4.1 with plone.app.theming installed)"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:24
msgid "Procedure"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:26
msgid "If you're using Plone 4.2, look for 'Site Setup' > 'Theming'."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:30
msgid "In a Plone 4.1 with plone.app.theming you may find the same thing under 'Site Setup' > 'Diazo theme' Instead."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:35
msgid "If you don't see anything like the 'Diazo theme' option, go to 'Site Setup' > 'Add-ons', select 'Diazo theme support' and click 'Activate'."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:37
msgid "In the Diazo theming control panel click on the 'Advanced Settings' tab."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:41
msgid "Enter the following values:"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:43
msgid "**Rules file:** http://pigeonflight.github.io/diazodemo/rules.xml"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:45
msgid "**Absolute path prefix:** http://pigeonflight.github.io/diazodemo/"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:47
msgid "**Read network** should be checked, then click 'save'"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:49
msgid "Make sure that your Diazo theme is enabled"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:51
msgid "The rule file and resources in this example are hosted online, this will be a problem if your Plone site is behind a firewall or otherwise not connected to the internet."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:53
msgid "When you visit your Plone site you will see a the main content displayed inside of the custom theme provided by http://pigeonflight.github.io/diazodemo."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:55
msgid "It should look similar to this screenshot:"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:60
msgid "Disabling the test theme"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:62
msgid "To disable the test theme click on the enable/disable button at the top right. Then uncheck the 'Theme enabled' box."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:68
msgid "How the rule.xml file works"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:70
msgid "Think of the rules.xml file as a mapper which uses CSS ids and classes to identify content from the Plone site that should be injected into an HTML document."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:74
msgid "The diagram below explains this visually."
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:79
msgid ":download:`View an explanatory diagram in PDF format <diazothemeexplained.pdf>`"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:82
msgid "Troubleshooting"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:84
msgid "The theme is not showing"
msgstr ""

#: ../adapt-and-extend/theming/quick_test.rst:86
msgid "Check 'Site Setup' > 'Diazo Theme' and ensure that under 'Basic Settings', 'Enabled' is checked."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:3
msgid "JS/CSS Resources"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:7
msgid "Resources are js/css and its dependencies to add the frontend logic and design on top of Plone. There are so many different kind of resources like widgets, design styles, behavior logic and single page apps. In order to organize them we are using two main standard technologies: require.js and less."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:12
msgid "The goal of this recipe is to help you confirm that everything is working."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:18
msgid "Introduction to Plone 5 resources"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:20
msgid "Plone 5 introduces new concepts, for some, with working with JavaScript and CSS in Plone. Plone 5 utilizes Asynchronous Module Definition (AMD) with requirejs. We chose AMD over other module loading implementations(like commonjs) because AMD can be used in non-compiled form in the browser. This way, someone can click \"development mode\" in the resource registry control panel and work with the non-compiled JavaScript files directly."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:26
msgid "Additionally, Plone 5 streamlines the use of LESS to compile CSS."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:28
msgid "These two concepts for JavaScript and CSS are merged into one idea--a resource."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:32
msgid "Resources"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:34
msgid "The main unit of the resource system is a JavaScript file and/or a set of CSS/LESS files."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:36
msgid "Since this can be a single JavaScript file, there are additional requirejs options are available to be able to customize. Possible options we have are is shim (export, init and depends) so it can be configured to be exported o the global namespace, init on load and depend on some other resource."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:41
msgid "An example of a resource definition on registry.xml::"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:55
#: ../adapt-and-extend/theming/resources.rst:179
#: ../adapt-and-extend/theming/resources.rst:345
msgid "The options are :"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:57
msgid "js : URL of the JavaScript file"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:59
msgid "export : shim export option"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:61
msgid "init : shim init option"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:63
msgid "depends : shim depends option"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:65
msgid "css : list of LESS/CS elements"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:67
msgid "url : URL that will be defined on the require.js namespace as the resource-url variable"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:69
msgid "The export/init/depends are the shim option to load the js files in the correct order on the global namespace, for more information : http://requirejs.org/docs/api.html#config-shim"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:71
msgid "The URL option will you to define the base url in case you want to load txt resources on require js::"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:107
msgid "Default resources on Plone"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:109
msgid "Plone loads a group of mockup components and bower components as resources on the registry. In order to avoid running bower install on each installation of Plone it ships by default a minimal bower components folder on the CMFPlone static folder with the correct versions of the resources that are need to run the default plone js/css."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:114
msgid "The default bower components shipped are on :"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:116
msgid "https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/static/bower.json"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:118
msgid "The group of resources registered on CMFPlone are :"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:120
msgid "https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/profiles/dependencies/registry.xml"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:124
msgid "The ++plone++ traversal namespace"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:126
msgid "There is a specific folder type called ++plone++ designed to be similar to ++theme++ but with the difference that you can overwrite an specific file, so its possible to edit a resource TTW."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:129
#: ../adapt-and-extend/theming/resources.rst:218
#: ../adapt-and-extend/theming/resources.rst:288
#: ../adapt-and-extend/theming/resources.rst:431
#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:100
#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:117
msgid "Example::"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:137
msgid "will give you ++plone++myresources based urls"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:141
msgid "Bundle"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:143
msgid "Mainly bundles are groups of resources that are going to be loaded on your plone site. Instead of loading single resources we can group them by our possible needs. In case you develop an specific add-on you will need to create your own bundle, if you want to load a single page you will create a bundle, if you want to define some group of js/css that will be rendered on some page you need a bundle."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:147
msgid "Each bundle will be delivered on a production site as a standalone resource: two http calls (js/css) for each bundle"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:149
msgid "Examples::"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:181
msgid "enabled: the bundle its enabled by default"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:183
msgid "depends: the bundle depends on another bundle"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:185
msgid "compile: the bundle has less/requirejs and needs to be compiled"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:187
msgid "jscompilation: URL where the minimized/compiled JavaScript version will be"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:189
msgid "csscompilation: URL where the minimized/compiled CSS version will be"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:191
msgid "last_compilation: date of the compilation that is shipped on the compiled URL"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:193
msgid "resources: list of resources that are going to be loaded"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:197
msgid "Decide which bundles are rendered on a specific call"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:199
msgid "One bundle can be enabled or disabled by default."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:201
msgid "An expression on the bundles enabled to evaluate if it should be used when its enabled on a specific context."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:203
msgid "The diazo theme can enable or disable on top a specific bundle (no matter if its disabled by default)"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:205
msgid "A browser page can force to load or unload a specific bundle (no matter if its disabled by default)"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:209
msgid "Compiled bundles"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:211
msgid "In a compiled bundle normally there is only one resource that is going to be loaded for each specific bundle, this resource will be a JavaScript file with a requirejs wrapper and a less file."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:214
msgid "When the site is in development mode the files are delivered as they are on stored and will get its dependencies asynchronously (AMD and LESS)."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:216
msgid "The main feature of the compiled bundles is that the list of real resources that are going to be loaded on the site are defined on the JavaScript and LESS files."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:262
msgid "On development mode all the less/js resources are going to be retrieved on live so its possible to debug and modify the filesystem files and see the result on the fly."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:265
msgid "In order to provide a compiled version for the production mode there are three possibilities:"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:267
msgid "Compile TTW and store on the ZODB (explained later)"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:269
msgid "Compile with a generated gruntfile: ./bin/plone-compile-resources --site-id=myplonesite --bundle=mybundle"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:271
msgid "Create your own compilation chain: Using the tool you prefer create a compiled version of your bundle with the correct urls."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:275
msgid "Non compiled bundles"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:277
msgid "In case your resources are not using requirejs/less and you just want to group them on bundles to minimize and deliver them in groups you can use the non compiled bundles."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:280
msgid "They are minimized and stored on the csscompiled/jscompiled URL defined on the bundle for the first request each time:"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:282
msgid "its on production mode"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:284
msgid "a package with jsregistry/cssregistry is installed"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:286
msgid "You can also force to create a new minimized version TTW."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:309
msgid "Default Plone bundles"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:311
msgid "There are three main plone bundles by default: plone and plone-legacy."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:313
msgid "plone bundle : is a compiled bundle with the main components required to run the toolbar and main mockup patterns with only the css needed by that elements"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:315
msgid "plone logged in bundle : is a compiled bundle that is only included for logged in users"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:317
msgid "plone legacy bundle : is a non compiled bundle that gets all the jsregistry and cssregistry that are loaded on the addons that are installed so they are minified"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:321
msgid "Diazo Bundles"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:323
msgid "Diazo enables us to define a static theme outside Plone with its own resources and its own compiling system."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:325
msgid "In order to allow to have a complete theme its possible to define a bundle in diazo in the manifest::"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:339
msgid "This options allow us to define to plone that the js/css renderer will add the diazo one so we will be able to overwrite the <link> <script> tags from the theme with the plone ones loading the diazo resources."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:342
msgid "As on the native plone bundles its possible to define a development/production set (less/requirejs) so it integrates with the resource compilation system in plone."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:347
msgid "enabled-bundles / disabled-bundles : list of bundles that should be added or disabled when we are rendering throw that diazo theme"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:349
msgid "development-css / development-js : less file and requirejs file that should be used on the compilation on browser system"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:351
msgid "production-css / production-js : compiled versions that should be delivered on production. There is no aid system to compile them, you can compile it with you prefered system."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:353
msgid "tinymce-content-css : css version of the tinymce component, an exception to define the css on the tinymce"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:357
msgid "Diazo frontend - barceloneta backend"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:359
msgid "Using diazo rules you can define a frontend and a backend separatelly defining which bundles you want to load."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:365
msgid "Browser Page bundle"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:367
msgid "If you want that your browser page loads or unloads an specific bundle when its rendered you can use:"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:373
msgid "Development vs Production"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:379
msgid "Resource registry controlpanel - TTW edit / compilation / overwrite"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:384
msgid "Plone resources/bundles"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:388
msgid "Diazo themes"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:393
msgid "Old registry migration and compatibility"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:395
msgid "The deprecated resource registries(and portal_javascripts) has no concept of dependency management. It simply allowed you to specify an order in which JavaScript files should be included on your site. It also would combined and minify them for you in deployment mode."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:400
msgid "Prior to Plone 5, JavaScript files were added to the registry by using a Generic Setup Profile and including a jsregistry.xml file to it. This would add your JavaScript to the registry, with some options and potentially set ordering."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:404
msgid "In Plone 5.0, Plone will still recognize these jsregistry.xml files. Plone tries to provide a shim for those that are stubborn to migrate. How it does this is by adding all jsregistry.xml JavaScripts into a \"plone-legacy\" Resource Registry bundle. This bundle simply includes a global jQuery object and includes the resources in sequential order after it."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:412
msgid "Updating non-AMD scripts"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:414
msgid "If you are not including your JavaScript in the Resource Registries and just need it to work alongside Plone's JavaScript because you're manually including the JavaScript files in one way or another(page templates, themes), there are a number of techniques available to read on the web that describe how to make your scripts conditionally work with AMD."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:420
msgid "For the sake of this post, I will describe one technique used in Plone core to fix the JavaScript. The change we'll be investigating can be seen with in a commit to plone.app.registry. plone.app.registry has a control panel that allows some ajax searching and modals for editing settings."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:425
msgid "To utilize the dependency management that AMD provides and have the javascript depend on jQuery, we can wrap the script in an AMD require function. This function allows you to define a set of dependencies and a function that takes as arguments, those dependencies you defined. After the dependencies are loaded, the function you defined is called."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:445
msgid "requirejs require/define and resource/bundle"
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:447
msgid "In working with requirejs, you'll likely be aware of the `mismatched anonymous define() <http://requirejs.org/docs/errors.html#mismatch>`_ potential misuse of require and define."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:451
msgid "Basically, it comes down to, you should not use `define` with script tags. `define` should only be included in a page by using a `require` call."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:454
msgid "How this works with resources and bundles is that bundles should ONLY ever be 'require' calls. If you try to use a JavaScript file that has a `define` call with a bundle, you'll get the previously mentioned error. Make sure to use a JavaScript file with a 'require' call to include all your `define` resources."
msgstr ""

#: ../adapt-and-extend/theming/resources.rst:459
msgid "This is how requirejs works and is normal behavior; however, any novice will likely come around to noticing this when working with AMD JavaScript. With Plone, it's one additional caveat you'll need to be aware of when working with the Resource Registry."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:3
msgid "CSS"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:7
msgid "Creating and registering CSS files for Plone and Plone add-on products. CSS-related Python functionality."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:15
msgid "This page has Plone-specific CSS instructions."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:17
msgid "In Plone, most CSS files are managed by the ``portal_css`` tool via the :term:`ZMI`. Page templates can still import CSS files directly, but ``portal_css`` does CSS file compression and merging automatically if used."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:23
msgid "View all Plone HTML elements"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:25
msgid "To test Plone HTML element rendering go to ``test_rendering`` page on your site::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:29
msgid "It will output a styled list of all commonly used Plone user interface elements."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:32
msgid "Registering a new CSS file"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:34
msgid "You can register stylesheets to be included in Plone's various CSS bundles using GenericSetup XML."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:37
msgid "Example ``profiles/default/cssregistry.xml``:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:80
msgid "In this case there should be a registered resource directory named yourproduct.something. In the directory should be a file yourstylesheet.css. If you have registered the stylesheet directly in zcml"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:87
msgid "<browser:resource"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:85
msgid "name=\"yourstylesheet.css\" file=\"yourstylesheet.css\" />"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:89
msgid "then id must be"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:91
msgid "id=\"++resource++yourstylesheet.css\""
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:94
msgid "Expressions"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:96
msgid "The ``expression`` attribute of ``portal_css`` defines when your CSS file is included on an HTML page.  For more information see :doc:`expressions documentation </develop/plone/functionality/expressions>`."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:101
msgid "Inserting CSS as last into anonymous bundles"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:103
msgid "Plone compresses and merges CSS files to *bundles*."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:105
msgid "For Plone 3.x, the optimal place to put CSS file available to all users is after ``ploneKss.css``, as in the example above, to override rules in earlier files."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:0
msgid "Todo"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:109
msgid "Also for Plone 4.x?"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:112
msgid "CSS files for logged-in members only"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:114
msgid "Add the following expression to your CSS file::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:118
msgid "If you want to load the CSS in the same bundle as Plone's default ``member.css``, use ``insert-after=\"member.css\"``. In this case, however, the file will be one of the first CSS files to be loaded and cannot override values from other files unless the CSS directive ``!important`` is used."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:124
msgid "Condition for Diazo themed sites"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:126
msgid "To check if theming is active, will return true if Diazo is enabled::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:131
msgid "Conditional comments (IE)"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:133
msgid "https://plone.org/products/plone/roadmap/232"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:135
msgid "``cssregistry.xml`` example:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:158
msgid "Generating CSS classes programmatically in templates"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:160
msgid "# Try to put string generation code in your view/viewlet if you have one."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:164
msgid "# If you do not have a view (e.g. you're dealing with ``main_template``)"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:163
msgid "you can create a view and call it as in the following example."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:166
msgid "View class generating CSS class spans::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:190
msgid "Registering the view in ZCML:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:202
msgid "Calling the view in ``main_template.pt``:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:211
msgid "Defining CSS styles reaction to the presence of the class:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:219
msgid "Per-folder CSS theme overrides"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:221
msgid "https://pypi.python.org/pypi/Products.CustomOverrides"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:224
msgid "Striping listing colors"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:226
msgid "In your template you can define classes for 1) the item itself 2) extra odd and even classes."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:233
msgid "And you can colorize this with CSS:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:257
msgid "``plone.css``"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:259
msgid "``plone.css`` is automagically generated dynamically based on the full ``portal_css`` registry configuration.  It is used in e.g. TinyMCE to load all CSS styles into the TinyMCE ``<iframe>`` in a single pass. It is not used on the normal Plone pages."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:264
msgid "``plone.css`` generation:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:266
msgid "https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/skins/plone_scripts/plone.css.py"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:275
msgid "CSS reset"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:277
msgid "If you are building a custom theme and you want to do a cross-browser CSS reset, the following snippet is recommended:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:303
msgid "Adding new CSS body classes"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:305
msgid "Plone themes provide certain standard CSS classes on the ``<body>`` element to identify view, template, site section, etc. for theming."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:308
msgid "The default body CSS classes look like this:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:314
msgid "But you can include your own CSS classes as well. This can be done by overriding ``plone.app.layout.globals.LayoutPolicy`` class which is registered as the ``plone_layout`` view."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:318
msgid "``layout.py``:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/css.rst:378
msgid "Related ZCML registration:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/dtml.rst:3
msgid "DTML"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/dtml.rst:5
msgid "DTML technology has been phased out ten years ago."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/dtml.rst:7
msgid "Do not use it."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/index.rst:3
msgid "Front-end: templates, CSS and Javascript"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/index.rst:5
msgid "Instructions and information for front-end development for Plone CMS."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/index.rst:7
msgid "This includes creating page templates, managing Javascript and CSS assets and writing Javascript for Plone."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/resourcefolders.rst:3
msgid "Resource folders"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/resourcefolders.rst:7
msgid "How to use resource directories to expose static media files (css, js, other) in your Plone add-on product"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/resourcefolders.rst:15
msgid "Resource folders are the Zope Toolkit way to expose static media files to Plone URL mapping."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/resourcefolders.rst:18
msgid "Resource folders provide a mechanism which allows conflict free way to have static media files mapped to Plone URL space. Each URL is prefixed with ``++resource++your.package`` resource identified."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/resourcefolders.rst:24
msgid "ZCML resourceDirectory"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/resourcefolders.rst:26
msgid "If you want to customize media folder mapping point, you need to use the resourceDirectory directive."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/resourcefolders.rst:29
msgid "Below is an example how to map *static* folder in your add-on root folder to be exposed via ++resource++your.product/ URI"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:3
msgid "Skin layers"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:7
msgid "Skin layers are a legacy Plone 2 technology, still is use, for adding overridable templates and media resources to Plone packages."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:16
msgid "Skin layers, portal_skins and CMFCore.SkinsTool are the old-fashioned way to manage Plone templates."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:19
msgid "Each Plone theme has set of folders it will pick from portal_skins. These sets are defined in portal_skins -> properties."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:22
msgid "Skins layers are searched for a template by template name, higher layers first."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:24
msgid "Skin layers can be reordered through-the-web in portal_skins -> properties"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:28
msgid "Defining a skin layer"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:30
msgid "Skin files are placed in the *skins* folder of your add-on product."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:32
msgid "The structure looks like this:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:34
msgid "yourproduct/namespace/configure.zcml"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:36
msgid "yourproduct/namespace/profiles/default/skins.xml"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:38
msgid "yourproduct/namespace/skins"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:40
msgid "yourproduct/namespace/skins/layer1folder"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:42
msgid "yourproduct/namespace/skins/layer2folder/document_view.pt"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:44
msgid "yourproduct/namespace/skins/layer2folder"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:46
msgid "..."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:48
msgid "GenericSetup skins.xml::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:59
msgid "ZCML to register the layer::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:69
msgid "See also"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:71
msgid "https://mail.zope.org/pipermail/zope-cmf/2007-February/025650.html"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:74
msgid "Unit testing and portal_skins"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:76
msgid "If you test templates in your unit testing code you might need to call PloneTestCase._refreshSkinData()::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:85
msgid "Activating the current skin layer from a debug/ipzope shell"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:87
msgid "The skin needs to be initialised before its files can be accessed e.g. via restrictedTraverse::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:94
msgid "Rendering a skin layer template"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:96
msgid "Templates must be bound to a context object before rendering.  Plone acquisition magic maps templates as acquired attributes of all contentish objects."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:113
msgid "Testing templates"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:115
msgid "Below is some example code how templates behave."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:128
msgid "Nested folder overrides (z3c.jbot)"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:130
msgid "z3c.jbot allows to override any portal_skins based file based on its file-system path + filename."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:133
msgid "Example jbot ZCML slug (no layers, unconditional overrides)"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:146
msgid "Then your add-on has folder structure (example)::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:152
msgid "For layered example (theme layer, add-on layer), see"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:154
msgid "https://github.com/miohtama/sane_plone_addon_template/blob/master/youraddon/configure.zcml#L41"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:156
#: ../adapt-and-extend/theming/templates_css/template_basics.rst:676
msgid "More info"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:158
msgid "https://pypi.python.org/pypi/z3c.jbot"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:160
msgid "http://stackoverflow.com/questions/6161802/nested-overrides-in-portal-skins-folder"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:163
msgid "Poking portal_skins"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:165
msgid "``portal_skins`` is a persistent tool in Plone site root providing functions to manage skin layers. Its code mostly lives in ``Products.CMFCore.SkinsTool``."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:168
msgid "Available skin layers are directly exposed as :doc:`traversable </develop/plone/serving/traversing>` attributes::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:193
msgid "``portal_skins.getSkinSelections()`` will list available skins."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:195
msgid "You can edit a specific skin layer::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:199
msgid "``portal_skins.selections`` is a :doc:`PersistentDict </develop/plone/persistency/persistent>` object holding *skin name* -> *comma separated layer list* mappings."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:205
msgid "Dumping a portal_skins folder to the filesystem"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/skin_layers.rst:207
msgid "qPloneSkinDump can build a filesystem dump from portal_skins but it only works on Plone 2. If you need this functionality you can try to use this script ripped off qPloneSkinDump: https://gist.github.com/silviot/5402869. It is a WorksForMe quality script; replace the variables and run it with::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:3
msgid "TAL page templates"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:7
msgid "Plone uses Zope Page Templates (:term:`ZPT`). This document contains references to this template language and generally available templates, macros and views you can use to build your Plone add-on product."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:16
msgid "Plone uses `Zope Page Templates <http://docs.zope.org/zope2/zope2book/AppendixC.html>`_, consisting of the three related standards: Template Attribute Language (:term:`TAL`), TAL Expression Syntax (:term:`TALES`), and Macro Expansion TAL (:term:`METAL`)."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:22
msgid "A normal full Plone HTML page consists of:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:24
msgid "the *master template*, defining the overall layout of the page,"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:25
msgid "*slots*, defined by the master template, and filled by the object being published,"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:27
msgid ":doc:`viewlets and Viewlet managers </develop/plone/views/viewlets>`."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:29
msgid "Templates can be associated with Python view classes (also known as \"new style\", circa 2008) or they can be standalone (\"old style\", circa 2001)."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:35
msgid "The rationale for moving away from standalone page templates is that the page template code becomes easily cluttered with inline Python code. This makes templates hard to customize or override.  New style templates provide better separation with view logic (Python code) and HTML generation (page template)."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:43
msgid "The MIME-Type"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:44
msgid "Basically a document file got a mime-type. This is also important for Plone Templates if you don't want to export to text/html. If you want to export to a XML File you have to change the mime-type because otherwise the browser won't recognize the file as an XML. At the moment Plone supports text/html which is the default value. And text/xml. You got 2 opportunities to change this value. If you customize a template you got an input box which called \"Content-Type\". The other Way is to create a file named by your template name and extend the name by `.metadata`."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:52
msgid "Example:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:51
msgid "my_view.pt"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:52
msgid "my_view.pt.metadata"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:54
msgid "Content of metadata file::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:61
msgid "Overriding templates"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:63
msgid "The recommended approach to customize ``.pt`` files for Plone 4 is to use a little helper called `z3c.jbot`_."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:66
msgid "If you need to override templates in core Plone or in an existing add-on, you can do the following:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:69
msgid "`Roll out your own add-on`_ which you can use to contain your page templates on the file system."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:72
msgid "Use the `z3c.jbot`_ Plone helper add-on to override existing page templates. This is provided in the `sane_plone_addon_template`_ add-in, no separate set-up needed."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:77
msgid "`z3c.jbot`_ can override page templates (``.pt`` files) for views, viewlets, old style page templates and portlets. In fact it can override any ``.pt`` file in the Plone source tree."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:82
msgid "Overriding a template using z3c.jbot"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:84
msgid "First of all, make sure that your customization add-on supports `z3c.jbot`_. `sane_plone_addon_template`_ has a ``templates`` folder where you can drop in your new ``.pt`` files."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:89
msgid "Locate the template you need to override in Plone source tree. You can do this by searching the ``eggs/`` folder of your Plone installation for ``.pt`` files. Usually this folder is ``.../buildout-cache/eggs``."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:94
msgid "Below is an example UNIX ``find`` command to find ``.pt`` files. You can also use Windows Explorer file search or similar tools:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:108
msgid "Your ``eggs/`` folder may contain several versions of the same egg if you have re-run buildout or upgraded Plone. In this case the correct action is usually to pick the latest version."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:113
msgid "Make a copy of ``.pt`` file you are going to override."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:115
msgid "Rename the file to its so-called *canonical* name: to do this, exclude the ``.egg`` folder name from the filename, and then replace all slashes ``/`` with dot ``.``::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:121
msgid "to::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:125
msgid "Drop the file in the templates folder you have registered for ``z3c.jbot`` in your add-on."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:128
msgid "Make your changes in the new ``.pt`` file."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:132
msgid "After overriding the template for the first time (adding the file to the ``templates/`` folder) you need to restart Plone. `z3c.jbot`_ scans new overrides only during the restart."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:137
msgid "After the file is in place, changes to the file are instantly picked up: the template code is re-read on every HTTP request |---| just hit enter in your browser location bar. (Hitting enter in the location bar is quicker than hitting :guilabel:`Refresh`, which also reloads CSS and JS files.)"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:142
msgid "If you want to override an already overridden template, read here: <http://stackoverflow.com/questions/16209392/how-can-i-override-an-already-overriden-template-by-jbot>"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:145
msgid "More info:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:147
msgid "https://pypi.python.org/pypi/z3c.jbot/"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:149
msgid "http://blog.keul.it/2011/06/z3cjbot-magical-with-your-skins.html"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:153
msgid "Main template"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:155
msgid "The master page template in Plone is called ``main_template.pt`` and it is provided by the `Products.CMFPlone package <https://github.com/plone/Products.CMFPlone/blob/4.3.x/Products/CMFPlone/skins/plone_templates/main_template.pt>`_."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:159
msgid "This template provides the visual frame for Plone themes. The template is an old-style page template living in ``plone_skins/plone_templates``."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:163
msgid "Custom per view main template"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:165
msgid "Here is an example how to provide a customized main template for one view. In this example we have customized main template so that only the content area is visible."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:168
msgid "First we register our template in ``configure.zcml``::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:178
msgid "We refer it in our page template instead of ``here/main_template``::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:189
msgid "``barebone-main-template.pt`` is an edited copy of ``portal_skins/sunburst_templates/main_template.pt``::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:322
msgid "Plone template element map"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:324
msgid "Plone 4 ships with the *Sunburst* theme. Its viewlets and viewlets managers are described :doc:`here </develop/plone/views/viewlets>`."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:326
msgid "Plone 3 viewlets differ from Plone 4 viewlets."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:329
msgid "Zope Page Templates"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:331
msgid "Zope Page Templates, or :term:`ZPT` for short, is an XML-based templating language, consisting of the Template Attribute Language (:term:`TAL`), TAL Expression Syntax (:term:`TALES`), and Macro Expansion TAL (:term:`METAL`)."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:335
msgid "It operates using two XML namespaces (``tal:`` and ``metal:``) that can occur either on attributes of elements in another namespace (e.g. you will often have :term:`TAL` attributes on HTML elements) or on elements (in which case the element itself will be ignored, but all its attributes will be recognized as :term:`TAL` or :term:`METAL` statements)."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:341
msgid "A statement in the ``tal:`` namespace will modify the element on which it occurs and/or its child elements."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:344
msgid "A statement in the ``metal:`` namespace defines how a template interacts with other templates (defining or using macros and slots to be filled by macros)."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:348
msgid "The value of an attribute in the ``tal:`` namespace is an expression. The syntax of this expression is defined by the :term:`TALES` standard."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:352
msgid "TAL"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:354
msgid "`TAL <http://wiki.zope.org/ZPT/TALSpecification14>`_ is the Template Attribute Language used in Plone."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:357
msgid "`TAL Guide <http://www.owlfish.com/software/simpleTAL/tal-guide.html>`_"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:361
msgid "Escaped and unescaped content"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:363
msgid "By default, all :term:`TAL` output is escaped for security reasons::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:371
msgid "Will output escaped HTML source code:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:377
msgid "Unescaped content can be output using the TALES ``structure`` keyword in the expression for the ``tal:replace`` and ``tal:content`` statements:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:384
msgid "Will output unescaped HTML source code:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:391
msgid "METAL"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:393
msgid "The :term:`METAL` (Macro Expansion TAL) standard provides *macros* and *slots* to the template language."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:396
msgid "Using METAL macros is no longer recommended, since they couple programming logic too tightly with the template language.  You should use views instead."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:399
msgid "Read more about them in the `TAL Guide <http://www.owlfish.com/software/simpleTAL/tal-guide.html>`_."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:403
msgid "TALES expressions"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:405
msgid "The value of TAL statements are defined by TALES expressions. A TALES expression starts with the expression type. If no type is specified, the default is assumed. Three types are standard:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:409
msgid "``path:`` expressions (*default*),"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:410
msgid "``python:`` expressions,"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:411
msgid "``string:`` expressions."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:413
msgid "They are generally useful, and not limited to use in Page Templates. For example, they are widely used in various other parts of Plone:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:416
msgid "CSS and Javascript registries, to decide whether to include a particular file;"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:418
msgid "Action conditions, to decide whether to show or hide action link;"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:419
msgid "Workflow security guards, to decide whether to allow a workflow state transition"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:421
msgid "etc."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:423
msgid "Read more about expressions in `TAL Guide <http://www.owlfish.com/software/simpleTAL/tal-guide.html>`_."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:425
msgid "See the :doc:`Expressions chapter </develop/plone/functionality/expressions>` for more information."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:428
msgid "Omitting tags"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:430
msgid "Sometimes you need to create XML control structures which should not end up to the output page."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:433
msgid "You can use ``tal:omit-tag=\"\"``:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:442
msgid "Images"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:444
msgid "See :doc:`how to use images in templates </develop/plone/images/templates>`."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:447
msgid "Overriding templates for existing Plone views"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:449
msgid "New style templates can be overridden by overriding the view using the template."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:452
msgid "Old stype templates can be overridden by register a new skins layer in ``plone_skins``."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:456
msgid "View page template"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:458
msgid "http://lionfacelemonface.wordpress.com/2009/03/02/i-used-macros-in-my-browser-views-and-saved-a-bunch-of-money-on-my-car-insurance/"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:461
msgid "Old style page template"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:463
msgid "Create a new layer in ``portal_skins``"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:465
msgid "Templates are resolved by their name, and a property on the ``portal_skins`` tool defines the order in which skin layers are searched for the name (see the *Properties* tab on ``portal_skins``)."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:469
msgid "You can reorder layers for the active theme so that your layer takes priority."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:473
msgid "Portlet slots"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:475
msgid "By default, Plone ``main_template`` has slots for left and right portlets. If you have a view where you don't explicitly want to render portlets you can do:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:494
msgid "This blanks out the ``column_one_slot`` and ``column_two_slot`` slots."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:497
msgid "Head slots"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:499
msgid "You can easily include per-template CSS and JavaScript in the ``<head>`` element using extra slots defined in Plone's ``main_template.pt``."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:502
msgid "Note that these media files do not participate in :doc:`portal_css </adapt-and-extend/theming/templates_css/css>` or :doc:`portal_javascript </develop/addons/javascript>` resource compression."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:507
msgid "Extra slots are:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:523
msgid "Example use:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:569
msgid "Edit frame"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:571
msgid "By default, Plone draws a green *edit* frame around the content if you can edit it. You might want to disable this behavior for particular views."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:575
msgid "Hiding the edit frame"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:577
msgid "If you'd like to hide the (green) editing frame, place the following code in your Zope 2-style page template::"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:583
msgid "Examples of this usage:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:585
msgid "The `Contact info page <https://github.com/plone/Products.CMFPlone/blob/4.3.x/Products/CMFPlone/skins/plone_templates/contact-info.cpt>`_."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:587
msgid "The `Recently modified page <https://github.com/plone/Products.CMFPlone/blob/4.3.x/Products/CMFPlone/skins/plone_templates/recently_modified.pt>`_."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:590
msgid "Special style on individual pages"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:592
msgid "To override page layout partially for individual pages you can use marker interfaces to register special overriding viewlets."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:595
msgid "More information:"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:597
msgid ":doc:`Viewlets </develop/plone/views/viewlets>`"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:599
msgid "http://starzel.de/blog/how-to-get-a-different-look-for-some-pages-of-a-plone-site"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:602
msgid "URL quoting inside TAL templates"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:604
msgid "You need to escape TAL attribute URLs if they contain special characters like plus (+) in query parameters. Otherwise browsers will mangle links, leading to incorrect parameter passing."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:608
msgid "Zope 2 provides ``url_quote()`` function which you can access"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:616
msgid "Then you can use this function in your TAL code"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:623
msgid "If you need to also quote spaces, use ``url_quote_plus`` rather than ``url_quote``."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:626
msgid "Using macros"
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:628
msgid "Here is an example how to use `<metal:block define-macro=\"xxx\">` and `<metal:block use-macro=\"xxx\">` in your :doc:`view class </develop/plone/views/browserviews>` template files."
msgstr ""

#: ../adapt-and-extend/theming/templates_css/template_basics.rst:678
msgid "http://stackoverflow.com/q/13165748/315168"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:3
msgid "Create a Plone 5 theme product (addon)"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:8
msgid "Creating a theme product with the Diazo inline editor is an easy way to start and to test, but it is not a solid long term solution."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:10
msgid "Even if ``plone.app.theming`` allows to import and export a Diazo theme as a ZIP archive, it might be prefereable to manage your theme into an actual Plone product."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:12
msgid "One of the most obvious reason is it will allow you to override Plone elements that are not accessible from the pure Diazo features (like overloading content views templates, viewlets, configuration settings, etc.)."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:15
msgid "Create a product to handle your Diazo theme"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:17
msgid "To create a Plone 5 theme skeleton, you will use mrbob's templates for Plone."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:20
msgid "Install mr.bob and bobtemplates.plone"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:22
msgid "To install mr.bob you can do::"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:26
msgid "and to install the needed bobtemplates for Plone, do::"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:30
msgid "Create a Plone 5 theme product skeleton with mrbob::"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:34
msgid "It will ask you some question::"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:38
msgid "here choose Theme and fill out the rest of the questions as you like::"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:52
msgid "Now you have a new python package in your current folder::"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:59
#: ../adapt-and-extend/theming/theme_product.rst:83
msgid "You can run::"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:67
msgid "Then you can run::"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:71
msgid "This will create the whole develoment environment for your package::"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:87
msgid "to start a Plone instance and play with your packaged."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:89
msgid "Your package source code is in the src folder::"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:132
msgid "As you see, the packages contains already a Diazo theme::"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:141
msgid "Here you can build your Diazo theme. For details how to do that, look at :doc:`plone.app.theming</external/plone.app.theming/docs/index>` and :doc:`Diazo</external/diazo/docs/index>`."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:145
msgid "Override Plone BrowserViews with jbot"
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:147
msgid "A large part of the Plone UI are provided by BrowserView or Viewlet templates."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:149
msgid "That is the case for viewlets (all the blocks you can see when you call the url ``./@@manage-viewlets``)."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:152
msgid "to override them from the ZMI, you can go to ``./portal_view_customizations``."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:154
msgid "To overrides them from your theme product, the easiest way is to use ``z3c.jbot`` (Just a Bunch of Templates)."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:157
msgid "Since jbot is already included in the skeleton, you can just start using it, by putting in ``src/plonetheme/tango/browser/overrides/`` all the templates you want to override. But you will need to name them by prefixing the template name by its complete path to its original version."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:160
msgid "For instance, to override ``colophon.pt`` from plone.app.layout, knowing this template in a subfolder named ``viewlets``, you need to name it ``plone.app.layout.viewlets.colophon.pt``."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:162
msgid "ZMI > portal_view_customizations is an handy way to find the template path."
msgstr ""

#: ../adapt-and-extend/theming/theme_product.rst:164
msgid "You can now restart Zope and re-install your product from the Plone control panel (Site Setup > Add-ons)."
msgstr ""

